{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/google8a68389b5ba644f5.html","hash":"5c51fcc7d1593c3a15d13d05c884e3fd799b308e","modified":1616506916639},{"_id":"source/_posts/2019-08-24-JS30挑戰-Drum-Kit.md","hash":"bc5a0b913b2b00277715f242c41823a77bc2031b","modified":1616509724000},{"_id":"source/_posts/2019-08-25-js30挑戰-Css+Js.md","hash":"e15c40870a76d0a8f446d5b69f16364ce2fc6f90","modified":1616509724000},{"_id":"source/_posts/2019-08-26-Hexo網站建置筆記.md","hash":"0507bb4d99a1fe8c9cd57b2a1e7af4ba185d7708","modified":1616509724000},{"_id":"source/_posts/2019-08-30[筆記]Vue 框架與開發環境介紹.md","hash":"32799a1c5ee3179aae0e206057a34677e8493ee0","modified":1616509724000},{"_id":"source/_posts/2019-08-30-JavaScript 陣列處理方法.md","hash":"829b9e7abd4e6659af3bcc35b4d4c8fe6be0c709","modified":1616509724000},{"_id":"source/_posts/2019-09-02-Vue Instance:生命週期介紹.md","hash":"610861359d782d91f3240bc95eeab309443d20c5","modified":1616509724000},{"_id":"source/_posts/2019-09-03Flex排版整理.md","hash":"198c556ed8c991a516934c465b02ce0c3ff1f81d","modified":1616509724000},{"_id":"source/_posts/2019-09-03Vue模板語法V-bind介紹.md","hash":"97cb2f5a8389d2658b561942df79168ba90326ba","modified":1616509724000},{"_id":"source/_posts/2019-09-03[筆記]Css-transition、animation(animate)動畫效果.md","hash":"fe97a08b58b3fc58f4ec7a86313d55ff67585b51","modified":1616509724000},{"_id":"source/_posts/2019-09-03JS30挑戰-Day5-Flex+Panel.md","hash":"a193e5059bb37df5e03a19bc798217f8916c473b","modified":1616509724000},{"_id":"source/_posts/2019-09-02-Vue模板語法V-for介紹.md","hash":"62442a69a4491ab5153c10704afb273dceeb1b2f","modified":1616509724000},{"_id":"source/_posts/2019-09-04Vue出一個樂透選取器.md","hash":"2c4e7be94a1755451ef44010a5ce6c58113f007b","modified":1616509724000},{"_id":"source/_posts/2019-09-05-SASS教學-環境、寫法篇.md","hash":"f12477a0a201ab9790b7a058655049614b915f87","modified":1616509724000},{"_id":"source/_posts/2019-09-03JS30挑戰-day3.md","hash":"da188dc8c80b9eb9c7f3033646f6fc8633b1ca2c","modified":1616509724000},{"_id":"source/_posts/2019-09-04Vue模板語法V-if、V-show介紹.md","hash":"bd9949c298216df630457d9aac08eae8aedc13b9","modified":1616509724000},{"_id":"source/_posts/2019-09-11-JS30挑戰-day7Array Cardio Day2.md","hash":"bd609b34a7896721493395397734e614ca849d04","modified":1616509724000},{"_id":"source/_posts/2019-09-10-Vue-js元件.md","hash":"9e19f7862451651187837f04aa20c914eb9f7371","modified":1616509724000},{"_id":"source/_posts/2019-09-11-JS30挑戰-day4.md","hash":"ad6988a19b946406643459c9ef7edf30c9b7e26b","modified":1616509724000},{"_id":"source/_posts/2019-09-20-JSON介紹.md","hash":"91deee6f6d364e9fbce07d41a8ea6438e7f9a594","modified":1616509724000},{"_id":"source/_posts/2019-09-13-date物件介紹.md","hash":"b210a0da6a7399f1d49de0e6038e025fd63002db","modified":1616509724000},{"_id":"source/_posts/2019-09-20-vue Router介紹.md","hash":"41b7abacf7070ade89238152d8ebb3d2a64f70a9","modified":1616509724000},{"_id":"source/_posts/2019-09-21-Vue模板語法介紹.md","hash":"cfaa42d40a6e57d98c91287ee30e72fb7e573435","modified":1616509724000},{"_id":"source/_posts/2019-09-26-Vue watch介紹.md","hash":"e51ccfe29e0dcd66bcb9dd04449745b9797c57d2","modified":1616509724000},{"_id":"source/_posts/2019-09-29-filter介紹.md","hash":"efe261e1d1ac84305172d858ba8bd7b1405121e4","modified":1616509724000},{"_id":"source/_posts/2019-09-30-練習做一個貨幣轉換器.md","hash":"bed108e6d709e77caa97a080630a78243a712987","modified":1616509724000},{"_id":"source/_posts/2019-09-22-Vue指令V-model、V-on介紹.md","hash":"48b101a6c203ae12f2bdb0469aac0b65feb596c9","modified":1616509724000},{"_id":"source/_posts/2019-10-01-元件介紹、建立方式、特性.md","hash":"f18d7c08b327fe9ddb3198e8ff24201716021fef","modified":1616509724000},{"_id":"source/_posts/2019-10-03-props使用注意細項.md","hash":"e5726465c94c927cae0e86abc55ef4f6d7051bcd","modified":1616509724000},{"_id":"source/_posts/2019-09-26-Vue computed 屬性介紹.md","hash":"fe854584af307122dd24ae926e9a4283fc5d1d7d","modified":1616509724000},{"_id":"source/_posts/2019-09-28-computed VS watch VS method.md","hash":"987c26b1c2a2571794190068d12047ab0ad6fbe2","modified":1616509724000},{"_id":"source/_posts/2019-10-04-props使用注意細項.md","hash":"822c2c7116bae9cf1951d6465eba06b12f8cd919","modified":1616509724000},{"_id":"source/_posts/2019-10-02-props、emit介紹.md","hash":"4abfb8f60592d004657f893ec9a918dfebf8ef31","modified":1616509724000},{"_id":"source/_posts/2019-10-07-Vue Component(元件)-event bus.md","hash":"3930232e680dac26163429633a4657d6a47064d4","modified":1616509724000},{"_id":"source/_posts/2019-10-05-Vue Component溝通（$parent、$children）.md","hash":"48e0e7fb8fcb52cb6044d54072d5076dae169b44","modified":1616509724000},{"_id":"source/_posts/2019-10-06-Vue Component(元件)-props.sync 溝通方式.md","hash":"73c805e41706b02b7016f2fba99d5d829fc552df","modified":1616509724000},{"_id":"source/_posts/2019-10-08-Vue Component(元件)-is動態切換元件.md","hash":"a494e330bb59009d555dd53f53c71b0c61d51da2","modified":1616509724000},{"_id":"source/_posts/2019-10-10-vueCLI2與Webpack介紹.md","hash":"deec06d5cb4892e3bc7344902882a7a10fba16ee","modified":1616509724000},{"_id":"source/_posts/2019-10-09-slot元件.md","hash":"eda6f833ca726b0bc01b8364210978f11b48547c","modified":1616509724000},{"_id":"source/_posts/2019-10-27-JavaScript-解構賦值介紹.md","hash":"fc830820b01a82ecf156ae6a09a4655f1bdfcbd1","modified":1616509724000},{"_id":"source/_posts/2019-10-13-Vuex簡介.md","hash":"dd72ab56b7c4d70dbd0476f061e2f781002f9666","modified":1616509724000},{"_id":"source/_posts/2019-10-11-vueCLI3介含.md","hash":"ede3e713cd2038927fb996b885d759fca590e741","modified":1616509724000},{"_id":"source/_posts/2019-10-12-Vue-router簡介.md","hash":"bb7ca26619964002e1f2a545716727b5f36daa8c","modified":1616509724000},{"_id":"source/_posts/2020-09-20-看鐵人賽文章學UI-UX-設計原則.md","hash":"b53e4ffd2e8b0501ecbc4e2454771e73dc0d0e93","modified":1616509724000},{"_id":"source/_posts/2020-09-22-看鐵人賽學網頁-Debug篇.md","hash":"ce4001244b128e37298d16bf012a12f7911733ea","modified":1616509724000},{"_id":"source/_posts/2020-09-23-看鐵人賽學UI-UX-導覽列.md","hash":"6cbf3b610889dbf16ad399519f24265a50d777c1","modified":1616509724000},{"_id":"source/_posts/2020-09-25-看鐵人賽學UI-UX-色彩2.md","hash":"25cb4f0a8842880ec2b5fe37965c142548abfa1b","modified":1616509724000},{"_id":"source/_posts/2020-09-24-看鐵人賽學UI-UX-色彩.md","hash":"682774ba99b328c66856fd9610b46207b9c02416","modified":1616509724000},{"_id":"source/_posts/2020-09-29-看鐵人賽學Debug-Breakpoint篇.md","hash":"e8ed966b0cfcfd32a9a591b1e4dc64d1dbd4684f","modified":1616509724000},{"_id":"source/_posts/2020-09-27-看鐵人賽學UI-UX-文字排版.md","hash":"b0b14d8b85db193a7b8a9fc96f147bb975681ed9","modified":1616509724000},{"_id":"source/_posts/2020-09-28-看鐵人賽學Debug-Network篇.md","hash":"037335aacb55cd611cefe90748265acebc09a8f5","modified":1616509724000},{"_id":"source/_posts/2020-09-30-看鐵人賽學Debug-Network-Filter篇.md","hash":"96f22f5bec2a16163df902a5819bf922a3a1d4c1","modified":1616509724000},{"_id":"source/_posts/2020-10-04-看鐵人賽學AJAX-用Chrome-Dev觀察Network運作流程.md","hash":"9ff04c9c0e5af5c6a83e087d83617e79ee889e4d","modified":1616509724000},{"_id":"source/_posts/2020-10-03-看鐵人賽學AJAX-四種常用HTTP請求方法.md","hash":"949a532c109db859ce12cc9afee4dd6f7e462854","modified":1616509724000},{"_id":"source/_posts/2020-10-05-看鐵人賽學AJAX-HTTP狀態碼除錯.md","hash":"6c8b5cfa4b1b530fdc9fe4d18bf3424f58c019c8","modified":1616509724000},{"_id":"source/_posts/2020-10-07-看鐵人賽學除錯-新手常見解決方法.md","hash":"1eedcc75f09c284a3fa665d9a4e2095959fd924a","modified":1616509724000},{"_id":"source/_posts/2020-10-20-Net-實質型態與參考.md","hash":"277c0eedd2eeb6f55523332e9ea76585fed6c8d4","modified":1616509724000},{"_id":"source/_posts/2020-10-13-看鐵人賽學除錯-Promise名詞解釋.md","hash":"b9df1b61e9ed90eaa6285b670585fe433b11c076","modified":1616509724000},{"_id":"source/_posts/2020-10-26-Net-型別詳細介紹.md","hash":"46f03a98076fb5be9544506036663db722ebb239","modified":1616509724000},{"_id":"source/_posts/2020-10-27-Net-主控台介紹.md","hash":"6d787378bf01d9542ea32fa01eff581966a34aba","modified":1616509724000},{"_id":"source/_posts/2020-10-14-用Visual-Studio-Code建立C-開發環境.md","hash":"d1aede209491d954b33df30afa99b3b9791170a8","modified":1616509724000},{"_id":"source/_posts/2020-10-23-Net-基本型態介紹、型別轉換.md","hash":"5ca4280978ab8ccb6a09af58cfa67fefcfa143cd","modified":1616509724000},{"_id":"source/_posts/2020-10-19-Net-Framework簡介.md","hash":"9e09aadd6a19d90fdf2307fa5bec749890ddef47","modified":1616509724000},{"_id":"source/_posts/2020-10-28-Net-型別轉換.md","hash":"35e56fb42ad1ff72c1152b67cb2e2b0cbc5f9a99","modified":1616509724000},{"_id":"source/_posts/2020-11-09-物件導向1.md","hash":"cc2be0584d5785a5cdd8622aa3d116f265dbf974","modified":1616509724000},{"_id":"source/_posts/2020-11-02-流程判斷.md","hash":"41ef77ef11114c34e43b2c2576152e4a99665d25","modified":1616509724000},{"_id":"source/_posts/2020-11-03-六角C-筆記.md","hash":"909c9d732b3493160e882de376700b43846d35a9","modified":1616509724000},{"_id":"source/_posts/2020-11-12-物件導向3.md","hash":"b1d7e29c74830a7afdb97aa07f93175d6f73c384","modified":1616509724000},{"_id":"source/_posts/2020-11-16-Methods介紹.md","hash":"910d199ba4415b92df344b3fb8b0cdbe6d7cfe85","modified":1616509724000},{"_id":"source/_posts/2020-11-10-物件導向2.md","hash":"da6d5427a3b3b18e247256902559c1dc2d076d3f","modified":1616509724000},{"_id":"source/_posts/2020-11-13-物件導向4.md","hash":"032b29a637562d1f00d0b9de8f3960b309cc3eea","modified":1616509724000},{"_id":"source/_posts/2020-11-15-物件導向5.md","hash":"4b349acce6bf809560358c32280d5a71b8c2eb7c","modified":1616509724000},{"_id":"source/_posts/2020-11-24-NameSpace介紹.md","hash":"cf4539776a355db2fc222a8241b859f1fc2ed109","modified":1616509724000},{"_id":"source/_posts/2020-11-26-Razor簡介.md","hash":"2e379253096e3a742710a20f61a370951a1bf315","modified":1616509724000},{"_id":"source/_posts/2020-12-01-泛型別簡介.md","hash":"8117d4982a640049f7c2f653f22316028723f8ed","modified":1616509724000},{"_id":"source/_posts/2020-12-06-泛型別簡介2.md","hash":"f6c54a3adeb3add13e8fe5faf13e8f94f4e67bfc","modified":1616509724000},{"_id":"source/_posts/2020-12-07-SQL-SERVER-FOR-XML-PATH語法介紹.md","hash":"9c9b0daa2da4980e8708eeed6f69724eba60e67f","modified":1616509724000},{"_id":"source/_posts/2020-12-14-Kendo筆記.md","hash":"4a0754ce4c7349d12ec8f7c3954dafde7d9ab07d","modified":1616509724000},{"_id":"source/_posts/2021-01-13-static修飾子.md","hash":"22da663903074b6ba6a240a4eb2c27f5aec64c14","modified":1616509724000},{"_id":"source/_posts/2021-01-15-多維陣列.md","hash":"85aeef8c82a5a562a564aa8fa12cfec03d624e69","modified":1616509724000},{"_id":"source/_posts/2021-01-11-物件導向6-建構子.md","hash":"c7ae7920253438b6407981f872a12a7225243cfd","modified":1616509724000},{"_id":"source/_posts/2021-01-21-物件回收機制.md","hash":"cff2f215d4b54bdf8fb32cd9d51547d3545183ef","modified":1616509724000},{"_id":"source/_posts/2021-01-27-JavaScript事件機制複習.md","hash":"5be7d6f55c7cd09e21fcfcad47b7086f2aeb5dcb","modified":1616509724000},{"_id":"source/_posts/2021-01-26-out、void、ref說明.md","hash":"1688e3720a272ffc3216eb4a7a28e67aec273ce6","modified":1616509724000},{"_id":"source/_posts/2021-02-02-Private常見用途.md","hash":"af4f64f707a6f63399e1853ca0a054819a01da59","modified":1616509724000},{"_id":"source/_posts/2021-02-09-Get-Set存取.md","hash":"0dee65ea7bd252a6dd464dbbd1e019bb7c57dabb","modified":1616509724000},{"_id":"source/_posts/2021-02-01-商業思維-技術工作者的商業思維.md","hash":"f47f81405cd73f0415661c19e98977bc568dd6d8","modified":1616509724000},{"_id":"source/_posts/2021-02-17-封裝性介紹.md","hash":"76c2f9c770841cb2d96ce4bbdcefef7caf018426","modified":1616509724000},{"_id":"source/_posts/2021-02-22-繼承性-續.md","hash":"c08f6ab0f6ad4c2249ef38c1153f4978a5d0ad7b","modified":1616509724000},{"_id":"source/_posts/2021-03-08-亂數.md","hash":"0094fc2fd52b02bd20ab3a7fcd36758a1286fbb7","modified":1616509724000},{"_id":"source/_posts/2021-06-13-Clean-Code原則.md","hash":"cdb273b114fba4ed6b34f253c3f0e2cf581b3dea","modified":1623580744297},{"_id":"source/_posts/2021-02-19-繼承性.md","hash":"7cca8c96f54473037aa567a04e8bef29208aa375","modified":1616509724000},{"_id":"source/_posts/Hexo-第三方套件安裝教學.md","hash":"4436d477e811a93e8e001b8b91933c9c38377483","modified":1616509724564},{"_id":"source/_posts/Hexo版本更新教學.md","hash":"b9f830f148a675087663d81d5b80e415c2cd4d9c","modified":1616509724566},{"_id":"source/_posts/2021-04-19-用Reveal-js來做簡報.md","hash":"e7788609638640e937c1f4f4cd522eec162bf394","modified":1618846097616},{"_id":"source/_posts/2021-06-09-利用axois來下載檔案.md","hash":"c9543646e13bc593b765c7029a68d80d6ddecbad","modified":1623250862511},{"_id":"source/_posts/六角-開發流程介紹.md","hash":"bb16dfc58e54ce63eb89c86e61343c7d6a07243e","modified":1618843575029},{"_id":"source/categories/index.md","hash":"e22b8186ae64fbf4a79a7dd9941a0f690f062101","modified":1566823458099},{"_id":"source/tags/index.md","hash":"a1a6c78d9a003ac40e028b6d7d4984240b96201a","modified":1566816418031},{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1616506849895},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1616332880027},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1616332880030},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1616332880027},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1616332880027},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1616332880030},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1616332880030},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1616332880030},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1616332880031},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1616332880056},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1616332880027},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1616332880036},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1616332880031},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1616332880027},{"_id":"themes/next/_config.yml","hash":"9702c514f66fec6c57920d36bd549cbf15793d7c","modified":1616593873000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1616332880028},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1616332880028},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1616332880029},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1616332880029},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1616332880029},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1616332880029},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1616332880029},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1616332880030},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1616332880030},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1616332880032},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1616332880032},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1616332880032},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1616332880032},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1616332880032},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1616332880033},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1616332880033},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1616332880033},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1616332880033},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1616332880036},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1616332880037},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1616332880037},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1616332880036},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1616332880037},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1616332880037},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1616332880037},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1616332880037},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1616332880037},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1616332880037},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1616332880038},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1616332880038},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1616332880038},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1616332880038},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1616332880039},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1616332880038},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1616332880038},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1616332880039},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1616332880040},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1616332880040},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1616332880040},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1616332880039},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1616332880040},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1616332880055},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1616332880055},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1616332880056},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1616332880056},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1616332880056},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1616332880061},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1616332880056},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1616332880028},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1616332880028},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1616332880028},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1616332880028},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1616332880034},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1616332880033},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1616332880034},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1616332880034},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1616332880034},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1616332880035},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1616332880034},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1616332880035},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1616332880035},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1616332880035},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1616332880036},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1616332880041},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1616332880036},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1616332880036},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1616332880041},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1616332880043},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1616332880041},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1616332880042},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1616332880041},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1616332880044},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1616332880046},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1616332880047},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1616332880047},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1616332880049},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1616332880047},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1616332880053},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1616332880050},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1616332880059},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1616332880060},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1616332880059},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1616332880053},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1616332880060},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1616332880060},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1616332880048},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1616332880061},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1616332880061},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1616332880052},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1616332880060},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1616332880061},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1616332880061},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1616332880062},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1616332880062},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1616332880057},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1616332880062},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1616332880062},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1616332880062},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1616332880063},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1616332880063},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1616332880063},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1616332880064},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1616332880080},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1616332880086},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1616332880063},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1616332880087},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1616332880087},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1616332880087},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1616332880088},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1616332880088},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1616332880089},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1616332880088},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1616332880088},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1616332880089},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1616332880089},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1616332880089},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1616332880089},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1616332880090},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1616332880090},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1616332880091},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1616332880091},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1616332880090},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1616332880090},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1616332880042},{"_id":"themes/next/source/js/utils.js","hash":"b66891a0c7e3dcd5b9c56d5e4f6cd8cf39de3b23","modified":1616594218332},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1616332880092},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1616332880043},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1616332880043},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1616332880043},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1616332880042},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1616332880044},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1616332880044},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1616332880042},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1616332880046},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1616332880045},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1616332880046},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1616332880046},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1616332880045},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1616332880044},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1616332880045},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1616332880045},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1616332880045},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1616332880047},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1616332880048},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1616332880048},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1616332880048},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1616332880043},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1616332880048},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1616332880049},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1616332880049},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1616332880049},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1616332880050},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1616332880050},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1616332880050},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1616332880051},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1616332880051},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1616332880051},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1616332880051},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1616332880051},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1616332880051},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1616332880052},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1616332880053},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1616332880052},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1616332880053},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1616332880052},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1616332880053},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1616332880054},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1616332880054},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1616332880054},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1616332880054},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1616332880054},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1616332880055},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1616332880055},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1616332880058},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1616332880058},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1616332880058},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1616332880058},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1616332880059},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1616332880059},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1616332880059},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1616332880059},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1616332880057},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1616332880057},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1616332880057},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1616332880086},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c036c27a1020d6ad70fc8c230675d26719c27cd1","modified":1616593751442},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1616332880085},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1616332880091},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1616332880085},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1616332880085},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1616332880091},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1616332880095},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1616332880095},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1616332880064},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1616332880064},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1616332880064},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1616332880069},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1616332880073},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1616332880073},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1616332880076},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1616332880076},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1616332880076},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1616332880078},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1616332880078},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1616332880078},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1616332880078},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1616332880080},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1616332880082},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1616332880082},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1616332880083},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1616332880083},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1616332880081},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1616332880083},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1616332880083},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1616332880081},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1616332880081},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1616332880082},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1616332880082},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1616332880082},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1616332880093},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1616332880094},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1616332880084},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1616332880084},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1616332880084},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1616332880084},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1616332880084},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1616332880085},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1616332880065},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1616332880065},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1616332880065},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1616332880065},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1616332880066},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1616332880067},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1616332880067},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1616332880067},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1616332880068},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1616332880068},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1616332880067},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1616332880067},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1616332880068},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1616332880068},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1616332880069},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1616332880069},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1616332880069},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1616332880069},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1616332880070},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1616332880071},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1616332880070},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1616332880070},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1616332880071},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1616332880070},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1616332880071},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1616332880072},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1616332880072},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1616332880072},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1616332880072},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1616332880072},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1616332880073},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1616332880073},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1616332880074},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1616332880074},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1616332880074},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1616332880074},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1616332880075},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1616332880075},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1616332880075},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1616332880075},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1616332880075},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1616332880077},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1616332880077},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1616332880077},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1616332880077},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1616332880079},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1616332880079},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1616332880079},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1616332880079},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1616332880080},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1616332880080},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1616332880079},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1616332880094},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1616332880094},{"_id":"public/google8a68389b5ba644f5.html","hash":"0cc0e34764b2464d6034e425125349dd2fa7229f","modified":1623580781303},{"_id":"public/sitemap.xml","hash":"b408ecd914c685b24c0bedac4646206f99bf1aac","modified":1623580781303},{"_id":"public/search.json","hash":"2c2daacda4f0410f09afe4f10939c2fd9ba85e8a","modified":1623580781303},{"_id":"public/archives/2019/page/5/index.html","hash":"0240ccc444ab7f4c48b550aa49868ce51efc19cd","modified":1623580781303},{"_id":"public/archives/2019/08/index.html","hash":"045107e94b7e5c63f5308e56025216b79bd8632f","modified":1623580781303},{"_id":"public/archives/2019/09/page/3/index.html","hash":"11ea73514922b1f4b46eb7f1f7f73edc31c14958","modified":1623580781303},{"_id":"public/categories/index.html","hash":"4cd6182993c7143b7518506c1c328063ef20c2b9","modified":1623580781303},{"_id":"public/tags/index.html","hash":"0f72b7535d93931e44e529404abf927aae381dbd","modified":1623580781303},{"_id":"public/javascript/20210613/2104169789/index.html","hash":"eca8cb7299c4d1aca7d0c3acc0178c1730d61398","modified":1623580781303},{"_id":"public/javascript/20210609/2843536158/index.html","hash":"8f21b1649aaacf6788a11a4de2637402a59c8e00","modified":1623580781303},{"_id":"public/javascript/20210419/2852757128/index.html","hash":"993bc6c4c65c6257e21cd3d2e2566870b9933045","modified":1623580781303},{"_id":"public/hexo/20210322/1934885385/index.html","hash":"7137731e825e779cbf6a0eccaa3d89c801a7fce6","modified":1623580781303},{"_id":"public/hexo/20210322/1226560276/index.html","hash":"51f6fc0fadaf0f21164d74a89e9c272cbd4919e5","modified":1623580781303},{"_id":"public/developProccess/hexschool/20210315/4068022312/index.html","hash":"f5faffab2e15d2d679e34193df243ec97d4289cd","modified":1623580781303},{"_id":"public/csharp/20210308/1324584010/index.html","hash":"826253d0759f5f4b647fcc49a93f95f36a79ac18","modified":1623580781303},{"_id":"public/csharp/20210222/449169581/index.html","hash":"ed232724c0e1e6d50c73fa71f0e75e1355bed5dd","modified":1623580781303},{"_id":"public/csharp/20210219/1596813939/index.html","hash":"dedd4826c04ee914caa9be006275691c34e809b8","modified":1623580781303},{"_id":"public/csharp/20210217/100034721/index.html","hash":"99009df2da838e385fc910b288a15a71edc254d6","modified":1623580781303},{"_id":"public/csharp/20210209/2408193491/index.html","hash":"135019cf487f91a63421d80b50a99dc29337dbb9","modified":1623580781303},{"_id":"public/csharp/20210203/2232905942/index.html","hash":"7db3178e642379a6752058da9d704df834e80436","modified":1623580781303},{"_id":"public/learnexp/business/20210201/2245458834/index.html","hash":"e875347afc1ecbbcec35e473199cee729fb04040","modified":1623580781303},{"_id":"public/javascript/20210127/1363835460/index.html","hash":"13f141bd40c976c56e025c0e2d37ddfbd60af64a","modified":1623580781303},{"_id":"public/csharp/20210126/3967716336/index.html","hash":"6205d5e8a3822b319f3812861783088e870ad3da","modified":1623580781303},{"_id":"public/csharp/20210121/728982376/index.html","hash":"02738b4485961f634a59a7e46f96818b9fdfbb9f","modified":1623580781303},{"_id":"public/csharp/20210115/3646875843/index.html","hash":"88f46ffabe303ef32d1b756e8db728b45b0cf5bd","modified":1623580781303},{"_id":"public/csharp/20210113/3064977456/index.html","hash":"3c3888f5fb82e1f22134f93ad79fb8343d58b009","modified":1623580781303},{"_id":"public/csharp/20210111/1525365283/index.html","hash":"6303eb586c60fcd2f7b29f399a4678ebd9815c92","modified":1623580781303},{"_id":"public/kendo/20201214/270809243/index.html","hash":"e86d888bd209394c78502c8c5e0fffecee6d8ecf","modified":1623580781303},{"_id":"public/sql/20201207/3967556948/index.html","hash":"ecf36e3587c563b0fc6b3e06b9215e684baa7e4e","modified":1623580781303},{"_id":"public/csharp/20201206/610857498/index.html","hash":"4fca273c82435f9106f162ec3e741599e2166dcb","modified":1623580781303},{"_id":"public/csharp/20201201/3321559859/index.html","hash":"971d1323022dd7b28a9b53daecc15add4b9e21b8","modified":1623580781303},{"_id":"public/csharp/20201126/437291380/index.html","hash":"1687b729f2867110e4543bf34a258d063cf718af","modified":1623580781303},{"_id":"public/csharp/20201124/3814092706/index.html","hash":"476138dfdc2c9f24cadf9a190cabe869604be5cc","modified":1623580781303},{"_id":"public/csharp/20201116/2350352441/index.html","hash":"ced6219809e22dedbabafe571b62ac621fcf6abd","modified":1623580781303},{"_id":"public/csharp/20201115/954422930/index.html","hash":"1f8fffbca7249c0e5000218d43e439dd7c2e93d9","modified":1623580781303},{"_id":"public/csharp/20201113/1830728438/index.html","hash":"b04e8c3436e6caa6ff049b7b9b7b9b930091f8a1","modified":1623580781303},{"_id":"public/csharp/20201112/1250032829/index.html","hash":"ddd559b6b6ca1cfd680ac5cfe1c531b7d9c837a0","modified":1623580781303},{"_id":"public/csharp/20201110/2499837370/index.html","hash":"0bb72a9d670d62cb697e45cfb1a201529faf3d4d","modified":1623580781303},{"_id":"public/csharp/20201109/3558058750/index.html","hash":"bbae54298d5c41c6949498197c492763b3fa77bc","modified":1623580781303},{"_id":"public/csharp/20201103/1767391550/index.html","hash":"27a477ffc86ef0a2d298d76391c322c5bd511c4f","modified":1623580781303},{"_id":"public/csharp/20201102/3612700585/index.html","hash":"8d9c61d7a77bb276d190a207bdbe1fd3c75ff5c2","modified":1623580781303},{"_id":"public/csharp/20201027/1880635678/index.html","hash":"66d24a36d68bf51dbc5d15c38a2f43b0ffd1c329","modified":1623580781303},{"_id":"public/csharp/20201027/3840182822/index.html","hash":"6cb8d4c286922e607d886605c5f1fbe3a69b7956","modified":1623580781303},{"_id":"public/csharp/20201026/2400752674/index.html","hash":"c391a48c8ccba5e77bbcd037a341d426532e9352","modified":1623580781303},{"_id":"public/csharp/20201023/4037847477/index.html","hash":"0f56fc123edbd36eae969ce6870f99626a7e39aa","modified":1623580781303},{"_id":"public/csharp/20201020/4080637490/index.html","hash":"efa0f7fe7eebbe91d756db5366485d5f8353a04c","modified":1623580781303},{"_id":"public/csharp/20201019/3010872741/index.html","hash":"f2fa97b49f51e494984fd43a0f0e530460005e8c","modified":1623580781303},{"_id":"public/csharp/20201014/2566354860/index.html","hash":"797c8bad9c669b84954a76ac941f48a862c3114b","modified":1623580781303},{"_id":"public/javascript/20201013/581564741/index.html","hash":"2d6d8565e5b7f1e56a1d96c492047fb03cd60de6","modified":1623580781303},{"_id":"public/javascript/20201007/2795520726/index.html","hash":"0e5208fdf52479171a25c179f4abb1abc44821a6","modified":1623580781303},{"_id":"public/javascript/20201005/2499877110/index.html","hash":"74bf40c70ad838ef1f860b05b4df50082a7c0334","modified":1623580781303},{"_id":"public/javascript/20201004/1235948296/index.html","hash":"0987677aceed8467940283478bbd9215d9f55f86","modified":1623580781303},{"_id":"public/javascript/20201003/3740234544/index.html","hash":"205b18fb4e18de953731881a4745e133bb4f9509","modified":1623580781303},{"_id":"public/web/20200930/2885820487/index.html","hash":"5049a6c447e8c0f2b651c50794cddf2b56b626af","modified":1623580781303},{"_id":"public/web/20200929/2715429133/index.html","hash":"c19c80c3e7214da1a8b346cb3aa366e8cbde38ed","modified":1623580781303},{"_id":"public/web/20200928/3096729793/index.html","hash":"87b86657f66d57cad80a03217493c36d845226fd","modified":1623580781303},{"_id":"public/design/20200927/2048726292/index.html","hash":"1b3068261b555f0bc7301b0946e854305d8ff7f7","modified":1623580781303},{"_id":"public/design/20200925/133919869/index.html","hash":"8c8aee52d911d74e026a9dae46f291c453f88b44","modified":1623580781303},{"_id":"public/design/20200924/4208839988/index.html","hash":"ad0a6adcc628edc4d2e8d4c1a10acc15f835e37d","modified":1623580781303},{"_id":"public/design/20200923/2688782870/index.html","hash":"c63624427b3a77360d79698de37f03824f08c954","modified":1623580781303},{"_id":"public/javascript/20200922/1670271006/index.html","hash":"f55783bf4f9fc8303201ba9fe001aa9d9e94bd10","modified":1623580781303},{"_id":"public/design/20200921/4011424401/index.html","hash":"f3c6b27e94f24ee5a5b747a337f0ccbf5fc9472c","modified":1623580781303},{"_id":"public/javascript/20191027/87138112/index.html","hash":"5b98d8fb8e52089981942056b57a163542a5fefa","modified":1623580781303},{"_id":"public/vue/20191013/3605758617/index.html","hash":"9dd7ecf62d49e47a578d42b0fcc1e93c26b58968","modified":1623580781303},{"_id":"public/vue/20191013/2547589273/index.html","hash":"7fbcdbd22c9aaecf376337c9d61910915d9729f4","modified":1623580781303},{"_id":"public/vue/20191013/3198324886/index.html","hash":"8fd162ba847211bd9acb5c04f07e1b1ca275bf60","modified":1623580781303},{"_id":"public/vue/20191013/1215381457/index.html","hash":"4056f621e536b1c6b951365f619be18cdbee5566","modified":1623580781303},{"_id":"public/vue/20191009/36751447/index.html","hash":"902c4b6b1081c7c426a4bec167ac9c805053576d","modified":1623580781303},{"_id":"public/vue/20191008/3284328793/index.html","hash":"4466885aec20ad5be289fdf81441efae61c3d0ae","modified":1623580781303},{"_id":"public/vue/20191007/2667842738/index.html","hash":"6a0f40a6fd0acba5d3dd5dcd60d8869d618bd37d","modified":1623580781303},{"_id":"public/vue/20191006/1846504743/index.html","hash":"642b4df54a3ac9c7d0889989f5881663a4961836","modified":1623580781303},{"_id":"public/vue/20191005/3021072490/index.html","hash":"31c9055165109d7438b42486b36c6f2a55d66c80","modified":1623580781303},{"_id":"public/vue/20191004/2774174283/index.html","hash":"67100721102e7b1da9e0a7827d47aaf1dd3b5926","modified":1623580781303},{"_id":"public/vue/20191003/89165536/index.html","hash":"906a656dd8d2e063eaaa254f2306b164a5e586c4","modified":1623580781303},{"_id":"public/vue/20191002/1526401699/index.html","hash":"c32d2893eb37c8ac0e1fb28c5e2e3fbb88b7864f","modified":1623580781303},{"_id":"public/vue/20191001/485547154/index.html","hash":"cc23c6c65d797e57ff123571402f685b8f5b72e0","modified":1623580781303},{"_id":"public/vue/20191001/3718471902/index.html","hash":"d1cbffc74f2c86f3b5c7caef3870308a5ea5fb3d","modified":1623580781303},{"_id":"public/vue/20190929/3725962230/index.html","hash":"af0ed5b5ec337c36dd123a69c60354bba7f16aa1","modified":1623580781303},{"_id":"public/vue/20190928/473648596/index.html","hash":"102ee0cabf08ede2fe5562a1359f31ac37655e14","modified":1623580781303},{"_id":"public/vue/20190927/4076647581/index.html","hash":"6120118b06700b5fa2415f80caad20223c930871","modified":1623580781303},{"_id":"public/vue/20190926/50615246/index.html","hash":"6de5c6d7bb786c486c744782c3e09f4fe7ffbcbb","modified":1623580781303},{"_id":"public/vue/20190922/378863984/index.html","hash":"b31e85e17d3df464a9147ae8f1e2a2a2540c80e2","modified":1623580781303},{"_id":"public/vue/20190921/1684315816/index.html","hash":"49aa6ef9c255c1faf395189e6d760bdc136b1995","modified":1623580781303},{"_id":"public/javascript/20190920/2338827219/index.html","hash":"961fc6a7da7d265a1695b6bedaf5d2b6e6e50a9d","modified":1623580781303},{"_id":"public/vue/20190920/4197762796/index.html","hash":"3a93a008966e0176d693a94a1fb8c40b730c9104","modified":1623580781303},{"_id":"public/javascript/20190914/324123510/index.html","hash":"231f8308f125b2db1c63ebdcbb3022eca5cfe1f3","modified":1623580781303},{"_id":"public/javascript/20190913/2391042330/index.html","hash":"428ee833b6a816d5cd4a9fd23799b58fe120ab5c","modified":1623580781303},{"_id":"public/javascript/20190911/688811109/index.html","hash":"3c2802c3a7ecbafde96e7b7b22990a54b1046cb7","modified":1623580781303},{"_id":"public/vue/20190910/1942507300/index.html","hash":"d6272b3748a2f279f638a895e1c9d587106c5ffe","modified":1623580781303},{"_id":"public/CSS/20190905/752255252/index.html","hash":"cdb58c5d6cecdf9eedef7cf85f096ada70ef20af","modified":1623580781303},{"_id":"public/vue/20190905/409592500/index.html","hash":"fefb8ec3f1397638620d4c9bd5878f080eaf489f","modified":1623580781303},{"_id":"public/vue/20190905/2719563524/index.html","hash":"921b330d4f8ce98af444b95d7538c62adaed4bb1","modified":1623580781303},{"_id":"public/javascript/20190903/14473383/index.html","hash":"0a2c2a634a4c10dbf9dda9581222af271d7fd2b4","modified":1623580781303},{"_id":"public/vue/20190903/233607298/index.html","hash":"e1890034ce4446569964130478bb2bd9ffea537f","modified":1623580781303},{"_id":"public/css/20190903/4076619072/index.html","hash":"cc13331870c56060ee24c30255a4d19f73faf3eb","modified":1623580781303},{"_id":"public/javascript/20190903/4027575200/index.html","hash":"7a86012fc5076f22c804b23cc0c87a1c977c9da5","modified":1623580781303},{"_id":"public/css/20190903/41001978/index.html","hash":"7df388e13f1048d7ee7bb4c272a8627325865101","modified":1623580781303},{"_id":"public/vue/20190902/3809821719/index.html","hash":"1a2a487a01972a7735ad009c3da4f6d0f83a025d","modified":1623580781303},{"_id":"public/vue/20190902/1331664425/index.html","hash":"5d6a7595985e69fd0316d440fc01f75f61ae4571","modified":1623580781303},{"_id":"public/javascript/20190830/1975097829/index.html","hash":"c3a7c95c12f6c80b81ad7ed10dd398d62e726183","modified":1623580781303},{"_id":"public/vue/20190830/67885936/index.html","hash":"2b29378414af03edb7d0b2395d52dc3c0b80d7b6","modified":1623580781303},{"_id":"public/hexo/20190826/2844598168/index.html","hash":"3903d2eb8a871a9487718cf353512fbc84c67f27","modified":1623580781303},{"_id":"public/javascript/20190826/473544001/index.html","hash":"c95a3b3d714c9c7d8ebe870b7464c4f01379c35a","modified":1623580781303},{"_id":"public/javascript/20190824/943160341/index.html","hash":"0ad38902329a5dd7fb0e490cd7ffccf1322a29cf","modified":1623580781303},{"_id":"public/archives/index.html","hash":"459a628d6393af6335623be2d2b556c92152ab68","modified":1623580781303},{"_id":"public/archives/page/2/index.html","hash":"cc24ec5e147856465d35cc7b5a3e74331f114c52","modified":1623580781303},{"_id":"public/archives/page/3/index.html","hash":"8b062dccfcaa6cb268ff1d6dd341aa8f6821da96","modified":1623580781303},{"_id":"public/archives/page/4/index.html","hash":"deb0ea1df654cdd270ea90b20f6fa0aaabe5dd67","modified":1623580781303},{"_id":"public/archives/page/5/index.html","hash":"8b936304de53204de74b437b46eec65b7090c97e","modified":1623580781303},{"_id":"public/archives/page/6/index.html","hash":"ca5af802af139ed214e735bc7cbf1a3657973dc5","modified":1623580781303},{"_id":"public/archives/page/7/index.html","hash":"f4ebf5b31148b00b6d561c840fa701d63997d32a","modified":1623580781303},{"_id":"public/archives/page/8/index.html","hash":"dfbd79fe896c2d6e810abbcf191650628e964688","modified":1623580781303},{"_id":"public/archives/page/9/index.html","hash":"3cc5c571182189e6a6755b6017ae1ebd698b0886","modified":1623580781303},{"_id":"public/archives/page/10/index.html","hash":"55d828a4a24a2b32ffb116ab60ca1ff0b95390a5","modified":1623580781303},{"_id":"public/archives/2019/index.html","hash":"7eda6da6f1ce166f98e5975a3ed6cf15a627acd6","modified":1623580781303},{"_id":"public/archives/2019/page/2/index.html","hash":"20b2b6b6b6746eefd415a450fc873fdd0f3876fa","modified":1623580781303},{"_id":"public/archives/2019/page/3/index.html","hash":"5bfe25f8e47926598de5f70143c87f0e1b2b5df0","modified":1623580781303},{"_id":"public/archives/2019/page/4/index.html","hash":"e5a0080725e9c78817cdd482e41847d69738b4cf","modified":1623580781303},{"_id":"public/archives/2019/09/index.html","hash":"97b0d149e692abb48c17383752f88911dbf87d5d","modified":1623580781303},{"_id":"public/archives/2019/09/page/2/index.html","hash":"c06c23185584e4375761785ca1ca0e28b5e2395b","modified":1623580781303},{"_id":"public/archives/2019/10/index.html","hash":"a1b0b67158e3157b87a5f7d4988408b932dda455","modified":1623580781303},{"_id":"public/archives/2019/10/page/2/index.html","hash":"5bb58ace582b129ec7ded74f6f311ea75abec18d","modified":1623580781303},{"_id":"public/archives/2020/10/page/2/index.html","hash":"9641d1625edc70b5201aa3bdb76aea0bc73797f3","modified":1623580781303},{"_id":"public/archives/2020/12/index.html","hash":"68f68c1235120d08205637fee10b1d36ef285530","modified":1623580781303},{"_id":"public/archives/2021/03/index.html","hash":"1cb852f97359fd47a74febbad8b230e8afcd1019","modified":1623580781303},{"_id":"public/archives/2021/04/index.html","hash":"8e232c2a72b1c3ae29ef77b94591b80cd6708d1e","modified":1623580781303},{"_id":"public/archives/2021/06/index.html","hash":"3e9f4dd3a6cf18e95d553186ad83a16a3e35bf48","modified":1623580781303},{"_id":"public/categories/javascript/index.html","hash":"ccfe23002fe8a3d9f4b42078662e4c295e17e5f0","modified":1623580781303},{"_id":"public/categories/hexo/index.html","hash":"0f534553b0c3cd8a253f56b0cff1f9421973b983","modified":1623580781303},{"_id":"public/categories/css/index.html","hash":"13e2bc8cc9305dda7ebbab7a32c4dad4f8bae7d1","modified":1623580781303},{"_id":"public/categories/CSS/index.html","hash":"30c6571e927dbd3b972617db925f675c71779eec","modified":1623580781303},{"_id":"public/categories/design/index.html","hash":"42d3707f8b68b157387180149c126acd3776c715","modified":1623580781303},{"_id":"public/categories/web/index.html","hash":"1f0b914ad2defcbb115c5b394b1b6f84a504a37f","modified":1623580781303},{"_id":"public/categories/sql/index.html","hash":"975b57779735c7b066450ffed79fab9321d71c87","modified":1623580781303},{"_id":"public/categories/learnexp/business/index.html","hash":"350028cdc2e1db8e2de8a9c46220446f3bf88d90","modified":1623580781303},{"_id":"public/categories/learnexp/index.html","hash":"5db21ed708b6dfb2b4b8a3110e4b416566bfb41a","modified":1623580781303},{"_id":"public/categories/developProccess/index.html","hash":"53fd3b976a7089354c5cdac4f8497a35f49b95c3","modified":1623580781303},{"_id":"public/categories/kendo/index.html","hash":"155fd4bbae10a57a5e68f8c19bb137cd98b24061","modified":1623580781303},{"_id":"public/categories/developProccess/hexschool/index.html","hash":"0427f2206cd6a8b32a31f2ff970d06ae7f79b2ff","modified":1623580781303},{"_id":"public/tags/Hexo/index.html","hash":"2a8ac6d8ccb9051a01627a13389718935f12fc61","modified":1623580781303},{"_id":"public/tags/array/index.html","hash":"bf0a3c7488dceb4db61aacc1c38f2bb5b3d62e56","modified":1623580781303},{"_id":"public/tags/ironman/page/3/index.html","hash":"2d7404ef91f449ba05d4d8676f6944b972e8aff0","modified":1623580781303},{"_id":"public/tags/Flex/index.html","hash":"31f07cf16cfe107008e60e7d5d5cb8d5ecbd7bf5","modified":1623580781303},{"_id":"public/tags/Css/index.html","hash":"5466b4f40d6e8e52f2becdaad592363ed88d2761","modified":1623580781303},{"_id":"public/tags/flex/index.html","hash":"2494cd3066d14448167d8558535607b79039f731","modified":1623580781303},{"_id":"public/tags/css/index.html","hash":"557425440651a5c041efe4a9406803d28da24b53","modified":1623580781303},{"_id":"public/tags/transition/index.html","hash":"c5a726bdf8cc06c6e9634d007cf2c6c60620d168","modified":1623580781303},{"_id":"public/tags/SASS/index.html","hash":"cd8e72bda682e45c57b0484c005224ac8ae789f8","modified":1623580781303},{"_id":"public/tags/SCSS/index.html","hash":"9b7acb01ed9d94fd49dc2f8762fe3b8f5d4c1cb0","modified":1623580781303},{"_id":"public/tags/JSON/index.html","hash":"07bfb7622a3394e4146163aecb55fb4c372f0ffa","modified":1623580781303},{"_id":"public/tags/vueCLI/index.html","hash":"816410ebfa2e34f10692c08504f26d83ec2af01f","modified":1623580781303},{"_id":"public/tags/vuex/index.html","hash":"c675778c21b55b0cd094bbcc46ccd027b9fb2c50","modified":1623580781303},{"_id":"public/tags/es6/index.html","hash":"d846bb7a08f05c085f00afd2057273a6ba0b28f4","modified":1623580781303},{"_id":"public/tags/javascript/index.html","hash":"29b5e227e2f08d05ed32c3ca7dbb3665fe1ba2c0","modified":1623580781303},{"_id":"public/tags/UI/index.html","hash":"8233f0cf23b629974b15d3758feba1b05cfd031c","modified":1623580781303},{"_id":"public/tags/UX/index.html","hash":"8d4b2026c347b490ec1bd7e7869f306edec76ee3","modified":1623580781303},{"_id":"public/tags/Chrome/index.html","hash":"ecf6e17d513e6d8839fdca8e658759b37d77f8bf","modified":1623580781303},{"_id":"public/tags/chrome/index.html","hash":"0f7c41bbfe27fe9f403e1d1dbc7449409e872b1a","modified":1623580781303},{"_id":"public/tags/debug/index.html","hash":"ae7cca8039d268c0b7f38736ccfe28177d9860c8","modified":1623580781303},{"_id":"public/tags/AJAX/index.html","hash":"38b98f6ebed8f48ceea4f093ccf6078082e526f3","modified":1623580781303},{"_id":"public/tags/Asp-net/page/4/index.html","hash":"a5289b4bdcaa923f7e4b9d8cf9473adaf4267f8d","modified":1623580781303},{"_id":"public/tags/Kendo/index.html","hash":"0aa8dba172c6def3f998f905df708664e0ecc457","modified":1623580781303},{"_id":"public/tags/SQL/index.html","hash":"2a3543f55e5838eb1a78fa92a36449d69e577836","modified":1623580781303},{"_id":"public/tags/商業思維/index.html","hash":"f125784c15be7ec482b36c5c2a82c396fac80360","modified":1623580781303},{"_id":"public/tags/六角學院/index.html","hash":"282bc9e2fbb5b0bbe7c6ec0c2303bae1d2216b8c","modified":1623580781303},{"_id":"public/tags/Kit/index.html","hash":"710ae7bb4f4c38b6a59622a04e969e2a027134cf","modified":1623580781303},{"_id":"public/archives/2020/index.html","hash":"db517ccc17b51e72ac632ae880ec3e73c472a74e","modified":1623580781303},{"_id":"public/archives/2020/page/2/index.html","hash":"25a8a1aeeddecdd4df34082526ed36c3da59378a","modified":1623580781303},{"_id":"public/archives/2020/page/3/index.html","hash":"60f8b579ffa23965bc5d209f08c1b9dd80c9ce6d","modified":1623580781303},{"_id":"public/archives/2020/page/4/index.html","hash":"c5079ccb2688d663c049800e3beeee4b99e6b3da","modified":1623580781303},{"_id":"public/archives/2020/09/index.html","hash":"6a3500da27db32a3de1820be2f8e1ea189095e07","modified":1623580781303},{"_id":"public/archives/2020/10/index.html","hash":"4a9e113ab618df7d68e4bd505df6e1cfc41223c9","modified":1623580781303},{"_id":"public/archives/2020/11/index.html","hash":"72e2d0d87bd55c53fcb540024e5519c1285c4c5b","modified":1623580781303},{"_id":"public/archives/2021/index.html","hash":"0d573a15144c62487ca323756c325d870d303760","modified":1623580781303},{"_id":"public/archives/2021/page/2/index.html","hash":"034b5e8751a03230665361b0d8f303ed30839a7b","modified":1623580781303},{"_id":"public/archives/2021/01/index.html","hash":"9ba6f874eac19d9166523de5dda72358d032ef93","modified":1623580781303},{"_id":"public/archives/2021/02/index.html","hash":"7520907485658e8605d0600b01c901534ff04f84","modified":1623580781303},{"_id":"public/categories/javascript/page/2/index.html","hash":"aea18bcd32e0a89064038574cc982a700fc8237b","modified":1623580781303},{"_id":"public/categories/vue/index.html","hash":"f150912c7ae0771e239583854a591a0e0f7fb940","modified":1623580781303},{"_id":"public/categories/vue/page/2/index.html","hash":"a89580baf47d33bcf7a2dbc8fe6b6d89e24cd3ff","modified":1623580781303},{"_id":"public/categories/vue/page/3/index.html","hash":"5ea7b25ec02a876b118e56cfabcc73dcad25ddd8","modified":1623580781303},{"_id":"public/categories/csharp/index.html","hash":"4f5397e686ce88ec6b4bd3985392d841d1374fb7","modified":1623580781303},{"_id":"public/categories/csharp/page/2/index.html","hash":"58e4de73e63c136784c2f8f44cb0805e31dcd279","modified":1623580781303},{"_id":"public/categories/csharp/page/3/index.html","hash":"14af96bdb0dc2b34d0abedf9187ca8708992f4d6","modified":1623580781303},{"_id":"public/index.html","hash":"7b4c76db6ca77040579f1e206cc60c3d71390f30","modified":1623580781303},{"_id":"public/page/2/index.html","hash":"73b50415ef08fe0f64cd65e7873c7b1da20196d4","modified":1623580781303},{"_id":"public/page/3/index.html","hash":"c81909237e30b5b5a67eaaa7dd65698fbce6fb83","modified":1623580781303},{"_id":"public/page/5/index.html","hash":"c82a703df65421af69bd1edf4cea56abaae80819","modified":1623580781303},{"_id":"public/page/4/index.html","hash":"1318b5aa01bb64883fd08577907bc86d40c0f497","modified":1623580781303},{"_id":"public/page/6/index.html","hash":"448f26c831d2bc5180f78a87946519eedeec28f4","modified":1623580781303},{"_id":"public/page/8/index.html","hash":"0e5e47dc71d127e3e11db2f10741235d705215b5","modified":1623580781303},{"_id":"public/page/7/index.html","hash":"1610fc234e296b4b80e4712e0021a87c89ec7da2","modified":1623580781303},{"_id":"public/page/9/index.html","hash":"53b296e0d68a54c50e414edf5ed40220cb7e50d1","modified":1623580781303},{"_id":"public/page/10/index.html","hash":"8a19089f084926b850ebc1fada161d8b8c7ca5f5","modified":1623580781303},{"_id":"public/tags/JavaScript/index.html","hash":"14a3c97932d7fe869262b63188c7f07e2cfddd25","modified":1623580781303},{"_id":"public/tags/JavaScript30天挑戰/index.html","hash":"104f4cb9cec926c44aedb6ddc044c6b5781932c9","modified":1623580781303},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"8954aba9ad394cf37af060dd4ce57c6baf346d94","modified":1623580781303},{"_id":"public/tags/vue/page/3/index.html","hash":"5a414a4001a5103f1928bdde41afc972c8765707","modified":1623580781303},{"_id":"public/tags/ironman/index.html","hash":"120c2fd377199b0e987422d742df2b6c0b706891","modified":1623580781303},{"_id":"public/tags/ironman/page/2/index.html","hash":"c8c672aeecc1f3c28cf8217bc07c9fff70ef6874","modified":1623580781303},{"_id":"public/tags/vue/page/2/index.html","hash":"e928fe9fdef055193d51bf171c9c16c69bfc41d0","modified":1623580781303},{"_id":"public/tags/component/index.html","hash":"b592897324906b840c401fac8cfe0d7a8e998bec","modified":1623580781303},{"_id":"public/tags/vue/index.html","hash":"0dd9ec19c829fc593441e2304134d5b4b91aa9f5","modified":1623580781303},{"_id":"public/tags/C/page/2/index.html","hash":"014fcd343f835d0e20abf4a10eaf8c4e03cf3620","modified":1623580781303},{"_id":"public/tags/C/page/3/index.html","hash":"e9cb922391865d27f8d7be281c4cb4f45c568029","modified":1623580781303},{"_id":"public/tags/C/index.html","hash":"7c50a8134633fe2903f5e3aa7a02dd7ebe327786","modified":1623580781303},{"_id":"public/tags/Asp-net/index.html","hash":"241ded2c124f8f69afe4ae7da27a2c38fc7dcd8d","modified":1623580781303},{"_id":"public/tags/Asp-net/page/3/index.html","hash":"e0e89a49b0fd07926c02c84f5a8ea070953fbca4","modified":1623580781303},{"_id":"public/tags/Asp-net/page/2/index.html","hash":"441cf655ab275e8fc1f4686bc7a0053e6d45881f","modified":1623580781303},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1623580781303},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1623580781303},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1623580781303},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1623580781303},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1623580781303},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1623580781303},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1623580781303},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1623580781303},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1623580781303},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1623580781303},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1623580781303},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1623580781303},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1623580781303},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1623580781303},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1623580781303},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1623580781303},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1623580781303},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1623580781303},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1623580781303},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1623580781303},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1623580781303},{"_id":"public/js/utils.js","hash":"b66891a0c7e3dcd5b9c56d5e4f6cd8cf39de3b23","modified":1623580781303},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1623580781303},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1623580781303},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1623580781303},{"_id":"public/css/main.css","hash":"514b5f754bf8f9b36bca3759ec8b606b4390aa48","modified":1623580781303},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1623580781303},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1623580781303},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1623580781303}],"Category":[{"name":"JavaScript","_id":"ckpv22t1u0004zqzi0ai83hsk"},{"name":"Hexo","_id":"ckpv22t23000fzqzi3rk90yxk"},{"name":"vue","_id":"ckpv22t26000nzqzi75jnhvag"},{"name":"Css","_id":"ckpv22t2d0018zqzi2x3q6pft"},{"name":"CSS","_id":"ckpv22t2j001ozqzi7dc1cmhw"},{"name":"javascript","_id":"ckpv22t3g003wzqzic2c07dxf"},{"name":"Design","_id":"ckpv22t3l0046zqzi4l916ej9"},{"name":"web","_id":"ckpv22t3s004szqzih31x1tah"},{"name":"C#","_id":"ckpv22t44005gzqzi0tgrgglp"},{"name":"SQL","_id":"ckpv22t4p007ezqzi2lu06nu9"},{"name":"Kendo","_id":"ckpv22t4s007nzqzi9os08q05"},{"name":"心得","_id":"ckpv22t51008bzqzian4s2fsg"},{"name":"商業思維","parent":"ckpv22t51008bzqzian4s2fsg","_id":"ckpv22t55008nzqzibkwl36mp"},{"name":"開發流程","_id":"ckpv22t5f009ezqzih2gy97ku"},{"name":"六角學院","parent":"ckpv22t5f009ezqzih2gy97ku","_id":"ckpv22t5h009mzqzi8ptac2t4"}],"Data":[],"Page":[{"layout":"false","_content":"\ngoogle-site-verification: google8a68389b5ba644f5.html","source":"google8a68389b5ba644f5.html","raw":"---\nlayout: false\n---\n\ngoogle-site-verification: google8a68389b5ba644f5.html","date":"2021-03-23T13:41:56.639Z","updated":"2021-03-23T13:41:56.639Z","path":"google8a68389b5ba644f5.html","title":"","comments":1,"_id":"ckpv22t1h0000zqziar62afmq","content":"\ngoogle-site-verification: google8a68389b5ba644f5.html","site":{"data":{}},"length":52,"excerpt":"","more":"\ngoogle-site-verification: google8a68389b5ba644f5.html"},{"title":"分類","date":"2019-08-26T12:40:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2019-08-26 20:40:17\ntype: \"categories\"\n---\n","updated":"2019-08-26T12:44:18.099Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckpv22t1s0002zqzi7yn99btn","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2019-08-26T06:21:50.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-26 14:21:50\ntype: \"tags\"\n---\n","updated":"2019-08-26T10:46:58.031Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckpv22t1w0006zqzi5hrtf4vr","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"JS30挑戰-Day1-Drum Kit","abbrlink":943160341,"date":"2019-08-24T09:30:54.000Z","_content":"\n本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[demo連結](https://chun-wen.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-chunwen.html)\n\n<!-- more -->\n#JS30挑戰-Drum Kit\n[Alex直播連結](https://www.youtube.com/watch?v=f2ttaeDHzwE&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=1)\n\n- - - -\n## 功能目的：\n透過JS使鍵盤按下後播放出對應按鍵的聲音，並同時產生音效與改變樣式，\n並且在按下其它鍵後會關閉該特效並於新按鍵中啟用。\n\n## 第一部分：\n我們需要先透過綁定DOM元素，來觸發兩個事件\n![](https://i.imgur.com/hOrgeY3.png)\n觀念一：使用立即函式將JS包在script中\n觀念二：螢幕捲軸、鍵盤事件、畫面旋轉通常會使用在window事件上\n重點：\n1.ES6 String template用法 [[[筆記]ES6語法介紹(Let、Const、字串)]]\n(`audio[data-key=“${e.keyCode}”]`)\n2.keyup、keydown、keypress比較。  [文章介紹](https://medium.com/@yitailin/%E6%AF%94%E8%BC%83-keydown-keypress-keyup-%E7%9A%84%E5%B7%AE%E7%95%B0-4e873ba17e81)\nKeyup:鍵盤放開時觸發\nKeyDown:鍵盤按下時候觸發（包含不能輸出的符號如:ESC、Enter）\nKeyPress:僅觸發可以輸出文字的符號\n\n## 第二部分\n影片大約33分開始\n![](https://i.imgur.com/sMWp0zT.png)\n找到事件綁定完後，就可以開始撰寫兩個事件function\n1.音樂播放事件 `music.play()`\n注意：\n* 若要連續觸發音樂事件，需要使用`currentTime`\n* 另外可以使用`if`判斷式來確保console.log不會跳錯\n\n2.使用classList語法新增className \n>`dom.classList.add(‘playing’)`（類似jQuery addClass相關用法）\n\n## 第三部分\n畫面完成渲染後，我們需要移除className\n1.transitionend 用法\n注意：\n* 使用transitionend時，如果畫面上有不同屬性改變，這時候會重複觸發\n因此我們要使用下面語法，找到特定屬性，來移除className\n`if (e.propertyName === 'transform')`\n\n2.forEach 用法\n3.`Array.from() `可以將類陣列轉為陣列（練習中沒使用到）\n[MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n\n### 補充：\nHTML\n1.`<kbd> `HTML標籤  [MDN參考資料](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/kbd)\n>這其實也說明，Html語法其實蠻自由，我們都可以自行創建命名使用喔\n`<andy>my name is andy</andy>`\n2.`data-*`用法。[[[筆記]HTML5中的資料屬性  data-*(attribute)]]\nCSS\n`transform: scale(1.1)`>>將樣式放大（常做在hover效果上）\n`text-transform: uppercase;`>>將字體轉為大寫\nJS\n程式碼整理：\n將function放到最上面 ，執行事件往下\n\n## 學習心得\n1. 程式碼整理\n2. 藉由繪圖整理程式撰寫邏輯\n3. 學習方式調整為：看完老師直播後，**自己重新撰寫一次**\n4. ES6 template string、classList、transitionend、data-*、nodeList\n\n\n\n\n\n\n\n","source":"_posts/2019-08-24-JS30挑戰-Drum-Kit.md","raw":"---\ntitle: JS30挑戰-Day1-Drum Kit\ntags:\n  - JavaScript30天挑戰\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 943160341\ndate: 2019-08-24 17:30:54\n---\n\n本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[demo連結](https://chun-wen.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-chunwen.html)\n\n<!-- more -->\n#JS30挑戰-Drum Kit\n[Alex直播連結](https://www.youtube.com/watch?v=f2ttaeDHzwE&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=1)\n\n- - - -\n## 功能目的：\n透過JS使鍵盤按下後播放出對應按鍵的聲音，並同時產生音效與改變樣式，\n並且在按下其它鍵後會關閉該特效並於新按鍵中啟用。\n\n## 第一部分：\n我們需要先透過綁定DOM元素，來觸發兩個事件\n![](https://i.imgur.com/hOrgeY3.png)\n觀念一：使用立即函式將JS包在script中\n觀念二：螢幕捲軸、鍵盤事件、畫面旋轉通常會使用在window事件上\n重點：\n1.ES6 String template用法 [[[筆記]ES6語法介紹(Let、Const、字串)]]\n(`audio[data-key=“${e.keyCode}”]`)\n2.keyup、keydown、keypress比較。  [文章介紹](https://medium.com/@yitailin/%E6%AF%94%E8%BC%83-keydown-keypress-keyup-%E7%9A%84%E5%B7%AE%E7%95%B0-4e873ba17e81)\nKeyup:鍵盤放開時觸發\nKeyDown:鍵盤按下時候觸發（包含不能輸出的符號如:ESC、Enter）\nKeyPress:僅觸發可以輸出文字的符號\n\n## 第二部分\n影片大約33分開始\n![](https://i.imgur.com/sMWp0zT.png)\n找到事件綁定完後，就可以開始撰寫兩個事件function\n1.音樂播放事件 `music.play()`\n注意：\n* 若要連續觸發音樂事件，需要使用`currentTime`\n* 另外可以使用`if`判斷式來確保console.log不會跳錯\n\n2.使用classList語法新增className \n>`dom.classList.add(‘playing’)`（類似jQuery addClass相關用法）\n\n## 第三部分\n畫面完成渲染後，我們需要移除className\n1.transitionend 用法\n注意：\n* 使用transitionend時，如果畫面上有不同屬性改變，這時候會重複觸發\n因此我們要使用下面語法，找到特定屬性，來移除className\n`if (e.propertyName === 'transform')`\n\n2.forEach 用法\n3.`Array.from() `可以將類陣列轉為陣列（練習中沒使用到）\n[MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n\n### 補充：\nHTML\n1.`<kbd> `HTML標籤  [MDN參考資料](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/kbd)\n>這其實也說明，Html語法其實蠻自由，我們都可以自行創建命名使用喔\n`<andy>my name is andy</andy>`\n2.`data-*`用法。[[[筆記]HTML5中的資料屬性  data-*(attribute)]]\nCSS\n`transform: scale(1.1)`>>將樣式放大（常做在hover效果上）\n`text-transform: uppercase;`>>將字體轉為大寫\nJS\n程式碼整理：\n將function放到最上面 ，執行事件往下\n\n## 學習心得\n1. 程式碼整理\n2. 藉由繪圖整理程式撰寫邏輯\n3. 學習方式調整為：看完老師直播後，**自己重新撰寫一次**\n4. ES6 template string、classList、transitionend、data-*、nodeList\n\n\n\n\n\n\n\n","slug":"2019-08-24-JS30挑戰-Drum-Kit","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t1n0001zqziey9s0jon","content":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-chunwen.html\">demo連結</a></p>\n<span id=\"more\"></span>\n<p>#JS30挑戰-Drum Kit<br><a href=\"https://www.youtube.com/watch?v=f2ttaeDHzwE&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=1\">Alex直播連結</a></p>\n<hr>\n<h2 id=\"功能目的：\"><a href=\"#功能目的：\" class=\"headerlink\" title=\"功能目的：\"></a>功能目的：</h2><p>透過JS使鍵盤按下後播放出對應按鍵的聲音，並同時產生音效與改變樣式，<br>並且在按下其它鍵後會關閉該特效並於新按鍵中啟用。</p>\n<h2 id=\"第一部分：\"><a href=\"#第一部分：\" class=\"headerlink\" title=\"第一部分：\"></a>第一部分：</h2><p>我們需要先透過綁定DOM元素，來觸發兩個事件<br><img src=\"https://i.imgur.com/hOrgeY3.png\" alt=\"\"><br>觀念一：使用立即函式將JS包在script中<br>觀念二：螢幕捲軸、鍵盤事件、畫面旋轉通常會使用在window事件上<br>重點：<br>1.ES6 String template用法 [[[筆記]ES6語法介紹(Let、Const、字串)]]<br>(<code>audio[data-key=“$&#123;e.keyCode&#125;”]</code>)<br>2.keyup、keydown、keypress比較。  <a href=\"https://medium.com/@yitailin/%E6%AF%94%E8%BC%83-keydown-keypress-keyup-%E7%9A%84%E5%B7%AE%E7%95%B0-4e873ba17e81\">文章介紹</a><br>Keyup:鍵盤放開時觸發<br>KeyDown:鍵盤按下時候觸發（包含不能輸出的符號如:ESC、Enter）<br>KeyPress:僅觸發可以輸出文字的符號</p>\n<h2 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h2><p>影片大約33分開始<br><img src=\"https://i.imgur.com/sMWp0zT.png\" alt=\"\"><br>找到事件綁定完後，就可以開始撰寫兩個事件function<br>1.音樂播放事件 <code>music.play()</code><br>注意：</p>\n<ul>\n<li>若要連續觸發音樂事件，需要使用<code>currentTime</code></li>\n<li>另外可以使用<code>if</code>判斷式來確保console.log不會跳錯</li>\n</ul>\n<p>2.使用classList語法新增className </p>\n<blockquote>\n<p><code>dom.classList.add(‘playing’)</code>（類似jQuery addClass相關用法）</p>\n</blockquote>\n<h2 id=\"第三部分\"><a href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"></a>第三部分</h2><p>畫面完成渲染後，我們需要移除className<br>1.transitionend 用法<br>注意：</p>\n<ul>\n<li>使用transitionend時，如果畫面上有不同屬性改變，這時候會重複觸發<br>因此我們要使用下面語法，找到特定屬性，來移除className<br><code>if (e.propertyName === &#39;transform&#39;)</code></li>\n</ul>\n<p>2.forEach 用法<br>3.<code>Array.from()</code>可以將類陣列轉為陣列（練習中沒使用到）<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">MDN參考資料</a></p>\n<h3 id=\"補充：\"><a href=\"#補充：\" class=\"headerlink\" title=\"補充：\"></a>補充：</h3><p>HTML<br>1.<code>&lt;kbd&gt;</code>HTML標籤  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/kbd\">MDN參考資料</a></p>\n<blockquote>\n<p>這其實也說明，Html語法其實蠻自由，我們都可以自行創建命名使用喔<br><code>&lt;andy&gt;my name is andy&lt;/andy&gt;</code><br>2.<code>data-*</code>用法。[[[筆記]HTML5中的資料屬性  data-*(attribute)]]<br>CSS<br><code>transform: scale(1.1)</code>&gt;&gt;將樣式放大（常做在hover效果上）<br><code>text-transform: uppercase;</code>&gt;&gt;將字體轉為大寫<br>JS<br>程式碼整理：<br>將function放到最上面 ，執行事件往下</p>\n</blockquote>\n<h2 id=\"學習心得\"><a href=\"#學習心得\" class=\"headerlink\" title=\"學習心得\"></a>學習心得</h2><ol>\n<li>程式碼整理</li>\n<li>藉由繪圖整理程式撰寫邏輯</li>\n<li>學習方式調整為：看完老師直播後，<strong>自己重新撰寫一次</strong></li>\n<li>ES6 template string、classList、transitionend、data-*、nodeList</li>\n</ol>\n","site":{"data":{}},"length":1173,"excerpt":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/01%20-%20JavaScript%20Drum%20Kit/index-chunwen.html\">demo連結</a></p>","more":"<p>#JS30挑戰-Drum Kit<br><a href=\"https://www.youtube.com/watch?v=f2ttaeDHzwE&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=1\">Alex直播連結</a></p>\n<hr>\n<h2 id=\"功能目的：\"><a href=\"#功能目的：\" class=\"headerlink\" title=\"功能目的：\"></a>功能目的：</h2><p>透過JS使鍵盤按下後播放出對應按鍵的聲音，並同時產生音效與改變樣式，<br>並且在按下其它鍵後會關閉該特效並於新按鍵中啟用。</p>\n<h2 id=\"第一部分：\"><a href=\"#第一部分：\" class=\"headerlink\" title=\"第一部分：\"></a>第一部分：</h2><p>我們需要先透過綁定DOM元素，來觸發兩個事件<br><img src=\"https://i.imgur.com/hOrgeY3.png\" alt=\"\"><br>觀念一：使用立即函式將JS包在script中<br>觀念二：螢幕捲軸、鍵盤事件、畫面旋轉通常會使用在window事件上<br>重點：<br>1.ES6 String template用法 [[[筆記]ES6語法介紹(Let、Const、字串)]]<br>(<code>audio[data-key=“$&#123;e.keyCode&#125;”]</code>)<br>2.keyup、keydown、keypress比較。  <a href=\"https://medium.com/@yitailin/%E6%AF%94%E8%BC%83-keydown-keypress-keyup-%E7%9A%84%E5%B7%AE%E7%95%B0-4e873ba17e81\">文章介紹</a><br>Keyup:鍵盤放開時觸發<br>KeyDown:鍵盤按下時候觸發（包含不能輸出的符號如:ESC、Enter）<br>KeyPress:僅觸發可以輸出文字的符號</p>\n<h2 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h2><p>影片大約33分開始<br><img src=\"https://i.imgur.com/sMWp0zT.png\" alt=\"\"><br>找到事件綁定完後，就可以開始撰寫兩個事件function<br>1.音樂播放事件 <code>music.play()</code><br>注意：</p>\n<ul>\n<li>若要連續觸發音樂事件，需要使用<code>currentTime</code></li>\n<li>另外可以使用<code>if</code>判斷式來確保console.log不會跳錯</li>\n</ul>\n<p>2.使用classList語法新增className </p>\n<blockquote>\n<p><code>dom.classList.add(‘playing’)</code>（類似jQuery addClass相關用法）</p>\n</blockquote>\n<h2 id=\"第三部分\"><a href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"></a>第三部分</h2><p>畫面完成渲染後，我們需要移除className<br>1.transitionend 用法<br>注意：</p>\n<ul>\n<li>使用transitionend時，如果畫面上有不同屬性改變，這時候會重複觸發<br>因此我們要使用下面語法，找到特定屬性，來移除className<br><code>if (e.propertyName === &#39;transform&#39;)</code></li>\n</ul>\n<p>2.forEach 用法<br>3.<code>Array.from()</code>可以將類陣列轉為陣列（練習中沒使用到）<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">MDN參考資料</a></p>\n<h3 id=\"補充：\"><a href=\"#補充：\" class=\"headerlink\" title=\"補充：\"></a>補充：</h3><p>HTML<br>1.<code>&lt;kbd&gt;</code>HTML標籤  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/kbd\">MDN參考資料</a></p>\n<blockquote>\n<p>這其實也說明，Html語法其實蠻自由，我們都可以自行創建命名使用喔<br><code>&lt;andy&gt;my name is andy&lt;/andy&gt;</code><br>2.<code>data-*</code>用法。[[[筆記]HTML5中的資料屬性  data-*(attribute)]]<br>CSS<br><code>transform: scale(1.1)</code>&gt;&gt;將樣式放大（常做在hover效果上）<br><code>text-transform: uppercase;</code>&gt;&gt;將字體轉為大寫<br>JS<br>程式碼整理：<br>將function放到最上面 ，執行事件往下</p>\n</blockquote>\n<h2 id=\"學習心得\"><a href=\"#學習心得\" class=\"headerlink\" title=\"學習心得\"></a>學習心得</h2><ol>\n<li>程式碼整理</li>\n<li>藉由繪圖整理程式撰寫邏輯</li>\n<li>學習方式調整為：看完老師直播後，<strong>自己重新撰寫一次</strong></li>\n<li>ES6 template string、classList、transitionend、data-*、nodeList</li>\n</ol>"},{"title":"JS30挑戰-Day2-CSS+JS","abbrlink":473544001,"date":"2019-08-26T11:01:56.000Z","_content":"\n本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[Demo連結](https://chun-wen.github.io/JavaScript30/02%20-%20JS%20and%20CSS%20Clock/index-chunwen.html)\n\n<!-- more -->\n\n[Alex老師直播](https://www.youtube.com/watch?v=O1YsB3qxO4g&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=2)\n[談談 JavaScript 的 setTimeout 與 setInterval](https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/)\n- 挑戰刻另外一個時鐘 [文章](https://mini-ghost.github.io/blog/2019/06/02/javascript-clock/)\n\n- - - -\nJS撰寫有以下重點\n1.綁定Dom：時針、分支、秒針\n2.取得時間new Date（）\n3.旋轉rotate角度計算\n4.更新計時器：setInterval、setTimeout、requestAnimationFrame()\n\n## JS\n立即函示已經封裝完會加分號`;`如下\n原因就是有不同程式引入時候，避免與不同script連在一起出錯\n```javascript\n;(function(){\n  .....內容    \n})()\n```\n\n* 時間計算 \n共有下面四種寫法：\n1. new Date();\n2. new Date(value);\n3. new Date(dateString);\n4. new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n> 補充：  \n> [前端工程研究：關於 JavaScript 中 Date 型別的常見地雷與建議作法](https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details)  \n> [JavaScript Date 時間和日期 操作](https://www.fooish.com/javascript/date/)  \n\n\n* 功能一：初始化畫面 \n提醒：在window中，立即函示中呼叫不到setClock \n解決方案：先呼叫一次，初始化畫面\n\n* 功能二：更新畫面（需要用到計時器）影片41分介紹\n> 小提示：加上較細微變化 如:時針在過度時候，會漸漸傾斜  \n\n* setInterval、setTimeout、requestAnimationFrame()比較三者差異（影片：50分開始）\n1. setInterval (設定間隔，持續執行)   常用在：輪播效果\nsetInterval則是固定延遲了某段時間之後，才去執行對應的程式碼，然後「不斷循環」。 當然也會回傳一個獨立的 timer ID\n```javascript\nlet intervalID = window.setInterval(func, delay[, param1, param2, ...]);\nlet intervalID = window.setInterval(code, delay);\n```\n\n2. setTimeout(設定延遲，只會執行ㄧ次)\n說明：根據MDN解釋：定時器在特定時間後(單位為毫秒) 之後，執行一段程式碼或字串，並且會回傳一個獨立的 timer ID\n寫法：\n```javascript\n範例：\nvar timeoutID = scope.setTimeout(function[, delay, param1, param2, ...]);\nvar timeoutID = scope.setTimeout(function[, delay]); \nvar timeoutID = scope.setTimeout(code[, delay]);\n\n實際案例：\nwindow.setTimeout(alertEvent,1000);\nfunction alertEvent(){\n   ......執行內容\n}\n\n```\n>補充：  \n>延遲設定時間跟我們螢幕赫茲（硬體）有關（最普通：60HZ），這範例時間設太短（如：５毫秒）螢幕畫面並不會呈現  \n\n3. [requestAnimationFrame](https://developer.mozilla.org/zh-TW/docs/Web/API/Window.requestAnimationFrame)（處理畫面更新的setTimeout）\n語法如下\n```javascript\nrequestID = window.requestAnimationFrame(callback);      \n // Firefox 23 / IE 10 / Chrome\nrequestID = window.mozRequestAnimationFrame(callback);    \n// Firefox < 23\nrequestID = window.webkitRequestAnimationFrame(callback); \n// Safari\n\n```\n\n## CSS\n* Border-radius語法：\n[Border-radius 50% vs 100%](https://zhuanlan.zhihu.com/p/20128284)\n上面寫的結果都是圓形喔，原因是如果相臨角的半徑超過盒子的長度，瀏覽器會重新計算。示意圖如下：\n![Imgur](https://i.imgur.com/XXBWHPR.png)\n\n\n* 中間小圓點製作\ntransform使用：\n可以用在2D、3D效果上 例如：\n```css\ntransform:rotate(30deg) 旋轉30度\ntransform: translate(120px, 50%); 平移120px 往下移動50%\ntransform: skew(30deg, 20deg); 傾斜\ntransform: scale(2, 0.5); 放大\n```\n補充：[MDN介紹--transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) [transorm解釋](https://www.great-good.tw/articles/css-transform/)\n延伸閱讀：\n[[[筆記]Css-transition、animation(animate)動畫效果]]\n\n* 時針、秒針、分針製作（影片：21分開始）\n* 偽元素使用 [[[筆記]偽元素（Pseudo Element）、偽類 (pseudo class) 介紹]]\n\n\n## 心得\n* 取得時間後，不知道如何讓畫面動起來（後來再看一次影片得知 `transform:rotate用法`動態加上角度轉換\n* es6語法撰寫不熟。畫面ㄧ直出不來\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-08-25-js30挑戰-Css+Js.md","raw":"---\ntitle: JS30挑戰-Day2-CSS+JS\ntags:\n  - JavaScript30天挑戰\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 473544001\ndate: 2019-08-26 19:01:56\n---\n\n本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[Demo連結](https://chun-wen.github.io/JavaScript30/02%20-%20JS%20and%20CSS%20Clock/index-chunwen.html)\n\n<!-- more -->\n\n[Alex老師直播](https://www.youtube.com/watch?v=O1YsB3qxO4g&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=2)\n[談談 JavaScript 的 setTimeout 與 setInterval](https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/)\n- 挑戰刻另外一個時鐘 [文章](https://mini-ghost.github.io/blog/2019/06/02/javascript-clock/)\n\n- - - -\nJS撰寫有以下重點\n1.綁定Dom：時針、分支、秒針\n2.取得時間new Date（）\n3.旋轉rotate角度計算\n4.更新計時器：setInterval、setTimeout、requestAnimationFrame()\n\n## JS\n立即函示已經封裝完會加分號`;`如下\n原因就是有不同程式引入時候，避免與不同script連在一起出錯\n```javascript\n;(function(){\n  .....內容    \n})()\n```\n\n* 時間計算 \n共有下面四種寫法：\n1. new Date();\n2. new Date(value);\n3. new Date(dateString);\n4. new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n> 補充：  \n> [前端工程研究：關於 JavaScript 中 Date 型別的常見地雷與建議作法](https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details)  \n> [JavaScript Date 時間和日期 操作](https://www.fooish.com/javascript/date/)  \n\n\n* 功能一：初始化畫面 \n提醒：在window中，立即函示中呼叫不到setClock \n解決方案：先呼叫一次，初始化畫面\n\n* 功能二：更新畫面（需要用到計時器）影片41分介紹\n> 小提示：加上較細微變化 如:時針在過度時候，會漸漸傾斜  \n\n* setInterval、setTimeout、requestAnimationFrame()比較三者差異（影片：50分開始）\n1. setInterval (設定間隔，持續執行)   常用在：輪播效果\nsetInterval則是固定延遲了某段時間之後，才去執行對應的程式碼，然後「不斷循環」。 當然也會回傳一個獨立的 timer ID\n```javascript\nlet intervalID = window.setInterval(func, delay[, param1, param2, ...]);\nlet intervalID = window.setInterval(code, delay);\n```\n\n2. setTimeout(設定延遲，只會執行ㄧ次)\n說明：根據MDN解釋：定時器在特定時間後(單位為毫秒) 之後，執行一段程式碼或字串，並且會回傳一個獨立的 timer ID\n寫法：\n```javascript\n範例：\nvar timeoutID = scope.setTimeout(function[, delay, param1, param2, ...]);\nvar timeoutID = scope.setTimeout(function[, delay]); \nvar timeoutID = scope.setTimeout(code[, delay]);\n\n實際案例：\nwindow.setTimeout(alertEvent,1000);\nfunction alertEvent(){\n   ......執行內容\n}\n\n```\n>補充：  \n>延遲設定時間跟我們螢幕赫茲（硬體）有關（最普通：60HZ），這範例時間設太短（如：５毫秒）螢幕畫面並不會呈現  \n\n3. [requestAnimationFrame](https://developer.mozilla.org/zh-TW/docs/Web/API/Window.requestAnimationFrame)（處理畫面更新的setTimeout）\n語法如下\n```javascript\nrequestID = window.requestAnimationFrame(callback);      \n // Firefox 23 / IE 10 / Chrome\nrequestID = window.mozRequestAnimationFrame(callback);    \n// Firefox < 23\nrequestID = window.webkitRequestAnimationFrame(callback); \n// Safari\n\n```\n\n## CSS\n* Border-radius語法：\n[Border-radius 50% vs 100%](https://zhuanlan.zhihu.com/p/20128284)\n上面寫的結果都是圓形喔，原因是如果相臨角的半徑超過盒子的長度，瀏覽器會重新計算。示意圖如下：\n![Imgur](https://i.imgur.com/XXBWHPR.png)\n\n\n* 中間小圓點製作\ntransform使用：\n可以用在2D、3D效果上 例如：\n```css\ntransform:rotate(30deg) 旋轉30度\ntransform: translate(120px, 50%); 平移120px 往下移動50%\ntransform: skew(30deg, 20deg); 傾斜\ntransform: scale(2, 0.5); 放大\n```\n補充：[MDN介紹--transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) [transorm解釋](https://www.great-good.tw/articles/css-transform/)\n延伸閱讀：\n[[[筆記]Css-transition、animation(animate)動畫效果]]\n\n* 時針、秒針、分針製作（影片：21分開始）\n* 偽元素使用 [[[筆記]偽元素（Pseudo Element）、偽類 (pseudo class) 介紹]]\n\n\n## 心得\n* 取得時間後，不知道如何讓畫面動起來（後來再看一次影片得知 `transform:rotate用法`動態加上角度轉換\n* es6語法撰寫不熟。畫面ㄧ直出不來\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-08-25-js30挑戰-Css+Js","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t1s0003zqzid4an242n","content":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/02%20-%20JS%20and%20CSS%20Clock/index-chunwen.html\">Demo連結</a></p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://www.youtube.com/watch?v=O1YsB3qxO4g&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=2\">Alex老師直播</a><br><a href=\"https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/\">談談 JavaScript 的 setTimeout 與 setInterval</a></p>\n<ul>\n<li>挑戰刻另外一個時鐘 <a href=\"https://mini-ghost.github.io/blog/2019/06/02/javascript-clock/\">文章</a></li>\n</ul>\n<hr>\n<p>JS撰寫有以下重點<br>1.綁定Dom：時針、分支、秒針<br>2.取得時間new Date（）<br>3.旋轉rotate角度計算<br>4.更新計時器：setInterval、setTimeout、requestAnimationFrame()</p>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><p>立即函示已經封裝完會加分號<code>;</code>如下<br>原因就是有不同程式引入時候，避免與不同script連在一起出錯</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  .....內容    </span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>時間計算<br>共有下面四種寫法：</li>\n</ul>\n<ol>\n<li>new Date();</li>\n<li>new Date(value);</li>\n<li>new Date(dateString);</li>\n<li>new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);<blockquote>\n<p>補充：<br><a href=\"https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details\">前端工程研究：關於 JavaScript 中 Date 型別的常見地雷與建議作法</a><br><a href=\"https://www.fooish.com/javascript/date/\">JavaScript Date 時間和日期 操作</a>  </p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>功能一：初始化畫面<br>提醒：在window中，立即函示中呼叫不到setClock<br>解決方案：先呼叫一次，初始化畫面</p>\n</li>\n<li><p>功能二：更新畫面（需要用到計時器）影片41分介紹</p>\n<blockquote>\n<p>小提示：加上較細微變化 如:時針在過度時候，會漸漸傾斜  </p>\n</blockquote>\n</li>\n<li><p>setInterval、setTimeout、requestAnimationFrame()比較三者差異（影片：50分開始）</p>\n</li>\n</ul>\n<ol>\n<li><p>setInterval (設定間隔，持續執行)   常用在：輪播效果<br>setInterval則是固定延遲了某段時間之後，才去執行對應的程式碼，然後「不斷循環」。 當然也會回傳一個獨立的 timer ID</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> intervalID = <span class=\"built_in\">window</span>.setInterval(func, delay[, param1, param2, ...]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> intervalID = <span class=\"built_in\">window</span>.setInterval(code, delay);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>setTimeout(設定延遲，只會執行ㄧ次)<br>說明：根據MDN解釋：定時器在特定時間後(單位為毫秒) 之後，執行一段程式碼或字串，並且會回傳一個獨立的 timer ID<br>寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">範例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutID = scope.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>[, <span class=\"title\">delay</span>, <span class=\"title\">param1</span>, <span class=\"title\">param2</span>, ...])</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutID = scope.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>[, <span class=\"title\">delay</span>])</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutID = scope.setTimeout(code[, delay]);</span><br><span class=\"line\"></span><br><span class=\"line\">實際案例：</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(alertEvent,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertEvent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   ......執行內容</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：<br>延遲設定時間跟我們螢幕赫茲（硬體）有關（最普通：60HZ），這範例時間設太短（如：５毫秒）螢幕畫面並不會呈現  </p>\n</blockquote>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Window.requestAnimationFrame\">requestAnimationFrame</a>（處理畫面更新的setTimeout）<br>語法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestID = <span class=\"built_in\">window</span>.requestAnimationFrame(callback);      </span><br><span class=\"line\"> <span class=\"comment\">// Firefox 23 / IE 10 / Chrome</span></span><br><span class=\"line\">requestID = <span class=\"built_in\">window</span>.mozRequestAnimationFrame(callback);    </span><br><span class=\"line\"><span class=\"comment\">// Firefox &lt; 23</span></span><br><span class=\"line\">requestID = <span class=\"built_in\">window</span>.webkitRequestAnimationFrame(callback); </span><br><span class=\"line\"><span class=\"comment\">// Safari</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li>Border-radius語法：<br><a href=\"https://zhuanlan.zhihu.com/p/20128284\">Border-radius 50% vs 100%</a><br>上面寫的結果都是圓形喔，原因是如果相臨角的半徑超過盒子的長度，瀏覽器會重新計算。示意圖如下：<br><img src=\"https://i.imgur.com/XXBWHPR.png\" alt=\"Imgur\"></li>\n</ul>\n<ul>\n<li><p>中間小圓點製作<br>transform使用：<br>可以用在2D、3D效果上 例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(<span class=\"number\">30deg</span>) 旋轉<span class=\"number\">30</span>度</span><br><span class=\"line\">transform: <span class=\"built_in\">translate</span>(<span class=\"number\">120px</span>, <span class=\"number\">50%</span>); 平移<span class=\"number\">120px</span> 往下移動<span class=\"number\">50%</span></span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(<span class=\"number\">30deg</span>, <span class=\"number\">20deg</span>); 傾斜</span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">2</span>, <span class=\"number\">0.5</span>); 放大</span><br></pre></td></tr></table></figure>\n<p>補充：<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform\">MDN介紹–transform</a> <a href=\"https://www.great-good.tw/articles/css-transform/\">transorm解釋</a><br>延伸閱讀：<br>[[[筆記]Css-transition、animation(animate)動畫效果]]</p>\n</li>\n<li><p>時針、秒針、分針製作（影片：21分開始）</p>\n</li>\n<li><p>偽元素使用 [[[筆記]偽元素（Pseudo Element）、偽類 (pseudo class) 介紹]]</p>\n</li>\n</ul>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ul>\n<li>取得時間後，不知道如何讓畫面動起來（後來再看一次影片得知 <code>transform:rotate用法</code>動態加上角度轉換</li>\n<li>es6語法撰寫不熟。畫面ㄧ直出不來</li>\n</ul>\n","site":{"data":{}},"length":1963,"excerpt":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/02%20-%20JS%20and%20CSS%20Clock/index-chunwen.html\">Demo連結</a></p>","more":"<p><a href=\"https://www.youtube.com/watch?v=O1YsB3qxO4g&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=2\">Alex老師直播</a><br><a href=\"https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/\">談談 JavaScript 的 setTimeout 與 setInterval</a></p>\n<ul>\n<li>挑戰刻另外一個時鐘 <a href=\"https://mini-ghost.github.io/blog/2019/06/02/javascript-clock/\">文章</a></li>\n</ul>\n<hr>\n<p>JS撰寫有以下重點<br>1.綁定Dom：時針、分支、秒針<br>2.取得時間new Date（）<br>3.旋轉rotate角度計算<br>4.更新計時器：setInterval、setTimeout、requestAnimationFrame()</p>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><p>立即函示已經封裝完會加分號<code>;</code>如下<br>原因就是有不同程式引入時候，避免與不同script連在一起出錯</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  .....內容    </span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>時間計算<br>共有下面四種寫法：</li>\n</ul>\n<ol>\n<li>new Date();</li>\n<li>new Date(value);</li>\n<li>new Date(dateString);</li>\n<li>new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);<blockquote>\n<p>補充：<br><a href=\"https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details\">前端工程研究：關於 JavaScript 中 Date 型別的常見地雷與建議作法</a><br><a href=\"https://www.fooish.com/javascript/date/\">JavaScript Date 時間和日期 操作</a>  </p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li><p>功能一：初始化畫面<br>提醒：在window中，立即函示中呼叫不到setClock<br>解決方案：先呼叫一次，初始化畫面</p>\n</li>\n<li><p>功能二：更新畫面（需要用到計時器）影片41分介紹</p>\n<blockquote>\n<p>小提示：加上較細微變化 如:時針在過度時候，會漸漸傾斜  </p>\n</blockquote>\n</li>\n<li><p>setInterval、setTimeout、requestAnimationFrame()比較三者差異（影片：50分開始）</p>\n</li>\n</ul>\n<ol>\n<li><p>setInterval (設定間隔，持續執行)   常用在：輪播效果<br>setInterval則是固定延遲了某段時間之後，才去執行對應的程式碼，然後「不斷循環」。 當然也會回傳一個獨立的 timer ID</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> intervalID = <span class=\"built_in\">window</span>.setInterval(func, delay[, param1, param2, ...]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> intervalID = <span class=\"built_in\">window</span>.setInterval(code, delay);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>setTimeout(設定延遲，只會執行ㄧ次)<br>說明：根據MDN解釋：定時器在特定時間後(單位為毫秒) 之後，執行一段程式碼或字串，並且會回傳一個獨立的 timer ID<br>寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">範例：</span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutID = scope.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>[, <span class=\"title\">delay</span>, <span class=\"title\">param1</span>, <span class=\"title\">param2</span>, ...])</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutID = scope.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>[, <span class=\"title\">delay</span>])</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutID = scope.setTimeout(code[, delay]);</span><br><span class=\"line\"></span><br><span class=\"line\">實際案例：</span><br><span class=\"line\"><span class=\"built_in\">window</span>.setTimeout(alertEvent,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertEvent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   ......執行內容</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：<br>延遲設定時間跟我們螢幕赫茲（硬體）有關（最普通：60HZ），這範例時間設太短（如：５毫秒）螢幕畫面並不會呈現  </p>\n</blockquote>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Window.requestAnimationFrame\">requestAnimationFrame</a>（處理畫面更新的setTimeout）<br>語法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestID = <span class=\"built_in\">window</span>.requestAnimationFrame(callback);      </span><br><span class=\"line\"> <span class=\"comment\">// Firefox 23 / IE 10 / Chrome</span></span><br><span class=\"line\">requestID = <span class=\"built_in\">window</span>.mozRequestAnimationFrame(callback);    </span><br><span class=\"line\"><span class=\"comment\">// Firefox &lt; 23</span></span><br><span class=\"line\">requestID = <span class=\"built_in\">window</span>.webkitRequestAnimationFrame(callback); </span><br><span class=\"line\"><span class=\"comment\">// Safari</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li>Border-radius語法：<br><a href=\"https://zhuanlan.zhihu.com/p/20128284\">Border-radius 50% vs 100%</a><br>上面寫的結果都是圓形喔，原因是如果相臨角的半徑超過盒子的長度，瀏覽器會重新計算。示意圖如下：<br><img src=\"https://i.imgur.com/XXBWHPR.png\" alt=\"Imgur\"></li>\n</ul>\n<ul>\n<li><p>中間小圓點製作<br>transform使用：<br>可以用在2D、3D效果上 例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(<span class=\"number\">30deg</span>) 旋轉<span class=\"number\">30</span>度</span><br><span class=\"line\">transform: <span class=\"built_in\">translate</span>(<span class=\"number\">120px</span>, <span class=\"number\">50%</span>); 平移<span class=\"number\">120px</span> 往下移動<span class=\"number\">50%</span></span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">skew</span>(<span class=\"number\">30deg</span>, <span class=\"number\">20deg</span>); 傾斜</span><br><span class=\"line\"><span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">2</span>, <span class=\"number\">0.5</span>); 放大</span><br></pre></td></tr></table></figure>\n<p>補充：<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform\">MDN介紹–transform</a> <a href=\"https://www.great-good.tw/articles/css-transform/\">transorm解釋</a><br>延伸閱讀：<br>[[[筆記]Css-transition、animation(animate)動畫效果]]</p>\n</li>\n<li><p>時針、秒針、分針製作（影片：21分開始）</p>\n</li>\n<li><p>偽元素使用 [[[筆記]偽元素（Pseudo Element）、偽類 (pseudo class) 介紹]]</p>\n</li>\n</ul>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ul>\n<li>取得時間後，不知道如何讓畫面動起來（後來再看一次影片得知 <code>transform:rotate用法</code>動態加上角度轉換</li>\n<li>es6語法撰寫不熟。畫面ㄧ直出不來</li>\n</ul>"},{"title":"Hexo網站建置筆記","abbrlink":2844598168,"date":"2019-08-26T13:19:59.000Z","_content":"\n參考資料：\n[架設Hexo+Github](https://hsiangfeng.github.io/hexo/20190411/932826160/)\n[Hexo-Next主題配置](https://theme-next.iissnan.com/getting-started.html)\n[用Hexo + Github Pages搭建個人部落格--小蛇蛇的詳細筆記](https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more)\n（蠻推薦第一次建置網站時參考這篇文章）\n[如何搭建個人 Blog 使用 Hexo + Gitpage](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)\n[六角共筆--使用 Hexo 建置網站](https://paper.dropbox.com/doc/Hexo---Ajm_olac_2CkcQD26G5RlqICAg-7zSMDUvNPffmjdilVv3AA)\n\n- - - -\n這篇文章僅會紀錄安裝過程中，發生錯誤部分，其餘教學內容可以參考[如何搭建個人 Blog 使用 Hexo + Gitpage](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)，自行架設即可。或是參考[六角影片教學](https://www.youtube.com/watch?v=jOJI9ekTzK8&t=1s)\n\n<!--more-->\n\n## 初始化檔案結構簡介\n![](https://i.imgur.com/dnSaiR2.png)圖片來源：[如何搭建個人 Blog 使用 Hexo + Gitpage\n](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)\n>Source、themes這兩部份最常使用，其他folder就看看吧～ \n\n\n## 部落格主題更換\n我這邊使用的主題是[Next](https://theme-next.iissnan.com/)\n![](https://i.imgur.com/b28TAf1.png)\n\n首先，我們如何更換預設主題呢？\nStep1.`終端機`先簽換到theme目錄下\n```git\n$ cd your-hexo-site \n//your-hexo-site指的是theme目錄位置\n\n//將主題複製下來\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n![](https://i.imgur.com/KzCP9rG.png)\nStep2.開啟_config.yml\n![](https://i.imgur.com/s34l8SO.png)\nStep3.更改主題資料夾名稱\n`theme: next`\nStep4.接著終端機開啟指令啟動server\n`hexo server`\n> 補充：[hexo本地測試運行重啟後頁面空白,提示: WARN No layout: index.html?](https://www.zhihu.com/question/38781463)  \n> Ａ：其實就是主題檔案名稱忘了更改  \n\n## 常用指令介紹\n[官網指令介紹](https://hexo.io/zh-tw/docs/commands)\n```git\n$ hexo generate  //產生靜態檔案\n$ hexo deploy    //部署網站\n$ hexo clean && $ hexo d -g  \n//刪除已生成的靜態頁面及快取檔案，並重新部署\n提醒：部署網站前會需要先產生靜態頁面\n\n組合技\n$ hexo d -g         //＊指令說明： # 產生靜態檔後部署\n$ hexo s -g        //＊指令說明： # 產生靜態檔後預覽\n$ hexo clean     //＊指令說明：刪除已生成的靜態頁面及快取檔案\n$ hexo new [title]  //＊指令說明：建立新文章\n```\n\n## 文章撰寫\n### 步驟教學\n[官網文件說明](https://hexo.io/zh-tw/docs/writing.html)\n請記得所有文章都會放在`source/_posts`中\n```git\nStep1.建立新文章\n$ hexo new [layout] <title>    //layout預設為post\n\nStep2.建立分類、標籤\n$ hexo new post categories     //建立分類\n$ hexo new post tags           //建立標籤\n示意圖如下\n```\n\n### 新增文章標籤、新增分類\n [教學文章](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)\n![](https://i.imgur.com/4SGFZ1n.png)\n補充：[markdown官方教學連結](https://markdown.tw/#img) [六角教學文](https://ithelp.ithome.com.tw/articles/10203758?sc=iThelpR)\n\n### 修改網頁左邊欄位顯示資料\n要在themes > _confiig.yml > menu 這邊修改 [文章連結](https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2)\n![](https://i.imgur.com/enUkxao.png)\n\n### 新增圖片\n目前先將圖片放置在imgur上，在使用markdown引入\n[Imgur簡介](https://free.com.tw/imgur/)\n![](https://i.imgur.com/zi19VxG.png)\n\n補充：firebase教學（有空再看）\n[利用firebase打造極速靜態博客](https://blog.erguotou.me/hexo-on-firebase.html)\n\n### 文章預覽功能\n`<!--more-->`\n<!--more-->以上的部分就是預覽會顯示的部分\n\n## 網站部署\n[六角學院影片教學](https://youtu.be/jOJI9ekTzK8?t=2110)\n### 部署步驟\n```git\n第一次使用hexo 記得要先下自動部署指令\nnpm install hexo-deployer-git --save\n接著  只要輸入下方指令就可以了\n$hexo d       #開啟部署\n```\n\n### 部署重點：\n1.請記得每個人僅有一個 `用戶名稱.github.io`的靜態網址\n範例：chun-wen.github.io\n特色：每個帳戶只有一個，能放在最根目錄的專案（通常就是用來放部落格）\nbranch：master\n\n2.若要部署其他專案的靜態網頁 [影片教學](https://youtu.be/jOJI9ekTzK8?t=2395)\n寫法：`用戶名稱.github.io/專案名稱`\n範例：chun-wen.github.io/F2E-PK-Demo/\n特色：數量無限，可以開無限個pages\nbranch：gh-pages\n\n## 套件安裝\n* 新增文章搜尋功能 [search格式名詞解釋](https://hsiangfeng.github.io/hexo/20190411/932826160/)\n### 安裝步驟 \n```git\nStep1.於根目錄下執行下面指令\nnpm install hexo-generator-searchdb --save\n\nStep2.在最目錄下的＿config.yml 貼上這段程式碼\nsearch:\n  path: search.json\n  field: post\n  format: html\n  limit: 10000\n\nStep3.最後到主題（theme）中開啟主題設定檔 (_config.yml)\n將Local search，中enable修改為true即可\n\n```\n* 留言板(Disqus comments) [影片教學](https://youtu.be/jOJI9ekTzK8?t=3384)\n跟著看文章教學做就OK [連結](https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more)\n補充：如何刪除新增的多餘頁面 [文章](https://https-chun-wen-github-io.disqus.com/admin/settings/advanced/)\n\n\n\n\n\n\n","source":"_posts/2019-08-26-Hexo網站建置筆記.md","raw":"---\ntitle: Hexo網站建置筆記\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 2844598168\ndate: 2019-08-26 21:19:59\n---\n\n參考資料：\n[架設Hexo+Github](https://hsiangfeng.github.io/hexo/20190411/932826160/)\n[Hexo-Next主題配置](https://theme-next.iissnan.com/getting-started.html)\n[用Hexo + Github Pages搭建個人部落格--小蛇蛇的詳細筆記](https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more)\n（蠻推薦第一次建置網站時參考這篇文章）\n[如何搭建個人 Blog 使用 Hexo + Gitpage](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)\n[六角共筆--使用 Hexo 建置網站](https://paper.dropbox.com/doc/Hexo---Ajm_olac_2CkcQD26G5RlqICAg-7zSMDUvNPffmjdilVv3AA)\n\n- - - -\n這篇文章僅會紀錄安裝過程中，發生錯誤部分，其餘教學內容可以參考[如何搭建個人 Blog 使用 Hexo + Gitpage](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)，自行架設即可。或是參考[六角影片教學](https://www.youtube.com/watch?v=jOJI9ekTzK8&t=1s)\n\n<!--more-->\n\n## 初始化檔案結構簡介\n![](https://i.imgur.com/dnSaiR2.png)圖片來源：[如何搭建個人 Blog 使用 Hexo + Gitpage\n](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)\n>Source、themes這兩部份最常使用，其他folder就看看吧～ \n\n\n## 部落格主題更換\n我這邊使用的主題是[Next](https://theme-next.iissnan.com/)\n![](https://i.imgur.com/b28TAf1.png)\n\n首先，我們如何更換預設主題呢？\nStep1.`終端機`先簽換到theme目錄下\n```git\n$ cd your-hexo-site \n//your-hexo-site指的是theme目錄位置\n\n//將主題複製下來\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n![](https://i.imgur.com/KzCP9rG.png)\nStep2.開啟_config.yml\n![](https://i.imgur.com/s34l8SO.png)\nStep3.更改主題資料夾名稱\n`theme: next`\nStep4.接著終端機開啟指令啟動server\n`hexo server`\n> 補充：[hexo本地測試運行重啟後頁面空白,提示: WARN No layout: index.html?](https://www.zhihu.com/question/38781463)  \n> Ａ：其實就是主題檔案名稱忘了更改  \n\n## 常用指令介紹\n[官網指令介紹](https://hexo.io/zh-tw/docs/commands)\n```git\n$ hexo generate  //產生靜態檔案\n$ hexo deploy    //部署網站\n$ hexo clean && $ hexo d -g  \n//刪除已生成的靜態頁面及快取檔案，並重新部署\n提醒：部署網站前會需要先產生靜態頁面\n\n組合技\n$ hexo d -g         //＊指令說明： # 產生靜態檔後部署\n$ hexo s -g        //＊指令說明： # 產生靜態檔後預覽\n$ hexo clean     //＊指令說明：刪除已生成的靜態頁面及快取檔案\n$ hexo new [title]  //＊指令說明：建立新文章\n```\n\n## 文章撰寫\n### 步驟教學\n[官網文件說明](https://hexo.io/zh-tw/docs/writing.html)\n請記得所有文章都會放在`source/_posts`中\n```git\nStep1.建立新文章\n$ hexo new [layout] <title>    //layout預設為post\n\nStep2.建立分類、標籤\n$ hexo new post categories     //建立分類\n$ hexo new post tags           //建立標籤\n示意圖如下\n```\n\n### 新增文章標籤、新增分類\n [教學文章](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)\n![](https://i.imgur.com/4SGFZ1n.png)\n補充：[markdown官方教學連結](https://markdown.tw/#img) [六角教學文](https://ithelp.ithome.com.tw/articles/10203758?sc=iThelpR)\n\n### 修改網頁左邊欄位顯示資料\n要在themes > _confiig.yml > menu 這邊修改 [文章連結](https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2)\n![](https://i.imgur.com/enUkxao.png)\n\n### 新增圖片\n目前先將圖片放置在imgur上，在使用markdown引入\n[Imgur簡介](https://free.com.tw/imgur/)\n![](https://i.imgur.com/zi19VxG.png)\n\n補充：firebase教學（有空再看）\n[利用firebase打造極速靜態博客](https://blog.erguotou.me/hexo-on-firebase.html)\n\n### 文章預覽功能\n`<!--more-->`\n<!--more-->以上的部分就是預覽會顯示的部分\n\n## 網站部署\n[六角學院影片教學](https://youtu.be/jOJI9ekTzK8?t=2110)\n### 部署步驟\n```git\n第一次使用hexo 記得要先下自動部署指令\nnpm install hexo-deployer-git --save\n接著  只要輸入下方指令就可以了\n$hexo d       #開啟部署\n```\n\n### 部署重點：\n1.請記得每個人僅有一個 `用戶名稱.github.io`的靜態網址\n範例：chun-wen.github.io\n特色：每個帳戶只有一個，能放在最根目錄的專案（通常就是用來放部落格）\nbranch：master\n\n2.若要部署其他專案的靜態網頁 [影片教學](https://youtu.be/jOJI9ekTzK8?t=2395)\n寫法：`用戶名稱.github.io/專案名稱`\n範例：chun-wen.github.io/F2E-PK-Demo/\n特色：數量無限，可以開無限個pages\nbranch：gh-pages\n\n## 套件安裝\n* 新增文章搜尋功能 [search格式名詞解釋](https://hsiangfeng.github.io/hexo/20190411/932826160/)\n### 安裝步驟 \n```git\nStep1.於根目錄下執行下面指令\nnpm install hexo-generator-searchdb --save\n\nStep2.在最目錄下的＿config.yml 貼上這段程式碼\nsearch:\n  path: search.json\n  field: post\n  format: html\n  limit: 10000\n\nStep3.最後到主題（theme）中開啟主題設定檔 (_config.yml)\n將Local search，中enable修改為true即可\n\n```\n* 留言板(Disqus comments) [影片教學](https://youtu.be/jOJI9ekTzK8?t=3384)\n跟著看文章教學做就OK [連結](https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more)\n補充：如何刪除新增的多餘頁面 [文章](https://https-chun-wen-github-io.disqus.com/admin/settings/advanced/)\n\n\n\n\n\n\n","slug":"2019-08-26-Hexo網站建置筆記","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t1w0007zqzid8952ogz","content":"<p>參考資料：<br><a href=\"https://hsiangfeng.github.io/hexo/20190411/932826160/\">架設Hexo+Github</a><br><a href=\"https://theme-next.iissnan.com/getting-started.html\">Hexo-Next主題配置</a><br><a href=\"https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more\">用Hexo + Github Pages搭建個人部落格–小蛇蛇的詳細筆記</a><br>（蠻推薦第一次建置網站時參考這篇文章）<br><a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage</a><br><a href=\"https://paper.dropbox.com/doc/Hexo---Ajm_olac_2CkcQD26G5RlqICAg-7zSMDUvNPffmjdilVv3AA\">六角共筆–使用 Hexo 建置網站</a></p>\n<hr>\n<p>這篇文章僅會紀錄安裝過程中，發生錯誤部分，其餘教學內容可以參考<a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage</a>，自行架設即可。或是參考<a href=\"https://www.youtube.com/watch?v=jOJI9ekTzK8&t=1s\">六角影片教學</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"初始化檔案結構簡介\"><a href=\"#初始化檔案結構簡介\" class=\"headerlink\" title=\"初始化檔案結構簡介\"></a>初始化檔案結構簡介</h2><p><img src=\"https://i.imgur.com/dnSaiR2.png\" alt=\"\">圖片來源：<a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage\n</a></p>\n<blockquote>\n<p>Source、themes這兩部份最常使用，其他folder就看看吧～ </p>\n</blockquote>\n<h2 id=\"部落格主題更換\"><a href=\"#部落格主題更換\" class=\"headerlink\" title=\"部落格主題更換\"></a>部落格主題更換</h2><p>我這邊使用的主題是<a href=\"https://theme-next.iissnan.com/\">Next</a><br><img src=\"https://i.imgur.com/b28TAf1.png\" alt=\"\"></p>\n<p>首先，我們如何更換預設主題呢？<br>Step1.<code>終端機</code>先簽換到theme目錄下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site </span><br><span class=\"line\">&#x2F;&#x2F;your-hexo-site指的是theme目錄位置</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;將主題複製下來</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/KzCP9rG.png\" alt=\"\"><br>Step2.開啟_config.yml<br><img src=\"https://i.imgur.com/s34l8SO.png\" alt=\"\"><br>Step3.更改主題資料夾名稱<br><code>theme: next</code><br>Step4.接著終端機開啟指令啟動server<br><code>hexo server</code></p>\n<blockquote>\n<p>補充：<a href=\"https://www.zhihu.com/question/38781463\">hexo本地測試運行重啟後頁面空白,提示: WARN No layout: index.html?</a><br>Ａ：其實就是主題檔案名稱忘了更改  </p>\n</blockquote>\n<h2 id=\"常用指令介紹\"><a href=\"#常用指令介紹\" class=\"headerlink\" title=\"常用指令介紹\"></a>常用指令介紹</h2><p><a href=\"https://hexo.io/zh-tw/docs/commands\">官網指令介紹</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate  &#x2F;&#x2F;產生靜態檔案</span><br><span class=\"line\">$ hexo deploy    &#x2F;&#x2F;部署網站</span><br><span class=\"line\">$ hexo clean &amp;&amp; $ hexo d -g  </span><br><span class=\"line\">&#x2F;&#x2F;刪除已生成的靜態頁面及快取檔案，並重新部署</span><br><span class=\"line\">提醒：部署網站前會需要先產生靜態頁面</span><br><span class=\"line\"></span><br><span class=\"line\">組合技</span><br><span class=\"line\">$ hexo d -g         &#x2F;&#x2F;＊指令說明： # 產生靜態檔後部署</span><br><span class=\"line\">$ hexo s -g        &#x2F;&#x2F;＊指令說明： # 產生靜態檔後預覽</span><br><span class=\"line\">$ hexo clean     &#x2F;&#x2F;＊指令說明：刪除已生成的靜態頁面及快取檔案</span><br><span class=\"line\">$ hexo new [title]  &#x2F;&#x2F;＊指令說明：建立新文章</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文章撰寫\"><a href=\"#文章撰寫\" class=\"headerlink\" title=\"文章撰寫\"></a>文章撰寫</h2><h3 id=\"步驟教學\"><a href=\"#步驟教學\" class=\"headerlink\" title=\"步驟教學\"></a>步驟教學</h3><p><a href=\"https://hexo.io/zh-tw/docs/writing.html\">官網文件說明</a><br>請記得所有文章都會放在<code>source/_posts</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step1.建立新文章</span><br><span class=\"line\">$ hexo new [layout] &lt;title&gt;    &#x2F;&#x2F;layout預設為post</span><br><span class=\"line\"></span><br><span class=\"line\">Step2.建立分類、標籤</span><br><span class=\"line\">$ hexo new post categories     &#x2F;&#x2F;建立分類</span><br><span class=\"line\">$ hexo new post tags           &#x2F;&#x2F;建立標籤</span><br><span class=\"line\">示意圖如下</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增文章標籤、新增分類\"><a href=\"#新增文章標籤、新增分類\" class=\"headerlink\" title=\"新增文章標籤、新增分類\"></a>新增文章標籤、新增分類</h3><p> <a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">教學文章</a><br><img src=\"https://i.imgur.com/4SGFZ1n.png\" alt=\"\"><br>補充：<a href=\"https://markdown.tw/#img\">markdown官方教學連結</a> <a href=\"https://ithelp.ithome.com.tw/articles/10203758?sc=iThelpR\">六角教學文</a></p>\n<h3 id=\"修改網頁左邊欄位顯示資料\"><a href=\"#修改網頁左邊欄位顯示資料\" class=\"headerlink\" title=\"修改網頁左邊欄位顯示資料\"></a>修改網頁左邊欄位顯示資料</h3><p>要在themes &gt; _confiig.yml &gt; menu 這邊修改 <a href=\"https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2\">文章連結</a><br><img src=\"https://i.imgur.com/enUkxao.png\" alt=\"\"></p>\n<h3 id=\"新增圖片\"><a href=\"#新增圖片\" class=\"headerlink\" title=\"新增圖片\"></a>新增圖片</h3><p>目前先將圖片放置在imgur上，在使用markdown引入<br><a href=\"https://free.com.tw/imgur/\">Imgur簡介</a><br><img src=\"https://i.imgur.com/zi19VxG.png\" alt=\"\"></p>\n<p>補充：firebase教學（有空再看）<br><a href=\"https://blog.erguotou.me/hexo-on-firebase.html\">利用firebase打造極速靜態博客</a></p>\n<h3 id=\"文章預覽功能\"><a href=\"#文章預覽功能\" class=\"headerlink\" title=\"文章預覽功能\"></a>文章預覽功能</h3><p><code>&lt;!--more--&gt;</code></p>\n<!--more-->以上的部分就是預覽會顯示的部分\n\n<h2 id=\"網站部署\"><a href=\"#網站部署\" class=\"headerlink\" title=\"網站部署\"></a>網站部署</h2><p><a href=\"https://youtu.be/jOJI9ekTzK8?t=2110\">六角學院影片教學</a></p>\n<h3 id=\"部署步驟\"><a href=\"#部署步驟\" class=\"headerlink\" title=\"部署步驟\"></a>部署步驟</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次使用hexo 記得要先下自動部署指令</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">接著  只要輸入下方指令就可以了</span><br><span class=\"line\">$hexo d       #開啟部署</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署重點：\"><a href=\"#部署重點：\" class=\"headerlink\" title=\"部署重點：\"></a>部署重點：</h3><p>1.請記得每個人僅有一個 <code>用戶名稱.github.io</code>的靜態網址<br>範例：chun-wen.github.io<br>特色：每個帳戶只有一個，能放在最根目錄的專案（通常就是用來放部落格）<br>branch：master</p>\n<p>2.若要部署其他專案的靜態網頁 <a href=\"https://youtu.be/jOJI9ekTzK8?t=2395\">影片教學</a><br>寫法：<code>用戶名稱.github.io/專案名稱</code><br>範例：chun-wen.github.io/F2E-PK-Demo/<br>特色：數量無限，可以開無限個pages<br>branch：gh-pages</p>\n<h2 id=\"套件安裝\"><a href=\"#套件安裝\" class=\"headerlink\" title=\"套件安裝\"></a>套件安裝</h2><ul>\n<li>新增文章搜尋功能 <a href=\"https://hsiangfeng.github.io/hexo/20190411/932826160/\">search格式名詞解釋</a><h3 id=\"安裝步驟\"><a href=\"#安裝步驟\" class=\"headerlink\" title=\"安裝步驟\"></a>安裝步驟</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step1.於根目錄下執行下面指令</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br><span class=\"line\"></span><br><span class=\"line\">Step2.在最目錄下的＿config.yml 貼上這段程式碼</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br><span class=\"line\"></span><br><span class=\"line\">Step3.最後到主題（theme）中開啟主題設定檔 (_config.yml)</span><br><span class=\"line\">將Local search，中enable修改為true即可</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>留言板(Disqus comments) <a href=\"https://youtu.be/jOJI9ekTzK8?t=3384\">影片教學</a><br>跟著看文章教學做就OK <a href=\"https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more\">連結</a><br>補充：如何刪除新增的多餘頁面 <a href=\"https://https-chun-wen-github-io.disqus.com/admin/settings/advanced/\">文章</a></li>\n</ul>\n","site":{"data":{}},"length":1967,"excerpt":"<p>參考資料：<br><a href=\"https://hsiangfeng.github.io/hexo/20190411/932826160/\">架設Hexo+Github</a><br><a href=\"https://theme-next.iissnan.com/getting-started.html\">Hexo-Next主題配置</a><br><a href=\"https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more\">用Hexo + Github Pages搭建個人部落格–小蛇蛇的詳細筆記</a><br>（蠻推薦第一次建置網站時參考這篇文章）<br><a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage</a><br><a href=\"https://paper.dropbox.com/doc/Hexo---Ajm_olac_2CkcQD26G5RlqICAg-7zSMDUvNPffmjdilVv3AA\">六角共筆–使用 Hexo 建置網站</a></p>\n<hr>\n<p>這篇文章僅會紀錄安裝過程中，發生錯誤部分，其餘教學內容可以參考<a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage</a>，自行架設即可。或是參考<a href=\"https://www.youtube.com/watch?v=jOJI9ekTzK8&t=1s\">六角影片教學</a></p>","more":"<h2 id=\"初始化檔案結構簡介\"><a href=\"#初始化檔案結構簡介\" class=\"headerlink\" title=\"初始化檔案結構簡介\"></a>初始化檔案結構簡介</h2><p><img src=\"https://i.imgur.com/dnSaiR2.png\" alt=\"\">圖片來源：<a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage\n</a></p>\n<blockquote>\n<p>Source、themes這兩部份最常使用，其他folder就看看吧～ </p>\n</blockquote>\n<h2 id=\"部落格主題更換\"><a href=\"#部落格主題更換\" class=\"headerlink\" title=\"部落格主題更換\"></a>部落格主題更換</h2><p>我這邊使用的主題是<a href=\"https://theme-next.iissnan.com/\">Next</a><br><img src=\"https://i.imgur.com/b28TAf1.png\" alt=\"\"></p>\n<p>首先，我們如何更換預設主題呢？<br>Step1.<code>終端機</code>先簽換到theme目錄下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd your-hexo-site </span><br><span class=\"line\">&#x2F;&#x2F;your-hexo-site指的是theme目錄位置</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;將主題複製下來</span><br><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/KzCP9rG.png\" alt=\"\"><br>Step2.開啟_config.yml<br><img src=\"https://i.imgur.com/s34l8SO.png\" alt=\"\"><br>Step3.更改主題資料夾名稱<br><code>theme: next</code><br>Step4.接著終端機開啟指令啟動server<br><code>hexo server</code></p>\n<blockquote>\n<p>補充：<a href=\"https://www.zhihu.com/question/38781463\">hexo本地測試運行重啟後頁面空白,提示: WARN No layout: index.html?</a><br>Ａ：其實就是主題檔案名稱忘了更改  </p>\n</blockquote>\n<h2 id=\"常用指令介紹\"><a href=\"#常用指令介紹\" class=\"headerlink\" title=\"常用指令介紹\"></a>常用指令介紹</h2><p><a href=\"https://hexo.io/zh-tw/docs/commands\">官網指令介紹</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate  &#x2F;&#x2F;產生靜態檔案</span><br><span class=\"line\">$ hexo deploy    &#x2F;&#x2F;部署網站</span><br><span class=\"line\">$ hexo clean &amp;&amp; $ hexo d -g  </span><br><span class=\"line\">&#x2F;&#x2F;刪除已生成的靜態頁面及快取檔案，並重新部署</span><br><span class=\"line\">提醒：部署網站前會需要先產生靜態頁面</span><br><span class=\"line\"></span><br><span class=\"line\">組合技</span><br><span class=\"line\">$ hexo d -g         &#x2F;&#x2F;＊指令說明： # 產生靜態檔後部署</span><br><span class=\"line\">$ hexo s -g        &#x2F;&#x2F;＊指令說明： # 產生靜態檔後預覽</span><br><span class=\"line\">$ hexo clean     &#x2F;&#x2F;＊指令說明：刪除已生成的靜態頁面及快取檔案</span><br><span class=\"line\">$ hexo new [title]  &#x2F;&#x2F;＊指令說明：建立新文章</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文章撰寫\"><a href=\"#文章撰寫\" class=\"headerlink\" title=\"文章撰寫\"></a>文章撰寫</h2><h3 id=\"步驟教學\"><a href=\"#步驟教學\" class=\"headerlink\" title=\"步驟教學\"></a>步驟教學</h3><p><a href=\"https://hexo.io/zh-tw/docs/writing.html\">官網文件說明</a><br>請記得所有文章都會放在<code>source/_posts</code>中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step1.建立新文章</span><br><span class=\"line\">$ hexo new [layout] &lt;title&gt;    &#x2F;&#x2F;layout預設為post</span><br><span class=\"line\"></span><br><span class=\"line\">Step2.建立分類、標籤</span><br><span class=\"line\">$ hexo new post categories     &#x2F;&#x2F;建立分類</span><br><span class=\"line\">$ hexo new post tags           &#x2F;&#x2F;建立標籤</span><br><span class=\"line\">示意圖如下</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增文章標籤、新增分類\"><a href=\"#新增文章標籤、新增分類\" class=\"headerlink\" title=\"新增文章標籤、新增分類\"></a>新增文章標籤、新增分類</h3><p> <a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">教學文章</a><br><img src=\"https://i.imgur.com/4SGFZ1n.png\" alt=\"\"><br>補充：<a href=\"https://markdown.tw/#img\">markdown官方教學連結</a> <a href=\"https://ithelp.ithome.com.tw/articles/10203758?sc=iThelpR\">六角教學文</a></p>\n<h3 id=\"修改網頁左邊欄位顯示資料\"><a href=\"#修改網頁左邊欄位顯示資料\" class=\"headerlink\" title=\"修改網頁左邊欄位顯示資料\"></a>修改網頁左邊欄位顯示資料</h3><p>要在themes &gt; _confiig.yml &gt; menu 這邊修改 <a href=\"https://github.com/iissnan/hexo-theme-next/wiki/%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE%E4%BA%91%E9%A1%B5%E9%9D%A2\">文章連結</a><br><img src=\"https://i.imgur.com/enUkxao.png\" alt=\"\"></p>\n<h3 id=\"新增圖片\"><a href=\"#新增圖片\" class=\"headerlink\" title=\"新增圖片\"></a>新增圖片</h3><p>目前先將圖片放置在imgur上，在使用markdown引入<br><a href=\"https://free.com.tw/imgur/\">Imgur簡介</a><br><img src=\"https://i.imgur.com/zi19VxG.png\" alt=\"\"></p>\n<p>補充：firebase教學（有空再看）<br><a href=\"https://blog.erguotou.me/hexo-on-firebase.html\">利用firebase打造極速靜態博客</a></p>\n<h3 id=\"文章預覽功能\"><a href=\"#文章預覽功能\" class=\"headerlink\" title=\"文章預覽功能\"></a>文章預覽功能</h3><p><code>&lt;!--more--&gt;</code></p>\n<!--more-->以上的部分就是預覽會顯示的部分\n\n<h2 id=\"網站部署\"><a href=\"#網站部署\" class=\"headerlink\" title=\"網站部署\"></a>網站部署</h2><p><a href=\"https://youtu.be/jOJI9ekTzK8?t=2110\">六角學院影片教學</a></p>\n<h3 id=\"部署步驟\"><a href=\"#部署步驟\" class=\"headerlink\" title=\"部署步驟\"></a>部署步驟</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次使用hexo 記得要先下自動部署指令</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">接著  只要輸入下方指令就可以了</span><br><span class=\"line\">$hexo d       #開啟部署</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署重點：\"><a href=\"#部署重點：\" class=\"headerlink\" title=\"部署重點：\"></a>部署重點：</h3><p>1.請記得每個人僅有一個 <code>用戶名稱.github.io</code>的靜態網址<br>範例：chun-wen.github.io<br>特色：每個帳戶只有一個，能放在最根目錄的專案（通常就是用來放部落格）<br>branch：master</p>\n<p>2.若要部署其他專案的靜態網頁 <a href=\"https://youtu.be/jOJI9ekTzK8?t=2395\">影片教學</a><br>寫法：<code>用戶名稱.github.io/專案名稱</code><br>範例：chun-wen.github.io/F2E-PK-Demo/<br>特色：數量無限，可以開無限個pages<br>branch：gh-pages</p>\n<h2 id=\"套件安裝\"><a href=\"#套件安裝\" class=\"headerlink\" title=\"套件安裝\"></a>套件安裝</h2><ul>\n<li>新增文章搜尋功能 <a href=\"https://hsiangfeng.github.io/hexo/20190411/932826160/\">search格式名詞解釋</a><h3 id=\"安裝步驟\"><a href=\"#安裝步驟\" class=\"headerlink\" title=\"安裝步驟\"></a>安裝步驟</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Step1.於根目錄下執行下面指令</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br><span class=\"line\"></span><br><span class=\"line\">Step2.在最目錄下的＿config.yml 貼上這段程式碼</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br><span class=\"line\"></span><br><span class=\"line\">Step3.最後到主題（theme）中開啟主題設定檔 (_config.yml)</span><br><span class=\"line\">將Local search，中enable修改為true即可</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>留言板(Disqus comments) <a href=\"https://youtu.be/jOJI9ekTzK8?t=3384\">影片教學</a><br>跟著看文章教學做就OK <a href=\"https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/#more\">連結</a><br>補充：如何刪除新增的多餘頁面 <a href=\"https://https-chun-wen-github-io.disqus.com/admin/settings/advanced/\">文章</a></li>\n</ul>"},{"title":"JavaScript 陣列處理方法","abbrlink":1975097829,"date":"2019-08-30T04:00:47.000Z","_content":"\n參考資料：\n[卡斯伯七種常見陣列處理方法](https://wcc723.github.io/javascript/2017/06/29/es6-native-array/)\n[ JavaScript  陣列方法簡介](https://oranwind.org/post-post-22/)\n- - - -\n在閱讀完卡斯伯老師文章，我將整理文章中處理陣列方法，並搭配自己的練習輔助說明。對了補充說明：陣列處理方式在IE8以前是不支援的！\n\n<!--more-->\n首先，我們先簡單寫一個陣列\n```javascript\nvar restaurant=[\n  {\n    option:'taiwanese',\n    price:100,\n    location:'Taipei'\n  },\n  {\n    option:'Korean',\n    price:200,\n    location:'Yilan'\n  },\n  {\n    option:'Thailand',\n    price:300,\n    location:'Taoyuan'\n  },\n  {\n    option:'American',\n    price:450,\n    location:'Taichung'\n  },\n  {\n    option:'Italian',\n    price:900,\n    location:'Kaohsiung'\n  },\n]\n```\n### forEach（）方法\n簡介：會對陣列每個元素都執行一次，但不會有回傳值\n```javascript\n   var forEach = \n   restaurant.forEach(function (item, index, array) {\n            return item; //沒有東西\n   })\n   console.log(forEach) //undefined\n\n   var forEach = \n   restaurant.forEach(function (item, index, array) {\n            item.price = item.price+100;\n            // console.log(item.option)\n            // console.log(index)\n            // console.log(array)\n            console.log(item.price); //200 300 400 ....\n   })\n```\n> 說明：item以這裡為範例的話，代表物件中的值  \n### map（）方法\n簡介：跟forEach相比多了回傳值，並透過函式回傳值組合成一個新的陣列\n`適合將原始的變數運算後重新組合一個新的陣列`\n特性：\n1.如果不回傳則是`undefined`\n2,回傳數量等於原始陣列長度\n```javascript\nvar mapArray=restaurant.map(function (item,index,array) { \n            if( item.price=== 900){\n            return `${item.option}好貴`\n            }\n            else{\n              // return false   //不符合條件的會回傳false\n              // return `${item.option}好便宜`\n            }\n           });\n           console.log(mapArray)\n說明：else{}可以選擇return false或 return `${item.option}好便宜`\n並用console.log(mapArray)觀察結果\n```\n> 補充：return 一個值必須使用有一個變數接受資料！  \n\n### filter（）方法\n會回傳符合條件的元素，得到一個新陣列。若不符合條件則會得到一個空陣列。適合用在搜尋與過濾資料  `會獲得一個陣列`\n```javascript\n var filterArray=\n restaurant.filter(function(item,index,array){\n return item.price>=300; //取得價錢大於300餐廳\n })\n console.log(filterArray) //(3)[{…}, {…}, {…}]\n\n```\n### find（）方法\n只會回傳一次值，且是第一個滿足條件的元素值，若沒有則會回傳`undefined`\n```javascript\nvar findArray =\nrestaurant.find(function(item,index,array){\n            return item.option==='Thailand'\n})\n\nconsole.log(findArray) \n//{option: \"Thailand\", price: 300, location: \"Taoyuan\"}\n```\n### every（）方法\n用來檢查所有陣列是否符合條件，僅會回傳一個值`true`或`false`\n```javascript\nvar everyArray = \nrestaurant.every(function (item, index) {\n            return item.price >= 100\n          });\n          console.log(everyArray) //true\n```\n### some（）方法\n都是回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合。\n```javascript\nvar someArray = \nrestaurant.some(function (item, index) {\n            return item.price > 300\n          });\n          console.log(someArray); //true\n```\n### reduce（）方法\n將Accumulator及陣列中每項元素（由左至右）傳入回呼函式，`並產生一個值`\n參數介紹：\nAccumulator:：\n前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值\ncurrentValue: 當前變數\ncurrentIndex: 當前索引\narray: 全部陣列\n```javascript\nvar reduceArray=\nrestaurant.reduce(function(accumulator,currentValue,currentIndex,array){\n // console.log(accumulator,currentValue,currentIndex,array);\n            return accumulator +currentValue.price\n          },0)\nconsole.log(reduceArray); //累加的值為1950\n\n```\n\n- - - -\n下面內容為文章內容以外，更新一些常用陣列方法\n### Sort（）方法\n[Sort影片教學](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324) [MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n這要用來針對資料進行排序，會return -1、0、1       `會回傳一個陣列`\n原理說明：\n預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。\n穩定排序：指的是如果比較數值相同，不會調整原始資料順序\n用法有兩種：\n1.直接針對資料sort（），通常用在value、數值           =>預設升冪排列\n2.針對資料進行減法運算（比較推薦使用，如下範例）\n```javascript\nlet ary=[1,110,23,54]\nary.sort((a,b)=>a.year-b.year); // 1,0,-1\n```\n補充說明：升冪（以a為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 a 小於 b) {\n    return -1;   \n  }\n  if (在某排序標準下 a 大於 b) {\n    return 1;     \n  }\n  // a 必須等於 b\n  return 0;\n}\n```\n補充說明：降冪（以b為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 b 小於 a) {\n    return -1;   \n  }\n  if (在某排序標準下 b 大於 a) {\n    return 1;     \n  }\n  // b 必須等於 a\n  return 0;\n}\n```\n範例（搭配三元運算子）：\n```javascript\n     let ans = inventors.sort(function(a,b){\n     return (a.year > b.year) ? 1: (b.year > a.year) ? -1:0           \n})\n     console.table(ans);\n```\n### includes（）\n這個語法是ES7提供，會判斷陣列是否包含特定的元素，並以此來回傳true或false。\n語法：`arr.includes(searchElement[, fromIndex])`\n特性：\n1.當fromIndex為負數，並且超過陣列長度則會搜尋整個陣列\n2.當fromIndex為正數，並且超過陣列長度則會回傳false\n3.當fromIndex為負數，但沒有超過陣列長度則會將`array.length +fromIndex`開始向後搜尋\n```javascript\nvar ary =[1,2,3]\nconsole.log(ary.includes(2))  //true\nconsole.log(ary.includes(4))  //false\n\n[3, 2, 1].includes(3, -3);     //true\n[3, 2, 1].includes(3, -2);     //false\n```\n### indexOf（）\n會回傳給定元素於陣列中`第一個被找到之索引`，若不存在於陣列中則回傳 -1。 [MDN介紹](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n語法：\n`arr.indexOf(searchElement[, fromIndex])`\n特點：\n1.fromIndex為正數，則會從左到右開始搜尋\n2.fromIndex為負數，則會從陣列尾端開始搜尋，會搜尋到最後一個的索引值為 -1\n```javascript\nvar array = [2, 9, 9];\narray.indexOf(2);     // 0\narray.indexOf(7);     // -1\narray.indexOf(9, 2);  // 2\narray.indexOf(2, -1); // -1   出現-1表示搜尋不存在\narray.indexOf(2, -3); // 0\n```\n### slice（）\n會回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。而原本的陣列將不會被修改。 [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n語法：\n`arr.slice([begin[, end]])`\n特點：\nBegin : 預設起始索引為0，若為負數則從最末端開始\nEnd：預設起始索引為0，若為負數則從最末端開始\n舉例來說，slice(1,4)提取了陣列中第二個元素至第四個元素前為止（元素索引 1、2 以及 3）來拷貝。\n```javascript\nvar fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\nvar slice =fruits.slice(0,2). //[\"Banana\",\"Orange\"]\n\n```\n### splice（）\n藉由刪除既有元素並／或加入新元素來改變一個陣列的內容。會回傳一個陣列\n[MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n語法：\n`array.splice(start[, deleteCount[, item1[, item2[, …]]]])`\n特點：\nStart 增加/刪除項目的位置，負數代表從後方算起。\ndeleteCount 刪除的個數，如為0或沒有填寫則不會刪除。\nItem… 添加的新項目。\n```javascript\nvar myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(1,2,'chunwen')\n\nconsole.log(myFish)   //[\"angel\", \"chunwen\", \"sturgeon\"]\nconsole.log(removed)  //[\"clown\", \"mandarin\"]\n```\n### join（）\n將所有的元素連接、合併成一個字串，並回傳此字串 [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n語法：\n`arr.join([separator])`\n特點：\nSperator若未傳入參數預設是用逗點隔開`,`\n```javascript\nvar a = ['Wind', 'Rain', 'Fire'];\na.join();      // 'Wind,Rain,Fire'\na.join(', ');  // 'Wind, Rain, Fire'\na.join(' + '); // 'Wind + Rain + Fire'\na.join('');    // 'WindRainFire'\n```\n### reverse（）\n反轉陣列，會改變原本陣列內容！ [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n語法：\n`a.reverse()`\n```javascript\nvar food=['apple','book','cat'];\nvar reverseFood = food.reverse();\n\nconsole.log(food)         //[\"cat\", \"book\", \"apple\"]\nconsole.log(reverseFood) //[\"cat\", \"book\", \"apple\"]\n```\n\n\n","source":"_posts/2019-08-30-JavaScript 陣列處理方法.md","raw":"---\ntitle: JavaScript 陣列處理方法\ntags:\n  - array\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 1975097829\ndate:\n---\n\n參考資料：\n[卡斯伯七種常見陣列處理方法](https://wcc723.github.io/javascript/2017/06/29/es6-native-array/)\n[ JavaScript  陣列方法簡介](https://oranwind.org/post-post-22/)\n- - - -\n在閱讀完卡斯伯老師文章，我將整理文章中處理陣列方法，並搭配自己的練習輔助說明。對了補充說明：陣列處理方式在IE8以前是不支援的！\n\n<!--more-->\n首先，我們先簡單寫一個陣列\n```javascript\nvar restaurant=[\n  {\n    option:'taiwanese',\n    price:100,\n    location:'Taipei'\n  },\n  {\n    option:'Korean',\n    price:200,\n    location:'Yilan'\n  },\n  {\n    option:'Thailand',\n    price:300,\n    location:'Taoyuan'\n  },\n  {\n    option:'American',\n    price:450,\n    location:'Taichung'\n  },\n  {\n    option:'Italian',\n    price:900,\n    location:'Kaohsiung'\n  },\n]\n```\n### forEach（）方法\n簡介：會對陣列每個元素都執行一次，但不會有回傳值\n```javascript\n   var forEach = \n   restaurant.forEach(function (item, index, array) {\n            return item; //沒有東西\n   })\n   console.log(forEach) //undefined\n\n   var forEach = \n   restaurant.forEach(function (item, index, array) {\n            item.price = item.price+100;\n            // console.log(item.option)\n            // console.log(index)\n            // console.log(array)\n            console.log(item.price); //200 300 400 ....\n   })\n```\n> 說明：item以這裡為範例的話，代表物件中的值  \n### map（）方法\n簡介：跟forEach相比多了回傳值，並透過函式回傳值組合成一個新的陣列\n`適合將原始的變數運算後重新組合一個新的陣列`\n特性：\n1.如果不回傳則是`undefined`\n2,回傳數量等於原始陣列長度\n```javascript\nvar mapArray=restaurant.map(function (item,index,array) { \n            if( item.price=== 900){\n            return `${item.option}好貴`\n            }\n            else{\n              // return false   //不符合條件的會回傳false\n              // return `${item.option}好便宜`\n            }\n           });\n           console.log(mapArray)\n說明：else{}可以選擇return false或 return `${item.option}好便宜`\n並用console.log(mapArray)觀察結果\n```\n> 補充：return 一個值必須使用有一個變數接受資料！  \n\n### filter（）方法\n會回傳符合條件的元素，得到一個新陣列。若不符合條件則會得到一個空陣列。適合用在搜尋與過濾資料  `會獲得一個陣列`\n```javascript\n var filterArray=\n restaurant.filter(function(item,index,array){\n return item.price>=300; //取得價錢大於300餐廳\n })\n console.log(filterArray) //(3)[{…}, {…}, {…}]\n\n```\n### find（）方法\n只會回傳一次值，且是第一個滿足條件的元素值，若沒有則會回傳`undefined`\n```javascript\nvar findArray =\nrestaurant.find(function(item,index,array){\n            return item.option==='Thailand'\n})\n\nconsole.log(findArray) \n//{option: \"Thailand\", price: 300, location: \"Taoyuan\"}\n```\n### every（）方法\n用來檢查所有陣列是否符合條件，僅會回傳一個值`true`或`false`\n```javascript\nvar everyArray = \nrestaurant.every(function (item, index) {\n            return item.price >= 100\n          });\n          console.log(everyArray) //true\n```\n### some（）方法\n都是回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合。\n```javascript\nvar someArray = \nrestaurant.some(function (item, index) {\n            return item.price > 300\n          });\n          console.log(someArray); //true\n```\n### reduce（）方法\n將Accumulator及陣列中每項元素（由左至右）傳入回呼函式，`並產生一個值`\n參數介紹：\nAccumulator:：\n前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值\ncurrentValue: 當前變數\ncurrentIndex: 當前索引\narray: 全部陣列\n```javascript\nvar reduceArray=\nrestaurant.reduce(function(accumulator,currentValue,currentIndex,array){\n // console.log(accumulator,currentValue,currentIndex,array);\n            return accumulator +currentValue.price\n          },0)\nconsole.log(reduceArray); //累加的值為1950\n\n```\n\n- - - -\n下面內容為文章內容以外，更新一些常用陣列方法\n### Sort（）方法\n[Sort影片教學](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324) [MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n這要用來針對資料進行排序，會return -1、0、1       `會回傳一個陣列`\n原理說明：\n預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。\n穩定排序：指的是如果比較數值相同，不會調整原始資料順序\n用法有兩種：\n1.直接針對資料sort（），通常用在value、數值           =>預設升冪排列\n2.針對資料進行減法運算（比較推薦使用，如下範例）\n```javascript\nlet ary=[1,110,23,54]\nary.sort((a,b)=>a.year-b.year); // 1,0,-1\n```\n補充說明：升冪（以a為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 a 小於 b) {\n    return -1;   \n  }\n  if (在某排序標準下 a 大於 b) {\n    return 1;     \n  }\n  // a 必須等於 b\n  return 0;\n}\n```\n補充說明：降冪（以b為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 b 小於 a) {\n    return -1;   \n  }\n  if (在某排序標準下 b 大於 a) {\n    return 1;     \n  }\n  // b 必須等於 a\n  return 0;\n}\n```\n範例（搭配三元運算子）：\n```javascript\n     let ans = inventors.sort(function(a,b){\n     return (a.year > b.year) ? 1: (b.year > a.year) ? -1:0           \n})\n     console.table(ans);\n```\n### includes（）\n這個語法是ES7提供，會判斷陣列是否包含特定的元素，並以此來回傳true或false。\n語法：`arr.includes(searchElement[, fromIndex])`\n特性：\n1.當fromIndex為負數，並且超過陣列長度則會搜尋整個陣列\n2.當fromIndex為正數，並且超過陣列長度則會回傳false\n3.當fromIndex為負數，但沒有超過陣列長度則會將`array.length +fromIndex`開始向後搜尋\n```javascript\nvar ary =[1,2,3]\nconsole.log(ary.includes(2))  //true\nconsole.log(ary.includes(4))  //false\n\n[3, 2, 1].includes(3, -3);     //true\n[3, 2, 1].includes(3, -2);     //false\n```\n### indexOf（）\n會回傳給定元素於陣列中`第一個被找到之索引`，若不存在於陣列中則回傳 -1。 [MDN介紹](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n語法：\n`arr.indexOf(searchElement[, fromIndex])`\n特點：\n1.fromIndex為正數，則會從左到右開始搜尋\n2.fromIndex為負數，則會從陣列尾端開始搜尋，會搜尋到最後一個的索引值為 -1\n```javascript\nvar array = [2, 9, 9];\narray.indexOf(2);     // 0\narray.indexOf(7);     // -1\narray.indexOf(9, 2);  // 2\narray.indexOf(2, -1); // -1   出現-1表示搜尋不存在\narray.indexOf(2, -3); // 0\n```\n### slice（）\n會回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。而原本的陣列將不會被修改。 [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)\n語法：\n`arr.slice([begin[, end]])`\n特點：\nBegin : 預設起始索引為0，若為負數則從最末端開始\nEnd：預設起始索引為0，若為負數則從最末端開始\n舉例來說，slice(1,4)提取了陣列中第二個元素至第四個元素前為止（元素索引 1、2 以及 3）來拷貝。\n```javascript\nvar fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\nvar slice =fruits.slice(0,2). //[\"Banana\",\"Orange\"]\n\n```\n### splice（）\n藉由刪除既有元素並／或加入新元素來改變一個陣列的內容。會回傳一個陣列\n[MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\n語法：\n`array.splice(start[, deleteCount[, item1[, item2[, …]]]])`\n特點：\nStart 增加/刪除項目的位置，負數代表從後方算起。\ndeleteCount 刪除的個數，如為0或沒有填寫則不會刪除。\nItem… 添加的新項目。\n```javascript\nvar myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(1,2,'chunwen')\n\nconsole.log(myFish)   //[\"angel\", \"chunwen\", \"sturgeon\"]\nconsole.log(removed)  //[\"clown\", \"mandarin\"]\n```\n### join（）\n將所有的元素連接、合併成一個字串，並回傳此字串 [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n語法：\n`arr.join([separator])`\n特點：\nSperator若未傳入參數預設是用逗點隔開`,`\n```javascript\nvar a = ['Wind', 'Rain', 'Fire'];\na.join();      // 'Wind,Rain,Fire'\na.join(', ');  // 'Wind, Rain, Fire'\na.join(' + '); // 'Wind + Rain + Fire'\na.join('');    // 'WindRainFire'\n```\n### reverse（）\n反轉陣列，會改變原本陣列內容！ [MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n語法：\n`a.reverse()`\n```javascript\nvar food=['apple','book','cat'];\nvar reverseFood = food.reverse();\n\nconsole.log(food)         //[\"cat\", \"book\", \"apple\"]\nconsole.log(reverseFood) //[\"cat\", \"book\", \"apple\"]\n```\n\n\n","slug":"2019-08-30-JavaScript 陣列處理方法","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t1x0008zqzi337h3pdx","content":"<p>參考資料：<br><a href=\"https://wcc723.github.io/javascript/2017/06/29/es6-native-array/\">卡斯伯七種常見陣列處理方法</a><br><a href=\"https://oranwind.org/post-post-22/\"> JavaScript  陣列方法簡介</a></p>\n<hr>\n<p>在閱讀完卡斯伯老師文章，我將整理文章中處理陣列方法，並搭配自己的練習輔助說明。對了補充說明：陣列處理方式在IE8以前是不支援的！</p>\n<span id=\"more\"></span>\n<p>首先，我們先簡單寫一個陣列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> restaurant=[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;taiwanese&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">100</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Taipei&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;Korean&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">200</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Yilan&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;Thailand&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">300</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Taoyuan&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;American&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">450</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Taichung&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;Italian&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">900</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Kaohsiung&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"forEach（）方法\"><a href=\"#forEach（）方法\" class=\"headerlink\" title=\"forEach（）方法\"></a>forEach（）方法</h3><p>簡介：會對陣列每個元素都執行一次，但不會有回傳值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> forEach = </span><br><span class=\"line\">restaurant.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> item; <span class=\"comment\">//沒有東西</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(forEach) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forEach = </span><br><span class=\"line\">restaurant.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) </span>&#123;</span><br><span class=\"line\">         item.price = item.price+<span class=\"number\">100</span>;</span><br><span class=\"line\">         <span class=\"comment\">// console.log(item.option)</span></span><br><span class=\"line\">         <span class=\"comment\">// console.log(index)</span></span><br><span class=\"line\">         <span class=\"comment\">// console.log(array)</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(item.price); <span class=\"comment\">//200 300 400 ....</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>說明：item以這裡為範例的話，代表物件中的值  </p>\n</blockquote>\n<h3 id=\"map（）方法\"><a href=\"#map（）方法\" class=\"headerlink\" title=\"map（）方法\"></a>map（）方法</h3><p>簡介：跟forEach相比多了回傳值，並透過函式回傳值組合成一個新的陣列<br><code>適合將原始的變數運算後重新組合一個新的陣列</code><br>特性：<br>1.如果不回傳則是<code>undefined</code><br>2,回傳數量等於原始陣列長度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mapArray=restaurant.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,array</span>) </span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>( item.price=== <span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;item.option&#125;</span>好貴`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              <span class=\"comment\">// return false   //不符合條件的會回傳false</span></span><br><span class=\"line\">              <span class=\"comment\">// return `$&#123;item.option&#125;好便宜`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(mapArray)</span><br><span class=\"line\">說明：<span class=\"keyword\">else</span>&#123;&#125;可以選擇<span class=\"keyword\">return</span> <span class=\"literal\">false</span>或 <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;item.option&#125;</span>好便宜`</span></span><br><span class=\"line\">並用<span class=\"built_in\">console</span>.log(mapArray)觀察結果</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：return 一個值必須使用有一個變數接受資料！  </p>\n</blockquote>\n<h3 id=\"filter（）方法\"><a href=\"#filter（）方法\" class=\"headerlink\" title=\"filter（）方法\"></a>filter（）方法</h3><p>會回傳符合條件的元素，得到一個新陣列。若不符合條件則會得到一個空陣列。適合用在搜尋與過濾資料  <code>會獲得一個陣列</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filterArray=</span><br><span class=\"line\">restaurant.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> item.price&gt;=<span class=\"number\">300</span>; <span class=\"comment\">//取得價錢大於300餐廳</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filterArray) <span class=\"comment\">//(3)[&#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"find（）方法\"><a href=\"#find（）方法\" class=\"headerlink\" title=\"find（）方法\"></a>find（）方法</h3><p>只會回傳一次值，且是第一個滿足條件的元素值，若沒有則會回傳<code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findArray =</span><br><span class=\"line\">restaurant.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.option===<span class=\"string\">&#x27;Thailand&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findArray) </span><br><span class=\"line\"><span class=\"comment\">//&#123;option: &quot;Thailand&quot;, price: 300, location: &quot;Taoyuan&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"every（）方法\"><a href=\"#every（）方法\" class=\"headerlink\" title=\"every（）方法\"></a>every（）方法</h3><p>用來檢查所有陣列是否符合條件，僅會回傳一個值<code>true</code>或<code>false</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> everyArray = </span><br><span class=\"line\">restaurant.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(everyArray) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"some（）方法\"><a href=\"#some（）方法\" class=\"headerlink\" title=\"some（）方法\"></a>some（）方法</h3><p>都是回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someArray = </span><br><span class=\"line\">restaurant.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.price &gt; <span class=\"number\">300</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(someArray); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce（）方法\"><a href=\"#reduce（）方法\" class=\"headerlink\" title=\"reduce（）方法\"></a>reduce（）方法</h3><p>將Accumulator及陣列中每項元素（由左至右）傳入回呼函式，<code>並產生一個值</code><br>參數介紹：<br>Accumulator:：<br>前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值<br>currentValue: 當前變數<br>currentIndex: 當前索引<br>array: 全部陣列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reduceArray=</span><br><span class=\"line\">restaurant.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator,currentValue,currentIndex,array</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// console.log(accumulator,currentValue,currentIndex,array);</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> accumulator +currentValue.price</span><br><span class=\"line\">          &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reduceArray); <span class=\"comment\">//累加的值為1950</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>下面內容為文章內容以外，更新一些常用陣列方法</p>\n<h3 id=\"Sort（）方法\"><a href=\"#Sort（）方法\" class=\"headerlink\" title=\"Sort（）方法\"></a>Sort（）方法</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324\">Sort影片教學</a> <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">MDN參考資料</a><br>這要用來針對資料進行排序，會return -1、0、1       <code>會回傳一個陣列</code><br>原理說明：<br>預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。<br>穩定排序：指的是如果比較數值相同，不會調整原始資料順序<br>用法有兩種：<br>1.直接針對資料sort（），通常用在value、數值           =&gt;預設升冪排列<br>2.針對資料進行減法運算（比較推薦使用，如下範例）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[<span class=\"number\">1</span>,<span class=\"number\">110</span>,<span class=\"number\">23</span>,<span class=\"number\">54</span>]</span><br><span class=\"line\">ary.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a.year-b.year); <span class=\"comment\">// 1,0,-1</span></span><br></pre></td></tr></table></figure>\n<p>補充說明：升冪（以a為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 小於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 大於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// a 必須等於 b</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>補充說明：降冪（以b為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 小於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 大於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// b 必須等於 a</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>範例（搭配三元運算子）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">let</span> ans = inventors.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (a.year &gt; b.year) ? <span class=\"number\">1</span>: (b.year &gt; a.year) ? -<span class=\"number\">1</span>:<span class=\"number\">0</span>           </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.table(ans);</span><br></pre></td></tr></table></figure>\n<h3 id=\"includes（）\"><a href=\"#includes（）\" class=\"headerlink\" title=\"includes（）\"></a>includes（）</h3><p>這個語法是ES7提供，會判斷陣列是否包含特定的元素，並以此來回傳true或false。<br>語法：<code>arr.includes(searchElement[, fromIndex])</code><br>特性：<br>1.當fromIndex為負數，並且超過陣列長度則會搜尋整個陣列<br>2.當fromIndex為正數，並且超過陣列長度則會回傳false<br>3.當fromIndex為負數，但沒有超過陣列長度則會將<code>array.length +fromIndex</code>開始向後搜尋</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.includes(<span class=\"number\">2</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.includes(<span class=\"number\">4</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>].includes(<span class=\"number\">3</span>, -<span class=\"number\">3</span>);     <span class=\"comment\">//true</span></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>].includes(<span class=\"number\">3</span>, -<span class=\"number\">2</span>);     <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"indexOf（）\"><a href=\"#indexOf（）\" class=\"headerlink\" title=\"indexOf（）\"></a>indexOf（）</h3><p>會回傳給定元素於陣列中<code>第一個被找到之索引</code>，若不存在於陣列中則回傳 -1。 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">MDN介紹</a><br>語法：<br><code>arr.indexOf(searchElement[, fromIndex])</code><br>特點：<br>1.fromIndex為正數，則會從左到右開始搜尋<br>2.fromIndex為負數，則會從陣列尾端開始搜尋，會搜尋到最後一個的索引值為 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">array.indexOf(<span class=\"number\">2</span>);     <span class=\"comment\">// 0</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">7</span>);     <span class=\"comment\">// -1</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">9</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// 2</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">2</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// -1   出現-1表示搜尋不存在</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">2</span>, -<span class=\"number\">3</span>); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"slice（）\"><a href=\"#slice（）\" class=\"headerlink\" title=\"slice（）\"></a>slice（）</h3><p>會回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。而原本的陣列將不會被修改。 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">MDN</a><br>語法：<br><code>arr.slice([begin[, end]])</code><br>特點：<br>Begin : 預設起始索引為0，若為負數則從最末端開始<br>End：預設起始索引為0，若為負數則從最末端開始<br>舉例來說，slice(1,4)提取了陣列中第二個元素至第四個元素前為止（元素索引 1、2 以及 3）來拷貝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">&#x27;Banana&#x27;</span>, <span class=\"string\">&#x27;Orange&#x27;</span>, <span class=\"string\">&#x27;Lemon&#x27;</span>, <span class=\"string\">&#x27;Apple&#x27;</span>, <span class=\"string\">&#x27;Mango&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice =fruits.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>). <span class=\"comment\">//[&quot;Banana&quot;,&quot;Orange&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"splice（）\"><a href=\"#splice（）\" class=\"headerlink\" title=\"splice（）\"></a>splice（）</h3><p>藉由刪除既有元素並／或加入新元素來改變一個陣列的內容。會回傳一個陣列<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">MDN</a><br>語法：<br><code>array.splice(start[, deleteCount[, item1[, item2[, …]]]])</code><br>特點：<br>Start 增加/刪除項目的位置，負數代表從後方算起。<br>deleteCount 刪除的個數，如為0或沒有填寫則不會刪除。<br>Item… 添加的新項目。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myFish = [<span class=\"string\">&#x27;angel&#x27;</span>, <span class=\"string\">&#x27;clown&#x27;</span>, <span class=\"string\">&#x27;mandarin&#x27;</span>, <span class=\"string\">&#x27;sturgeon&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> removed = myFish.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;chunwen&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFish)   <span class=\"comment\">//[&quot;angel&quot;, &quot;chunwen&quot;, &quot;sturgeon&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed)  <span class=\"comment\">//[&quot;clown&quot;, &quot;mandarin&quot;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"join（）\"><a href=\"#join（）\" class=\"headerlink\" title=\"join（）\"></a>join（）</h3><p>將所有的元素連接、合併成一個字串，並回傳此字串 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/join\">MDN</a><br>語法：<br><code>arr.join([separator])</code><br>特點：<br>Sperator若未傳入參數預設是用逗點隔開<code>,</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">&#x27;Wind&#x27;</span>, <span class=\"string\">&#x27;Rain&#x27;</span>, <span class=\"string\">&#x27;Fire&#x27;</span>];</span><br><span class=\"line\">a.join();      <span class=\"comment\">// &#x27;Wind,Rain,Fire&#x27;</span></span><br><span class=\"line\">a.join(<span class=\"string\">&#x27;, &#x27;</span>);  <span class=\"comment\">// &#x27;Wind, Rain, Fire&#x27;</span></span><br><span class=\"line\">a.join(<span class=\"string\">&#x27; + &#x27;</span>); <span class=\"comment\">// &#x27;Wind + Rain + Fire&#x27;</span></span><br><span class=\"line\">a.join(<span class=\"string\">&#x27;&#x27;</span>);    <span class=\"comment\">// &#x27;WindRainFire&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reverse（）\"><a href=\"#reverse（）\" class=\"headerlink\" title=\"reverse（）\"></a>reverse（）</h3><p>反轉陣列，會改變原本陣列內容！ <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">MDN</a><br>語法：<br><code>a.reverse()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> food=[<span class=\"string\">&#x27;apple&#x27;</span>,<span class=\"string\">&#x27;book&#x27;</span>,<span class=\"string\">&#x27;cat&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseFood = food.reverse();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(food)         <span class=\"comment\">//[&quot;cat&quot;, &quot;book&quot;, &quot;apple&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reverseFood) <span class=\"comment\">//[&quot;cat&quot;, &quot;book&quot;, &quot;apple&quot;]</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"length":5503,"excerpt":"<p>參考資料：<br><a href=\"https://wcc723.github.io/javascript/2017/06/29/es6-native-array/\">卡斯伯七種常見陣列處理方法</a><br><a href=\"https://oranwind.org/post-post-22/\"> JavaScript  陣列方法簡介</a></p>\n<hr>\n<p>在閱讀完卡斯伯老師文章，我將整理文章中處理陣列方法，並搭配自己的練習輔助說明。對了補充說明：陣列處理方式在IE8以前是不支援的！</p>","more":"<p>首先，我們先簡單寫一個陣列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> restaurant=[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;taiwanese&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">100</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Taipei&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;Korean&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">200</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Yilan&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;Thailand&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">300</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Taoyuan&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;American&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">450</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Taichung&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    option:<span class=\"string\">&#x27;Italian&#x27;</span>,</span><br><span class=\"line\">    price:<span class=\"number\">900</span>,</span><br><span class=\"line\">    location:<span class=\"string\">&#x27;Kaohsiung&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"forEach（）方法\"><a href=\"#forEach（）方法\" class=\"headerlink\" title=\"forEach（）方法\"></a>forEach（）方法</h3><p>簡介：會對陣列每個元素都執行一次，但不會有回傳值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> forEach = </span><br><span class=\"line\">restaurant.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> item; <span class=\"comment\">//沒有東西</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(forEach) <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forEach = </span><br><span class=\"line\">restaurant.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) </span>&#123;</span><br><span class=\"line\">         item.price = item.price+<span class=\"number\">100</span>;</span><br><span class=\"line\">         <span class=\"comment\">// console.log(item.option)</span></span><br><span class=\"line\">         <span class=\"comment\">// console.log(index)</span></span><br><span class=\"line\">         <span class=\"comment\">// console.log(array)</span></span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(item.price); <span class=\"comment\">//200 300 400 ....</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>說明：item以這裡為範例的話，代表物件中的值  </p>\n</blockquote>\n<h3 id=\"map（）方法\"><a href=\"#map（）方法\" class=\"headerlink\" title=\"map（）方法\"></a>map（）方法</h3><p>簡介：跟forEach相比多了回傳值，並透過函式回傳值組合成一個新的陣列<br><code>適合將原始的變數運算後重新組合一個新的陣列</code><br>特性：<br>1.如果不回傳則是<code>undefined</code><br>2,回傳數量等於原始陣列長度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mapArray=restaurant.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,array</span>) </span>&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>( item.price=== <span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;item.option&#125;</span>好貴`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              <span class=\"comment\">// return false   //不符合條件的會回傳false</span></span><br><span class=\"line\">              <span class=\"comment\">// return `$&#123;item.option&#125;好便宜`</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(mapArray)</span><br><span class=\"line\">說明：<span class=\"keyword\">else</span>&#123;&#125;可以選擇<span class=\"keyword\">return</span> <span class=\"literal\">false</span>或 <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;item.option&#125;</span>好便宜`</span></span><br><span class=\"line\">並用<span class=\"built_in\">console</span>.log(mapArray)觀察結果</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：return 一個值必須使用有一個變數接受資料！  </p>\n</blockquote>\n<h3 id=\"filter（）方法\"><a href=\"#filter（）方法\" class=\"headerlink\" title=\"filter（）方法\"></a>filter（）方法</h3><p>會回傳符合條件的元素，得到一個新陣列。若不符合條件則會得到一個空陣列。適合用在搜尋與過濾資料  <code>會獲得一個陣列</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> filterArray=</span><br><span class=\"line\">restaurant.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> item.price&gt;=<span class=\"number\">300</span>; <span class=\"comment\">//取得價錢大於300餐廳</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(filterArray) <span class=\"comment\">//(3)[&#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"find（）方法\"><a href=\"#find（）方法\" class=\"headerlink\" title=\"find（）方法\"></a>find（）方法</h3><p>只會回傳一次值，且是第一個滿足條件的元素值，若沒有則會回傳<code>undefined</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findArray =</span><br><span class=\"line\">restaurant.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.option===<span class=\"string\">&#x27;Thailand&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(findArray) </span><br><span class=\"line\"><span class=\"comment\">//&#123;option: &quot;Thailand&quot;, price: 300, location: &quot;Taoyuan&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"every（）方法\"><a href=\"#every（）方法\" class=\"headerlink\" title=\"every（）方法\"></a>every（）方法</h3><p>用來檢查所有陣列是否符合條件，僅會回傳一個值<code>true</code>或<code>false</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> everyArray = </span><br><span class=\"line\">restaurant.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.price &gt;= <span class=\"number\">100</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(everyArray) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"some（）方法\"><a href=\"#some（）方法\" class=\"headerlink\" title=\"some（）方法\"></a>some（）方法</h3><p>都是回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someArray = </span><br><span class=\"line\">restaurant.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.price &gt; <span class=\"number\">300</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(someArray); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce（）方法\"><a href=\"#reduce（）方法\" class=\"headerlink\" title=\"reduce（）方法\"></a>reduce（）方法</h3><p>將Accumulator及陣列中每項元素（由左至右）傳入回呼函式，<code>並產生一個值</code><br>參數介紹：<br>Accumulator:：<br>前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值<br>currentValue: 當前變數<br>currentIndex: 當前索引<br>array: 全部陣列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reduceArray=</span><br><span class=\"line\">restaurant.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator,currentValue,currentIndex,array</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// console.log(accumulator,currentValue,currentIndex,array);</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> accumulator +currentValue.price</span><br><span class=\"line\">          &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reduceArray); <span class=\"comment\">//累加的值為1950</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>下面內容為文章內容以外，更新一些常用陣列方法</p>\n<h3 id=\"Sort（）方法\"><a href=\"#Sort（）方法\" class=\"headerlink\" title=\"Sort（）方法\"></a>Sort（）方法</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324\">Sort影片教學</a> <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">MDN參考資料</a><br>這要用來針對資料進行排序，會return -1、0、1       <code>會回傳一個陣列</code><br>原理說明：<br>預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。<br>穩定排序：指的是如果比較數值相同，不會調整原始資料順序<br>用法有兩種：<br>1.直接針對資料sort（），通常用在value、數值           =&gt;預設升冪排列<br>2.針對資料進行減法運算（比較推薦使用，如下範例）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[<span class=\"number\">1</span>,<span class=\"number\">110</span>,<span class=\"number\">23</span>,<span class=\"number\">54</span>]</span><br><span class=\"line\">ary.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a.year-b.year); <span class=\"comment\">// 1,0,-1</span></span><br></pre></td></tr></table></figure>\n<p>補充說明：升冪（以a為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 小於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 大於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// a 必須等於 b</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>補充說明：降冪（以b為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 小於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 大於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// b 必須等於 a</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>範例（搭配三元運算子）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">let</span> ans = inventors.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (a.year &gt; b.year) ? <span class=\"number\">1</span>: (b.year &gt; a.year) ? -<span class=\"number\">1</span>:<span class=\"number\">0</span>           </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.table(ans);</span><br></pre></td></tr></table></figure>\n<h3 id=\"includes（）\"><a href=\"#includes（）\" class=\"headerlink\" title=\"includes（）\"></a>includes（）</h3><p>這個語法是ES7提供，會判斷陣列是否包含特定的元素，並以此來回傳true或false。<br>語法：<code>arr.includes(searchElement[, fromIndex])</code><br>特性：<br>1.當fromIndex為負數，並且超過陣列長度則會搜尋整個陣列<br>2.當fromIndex為正數，並且超過陣列長度則會回傳false<br>3.當fromIndex為負數，但沒有超過陣列長度則會將<code>array.length +fromIndex</code>開始向後搜尋</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.includes(<span class=\"number\">2</span>))  <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.includes(<span class=\"number\">4</span>))  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>].includes(<span class=\"number\">3</span>, -<span class=\"number\">3</span>);     <span class=\"comment\">//true</span></span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>].includes(<span class=\"number\">3</span>, -<span class=\"number\">2</span>);     <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"indexOf（）\"><a href=\"#indexOf（）\" class=\"headerlink\" title=\"indexOf（）\"></a>indexOf（）</h3><p>會回傳給定元素於陣列中<code>第一個被找到之索引</code>，若不存在於陣列中則回傳 -1。 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">MDN介紹</a><br>語法：<br><code>arr.indexOf(searchElement[, fromIndex])</code><br>特點：<br>1.fromIndex為正數，則會從左到右開始搜尋<br>2.fromIndex為負數，則會從陣列尾端開始搜尋，會搜尋到最後一個的索引值為 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">array.indexOf(<span class=\"number\">2</span>);     <span class=\"comment\">// 0</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">7</span>);     <span class=\"comment\">// -1</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">9</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// 2</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">2</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// -1   出現-1表示搜尋不存在</span></span><br><span class=\"line\">array.indexOf(<span class=\"number\">2</span>, -<span class=\"number\">3</span>); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"slice（）\"><a href=\"#slice（）\" class=\"headerlink\" title=\"slice（）\"></a>slice（）</h3><p>會回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）部分的淺拷貝（shallow copy）。而原本的陣列將不會被修改。 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">MDN</a><br>語法：<br><code>arr.slice([begin[, end]])</code><br>特點：<br>Begin : 預設起始索引為0，若為負數則從最末端開始<br>End：預設起始索引為0，若為負數則從最末端開始<br>舉例來說，slice(1,4)提取了陣列中第二個元素至第四個元素前為止（元素索引 1、2 以及 3）來拷貝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">&#x27;Banana&#x27;</span>, <span class=\"string\">&#x27;Orange&#x27;</span>, <span class=\"string\">&#x27;Lemon&#x27;</span>, <span class=\"string\">&#x27;Apple&#x27;</span>, <span class=\"string\">&#x27;Mango&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice =fruits.slice(<span class=\"number\">0</span>,<span class=\"number\">2</span>). <span class=\"comment\">//[&quot;Banana&quot;,&quot;Orange&quot;]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"splice（）\"><a href=\"#splice（）\" class=\"headerlink\" title=\"splice（）\"></a>splice（）</h3><p>藉由刪除既有元素並／或加入新元素來改變一個陣列的內容。會回傳一個陣列<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">MDN</a><br>語法：<br><code>array.splice(start[, deleteCount[, item1[, item2[, …]]]])</code><br>特點：<br>Start 增加/刪除項目的位置，負數代表從後方算起。<br>deleteCount 刪除的個數，如為0或沒有填寫則不會刪除。<br>Item… 添加的新項目。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myFish = [<span class=\"string\">&#x27;angel&#x27;</span>, <span class=\"string\">&#x27;clown&#x27;</span>, <span class=\"string\">&#x27;mandarin&#x27;</span>, <span class=\"string\">&#x27;sturgeon&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> removed = myFish.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;chunwen&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFish)   <span class=\"comment\">//[&quot;angel&quot;, &quot;chunwen&quot;, &quot;sturgeon&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(removed)  <span class=\"comment\">//[&quot;clown&quot;, &quot;mandarin&quot;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"join（）\"><a href=\"#join（）\" class=\"headerlink\" title=\"join（）\"></a>join（）</h3><p>將所有的元素連接、合併成一個字串，並回傳此字串 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/join\">MDN</a><br>語法：<br><code>arr.join([separator])</code><br>特點：<br>Sperator若未傳入參數預設是用逗點隔開<code>,</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">&#x27;Wind&#x27;</span>, <span class=\"string\">&#x27;Rain&#x27;</span>, <span class=\"string\">&#x27;Fire&#x27;</span>];</span><br><span class=\"line\">a.join();      <span class=\"comment\">// &#x27;Wind,Rain,Fire&#x27;</span></span><br><span class=\"line\">a.join(<span class=\"string\">&#x27;, &#x27;</span>);  <span class=\"comment\">// &#x27;Wind, Rain, Fire&#x27;</span></span><br><span class=\"line\">a.join(<span class=\"string\">&#x27; + &#x27;</span>); <span class=\"comment\">// &#x27;Wind + Rain + Fire&#x27;</span></span><br><span class=\"line\">a.join(<span class=\"string\">&#x27;&#x27;</span>);    <span class=\"comment\">// &#x27;WindRainFire&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reverse（）\"><a href=\"#reverse（）\" class=\"headerlink\" title=\"reverse（）\"></a>reverse（）</h3><p>反轉陣列，會改變原本陣列內容！ <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">MDN</a><br>語法：<br><code>a.reverse()</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> food=[<span class=\"string\">&#x27;apple&#x27;</span>,<span class=\"string\">&#x27;book&#x27;</span>,<span class=\"string\">&#x27;cat&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseFood = food.reverse();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(food)         <span class=\"comment\">//[&quot;cat&quot;, &quot;book&quot;, &quot;apple&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reverseFood) <span class=\"comment\">//[&quot;cat&quot;, &quot;book&quot;, &quot;apple&quot;]</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue 框架與開發環境介紹","abbrlink":67885936,"date":"2019-08-30T03:58:35.000Z","_content":"\n\n## 何謂Vue?\n我們可以將它視為一個漸進式框架或是函式庫\n### Vue的特點：\n1.關注點分離，意思就是Vue只關注`畫面`與`資料的變化`，我們不用手動更新操作DOM元素。\n2.操作物件模型為主的開發模式（就是操作我資料）\n\n<!-- more -->\n\n### 漸進式框架\n說明：就是你想要用哪部分都可以自行決定。有點像是你買一個可拆式工具箱\n可以依照自己的需求選擇工具\n![](https://i.imgur.com/QC8R8Gd.png)\n參考資料：[Vue.js，何謂漸進式框架？](https://medium.com/@gotraveltoworld/vue-js-%E4%BD%95%E8%AC%82%E6%BC%B8%E9%80%B2%E5%BC%8F%E6%A1%86%E6%9E%B6-7d0281a7efa9)\n\n## 接下來談談何謂MVC，MVVM又是怎樣概念\nMVC示意圖如下\n![](https://i.imgur.com/aoKVSWt.png)\n> 簡單來說使用者就是透過（View）畫面來觸發控制器，控制器再與資料庫這邊請求資料，請求資料後再回傳到畫面上  \n\nMVVM示意圖\n![](https://i.imgur.com/9p139yp.png)\n> 簡單海說就是Vue幫我們處理好`Dom Listeners`和`Data Bindings`這兩部分，我們只要處理資料內容，畫面就會即時更動  \n\n\n## 元件（components）簡介：\n什麼是元件？\n> 每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者將程式碼封裝而更好重用。  \n![](https://i.imgur.com/AvTQ0Pb.png)\n備註：子元件都會有一個父元件\n\n## 如何載入Vue?\n1.使用CDN載入Vue\n```javascript\n<script src=“https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js”></script>\n```\n2.使用Vue-CLi建構專案\n`npm install vue`\n### 版本間差異\nDevelopment version(未壓縮版)\nProduction version(被壓縮過版本)\n>無法使用Vue tool develop觀看結構！\n>Vue CLi打包過後的版本都會是壓縮版喔！\n![](https://i.imgur.com/MXVdUoK.png)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-08-30[筆記]Vue 框架與開發環境介紹.md","raw":"---\ntitle: Vue 框架與開發環境介紹\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 67885936\ndate:\n---\n\n\n## 何謂Vue?\n我們可以將它視為一個漸進式框架或是函式庫\n### Vue的特點：\n1.關注點分離，意思就是Vue只關注`畫面`與`資料的變化`，我們不用手動更新操作DOM元素。\n2.操作物件模型為主的開發模式（就是操作我資料）\n\n<!-- more -->\n\n### 漸進式框架\n說明：就是你想要用哪部分都可以自行決定。有點像是你買一個可拆式工具箱\n可以依照自己的需求選擇工具\n![](https://i.imgur.com/QC8R8Gd.png)\n參考資料：[Vue.js，何謂漸進式框架？](https://medium.com/@gotraveltoworld/vue-js-%E4%BD%95%E8%AC%82%E6%BC%B8%E9%80%B2%E5%BC%8F%E6%A1%86%E6%9E%B6-7d0281a7efa9)\n\n## 接下來談談何謂MVC，MVVM又是怎樣概念\nMVC示意圖如下\n![](https://i.imgur.com/aoKVSWt.png)\n> 簡單來說使用者就是透過（View）畫面來觸發控制器，控制器再與資料庫這邊請求資料，請求資料後再回傳到畫面上  \n\nMVVM示意圖\n![](https://i.imgur.com/9p139yp.png)\n> 簡單海說就是Vue幫我們處理好`Dom Listeners`和`Data Bindings`這兩部分，我們只要處理資料內容，畫面就會即時更動  \n\n\n## 元件（components）簡介：\n什麼是元件？\n> 每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者將程式碼封裝而更好重用。  \n![](https://i.imgur.com/AvTQ0Pb.png)\n備註：子元件都會有一個父元件\n\n## 如何載入Vue?\n1.使用CDN載入Vue\n```javascript\n<script src=“https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js”></script>\n```\n2.使用Vue-CLi建構專案\n`npm install vue`\n### 版本間差異\nDevelopment version(未壓縮版)\nProduction version(被壓縮過版本)\n>無法使用Vue tool develop觀看結構！\n>Vue CLi打包過後的版本都會是壓縮版喔！\n![](https://i.imgur.com/MXVdUoK.png)\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-08-30[筆記]Vue 框架與開發環境介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t1y0009zqzi9y6y0342","content":"<h2 id=\"何謂Vue\"><a href=\"#何謂Vue\" class=\"headerlink\" title=\"何謂Vue?\"></a>何謂Vue?</h2><p>我們可以將它視為一個漸進式框架或是函式庫</p>\n<h3 id=\"Vue的特點：\"><a href=\"#Vue的特點：\" class=\"headerlink\" title=\"Vue的特點：\"></a>Vue的特點：</h3><p>1.關注點分離，意思就是Vue只關注<code>畫面</code>與<code>資料的變化</code>，我們不用手動更新操作DOM元素。<br>2.操作物件模型為主的開發模式（就是操作我資料）</p>\n<span id=\"more\"></span>\n\n<h3 id=\"漸進式框架\"><a href=\"#漸進式框架\" class=\"headerlink\" title=\"漸進式框架\"></a>漸進式框架</h3><p>說明：就是你想要用哪部分都可以自行決定。有點像是你買一個可拆式工具箱<br>可以依照自己的需求選擇工具<br><img src=\"https://i.imgur.com/QC8R8Gd.png\" alt=\"\"><br>參考資料：<a href=\"https://medium.com/@gotraveltoworld/vue-js-%E4%BD%95%E8%AC%82%E6%BC%B8%E9%80%B2%E5%BC%8F%E6%A1%86%E6%9E%B6-7d0281a7efa9\">Vue.js，何謂漸進式框架？</a></p>\n<h2 id=\"接下來談談何謂MVC，MVVM又是怎樣概念\"><a href=\"#接下來談談何謂MVC，MVVM又是怎樣概念\" class=\"headerlink\" title=\"接下來談談何謂MVC，MVVM又是怎樣概念\"></a>接下來談談何謂MVC，MVVM又是怎樣概念</h2><p>MVC示意圖如下<br><img src=\"https://i.imgur.com/aoKVSWt.png\" alt=\"\"></p>\n<blockquote>\n<p>簡單來說使用者就是透過（View）畫面來觸發控制器，控制器再與資料庫這邊請求資料，請求資料後再回傳到畫面上  </p>\n</blockquote>\n<p>MVVM示意圖<br><img src=\"https://i.imgur.com/9p139yp.png\" alt=\"\"></p>\n<blockquote>\n<p>簡單海說就是Vue幫我們處理好<code>Dom Listeners</code>和<code>Data Bindings</code>這兩部分，我們只要處理資料內容，畫面就會即時更動  </p>\n</blockquote>\n<h2 id=\"元件（components）簡介：\"><a href=\"#元件（components）簡介：\" class=\"headerlink\" title=\"元件（components）簡介：\"></a>元件（components）簡介：</h2><p>什麼是元件？</p>\n<blockquote>\n<p>每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者將程式碼封裝而更好重用。<br><img src=\"https://i.imgur.com/AvTQ0Pb.png\" alt=\"\"><br>備註：子元件都會有一個父元件</p>\n</blockquote>\n<h2 id=\"如何載入Vue\"><a href=\"#如何載入Vue\" class=\"headerlink\" title=\"如何載入Vue?\"></a>如何載入Vue?</h2><p>1.使用CDN載入Vue</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=“https:<span class=\"comment\">//cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js”&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.使用Vue-CLi建構專案<br><code>npm install vue</code></p>\n<h3 id=\"版本間差異\"><a href=\"#版本間差異\" class=\"headerlink\" title=\"版本間差異\"></a>版本間差異</h3><p>Development version(未壓縮版)<br>Production version(被壓縮過版本)</p>\n<blockquote>\n<p>無法使用Vue tool develop觀看結構！<br>Vue CLi打包過後的版本都會是壓縮版喔！<br><img src=\"https://i.imgur.com/MXVdUoK.png\" alt=\"\"></p>\n</blockquote>\n","site":{"data":{}},"length":709,"excerpt":"<h2 id=\"何謂Vue\"><a href=\"#何謂Vue\" class=\"headerlink\" title=\"何謂Vue?\"></a>何謂Vue?</h2><p>我們可以將它視為一個漸進式框架或是函式庫</p>\n<h3 id=\"Vue的特點：\"><a href=\"#Vue的特點：\" class=\"headerlink\" title=\"Vue的特點：\"></a>Vue的特點：</h3><p>1.關注點分離，意思就是Vue只關注<code>畫面</code>與<code>資料的變化</code>，我們不用手動更新操作DOM元素。<br>2.操作物件模型為主的開發模式（就是操作我資料）</p>","more":"<h3 id=\"漸進式框架\"><a href=\"#漸進式框架\" class=\"headerlink\" title=\"漸進式框架\"></a>漸進式框架</h3><p>說明：就是你想要用哪部分都可以自行決定。有點像是你買一個可拆式工具箱<br>可以依照自己的需求選擇工具<br><img src=\"https://i.imgur.com/QC8R8Gd.png\" alt=\"\"><br>參考資料：<a href=\"https://medium.com/@gotraveltoworld/vue-js-%E4%BD%95%E8%AC%82%E6%BC%B8%E9%80%B2%E5%BC%8F%E6%A1%86%E6%9E%B6-7d0281a7efa9\">Vue.js，何謂漸進式框架？</a></p>\n<h2 id=\"接下來談談何謂MVC，MVVM又是怎樣概念\"><a href=\"#接下來談談何謂MVC，MVVM又是怎樣概念\" class=\"headerlink\" title=\"接下來談談何謂MVC，MVVM又是怎樣概念\"></a>接下來談談何謂MVC，MVVM又是怎樣概念</h2><p>MVC示意圖如下<br><img src=\"https://i.imgur.com/aoKVSWt.png\" alt=\"\"></p>\n<blockquote>\n<p>簡單來說使用者就是透過（View）畫面來觸發控制器，控制器再與資料庫這邊請求資料，請求資料後再回傳到畫面上  </p>\n</blockquote>\n<p>MVVM示意圖<br><img src=\"https://i.imgur.com/9p139yp.png\" alt=\"\"></p>\n<blockquote>\n<p>簡單海說就是Vue幫我們處理好<code>Dom Listeners</code>和<code>Data Bindings</code>這兩部分，我們只要處理資料內容，畫面就會即時更動  </p>\n</blockquote>\n<h2 id=\"元件（components）簡介：\"><a href=\"#元件（components）簡介：\" class=\"headerlink\" title=\"元件（components）簡介：\"></a>元件（components）簡介：</h2><p>什麼是元件？</p>\n<blockquote>\n<p>每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者將程式碼封裝而更好重用。<br><img src=\"https://i.imgur.com/AvTQ0Pb.png\" alt=\"\"><br>備註：子元件都會有一個父元件</p>\n</blockquote>\n<h2 id=\"如何載入Vue\"><a href=\"#如何載入Vue\" class=\"headerlink\" title=\"如何載入Vue?\"></a>如何載入Vue?</h2><p>1.使用CDN載入Vue</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=“https:<span class=\"comment\">//cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js”&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.使用Vue-CLi建構專案<br><code>npm install vue</code></p>\n<h3 id=\"版本間差異\"><a href=\"#版本間差異\" class=\"headerlink\" title=\"版本間差異\"></a>版本間差異</h3><p>Development version(未壓縮版)<br>Production version(被壓縮過版本)</p>\n<blockquote>\n<p>無法使用Vue tool develop觀看結構！<br>Vue CLi打包過後的版本都會是壓縮版喔！<br><img src=\"https://i.imgur.com/MXVdUoK.png\" alt=\"\"></p>\n</blockquote>"},{"title":"Vue Instance/生命週期介紹","abbrlink":3809821719,"date":"2019-09-02T08:52:48.000Z","_content":"\n\n參考資料：\n[Summer-Vue Instance介紹](https://cythilya.github.io/2017/04/11/vue-instance/)\n- - - -\n## Vue Instance(實體)\n每個 Vue.js 的應用程式都是從`Vue建構式 (vue constructor) `建立`根實體 (root vue instance) `開始，再一個個將元件搭建上去而來的。\n* Vue的實體是透過`new`關鍵字來建立\n\n<!-- more -->\n\n### 建立Vue Instance\n使用 vue constructor 建立 vue instance「vm」，vm 為 view model 的簡稱\n```javascript\nvar vm = new Vue({\n    //option object\n});\n```\n### 建立Vue Instance寫法2\n```javascript\nnew Vue({\n  el: '#app',\n  data() {\n    return {\n      isShowing: false \n    }\n});\n```\n#### 小結論\n兩者寫法都是可行，差異僅在於`是否賦予一個值到變數上`，而這個變數是可以用來以後取值使用。老師也說到後面章節（Vue Cli）會比較多時後使用寫法2。原因就是不太需要使用該變數做任何操作\n補充：同一個頁面上`可以建立兩個以上的Vue實體`在是沒有問題，只有巢狀會出錯\n\n## Vue實體基本屬性(43分40秒開始)\n![](https://i.imgur.com/EEJQMXF.png)圖片來源：五倍紅寶石Vue實戰課程\n### el&data\n* el：就是用來綁定網頁dom元素與Vue實體可以控制的範圍的`媒介`\n> 但，當實體沒有el屬性，就只能透過`vm.$mount()`來進行手動掛載  \n> 備註：  \n> 1.這用法很少用，所以知道就好 [文章參考](https://kknews.cc/code/eykopbz.html)  \n> 2.vm是指上面圖片宣告的變數（這邊是可以自定義）  \n* Data: 用來存放實體綁定的資料\n實體內：透過this.XXX 取得資料\n實體外：透過Hello.$data.value 取得資料  ` Hello這個變數是可以自行命名`\n>實體外指的就是下方Hello實體物件範圍外\n在子元件內時，須以 **function**的形式來來回傳。 \n```javascript\nvar Hello = new Vue({\n      el: '#app',\n      data: {\n        value: 'Hi Vue!'\n      }\n    });\nHello.$mount().value  //\"Hi Vue!\"\n```\n> 備註：Data內屬性不可由＄或＿開頭 如：$abc、＿abc  \n\n### 傳入選項物件\n當實體（Vue instance）被創建後，物件可以傳入包含el、data、methods、watch、mounted、props、computed\n```javascript\nvar vm = new Vue({\n    el: '#app',\n    data: {\n    message:\"hello vue.js!\"\n     },\n    methods:{ //略    \n}\n});\n\n```\n### 擴充建構式\n```javascript\nvar component = Vue.extend({\n    data: function(){\n    return{ \n     message:'hello '\n     }\n   },\n});\nvar cp = new component();\nconsole.log(cp.message) //hello\n```\n> data選項，需要注意`在Vue.extend()中它必須是函數`  \n\n## Vue 元件實體生命週期(Instance Lifecycle Hooks)\nVue.js 提供實體生命週期鉤子 (instance lifecycle hooks)，讓我們在 instance 不同時期做一些事情。示意圖如下 [完整版請參考官網](https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA)\n![](https://i.imgur.com/7PMY4RZ.png)\n### Vue生命週期hooks 說明：\n![](https://i.imgur.com/bYvFdBi.png)\n圖片來源：五倍紅寶石Vue實戰課程\n### Vue執行順序：\n![](https://i.imgur.com/XoDkgjK.png)\n圖片來源：五倍紅寶石Vue實戰課程\n補充：\n> Q1：vm.$mount() 圖片中`vm`指的是我們自行命名變數？**對**  \n> Q2：如果要透過 ajax / fetch 取得 API 回傳資料交給 Vue.js 處 理理時，應該在哪個階段執⾏？  \n> Ａ：created階段之後都ok(包括created、beforeMount 與 mounted)，因為元件實體已經被建立，我們可以取得data資料。老師建議放created階段，不建議在放在mounted 因為資料若為空陣列網頁畫面可能會有一段空白，但可以用loading圖蓋過. [六角問答](https://www.udemy.com/vue-hexschool/learn/lecture/10271478#questions/7853862)  \n\n###  Lifecycle hook functions 使用\n引用Summer部落格上內容[Summer-Vue Instance介紹](https://cythilya.github.io/2017/04/11/vue-instance/)\n```javascript\nvar vm = new Vue({\n  beforeCreate: function() {\n    //vue instance 被 constructor 建立前\n    console.log('beforeCreate');\n  },\n  created: function() {\n    //vue instance 被 constructor 建立後，在這裡完成 data binding\n    console.log('created');\n  },\n  beforeMount: function() {\n    //綁定 DOM 之前\n    console.log('beforeMount');\n  },\n  mounted: function() {\n    //綁定 DOM 之後\n    console.log('mounted');\n  },\n  beforeUpdate: function() {\n    //資料更新，但尚未更新 DOM\n    console.log('beforeUpdate');\n  },\n  updated: function() {\n    //因資料更新，而更新 DOM\n    console.log('updated');\n  },\n  beforeDestroy: function() {\n    //移除 vue instance 之前\n    console.log('beforeDestroy');\n  },\n  destroyed: function() {\n    //移除 vue instance 之後\n    console.log('destroyed');\n  }\n});\n\n```\n\n### 保留 `keep-alive` 才會跳出來下面alert\n```javascript\nactivated () {\n    alert(`activated! ${this.text}`);\n  },\n  deactivated () {\n    alert(`deactivated! ${this.text}`);\n  },\n```\n\n\n\n\n\n","source":"_posts/2019-09-02-Vue Instance:生命週期介紹.md","raw":"---\ntitle: Vue Instance/生命週期介紹\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 3809821719\ndate:\n---\n\n\n參考資料：\n[Summer-Vue Instance介紹](https://cythilya.github.io/2017/04/11/vue-instance/)\n- - - -\n## Vue Instance(實體)\n每個 Vue.js 的應用程式都是從`Vue建構式 (vue constructor) `建立`根實體 (root vue instance) `開始，再一個個將元件搭建上去而來的。\n* Vue的實體是透過`new`關鍵字來建立\n\n<!-- more -->\n\n### 建立Vue Instance\n使用 vue constructor 建立 vue instance「vm」，vm 為 view model 的簡稱\n```javascript\nvar vm = new Vue({\n    //option object\n});\n```\n### 建立Vue Instance寫法2\n```javascript\nnew Vue({\n  el: '#app',\n  data() {\n    return {\n      isShowing: false \n    }\n});\n```\n#### 小結論\n兩者寫法都是可行，差異僅在於`是否賦予一個值到變數上`，而這個變數是可以用來以後取值使用。老師也說到後面章節（Vue Cli）會比較多時後使用寫法2。原因就是不太需要使用該變數做任何操作\n補充：同一個頁面上`可以建立兩個以上的Vue實體`在是沒有問題，只有巢狀會出錯\n\n## Vue實體基本屬性(43分40秒開始)\n![](https://i.imgur.com/EEJQMXF.png)圖片來源：五倍紅寶石Vue實戰課程\n### el&data\n* el：就是用來綁定網頁dom元素與Vue實體可以控制的範圍的`媒介`\n> 但，當實體沒有el屬性，就只能透過`vm.$mount()`來進行手動掛載  \n> 備註：  \n> 1.這用法很少用，所以知道就好 [文章參考](https://kknews.cc/code/eykopbz.html)  \n> 2.vm是指上面圖片宣告的變數（這邊是可以自定義）  \n* Data: 用來存放實體綁定的資料\n實體內：透過this.XXX 取得資料\n實體外：透過Hello.$data.value 取得資料  ` Hello這個變數是可以自行命名`\n>實體外指的就是下方Hello實體物件範圍外\n在子元件內時，須以 **function**的形式來來回傳。 \n```javascript\nvar Hello = new Vue({\n      el: '#app',\n      data: {\n        value: 'Hi Vue!'\n      }\n    });\nHello.$mount().value  //\"Hi Vue!\"\n```\n> 備註：Data內屬性不可由＄或＿開頭 如：$abc、＿abc  \n\n### 傳入選項物件\n當實體（Vue instance）被創建後，物件可以傳入包含el、data、methods、watch、mounted、props、computed\n```javascript\nvar vm = new Vue({\n    el: '#app',\n    data: {\n    message:\"hello vue.js!\"\n     },\n    methods:{ //略    \n}\n});\n\n```\n### 擴充建構式\n```javascript\nvar component = Vue.extend({\n    data: function(){\n    return{ \n     message:'hello '\n     }\n   },\n});\nvar cp = new component();\nconsole.log(cp.message) //hello\n```\n> data選項，需要注意`在Vue.extend()中它必須是函數`  \n\n## Vue 元件實體生命週期(Instance Lifecycle Hooks)\nVue.js 提供實體生命週期鉤子 (instance lifecycle hooks)，讓我們在 instance 不同時期做一些事情。示意圖如下 [完整版請參考官網](https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA)\n![](https://i.imgur.com/7PMY4RZ.png)\n### Vue生命週期hooks 說明：\n![](https://i.imgur.com/bYvFdBi.png)\n圖片來源：五倍紅寶石Vue實戰課程\n### Vue執行順序：\n![](https://i.imgur.com/XoDkgjK.png)\n圖片來源：五倍紅寶石Vue實戰課程\n補充：\n> Q1：vm.$mount() 圖片中`vm`指的是我們自行命名變數？**對**  \n> Q2：如果要透過 ajax / fetch 取得 API 回傳資料交給 Vue.js 處 理理時，應該在哪個階段執⾏？  \n> Ａ：created階段之後都ok(包括created、beforeMount 與 mounted)，因為元件實體已經被建立，我們可以取得data資料。老師建議放created階段，不建議在放在mounted 因為資料若為空陣列網頁畫面可能會有一段空白，但可以用loading圖蓋過. [六角問答](https://www.udemy.com/vue-hexschool/learn/lecture/10271478#questions/7853862)  \n\n###  Lifecycle hook functions 使用\n引用Summer部落格上內容[Summer-Vue Instance介紹](https://cythilya.github.io/2017/04/11/vue-instance/)\n```javascript\nvar vm = new Vue({\n  beforeCreate: function() {\n    //vue instance 被 constructor 建立前\n    console.log('beforeCreate');\n  },\n  created: function() {\n    //vue instance 被 constructor 建立後，在這裡完成 data binding\n    console.log('created');\n  },\n  beforeMount: function() {\n    //綁定 DOM 之前\n    console.log('beforeMount');\n  },\n  mounted: function() {\n    //綁定 DOM 之後\n    console.log('mounted');\n  },\n  beforeUpdate: function() {\n    //資料更新，但尚未更新 DOM\n    console.log('beforeUpdate');\n  },\n  updated: function() {\n    //因資料更新，而更新 DOM\n    console.log('updated');\n  },\n  beforeDestroy: function() {\n    //移除 vue instance 之前\n    console.log('beforeDestroy');\n  },\n  destroyed: function() {\n    //移除 vue instance 之後\n    console.log('destroyed');\n  }\n});\n\n```\n\n### 保留 `keep-alive` 才會跳出來下面alert\n```javascript\nactivated () {\n    alert(`activated! ${this.text}`);\n  },\n  deactivated () {\n    alert(`deactivated! ${this.text}`);\n  },\n```\n\n\n\n\n\n","slug":"2019-09-02-Vue Instance:生命週期介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t21000czqzid4orasdc","content":"<p>參考資料：<br><a href=\"https://cythilya.github.io/2017/04/11/vue-instance/\">Summer-Vue Instance介紹</a></p>\n<hr>\n<h2 id=\"Vue-Instance-實體\"><a href=\"#Vue-Instance-實體\" class=\"headerlink\" title=\"Vue Instance(實體)\"></a>Vue Instance(實體)</h2><p>每個 Vue.js 的應用程式都是從<code>Vue建構式 (vue constructor)</code>建立<code>根實體 (root vue instance)</code>開始，再一個個將元件搭建上去而來的。</p>\n<ul>\n<li>Vue的實體是透過<code>new</code>關鍵字來建立</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"建立Vue-Instance\"><a href=\"#建立Vue-Instance\" class=\"headerlink\" title=\"建立Vue Instance\"></a>建立Vue Instance</h3><p>使用 vue constructor 建立 vue instance「vm」，vm 為 view model 的簡稱</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//option object</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立Vue-Instance寫法2\"><a href=\"#建立Vue-Instance寫法2\" class=\"headerlink\" title=\"建立Vue Instance寫法2\"></a>建立Vue Instance寫法2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isShowing: <span class=\"literal\">false</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>兩者寫法都是可行，差異僅在於<code>是否賦予一個值到變數上</code>，而這個變數是可以用來以後取值使用。老師也說到後面章節（Vue Cli）會比較多時後使用寫法2。原因就是不太需要使用該變數做任何操作<br>補充：同一個頁面上<code>可以建立兩個以上的Vue實體</code>在是沒有問題，只有巢狀會出錯</p>\n<h2 id=\"Vue實體基本屬性-43分40秒開始\"><a href=\"#Vue實體基本屬性-43分40秒開始\" class=\"headerlink\" title=\"Vue實體基本屬性(43分40秒開始)\"></a>Vue實體基本屬性(43分40秒開始)</h2><p><img src=\"https://i.imgur.com/EEJQMXF.png\" alt=\"\">圖片來源：五倍紅寶石Vue實戰課程</p>\n<h3 id=\"el-amp-data\"><a href=\"#el-amp-data\" class=\"headerlink\" title=\"el&amp;data\"></a>el&amp;data</h3><ul>\n<li>el：就是用來綁定網頁dom元素與Vue實體可以控制的範圍的<code>媒介</code><blockquote>\n<p>但，當實體沒有el屬性，就只能透過<code>vm.$mount()</code>來進行手動掛載<br>備註：<br>1.這用法很少用，所以知道就好 <a href=\"https://kknews.cc/code/eykopbz.html\">文章參考</a><br>2.vm是指上面圖片宣告的變數（這邊是可以自定義）  </p>\n</blockquote>\n</li>\n<li>Data: 用來存放實體綁定的資料<br>實體內：透過this.XXX 取得資料<br>實體外：透過Hello.$data.value 取得資料  <code>Hello這個變數是可以自行命名</code><blockquote>\n<p>實體外指的就是下方Hello實體物件範圍外<br>在子元件內時，須以 <strong>function</strong>的形式來來回傳。 </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        value: <span class=\"string\">&#x27;Hi Vue!&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">Hello.$mount().value  <span class=\"comment\">//&quot;Hi Vue!&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>備註：Data內屬性不可由＄或＿開頭 如：$abc、＿abc  </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"傳入選項物件\"><a href=\"#傳入選項物件\" class=\"headerlink\" title=\"傳入選項物件\"></a>傳入選項物件</h3><p>當實體（Vue instance）被創建後，物件可以傳入包含el、data、methods、watch、mounted、props、computed</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    message:<span class=\"string\">&quot;hello vue.js!&quot;</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    methods:&#123; <span class=\"comment\">//略    </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"擴充建構式\"><a href=\"#擴充建構式\" class=\"headerlink\" title=\"擴充建構式\"></a>擴充建構式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> component = Vue.extend(&#123;</span><br><span class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123; </span><br><span class=\"line\">     message:<span class=\"string\">&#x27;hello &#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"keyword\">new</span> component();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cp.message) <span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>data選項，需要注意<code>在Vue.extend()中它必須是函數</code>  </p>\n</blockquote>\n<h2 id=\"Vue-元件實體生命週期-Instance-Lifecycle-Hooks\"><a href=\"#Vue-元件實體生命週期-Instance-Lifecycle-Hooks\" class=\"headerlink\" title=\"Vue 元件實體生命週期(Instance Lifecycle Hooks)\"></a>Vue 元件實體生命週期(Instance Lifecycle Hooks)</h2><p>Vue.js 提供實體生命週期鉤子 (instance lifecycle hooks)，讓我們在 instance 不同時期做一些事情。示意圖如下 <a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA\">完整版請參考官網</a><br><img src=\"https://i.imgur.com/7PMY4RZ.png\" alt=\"\"></p>\n<h3 id=\"Vue生命週期hooks-說明：\"><a href=\"#Vue生命週期hooks-說明：\" class=\"headerlink\" title=\"Vue生命週期hooks 說明：\"></a>Vue生命週期hooks 說明：</h3><p><img src=\"https://i.imgur.com/bYvFdBi.png\" alt=\"\"><br>圖片來源：五倍紅寶石Vue實戰課程</p>\n<h3 id=\"Vue執行順序：\"><a href=\"#Vue執行順序：\" class=\"headerlink\" title=\"Vue執行順序：\"></a>Vue執行順序：</h3><p><img src=\"https://i.imgur.com/XoDkgjK.png\" alt=\"\"><br>圖片來源：五倍紅寶石Vue實戰課程<br>補充：</p>\n<blockquote>\n<p>Q1：vm.$mount() 圖片中<code>vm</code>指的是我們自行命名變數？<strong>對</strong><br>Q2：如果要透過 ajax / fetch 取得 API 回傳資料交給 Vue.js 處 理理時，應該在哪個階段執⾏？<br>Ａ：created階段之後都ok(包括created、beforeMount 與 mounted)，因為元件實體已經被建立，我們可以取得data資料。老師建議放created階段，不建議在放在mounted 因為資料若為空陣列網頁畫面可能會有一段空白，但可以用loading圖蓋過. <a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271478#questions/7853862\">六角問答</a>  </p>\n</blockquote>\n<h3 id=\"Lifecycle-hook-functions-使用\"><a href=\"#Lifecycle-hook-functions-使用\" class=\"headerlink\" title=\"Lifecycle hook functions 使用\"></a>Lifecycle hook functions 使用</h3><p>引用Summer部落格上內容<a href=\"https://cythilya.github.io/2017/04/11/vue-instance/\">Summer-Vue Instance介紹</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//vue instance 被 constructor 建立前</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeCreate&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//vue instance 被 constructor 建立後，在這裡完成 data binding</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;created&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//綁定 DOM 之前</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeMount&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//綁定 DOM 之後</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;mounted&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUpdate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//資料更新，但尚未更新 DOM</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeUpdate&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//因資料更新，而更新 DOM</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;updated&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//移除 vue instance 之前</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeDestroy&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//移除 vue instance 之後</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;destroyed&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保留-keep-alive-才會跳出來下面alert\"><a href=\"#保留-keep-alive-才會跳出來下面alert\" class=\"headerlink\" title=\"保留 keep-alive 才會跳出來下面alert\"></a>保留 <code>keep-alive</code> 才會跳出來下面alert</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activated () &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`activated! <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.text&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deactivated () &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`deactivated! <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.text&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"length":2761,"excerpt":"<p>參考資料：<br><a href=\"https://cythilya.github.io/2017/04/11/vue-instance/\">Summer-Vue Instance介紹</a></p>\n<hr>\n<h2 id=\"Vue-Instance-實體\"><a href=\"#Vue-Instance-實體\" class=\"headerlink\" title=\"Vue Instance(實體)\"></a>Vue Instance(實體)</h2><p>每個 Vue.js 的應用程式都是從<code>Vue建構式 (vue constructor)</code>建立<code>根實體 (root vue instance)</code>開始，再一個個將元件搭建上去而來的。</p>\n<ul>\n<li>Vue的實體是透過<code>new</code>關鍵字來建立</li>\n</ul>","more":"<h3 id=\"建立Vue-Instance\"><a href=\"#建立Vue-Instance\" class=\"headerlink\" title=\"建立Vue Instance\"></a>建立Vue Instance</h3><p>使用 vue constructor 建立 vue instance「vm」，vm 為 view model 的簡稱</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//option object</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立Vue-Instance寫法2\"><a href=\"#建立Vue-Instance寫法2\" class=\"headerlink\" title=\"建立Vue Instance寫法2\"></a>建立Vue Instance寫法2</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isShowing: <span class=\"literal\">false</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>兩者寫法都是可行，差異僅在於<code>是否賦予一個值到變數上</code>，而這個變數是可以用來以後取值使用。老師也說到後面章節（Vue Cli）會比較多時後使用寫法2。原因就是不太需要使用該變數做任何操作<br>補充：同一個頁面上<code>可以建立兩個以上的Vue實體</code>在是沒有問題，只有巢狀會出錯</p>\n<h2 id=\"Vue實體基本屬性-43分40秒開始\"><a href=\"#Vue實體基本屬性-43分40秒開始\" class=\"headerlink\" title=\"Vue實體基本屬性(43分40秒開始)\"></a>Vue實體基本屬性(43分40秒開始)</h2><p><img src=\"https://i.imgur.com/EEJQMXF.png\" alt=\"\">圖片來源：五倍紅寶石Vue實戰課程</p>\n<h3 id=\"el-amp-data\"><a href=\"#el-amp-data\" class=\"headerlink\" title=\"el&amp;data\"></a>el&amp;data</h3><ul>\n<li>el：就是用來綁定網頁dom元素與Vue實體可以控制的範圍的<code>媒介</code><blockquote>\n<p>但，當實體沒有el屬性，就只能透過<code>vm.$mount()</code>來進行手動掛載<br>備註：<br>1.這用法很少用，所以知道就好 <a href=\"https://kknews.cc/code/eykopbz.html\">文章參考</a><br>2.vm是指上面圖片宣告的變數（這邊是可以自定義）  </p>\n</blockquote>\n</li>\n<li>Data: 用來存放實體綁定的資料<br>實體內：透過this.XXX 取得資料<br>實體外：透過Hello.$data.value 取得資料  <code>Hello這個變數是可以自行命名</code><blockquote>\n<p>實體外指的就是下方Hello實體物件範圍外<br>在子元件內時，須以 <strong>function</strong>的形式來來回傳。 </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        value: <span class=\"string\">&#x27;Hi Vue!&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">Hello.$mount().value  <span class=\"comment\">//&quot;Hi Vue!&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>備註：Data內屬性不可由＄或＿開頭 如：$abc、＿abc  </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"傳入選項物件\"><a href=\"#傳入選項物件\" class=\"headerlink\" title=\"傳入選項物件\"></a>傳入選項物件</h3><p>當實體（Vue instance）被創建後，物件可以傳入包含el、data、methods、watch、mounted、props、computed</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    message:<span class=\"string\">&quot;hello vue.js!&quot;</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    methods:&#123; <span class=\"comment\">//略    </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"擴充建構式\"><a href=\"#擴充建構式\" class=\"headerlink\" title=\"擴充建構式\"></a>擴充建構式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> component = Vue.extend(&#123;</span><br><span class=\"line\">    data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123; </span><br><span class=\"line\">     message:<span class=\"string\">&#x27;hello &#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"keyword\">new</span> component();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cp.message) <span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>data選項，需要注意<code>在Vue.extend()中它必須是函數</code>  </p>\n</blockquote>\n<h2 id=\"Vue-元件實體生命週期-Instance-Lifecycle-Hooks\"><a href=\"#Vue-元件實體生命週期-Instance-Lifecycle-Hooks\" class=\"headerlink\" title=\"Vue 元件實體生命週期(Instance Lifecycle Hooks)\"></a>Vue 元件實體生命週期(Instance Lifecycle Hooks)</h2><p>Vue.js 提供實體生命週期鉤子 (instance lifecycle hooks)，讓我們在 instance 不同時期做一些事情。示意圖如下 <a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA\">完整版請參考官網</a><br><img src=\"https://i.imgur.com/7PMY4RZ.png\" alt=\"\"></p>\n<h3 id=\"Vue生命週期hooks-說明：\"><a href=\"#Vue生命週期hooks-說明：\" class=\"headerlink\" title=\"Vue生命週期hooks 說明：\"></a>Vue生命週期hooks 說明：</h3><p><img src=\"https://i.imgur.com/bYvFdBi.png\" alt=\"\"><br>圖片來源：五倍紅寶石Vue實戰課程</p>\n<h3 id=\"Vue執行順序：\"><a href=\"#Vue執行順序：\" class=\"headerlink\" title=\"Vue執行順序：\"></a>Vue執行順序：</h3><p><img src=\"https://i.imgur.com/XoDkgjK.png\" alt=\"\"><br>圖片來源：五倍紅寶石Vue實戰課程<br>補充：</p>\n<blockquote>\n<p>Q1：vm.$mount() 圖片中<code>vm</code>指的是我們自行命名變數？<strong>對</strong><br>Q2：如果要透過 ajax / fetch 取得 API 回傳資料交給 Vue.js 處 理理時，應該在哪個階段執⾏？<br>Ａ：created階段之後都ok(包括created、beforeMount 與 mounted)，因為元件實體已經被建立，我們可以取得data資料。老師建議放created階段，不建議在放在mounted 因為資料若為空陣列網頁畫面可能會有一段空白，但可以用loading圖蓋過. <a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271478#questions/7853862\">六角問答</a>  </p>\n</blockquote>\n<h3 id=\"Lifecycle-hook-functions-使用\"><a href=\"#Lifecycle-hook-functions-使用\" class=\"headerlink\" title=\"Lifecycle hook functions 使用\"></a>Lifecycle hook functions 使用</h3><p>引用Summer部落格上內容<a href=\"https://cythilya.github.io/2017/04/11/vue-instance/\">Summer-Vue Instance介紹</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  beforeCreate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//vue instance 被 constructor 建立前</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeCreate&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//vue instance 被 constructor 建立後，在這裡完成 data binding</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;created&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeMount: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//綁定 DOM 之前</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeMount&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//綁定 DOM 之後</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;mounted&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeUpdate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//資料更新，但尚未更新 DOM</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeUpdate&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  updated: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//因資料更新，而更新 DOM</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;updated&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeDestroy: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//移除 vue instance 之前</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeDestroy&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//移除 vue instance 之後</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;destroyed&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保留-keep-alive-才會跳出來下面alert\"><a href=\"#保留-keep-alive-才會跳出來下面alert\" class=\"headerlink\" title=\"保留 keep-alive 才會跳出來下面alert\"></a>保留 <code>keep-alive</code> 才會跳出來下面alert</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activated () &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`activated! <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.text&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deactivated () &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">`deactivated! <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.text&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>"},{"title":"Vue指令V-for介紹","abbrlink":1331664425,"date":"2019-09-02T08:47:00.000Z","_content":"\n參考資料：\n[官網v-for介紹](https://cn.vuejs.org/v2/guide/list.html)\n[練習檔案](https://codepen.io/chunwen/pen/xvYyRG?editors=1010)\n<!-- more -->\n- - - -\n## V-for\n### 用途：\n將資料列表列渲染出來\n\n### 簡介：\nv-for 指令需要使用 `item in items` 形式來做撰寫\n而v-for會因為後方`items`接的是 `物件` 還是 `陣列`而傳入不同對應內容\n\n 1.以陣列為例：\n> 假設todos是一個陣列  \n> `<li v-for=“(Todo,8) in todos”>`  \n> Todo：回傳的是陣列中的屬性值  \n> 8 ：回傳的是陣列中的索引值  \n> 小結論：  \n> （ ）括號中的參數都可以自行命名，  \n> 但是第一個會回傳一定是陣列中屬性值，第二個才是索引值  \n>   \n> 2.以物件為例：  \n> 範例：v-for=“(val, name, index) in object”  \n> 小結論：參數中名字都可以自行更換，但每個參數位置會回傳的值都是固定的  \n> 如：範例一定會先回傳物件中屬性值、接著才是屬性名稱、最後才是索引  \n>   \n> 二、建議，基本上v-for參數撰寫，就是照著官網提供對應參數位置填寫即可  \n![](https://i.imgur.com/aD5asbF.png)\n\n### 範例：v-for + index\n```javascript\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item,index) in list\" v-if=\"item.age<25\">\n      {{index+1}}-{{item.name}}年齡是{{item.age}}歲\n    </li>\n  </ul>\n</div>\n\n<script>\n  var app = new Vue({\n    el: '',\n    data: {｀\n      list: [\n        {\n          name: '小明',\n          age: 16\n        },\n        {\n          name: '媽媽',\n          age: 38,\n        },\n        {\n          name: '漂亮阿姨',\n          age: 24\n        }\n      ]\n    }\n  })\n</script>\n```\n\n### 範例：v-for + range\n注意：\n1.範圍`n`只能是整數\n2.range 索引 `item`由 1 開始計算\n```html\n         <ul>\n            //範例：<li v-for=\"item in n\">\n            <li v-for=\"item in 7\">\n              {{ item }}\n            </li>\n          </ul>\n渲染結果：\n1234567\n```\n\n### 範例：過濾資料（filter）\n```html\n<p>請製作過濾資料</p>\n<input type=\"text\" class=\"form-control\" v-model=\"filterText\" @keyup.enter='filterData'>\n<ul>\n<li v-for=\"(item, key) in filterArray\" :key=\"item.age\">\n{{ key }} - {{ item.name }} {{ item.age }} 歲 \n<input type=\"text\">\n</li>\n</ul>\n```\n```javascript\nfilterArray: [],\nfilterText: ''\n\nfilterData: function () {\nvar vm = this; //這邊的this指的是取得Data中資料\nvm.filterArray = vm.arrayData.filter(function (item) {\nconsole.log(vm.filterText, item.name, item.name.match(vm.filterText))\n // console.log這行是為了檢查輸入文字跟陣列中是否相同\nreturn item.name.match(vm.filterText);\n// 如果是true則直接回傳到filterArray陣列中\n})\n},\n```\n補充討問：\n> vm 使用情境？ [討論連結](https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6445048)  \n> 因為要使用 filter() 這個函式，所以將 vm = this ， 如果沒有使用到處理陣列的函式( forEach, filter, map, find...)，就可以直接用 this 了  \n\n### 範例：在Template上使用v-for\n```html\n        <h4>Template 的運用</h4>\n          <p>請將兩個 tr 一組使用 v-for</p>\n          <table class=\"table\">\n            <!-- template不會輸出 -->\n            <template v-for=\"item in arrayData\">\n              <tr>\n                <td>{{item.age}}</td>\n              </tr>\n              <tr>\n                <td>{{item.name}}</td>\n              </tr>\n            </template>\n          </table>\n```\n\n### 補充：維護狀態\n主要說明`v-for`更新原理是使用`就地更新`（in-place patch）方式，不會移動DOM元素（用下方例子說明就是`input位置不變`），僅會更新arrayData陣列中的資料 \n> 若還不清楚，可以參考同學[整理結果](https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6599536)  \n問題：DOM元素內容不更換的話，會造成網頁渲染畫面出錯\n改善方式：`提供一個唯一key屬性`\n如下範例：\n```html\n<li v-for=\"(item, key) in arrayData\" :key=\"item.age\">\n{{ key }} - {{ item.name }} {{ item.age }} 歲 \n<input type=\"text\">\n</li>\n```\n\n### v-for與v-if一同使用\n當它們處於同一節點，v-for的優先級比v-if更高\n官網表示不推薦在同一元素是使用`v-if`和`v-for` [原因](https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7-%E5%BF%85%E8%A6%81)\n\n### 注意事項：\n> Vue不能監測下列情況的陣列  \n> 1.利用索引直接設置一個陣列 如：  \n```javascript\nthis.arrayData[0]={\nname:’強尼’\n},\n```\n> 2.修改陣列長度時 如：this.arrayData.length = 0;  \n> 該如何修正錯誤呢？  \n> 使用`Vue.set` 先附上[參考資料](https://cn.vuejs.org/v2/api/#Vue-set)  \n> 寫法：`Vue.set( target, propertyName/index, value )` \n> 範例：```javascript\n   Vue.set(this.arrayData, 0, {\n   name: '強尼',\n   age: 8     }```\n\n\n","source":"_posts/2019-09-02-Vue模板語法V-for介紹.md","raw":"---\ntitle: Vue指令V-for介紹\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 1331664425\ndate:\n---\n\n參考資料：\n[官網v-for介紹](https://cn.vuejs.org/v2/guide/list.html)\n[練習檔案](https://codepen.io/chunwen/pen/xvYyRG?editors=1010)\n<!-- more -->\n- - - -\n## V-for\n### 用途：\n將資料列表列渲染出來\n\n### 簡介：\nv-for 指令需要使用 `item in items` 形式來做撰寫\n而v-for會因為後方`items`接的是 `物件` 還是 `陣列`而傳入不同對應內容\n\n 1.以陣列為例：\n> 假設todos是一個陣列  \n> `<li v-for=“(Todo,8) in todos”>`  \n> Todo：回傳的是陣列中的屬性值  \n> 8 ：回傳的是陣列中的索引值  \n> 小結論：  \n> （ ）括號中的參數都可以自行命名，  \n> 但是第一個會回傳一定是陣列中屬性值，第二個才是索引值  \n>   \n> 2.以物件為例：  \n> 範例：v-for=“(val, name, index) in object”  \n> 小結論：參數中名字都可以自行更換，但每個參數位置會回傳的值都是固定的  \n> 如：範例一定會先回傳物件中屬性值、接著才是屬性名稱、最後才是索引  \n>   \n> 二、建議，基本上v-for參數撰寫，就是照著官網提供對應參數位置填寫即可  \n![](https://i.imgur.com/aD5asbF.png)\n\n### 範例：v-for + index\n```javascript\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(item,index) in list\" v-if=\"item.age<25\">\n      {{index+1}}-{{item.name}}年齡是{{item.age}}歲\n    </li>\n  </ul>\n</div>\n\n<script>\n  var app = new Vue({\n    el: '',\n    data: {｀\n      list: [\n        {\n          name: '小明',\n          age: 16\n        },\n        {\n          name: '媽媽',\n          age: 38,\n        },\n        {\n          name: '漂亮阿姨',\n          age: 24\n        }\n      ]\n    }\n  })\n</script>\n```\n\n### 範例：v-for + range\n注意：\n1.範圍`n`只能是整數\n2.range 索引 `item`由 1 開始計算\n```html\n         <ul>\n            //範例：<li v-for=\"item in n\">\n            <li v-for=\"item in 7\">\n              {{ item }}\n            </li>\n          </ul>\n渲染結果：\n1234567\n```\n\n### 範例：過濾資料（filter）\n```html\n<p>請製作過濾資料</p>\n<input type=\"text\" class=\"form-control\" v-model=\"filterText\" @keyup.enter='filterData'>\n<ul>\n<li v-for=\"(item, key) in filterArray\" :key=\"item.age\">\n{{ key }} - {{ item.name }} {{ item.age }} 歲 \n<input type=\"text\">\n</li>\n</ul>\n```\n```javascript\nfilterArray: [],\nfilterText: ''\n\nfilterData: function () {\nvar vm = this; //這邊的this指的是取得Data中資料\nvm.filterArray = vm.arrayData.filter(function (item) {\nconsole.log(vm.filterText, item.name, item.name.match(vm.filterText))\n // console.log這行是為了檢查輸入文字跟陣列中是否相同\nreturn item.name.match(vm.filterText);\n// 如果是true則直接回傳到filterArray陣列中\n})\n},\n```\n補充討問：\n> vm 使用情境？ [討論連結](https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6445048)  \n> 因為要使用 filter() 這個函式，所以將 vm = this ， 如果沒有使用到處理陣列的函式( forEach, filter, map, find...)，就可以直接用 this 了  \n\n### 範例：在Template上使用v-for\n```html\n        <h4>Template 的運用</h4>\n          <p>請將兩個 tr 一組使用 v-for</p>\n          <table class=\"table\">\n            <!-- template不會輸出 -->\n            <template v-for=\"item in arrayData\">\n              <tr>\n                <td>{{item.age}}</td>\n              </tr>\n              <tr>\n                <td>{{item.name}}</td>\n              </tr>\n            </template>\n          </table>\n```\n\n### 補充：維護狀態\n主要說明`v-for`更新原理是使用`就地更新`（in-place patch）方式，不會移動DOM元素（用下方例子說明就是`input位置不變`），僅會更新arrayData陣列中的資料 \n> 若還不清楚，可以參考同學[整理結果](https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6599536)  \n問題：DOM元素內容不更換的話，會造成網頁渲染畫面出錯\n改善方式：`提供一個唯一key屬性`\n如下範例：\n```html\n<li v-for=\"(item, key) in arrayData\" :key=\"item.age\">\n{{ key }} - {{ item.name }} {{ item.age }} 歲 \n<input type=\"text\">\n</li>\n```\n\n### v-for與v-if一同使用\n當它們處於同一節點，v-for的優先級比v-if更高\n官網表示不推薦在同一元素是使用`v-if`和`v-for` [原因](https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7-%E5%BF%85%E8%A6%81)\n\n### 注意事項：\n> Vue不能監測下列情況的陣列  \n> 1.利用索引直接設置一個陣列 如：  \n```javascript\nthis.arrayData[0]={\nname:’強尼’\n},\n```\n> 2.修改陣列長度時 如：this.arrayData.length = 0;  \n> 該如何修正錯誤呢？  \n> 使用`Vue.set` 先附上[參考資料](https://cn.vuejs.org/v2/api/#Vue-set)  \n> 寫法：`Vue.set( target, propertyName/index, value )` \n> 範例：```javascript\n   Vue.set(this.arrayData, 0, {\n   name: '強尼',\n   age: 8     }```\n\n\n","slug":"2019-09-02-Vue模板語法V-for介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t22000dzqzibc88d7pa","content":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/list.html\">官網v-for介紹</a><br><a href=\"https://codepen.io/chunwen/pen/xvYyRG?editors=1010\">練習檔案</a></p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"V-for\"><a href=\"#V-for\" class=\"headerlink\" title=\"V-for\"></a>V-for</h2><h3 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a>用途：</h3><p>將資料列表列渲染出來</p>\n<h3 id=\"簡介：\"><a href=\"#簡介：\" class=\"headerlink\" title=\"簡介：\"></a>簡介：</h3><p>v-for 指令需要使用 <code>item in items</code> 形式來做撰寫<br>而v-for會因為後方<code>items</code>接的是 <code>物件</code> 還是 <code>陣列</code>而傳入不同對應內容</p>\n<p> 1.以陣列為例：</p>\n<blockquote>\n<p>假設todos是一個陣列<br><code>&lt;li v-for=“(Todo,8) in todos”&gt;</code><br>Todo：回傳的是陣列中的屬性值<br>8 ：回傳的是陣列中的索引值<br>小結論：<br>（ ）括號中的參數都可以自行命名，<br>但是第一個會回傳一定是陣列中屬性值，第二個才是索引值  </p>\n<p>2.以物件為例：<br>範例：v-for=“(val, name, index) in object”<br>小結論：參數中名字都可以自行更換，但每個參數位置會回傳的值都是固定的<br>如：範例一定會先回傳物件中屬性值、接著才是屬性名稱、最後才是索引  </p>\n<p>二、建議，基本上v-for參數撰寫，就是照著官網提供對應參數位置填寫即可<br><img src=\"https://i.imgur.com/aD5asbF.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"範例：v-for-index\"><a href=\"#範例：v-for-index\" class=\"headerlink\" title=\"範例：v-for + index\"></a>範例：v-for + index</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span> v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;item.age&lt;25&quot;</span>&gt;</span><br><span class=\"line\">      &#123;&#123;index+<span class=\"number\">1</span>&#125;&#125;-&#123;&#123;item.name&#125;&#125;年齡是&#123;&#123;item.age&#125;&#125;歲</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    data: &#123;｀</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">16</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;媽媽&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">38</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;漂亮阿姨&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">24</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例：v-for-range\"><a href=\"#範例：v-for-range\" class=\"headerlink\" title=\"範例：v-for + range\"></a>範例：v-for + range</h3><p>注意：<br>1.範圍<code>n</code>只能是整數<br>2.range 索引 <code>item</code>由 1 開始計算</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            //範例：<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in n&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in 7&quot;</span>&gt;</span></span><br><span class=\"line\">              &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">渲染結果：</span><br><span class=\"line\">1234567</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例：過濾資料（filter）\"><a href=\"#範例：過濾資料（filter）\" class=\"headerlink\" title=\"範例：過濾資料（filter）\"></a>範例：過濾資料（filter）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>請製作過濾資料<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;filterText&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&#x27;filterData&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in filterArray&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.age&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filterArray: [],</span><br><span class=\"line\">filterText: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">filterData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span>; <span class=\"comment\">//這邊的this指的是取得Data中資料</span></span><br><span class=\"line\">vm.filterArray = vm.arrayData.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.filterText, item.name, item.name.match(vm.filterText))</span><br><span class=\"line\"> <span class=\"comment\">// console.log這行是為了檢查輸入文字跟陣列中是否相同</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> item.name.match(vm.filterText);</span><br><span class=\"line\"><span class=\"comment\">// 如果是true則直接回傳到filterArray陣列中</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>補充討問：</p>\n<blockquote>\n<p>vm 使用情境？ <a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6445048\">討論連結</a><br>因為要使用 filter() 這個函式，所以將 vm = this ， 如果沒有使用到處理陣列的函式( forEach, filter, map, find…)，就可以直接用 this 了  </p>\n</blockquote>\n<h3 id=\"範例：在Template上使用v-for\"><a href=\"#範例：在Template上使用v-for\" class=\"headerlink\" title=\"範例：在Template上使用v-for\"></a>範例：在Template上使用v-for</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Template 的運用<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>請將兩個 tr 一組使用 v-for<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- template不會輸出 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in arrayData&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"補充：維護狀態\"><a href=\"#補充：維護狀態\" class=\"headerlink\" title=\"補充：維護狀態\"></a>補充：維護狀態</h3><p>主要說明<code>v-for</code>更新原理是使用<code>就地更新</code>（in-place patch）方式，不會移動DOM元素（用下方例子說明就是<code>input位置不變</code>），僅會更新arrayData陣列中的資料 </p>\n<blockquote>\n<p>若還不清楚，可以參考同學<a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6599536\">整理結果</a><br>問題：DOM元素內容不更換的話，會造成網頁渲染畫面出錯<br>改善方式：<code>提供一個唯一key屬性</code><br>如下範例：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in arrayData&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.age&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-for與v-if一同使用\"><a href=\"#v-for與v-if一同使用\" class=\"headerlink\" title=\"v-for與v-if一同使用\"></a>v-for與v-if一同使用</h3><p>當它們處於同一節點，v-for的優先級比v-if更高<br>官網表示不推薦在同一元素是使用<code>v-if</code>和<code>v-for</code> <a href=\"https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7-%E5%BF%85%E8%A6%81\">原因</a></p>\n<h3 id=\"注意事項：\"><a href=\"#注意事項：\" class=\"headerlink\" title=\"注意事項：\"></a>注意事項：</h3><blockquote>\n<p>Vue不能監測下列情況的陣列<br>1.利用索引直接設置一個陣列 如：  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.arrayData[<span class=\"number\">0</span>]=&#123;</span><br><span class=\"line\">name:’強尼’</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.修改陣列長度時 如：this.arrayData.length = 0;<br>該如何修正錯誤呢？<br>使用<code>Vue.set</code> 先附上<a href=\"https://cn.vuejs.org/v2/api/#Vue-set\">參考資料</a><br>寫法：<code>Vue.set( target, propertyName/index, value )</code><br>範例：<code>javascript\n   Vue.set(this.arrayData, 0, &#123;\n   name: &#39;強尼&#39;,\n   age: 8     &#125;</code></p>\n</blockquote>\n","site":{"data":{}},"length":3051,"excerpt":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/list.html\">官網v-for介紹</a><br><a href=\"https://codepen.io/chunwen/pen/xvYyRG?editors=1010\">練習檔案</a></p>","more":"<hr>\n<h2 id=\"V-for\"><a href=\"#V-for\" class=\"headerlink\" title=\"V-for\"></a>V-for</h2><h3 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a>用途：</h3><p>將資料列表列渲染出來</p>\n<h3 id=\"簡介：\"><a href=\"#簡介：\" class=\"headerlink\" title=\"簡介：\"></a>簡介：</h3><p>v-for 指令需要使用 <code>item in items</code> 形式來做撰寫<br>而v-for會因為後方<code>items</code>接的是 <code>物件</code> 還是 <code>陣列</code>而傳入不同對應內容</p>\n<p> 1.以陣列為例：</p>\n<blockquote>\n<p>假設todos是一個陣列<br><code>&lt;li v-for=“(Todo,8) in todos”&gt;</code><br>Todo：回傳的是陣列中的屬性值<br>8 ：回傳的是陣列中的索引值<br>小結論：<br>（ ）括號中的參數都可以自行命名，<br>但是第一個會回傳一定是陣列中屬性值，第二個才是索引值  </p>\n<p>2.以物件為例：<br>範例：v-for=“(val, name, index) in object”<br>小結論：參數中名字都可以自行更換，但每個參數位置會回傳的值都是固定的<br>如：範例一定會先回傳物件中屬性值、接著才是屬性名稱、最後才是索引  </p>\n<p>二、建議，基本上v-for參數撰寫，就是照著官網提供對應參數位置填寫即可<br><img src=\"https://i.imgur.com/aD5asbF.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"範例：v-for-index\"><a href=\"#範例：v-for-index\" class=\"headerlink\" title=\"範例：v-for + index\"></a>範例：v-for + index</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span> v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;item.age&lt;25&quot;</span>&gt;</span><br><span class=\"line\">      &#123;&#123;index+<span class=\"number\">1</span>&#125;&#125;-&#123;&#123;item.name&#125;&#125;年齡是&#123;&#123;item.age&#125;&#125;歲</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">  &lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    data: &#123;｀</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">16</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;媽媽&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">38</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;漂亮阿姨&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">24</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例：v-for-range\"><a href=\"#範例：v-for-range\" class=\"headerlink\" title=\"範例：v-for + range\"></a>範例：v-for + range</h3><p>注意：<br>1.範圍<code>n</code>只能是整數<br>2.range 索引 <code>item</code>由 1 開始計算</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            //範例：<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in n&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in 7&quot;</span>&gt;</span></span><br><span class=\"line\">              &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">渲染結果：</span><br><span class=\"line\">1234567</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例：過濾資料（filter）\"><a href=\"#範例：過濾資料（filter）\" class=\"headerlink\" title=\"範例：過濾資料（filter）\"></a>範例：過濾資料（filter）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>請製作過濾資料<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;filterText&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&#x27;filterData&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in filterArray&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.age&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filterArray: [],</span><br><span class=\"line\">filterText: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">filterData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"built_in\">this</span>; <span class=\"comment\">//這邊的this指的是取得Data中資料</span></span><br><span class=\"line\">vm.filterArray = vm.arrayData.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(vm.filterText, item.name, item.name.match(vm.filterText))</span><br><span class=\"line\"> <span class=\"comment\">// console.log這行是為了檢查輸入文字跟陣列中是否相同</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> item.name.match(vm.filterText);</span><br><span class=\"line\"><span class=\"comment\">// 如果是true則直接回傳到filterArray陣列中</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>補充討問：</p>\n<blockquote>\n<p>vm 使用情境？ <a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6445048\">討論連結</a><br>因為要使用 filter() 這個函式，所以將 vm = this ， 如果沒有使用到處理陣列的函式( forEach, filter, map, find…)，就可以直接用 this 了  </p>\n</blockquote>\n<h3 id=\"範例：在Template上使用v-for\"><a href=\"#範例：在Template上使用v-for\" class=\"headerlink\" title=\"範例：在Template上使用v-for\"></a>範例：在Template上使用v-for</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>Template 的運用<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>請將兩個 tr 一組使用 v-for<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- template不會輸出 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in arrayData&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"補充：維護狀態\"><a href=\"#補充：維護狀態\" class=\"headerlink\" title=\"補充：維護狀態\"></a>補充：維護狀態</h3><p>主要說明<code>v-for</code>更新原理是使用<code>就地更新</code>（in-place patch）方式，不會移動DOM元素（用下方例子說明就是<code>input位置不變</code>），僅會更新arrayData陣列中的資料 </p>\n<blockquote>\n<p>若還不清楚，可以參考同學<a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271490#questions/6599536\">整理結果</a><br>問題：DOM元素內容不更換的話，會造成網頁渲染畫面出錯<br>改善方式：<code>提供一個唯一key屬性</code><br>如下範例：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in arrayData&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.age&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v-for與v-if一同使用\"><a href=\"#v-for與v-if一同使用\" class=\"headerlink\" title=\"v-for與v-if一同使用\"></a>v-for與v-if一同使用</h3><p>當它們處於同一節點，v-for的優先級比v-if更高<br>官網表示不推薦在同一元素是使用<code>v-if</code>和<code>v-for</code> <a href=\"https://cn.vuejs.org/v2/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E7%94%A8%E5%9C%A8%E4%B8%80%E8%B5%B7-%E5%BF%85%E8%A6%81\">原因</a></p>\n<h3 id=\"注意事項：\"><a href=\"#注意事項：\" class=\"headerlink\" title=\"注意事項：\"></a>注意事項：</h3><blockquote>\n<p>Vue不能監測下列情況的陣列<br>1.利用索引直接設置一個陣列 如：  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.arrayData[<span class=\"number\">0</span>]=&#123;</span><br><span class=\"line\">name:’強尼’</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.修改陣列長度時 如：this.arrayData.length = 0;<br>該如何修正錯誤呢？<br>使用<code>Vue.set</code> 先附上<a href=\"https://cn.vuejs.org/v2/api/#Vue-set\">參考資料</a><br>寫法：<code>Vue.set( target, propertyName/index, value )</code><br>範例：<code>javascript\n   Vue.set(this.arrayData, 0, &#123;\n   name: &#39;強尼&#39;,\n   age: 8     &#125;</code></p>\n</blockquote>"},{"title":"Flex排版整理","abbrlink":41001978,"date":"2019-09-02T17:23:20.000Z","_content":"\n文章內容來源：主要整理自卡斯伯老師文章與六角學院共筆。\n<!-- more -->\n- - - -\n`Flex 中分為外容器與內元件(如下圖)，並靠調整外容器、內元件屬性`達成以下常見目的：\n1.垂直置中\n2.水平置中\n3.三欄內容不等高，但希望外框顯示為等高 父元素設定display:flex\n4.三個物件水平等距排列(數值彈性)    justify-content:space-around\n\n![](https://i.imgur.com/1lgd3M1.png)\n\n## 外層元素與內層元素簡介\nFlex 外容器屬性：\n* display：flex, inline-flex 必備屬性\n* flex-direction：決定 flex 軸線 →  [https://codepen.io/chunwen/pen/JzdNNN](https://codepen.io/chunwen/pen/JzdNNN)\n* justify-content：主軸線的對齊 → [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz)\n* flex-wrap：決定換行的屬性 → [https://codepen.io/Wcc723/pen/xroRaB](https://codepen.io/Wcc723/pen/xroRaB)\n* align-items：交錯軸線的對齊 →  [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz)\n* align-content：整體的對齊  → [https://codepen.io/chunwen/pen/qvdPmj](https://codepen.io/chunwen/pen/qvdPmj)\n\nFlex 內元件屬性：\n* flex\n\t* flex-grow：伸展比 //其數值與其它物件可分配伸展比有關\n\t* flex-shrink：收縮比\n\t* flex-basis：絕對值\n* order：排序 → [https://codepen.io/Wcc723/pen/OgKGjw](https://codepen.io/Wcc723/pen/OgKGjw)\n* align-self：單一個物件的交錯軸對齊 → [https://codepen.io/Wcc723/pen/pwMBem](https://codepen.io/Wcc723/pen/pwMBem)\n\n> 補充：flex各種預設值  \n```\nflex-direction：row\njustify-content：flex-start\nalign-items：stretch\nflex-wrap：nowrap\nflex-shrink:1;\nflex-grow:0;\norder:0;\n```\n\n### 以下將開始介紹\n1. 軸線\n2. 外部元件特性\n3. 內部元件介紹\n\n* 軸線(分為兩種)\nflex排版起頭觀念，搞懂後基本上就會30%。flex軸線主要有分兩種\n1.主軸線\n2.交錯軸\n![](https://i.imgur.com/65I3rBe.png) \n這時我們會介紹到外層屬性的flex-direction：\nFlex-direction 就是來改變上圖中的軸線方向，可以將軸線做水平反轉、轉為垂直、垂直反轉等。\nflex-direction:row(一開始預設狀態)\nflex-direction:row-reverse\n`>>交錯軸上方是Start 下方是End`\nflex-direction:column\nflex-direction:column-reverse\n`>>交錯軸左方是 Start 右方是End `\n備註：主軸線是可以調整方向的！\nTips：記得是主軸線調整方向喔!交錯軸永遠都跟主軸垂直\n![](https://i.imgur.com/08WlFJx.png)\n練習一下：\n[https://codepen.io/chunwen/pen/OqLKWw](https://codepen.io/chunwen/pen/OqLKWw)\n\n\n## 外部元件特性\n### display：flex, inline-flex\ndisplay 是我們熟知的 CSS 屬性，對於 Flexbox 來說，多了有兩種方式可以設定，預設為「flex」，其布局方式與 block 幾乎類似，都會強迫換行，但設定display:flex的子元素卻具備了更多彈性的設定，此外另外一種方式則是「inline-flex」，和 inline-block 也是幾乎雷同，意義上都是一個display:flex的元素外面包覆display:inline的屬性，在後方的元素不會換行。\n\n![](https://i.imgur.com/CTl1bn6.png)圖片來源：[深入解析 CSS Flexbox](https://www.oxxostudio.tw/articles/201501/css-flexbox.html)\n\n### flex-direction\nflex-direction 決定 flex 主軸線 的「排列方向」，分別有下列四種。範例： [https://codepen.io/chunwen/pen/JzdNNN](https://codepen.io/chunwen/pen/JzdNNN)\n\nrow：預設值，由左到右，從上到下\nrow-reverse：與 row 相反\ncolumn：從上到下，再由左到右\ncolumn-reverse：與 column 相反\n\n### justify-content(決定了主軸線的對齊方式)\njustify-content **決定了主軸線的對齊方式**，回顧上面講的 Flexbox 盒子模型，具有 main start 與 main end 左右兩個端點，justify-content 就是按照這個方式做設定，而其中的設定值總共有下列五個。( 範例： [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz) )\n\nflex-start：預設值，對齊最左邊的 main start\nflex-end：對齊最左邊的 main end\ncenter：水平置中\nspace-between：平均分配內容元素，左右元素將會與 main start 和 main end 貼齊\nspace-around：平均分配內容元素，間距也是平均分配\n\n> 備註： 27分開始，使用margin-right:auto，auto可以把剩餘空間推擠出來  \n\n### align-items(決定了交錯軸對齊方式)\nalign-items 剛好和 justify-content 相反，**align-items 決定了交錯軸對齊方式**，回想一下最上面講的 Flexbox 盒子模型，具有 cross start 與 cross end 左右兩個端點，align-items 與 align-self 就是按照這個方式做設定，設定值總共有下列五個。( 範例： [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz) )\n\nflex-start：對齊最上面的 cross start\nflex-end：對齊最下面的 cross end\ncenter：垂直置中\nstretch：預設值，將內容元素全部撐開至 Flexbox 的高度\nbaseline：以所有內容元素的基線作為對齊標準\n\n::Tips：:: 注意 stretch 在高度被限制的情況下不會正常伸展\n \n### align-content\n主要針對多行版本(範例： [https://codepen.io/chunwen/pen/qvdPmj](https://codepen.io/chunwen/pen/qvdPmj) )\n\n### flex-wrap\n [範例](https://codepen.io/chunwen/pen/ywWxXR)\n這個屬性負責的是讓內容的元素換行，因為當我們把父元素的 display 設定為 flex 或 inline-flex 的時候，子元素就是以單行的方式，彈性撐滿父元素，所以就要利用 flex-wrap 來換行，共有三個設定值。\n\nnowrap：預設值，單行\nwrap：多行\nwrap-reverse：多行，但內容元素反轉\n![](https://i.imgur.com/lKQ6ATr.png)圖片來源：[深入解析 CSS Flexbox](https://www.oxxostudio.tw/articles/201501/css-flexbox.html)\n\n## 內層元素\n### align-self\nalign-self 的設定與 align-items 相同，但目的不同，align-self 的作用在於覆寫已經套用 align-items 的屬性， align-items 是針對子元素\n\n### order\n剛剛在 flex-wrap 的屬性裏頭看到了可以把元素反轉，order 這個屬性更是可以直接指定一個數字，就可以由小到大的排列順序，沒有寫的話就往後排。\n(範本： [https://codepen.io/chunwen/pen/PLqJRX](https://codepen.io/chunwen/pen/PLqJRX) )\n\nTips：順序由小排到大，order:1開始，接續2、3、4中間不能斷\n\n### flex(影片42分開始) \n[範例](https://codepen.io/chunwen/pen/JzqZLr)\nflex 其實是由三個屬性組合而成，依照先後順序分別是「flex-grow」、「flex-shrink」和「flex-basis」，至於三個屬性的解釋如下：\n\nflex-grow：數字，無單位，當子元素的 flex-basis 長度「小」於它自己在父元素分配到的長度，按照數字做相對應的「伸展」比例分配，**預設值為 0**，不會進行彈性變化，不可為負值，設為 1 則會進行彈性變化。\n\nflex-shrink：數字，無單位，當子元素的 flex-basis 長度「大」於它自己在父元素分配到的長度，按照數字做相對應的「壓縮」比例分配，**預設值為 1**，設為 0 的話不會進行彈性變化，不可為負值。\n\nflex-basis：子元素的基本大小，作為父元素的大小比較基準，**預設值為 0**，也因為預設值為 0，所以沒有設定此屬性的時候，會以直接採用 flex-grow 屬性，flex-basis 也可以設為 auto，如果設為 auto，就表示子元素以自己的基本大小為單位。\n\n三個屬性可以分開設定，也可以合在一起用一個 flex 統一設定\n\n### Flex-grow 公式\n(剩餘可分配寬度 / 總分配等分) * 分配等分 + 固定佔有寬度=一個元素寬度 原理說明： [https://css-tricks.com/flex-grow-is-weird/](https://css-tricks.com/flex-grow-is-weird/)\n\n![](https://i.imgur.com/joBKJab.png)\n\n### Flex-shrink 公式\n相反計算方式\n固定空間 - (多餘可分配的空間 / 總分配等分 * 分配等分)\n\n*白話文: 多的空間拿出來分一分*\n\n## Flex語法 \n參考資料:\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex) [W3c](https://www.w3schools.com/cssref/css3_pr_flex.asp)\nflex 屬性可以指定1個，2個或3個值\n單值語法：\n1. 一個無單位數( <number>) :它會被當作<flex-grow>的值 EX：flex : 1\n2. 一個有效的寬度( width)值:它會被當作 <flex-basis>的值 EX：flex : 30px\n3. 關鍵字none，auto或initial\nEX：flex：auto 等於 flex：1 1 auto\nflex：initial 等於 0 1 auto\nflex：none 等於 0 0 auto\n\n雙值語法 ： ::第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值:: 。第二個值必須為以下之一：\n1. 一個無單位數：它會被當作 <flex-shrink> 的值\n2. 一個有效的寬度值:它會被當作 <flex-basis> 的值\n\n三值語法：\n1. 第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值。\n2. 第二個值必須為一個無單位數，並且它會被當作 <flex-shrink> 的值。\n3. 第三個值必須為一個有效的寬度值，並且它會被當作 <flex-basis> 的值。\n- - - -\n問答\nQ：flex: 0 0 30%;這行是什麼意思??\n\nflex是(flex-grow、flex-shrink 和 flex-basis)縮寫\n因此上面分別代表\nflex-grow：0\nflex-shrink：0\nflex-basis：30%\n>>flex 寬度設百分比 是依照父元素寬度(不含padding值)\nQ：這三個區塊的高度一樣是下了什麼語法呢?我好像沒有看到min-height/max-height語法在上面? [練習](https://codepen.io/chunwen/pen/bZZWpG)\n\n![](https://i.imgur.com/gkBhyNk.png)\n\nA：在.item-group 上設置 display: flex 就可以使內部的子元素等高嚕!\n\n- - - -\n## 參考資料(建議閱讀順序)\n說明為何要使用flex-box/介紹flex練習小遊戲 ： [6 Reasons to Start Using Flexbox](https://bitsofco.de/6-reasons-to-start-using-flexbox/) (1)\n六角學院 [flex共筆](https://paper.dropbox.com/doc/Flex-tvaJQP4EtjCMAK0pgnpGt) (2)\n六角學院卡斯柏 [blog](https://wcc723.github.io/css/2017/07/21/css-flex/) (2)\n六角學院 [影片教學](https://www.youtube.com/watch?v=lmBM7_OTDBQ) (3)\n\n若還有不了解地方可以再參考下面文件\n[介紹清楚且排版舒適](http://fokayx.com/2015/12/24/CSS-Flex-Guide.html) (1)\n非常詳細 [部落格](https://www.oxxostudio.tw/articles/201501/css-flexbox.html) (2) \n[Alex排版教學](https://www.youtube.com/watch?v=_nCBQ6AIzDU) (3 缺點：時間太長)\n[https://css-tricks.com/almanac/properties/f/flex/](https://css-tricks.com/almanac/properties/f/flex/) (3)\n\n練習工具：\n好玩的青蛙遊戲： [https://flexboxfroggy.com/](https://flexboxfroggy.com/) ","source":"_posts/2019-09-03Flex排版整理.md","raw":"---\ntitle: Flex排版整理\ntags:\n  - Flex\n  - Css\ncategories:\n  - Css\nabbrlink: 41001978\ndate:\n---\n\n文章內容來源：主要整理自卡斯伯老師文章與六角學院共筆。\n<!-- more -->\n- - - -\n`Flex 中分為外容器與內元件(如下圖)，並靠調整外容器、內元件屬性`達成以下常見目的：\n1.垂直置中\n2.水平置中\n3.三欄內容不等高，但希望外框顯示為等高 父元素設定display:flex\n4.三個物件水平等距排列(數值彈性)    justify-content:space-around\n\n![](https://i.imgur.com/1lgd3M1.png)\n\n## 外層元素與內層元素簡介\nFlex 外容器屬性：\n* display：flex, inline-flex 必備屬性\n* flex-direction：決定 flex 軸線 →  [https://codepen.io/chunwen/pen/JzdNNN](https://codepen.io/chunwen/pen/JzdNNN)\n* justify-content：主軸線的對齊 → [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz)\n* flex-wrap：決定換行的屬性 → [https://codepen.io/Wcc723/pen/xroRaB](https://codepen.io/Wcc723/pen/xroRaB)\n* align-items：交錯軸線的對齊 →  [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz)\n* align-content：整體的對齊  → [https://codepen.io/chunwen/pen/qvdPmj](https://codepen.io/chunwen/pen/qvdPmj)\n\nFlex 內元件屬性：\n* flex\n\t* flex-grow：伸展比 //其數值與其它物件可分配伸展比有關\n\t* flex-shrink：收縮比\n\t* flex-basis：絕對值\n* order：排序 → [https://codepen.io/Wcc723/pen/OgKGjw](https://codepen.io/Wcc723/pen/OgKGjw)\n* align-self：單一個物件的交錯軸對齊 → [https://codepen.io/Wcc723/pen/pwMBem](https://codepen.io/Wcc723/pen/pwMBem)\n\n> 補充：flex各種預設值  \n```\nflex-direction：row\njustify-content：flex-start\nalign-items：stretch\nflex-wrap：nowrap\nflex-shrink:1;\nflex-grow:0;\norder:0;\n```\n\n### 以下將開始介紹\n1. 軸線\n2. 外部元件特性\n3. 內部元件介紹\n\n* 軸線(分為兩種)\nflex排版起頭觀念，搞懂後基本上就會30%。flex軸線主要有分兩種\n1.主軸線\n2.交錯軸\n![](https://i.imgur.com/65I3rBe.png) \n這時我們會介紹到外層屬性的flex-direction：\nFlex-direction 就是來改變上圖中的軸線方向，可以將軸線做水平反轉、轉為垂直、垂直反轉等。\nflex-direction:row(一開始預設狀態)\nflex-direction:row-reverse\n`>>交錯軸上方是Start 下方是End`\nflex-direction:column\nflex-direction:column-reverse\n`>>交錯軸左方是 Start 右方是End `\n備註：主軸線是可以調整方向的！\nTips：記得是主軸線調整方向喔!交錯軸永遠都跟主軸垂直\n![](https://i.imgur.com/08WlFJx.png)\n練習一下：\n[https://codepen.io/chunwen/pen/OqLKWw](https://codepen.io/chunwen/pen/OqLKWw)\n\n\n## 外部元件特性\n### display：flex, inline-flex\ndisplay 是我們熟知的 CSS 屬性，對於 Flexbox 來說，多了有兩種方式可以設定，預設為「flex」，其布局方式與 block 幾乎類似，都會強迫換行，但設定display:flex的子元素卻具備了更多彈性的設定，此外另外一種方式則是「inline-flex」，和 inline-block 也是幾乎雷同，意義上都是一個display:flex的元素外面包覆display:inline的屬性，在後方的元素不會換行。\n\n![](https://i.imgur.com/CTl1bn6.png)圖片來源：[深入解析 CSS Flexbox](https://www.oxxostudio.tw/articles/201501/css-flexbox.html)\n\n### flex-direction\nflex-direction 決定 flex 主軸線 的「排列方向」，分別有下列四種。範例： [https://codepen.io/chunwen/pen/JzdNNN](https://codepen.io/chunwen/pen/JzdNNN)\n\nrow：預設值，由左到右，從上到下\nrow-reverse：與 row 相反\ncolumn：從上到下，再由左到右\ncolumn-reverse：與 column 相反\n\n### justify-content(決定了主軸線的對齊方式)\njustify-content **決定了主軸線的對齊方式**，回顧上面講的 Flexbox 盒子模型，具有 main start 與 main end 左右兩個端點，justify-content 就是按照這個方式做設定，而其中的設定值總共有下列五個。( 範例： [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz) )\n\nflex-start：預設值，對齊最左邊的 main start\nflex-end：對齊最左邊的 main end\ncenter：水平置中\nspace-between：平均分配內容元素，左右元素將會與 main start 和 main end 貼齊\nspace-around：平均分配內容元素，間距也是平均分配\n\n> 備註： 27分開始，使用margin-right:auto，auto可以把剩餘空間推擠出來  \n\n### align-items(決定了交錯軸對齊方式)\nalign-items 剛好和 justify-content 相反，**align-items 決定了交錯軸對齊方式**，回想一下最上面講的 Flexbox 盒子模型，具有 cross start 與 cross end 左右兩個端點，align-items 與 align-self 就是按照這個方式做設定，設定值總共有下列五個。( 範例： [https://codepen.io/chunwen/pen/wOaeXz](https://codepen.io/chunwen/pen/wOaeXz) )\n\nflex-start：對齊最上面的 cross start\nflex-end：對齊最下面的 cross end\ncenter：垂直置中\nstretch：預設值，將內容元素全部撐開至 Flexbox 的高度\nbaseline：以所有內容元素的基線作為對齊標準\n\n::Tips：:: 注意 stretch 在高度被限制的情況下不會正常伸展\n \n### align-content\n主要針對多行版本(範例： [https://codepen.io/chunwen/pen/qvdPmj](https://codepen.io/chunwen/pen/qvdPmj) )\n\n### flex-wrap\n [範例](https://codepen.io/chunwen/pen/ywWxXR)\n這個屬性負責的是讓內容的元素換行，因為當我們把父元素的 display 設定為 flex 或 inline-flex 的時候，子元素就是以單行的方式，彈性撐滿父元素，所以就要利用 flex-wrap 來換行，共有三個設定值。\n\nnowrap：預設值，單行\nwrap：多行\nwrap-reverse：多行，但內容元素反轉\n![](https://i.imgur.com/lKQ6ATr.png)圖片來源：[深入解析 CSS Flexbox](https://www.oxxostudio.tw/articles/201501/css-flexbox.html)\n\n## 內層元素\n### align-self\nalign-self 的設定與 align-items 相同，但目的不同，align-self 的作用在於覆寫已經套用 align-items 的屬性， align-items 是針對子元素\n\n### order\n剛剛在 flex-wrap 的屬性裏頭看到了可以把元素反轉，order 這個屬性更是可以直接指定一個數字，就可以由小到大的排列順序，沒有寫的話就往後排。\n(範本： [https://codepen.io/chunwen/pen/PLqJRX](https://codepen.io/chunwen/pen/PLqJRX) )\n\nTips：順序由小排到大，order:1開始，接續2、3、4中間不能斷\n\n### flex(影片42分開始) \n[範例](https://codepen.io/chunwen/pen/JzqZLr)\nflex 其實是由三個屬性組合而成，依照先後順序分別是「flex-grow」、「flex-shrink」和「flex-basis」，至於三個屬性的解釋如下：\n\nflex-grow：數字，無單位，當子元素的 flex-basis 長度「小」於它自己在父元素分配到的長度，按照數字做相對應的「伸展」比例分配，**預設值為 0**，不會進行彈性變化，不可為負值，設為 1 則會進行彈性變化。\n\nflex-shrink：數字，無單位，當子元素的 flex-basis 長度「大」於它自己在父元素分配到的長度，按照數字做相對應的「壓縮」比例分配，**預設值為 1**，設為 0 的話不會進行彈性變化，不可為負值。\n\nflex-basis：子元素的基本大小，作為父元素的大小比較基準，**預設值為 0**，也因為預設值為 0，所以沒有設定此屬性的時候，會以直接採用 flex-grow 屬性，flex-basis 也可以設為 auto，如果設為 auto，就表示子元素以自己的基本大小為單位。\n\n三個屬性可以分開設定，也可以合在一起用一個 flex 統一設定\n\n### Flex-grow 公式\n(剩餘可分配寬度 / 總分配等分) * 分配等分 + 固定佔有寬度=一個元素寬度 原理說明： [https://css-tricks.com/flex-grow-is-weird/](https://css-tricks.com/flex-grow-is-weird/)\n\n![](https://i.imgur.com/joBKJab.png)\n\n### Flex-shrink 公式\n相反計算方式\n固定空間 - (多餘可分配的空間 / 總分配等分 * 分配等分)\n\n*白話文: 多的空間拿出來分一分*\n\n## Flex語法 \n參考資料:\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex) [W3c](https://www.w3schools.com/cssref/css3_pr_flex.asp)\nflex 屬性可以指定1個，2個或3個值\n單值語法：\n1. 一個無單位數( <number>) :它會被當作<flex-grow>的值 EX：flex : 1\n2. 一個有效的寬度( width)值:它會被當作 <flex-basis>的值 EX：flex : 30px\n3. 關鍵字none，auto或initial\nEX：flex：auto 等於 flex：1 1 auto\nflex：initial 等於 0 1 auto\nflex：none 等於 0 0 auto\n\n雙值語法 ： ::第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值:: 。第二個值必須為以下之一：\n1. 一個無單位數：它會被當作 <flex-shrink> 的值\n2. 一個有效的寬度值:它會被當作 <flex-basis> 的值\n\n三值語法：\n1. 第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值。\n2. 第二個值必須為一個無單位數，並且它會被當作 <flex-shrink> 的值。\n3. 第三個值必須為一個有效的寬度值，並且它會被當作 <flex-basis> 的值。\n- - - -\n問答\nQ：flex: 0 0 30%;這行是什麼意思??\n\nflex是(flex-grow、flex-shrink 和 flex-basis)縮寫\n因此上面分別代表\nflex-grow：0\nflex-shrink：0\nflex-basis：30%\n>>flex 寬度設百分比 是依照父元素寬度(不含padding值)\nQ：這三個區塊的高度一樣是下了什麼語法呢?我好像沒有看到min-height/max-height語法在上面? [練習](https://codepen.io/chunwen/pen/bZZWpG)\n\n![](https://i.imgur.com/gkBhyNk.png)\n\nA：在.item-group 上設置 display: flex 就可以使內部的子元素等高嚕!\n\n- - - -\n## 參考資料(建議閱讀順序)\n說明為何要使用flex-box/介紹flex練習小遊戲 ： [6 Reasons to Start Using Flexbox](https://bitsofco.de/6-reasons-to-start-using-flexbox/) (1)\n六角學院 [flex共筆](https://paper.dropbox.com/doc/Flex-tvaJQP4EtjCMAK0pgnpGt) (2)\n六角學院卡斯柏 [blog](https://wcc723.github.io/css/2017/07/21/css-flex/) (2)\n六角學院 [影片教學](https://www.youtube.com/watch?v=lmBM7_OTDBQ) (3)\n\n若還有不了解地方可以再參考下面文件\n[介紹清楚且排版舒適](http://fokayx.com/2015/12/24/CSS-Flex-Guide.html) (1)\n非常詳細 [部落格](https://www.oxxostudio.tw/articles/201501/css-flexbox.html) (2) \n[Alex排版教學](https://www.youtube.com/watch?v=_nCBQ6AIzDU) (3 缺點：時間太長)\n[https://css-tricks.com/almanac/properties/f/flex/](https://css-tricks.com/almanac/properties/f/flex/) (3)\n\n練習工具：\n好玩的青蛙遊戲： [https://flexboxfroggy.com/](https://flexboxfroggy.com/) ","slug":"2019-09-03Flex排版整理","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t24000hzqzi2ogl4aen","content":"<p>文章內容來源：主要整理自卡斯伯老師文章與六角學院共筆。</p>\n<span id=\"more\"></span>\n<hr>\n<p><code>Flex 中分為外容器與內元件(如下圖)，並靠調整外容器、內元件屬性</code>達成以下常見目的：<br>1.垂直置中<br>2.水平置中<br>3.三欄內容不等高，但希望外框顯示為等高 父元素設定display:flex<br>4.三個物件水平等距排列(數值彈性)    justify-content:space-around</p>\n<p><img src=\"https://i.imgur.com/1lgd3M1.png\" alt=\"\"></p>\n<h2 id=\"外層元素與內層元素簡介\"><a href=\"#外層元素與內層元素簡介\" class=\"headerlink\" title=\"外層元素與內層元素簡介\"></a>外層元素與內層元素簡介</h2><p>Flex 外容器屬性：</p>\n<ul>\n<li>display：flex, inline-flex 必備屬性</li>\n<li>flex-direction：決定 flex 軸線 →  <a href=\"https://codepen.io/chunwen/pen/JzdNNN\">https://codepen.io/chunwen/pen/JzdNNN</a></li>\n<li>justify-content：主軸線的對齊 → <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a></li>\n<li>flex-wrap：決定換行的屬性 → <a href=\"https://codepen.io/Wcc723/pen/xroRaB\">https://codepen.io/Wcc723/pen/xroRaB</a></li>\n<li>align-items：交錯軸線的對齊 →  <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a></li>\n<li>align-content：整體的對齊  → <a href=\"https://codepen.io/chunwen/pen/qvdPmj\">https://codepen.io/chunwen/pen/qvdPmj</a></li>\n</ul>\n<p>Flex 內元件屬性：</p>\n<ul>\n<li>flex<ul>\n<li>flex-grow：伸展比 //其數值與其它物件可分配伸展比有關</li>\n<li>flex-shrink：收縮比</li>\n<li>flex-basis：絕對值</li>\n</ul>\n</li>\n<li>order：排序 → <a href=\"https://codepen.io/Wcc723/pen/OgKGjw\">https://codepen.io/Wcc723/pen/OgKGjw</a></li>\n<li>align-self：單一個物件的交錯軸對齊 → <a href=\"https://codepen.io/Wcc723/pen/pwMBem\">https://codepen.io/Wcc723/pen/pwMBem</a></li>\n</ul>\n<blockquote>\n<p>補充：flex各種預設值  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction：row</span><br><span class=\"line\">justify-content：flex-start</span><br><span class=\"line\">align-items：stretch</span><br><span class=\"line\">flex-wrap：nowrap</span><br><span class=\"line\">flex-shrink:1;</span><br><span class=\"line\">flex-grow:0;</span><br><span class=\"line\">order:0;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以下將開始介紹\"><a href=\"#以下將開始介紹\" class=\"headerlink\" title=\"以下將開始介紹\"></a>以下將開始介紹</h3><ol>\n<li>軸線</li>\n<li>外部元件特性</li>\n<li>內部元件介紹</li>\n</ol>\n<ul>\n<li>軸線(分為兩種)<br>flex排版起頭觀念，搞懂後基本上就會30%。flex軸線主要有分兩種</li>\n</ul>\n<p>1.主軸線<br>2.交錯軸<br><img src=\"https://i.imgur.com/65I3rBe.png\" alt=\"\"><br>這時我們會介紹到外層屬性的flex-direction：<br>Flex-direction 就是來改變上圖中的軸線方向，可以將軸線做水平反轉、轉為垂直、垂直反轉等。<br>flex-direction:row(一開始預設狀態)<br>flex-direction:row-reverse<br><code>&gt;&gt;交錯軸上方是Start 下方是End</code><br>flex-direction:column<br>flex-direction:column-reverse<br><code>&gt;&gt;交錯軸左方是 Start 右方是End</code><br>備註：主軸線是可以調整方向的！<br>Tips：記得是主軸線調整方向喔!交錯軸永遠都跟主軸垂直<br><img src=\"https://i.imgur.com/08WlFJx.png\" alt=\"\"><br>練習一下：<br><a href=\"https://codepen.io/chunwen/pen/OqLKWw\">https://codepen.io/chunwen/pen/OqLKWw</a></p>\n<h2 id=\"外部元件特性\"><a href=\"#外部元件特性\" class=\"headerlink\" title=\"外部元件特性\"></a>外部元件特性</h2><h3 id=\"display：flex-inline-flex\"><a href=\"#display：flex-inline-flex\" class=\"headerlink\" title=\"display：flex, inline-flex\"></a>display：flex, inline-flex</h3><p>display 是我們熟知的 CSS 屬性，對於 Flexbox 來說，多了有兩種方式可以設定，預設為「flex」，其布局方式與 block 幾乎類似，都會強迫換行，但設定display:flex的子元素卻具備了更多彈性的設定，此外另外一種方式則是「inline-flex」，和 inline-block 也是幾乎雷同，意義上都是一個display:flex的元素外面包覆display:inline的屬性，在後方的元素不會換行。</p>\n<p><img src=\"https://i.imgur.com/CTl1bn6.png\" alt=\"\">圖片來源：<a href=\"https://www.oxxostudio.tw/articles/201501/css-flexbox.html\">深入解析 CSS Flexbox</a></p>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>flex-direction 決定 flex 主軸線 的「排列方向」，分別有下列四種。範例： <a href=\"https://codepen.io/chunwen/pen/JzdNNN\">https://codepen.io/chunwen/pen/JzdNNN</a></p>\n<p>row：預設值，由左到右，從上到下<br>row-reverse：與 row 相反<br>column：從上到下，再由左到右<br>column-reverse：與 column 相反</p>\n<h3 id=\"justify-content-決定了主軸線的對齊方式\"><a href=\"#justify-content-決定了主軸線的對齊方式\" class=\"headerlink\" title=\"justify-content(決定了主軸線的對齊方式)\"></a>justify-content(決定了主軸線的對齊方式)</h3><p>justify-content <strong>決定了主軸線的對齊方式</strong>，回顧上面講的 Flexbox 盒子模型，具有 main start 與 main end 左右兩個端點，justify-content 就是按照這個方式做設定，而其中的設定值總共有下列五個。( 範例： <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a> )</p>\n<p>flex-start：預設值，對齊最左邊的 main start<br>flex-end：對齊最左邊的 main end<br>center：水平置中<br>space-between：平均分配內容元素，左右元素將會與 main start 和 main end 貼齊<br>space-around：平均分配內容元素，間距也是平均分配</p>\n<blockquote>\n<p>備註： 27分開始，使用margin-right:auto，auto可以把剩餘空間推擠出來  </p>\n</blockquote>\n<h3 id=\"align-items-決定了交錯軸對齊方式\"><a href=\"#align-items-決定了交錯軸對齊方式\" class=\"headerlink\" title=\"align-items(決定了交錯軸對齊方式)\"></a>align-items(決定了交錯軸對齊方式)</h3><p>align-items 剛好和 justify-content 相反，<strong>align-items 決定了交錯軸對齊方式</strong>，回想一下最上面講的 Flexbox 盒子模型，具有 cross start 與 cross end 左右兩個端點，align-items 與 align-self 就是按照這個方式做設定，設定值總共有下列五個。( 範例： <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a> )</p>\n<p>flex-start：對齊最上面的 cross start<br>flex-end：對齊最下面的 cross end<br>center：垂直置中<br>stretch：預設值，將內容元素全部撐開至 Flexbox 的高度<br>baseline：以所有內容元素的基線作為對齊標準</p>\n<p>::Tips：:: 注意 stretch 在高度被限制的情況下不會正常伸展</p>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h3><p>主要針對多行版本(範例： <a href=\"https://codepen.io/chunwen/pen/qvdPmj\">https://codepen.io/chunwen/pen/qvdPmj</a> )</p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><p> <a href=\"https://codepen.io/chunwen/pen/ywWxXR\">範例</a><br>這個屬性負責的是讓內容的元素換行，因為當我們把父元素的 display 設定為 flex 或 inline-flex 的時候，子元素就是以單行的方式，彈性撐滿父元素，所以就要利用 flex-wrap 來換行，共有三個設定值。</p>\n<p>nowrap：預設值，單行<br>wrap：多行<br>wrap-reverse：多行，但內容元素反轉<br><img src=\"https://i.imgur.com/lKQ6ATr.png\" alt=\"\">圖片來源：<a href=\"https://www.oxxostudio.tw/articles/201501/css-flexbox.html\">深入解析 CSS Flexbox</a></p>\n<h2 id=\"內層元素\"><a href=\"#內層元素\" class=\"headerlink\" title=\"內層元素\"></a>內層元素</h2><h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p>align-self 的設定與 align-items 相同，但目的不同，align-self 的作用在於覆寫已經套用 align-items 的屬性， align-items 是針對子元素</p>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p>剛剛在 flex-wrap 的屬性裏頭看到了可以把元素反轉，order 這個屬性更是可以直接指定一個數字，就可以由小到大的排列順序，沒有寫的話就往後排。<br>(範本： <a href=\"https://codepen.io/chunwen/pen/PLqJRX\">https://codepen.io/chunwen/pen/PLqJRX</a> )</p>\n<p>Tips：順序由小排到大，order:1開始，接續2、3、4中間不能斷</p>\n<h3 id=\"flex-影片42分開始\"><a href=\"#flex-影片42分開始\" class=\"headerlink\" title=\"flex(影片42分開始)\"></a>flex(影片42分開始)</h3><p><a href=\"https://codepen.io/chunwen/pen/JzqZLr\">範例</a><br>flex 其實是由三個屬性組合而成，依照先後順序分別是「flex-grow」、「flex-shrink」和「flex-basis」，至於三個屬性的解釋如下：</p>\n<p>flex-grow：數字，無單位，當子元素的 flex-basis 長度「小」於它自己在父元素分配到的長度，按照數字做相對應的「伸展」比例分配，<strong>預設值為 0</strong>，不會進行彈性變化，不可為負值，設為 1 則會進行彈性變化。</p>\n<p>flex-shrink：數字，無單位，當子元素的 flex-basis 長度「大」於它自己在父元素分配到的長度，按照數字做相對應的「壓縮」比例分配，<strong>預設值為 1</strong>，設為 0 的話不會進行彈性變化，不可為負值。</p>\n<p>flex-basis：子元素的基本大小，作為父元素的大小比較基準，<strong>預設值為 0</strong>，也因為預設值為 0，所以沒有設定此屬性的時候，會以直接採用 flex-grow 屬性，flex-basis 也可以設為 auto，如果設為 auto，就表示子元素以自己的基本大小為單位。</p>\n<p>三個屬性可以分開設定，也可以合在一起用一個 flex 統一設定</p>\n<h3 id=\"Flex-grow-公式\"><a href=\"#Flex-grow-公式\" class=\"headerlink\" title=\"Flex-grow 公式\"></a>Flex-grow 公式</h3><p>(剩餘可分配寬度 / 總分配等分) * 分配等分 + 固定佔有寬度=一個元素寬度 原理說明： <a href=\"https://css-tricks.com/flex-grow-is-weird/\">https://css-tricks.com/flex-grow-is-weird/</a></p>\n<p><img src=\"https://i.imgur.com/joBKJab.png\" alt=\"\"></p>\n<h3 id=\"Flex-shrink-公式\"><a href=\"#Flex-shrink-公式\" class=\"headerlink\" title=\"Flex-shrink 公式\"></a>Flex-shrink 公式</h3><p>相反計算方式<br>固定空間 - (多餘可分配的空間 / 總分配等分 * 分配等分)</p>\n<p><em>白話文: 多的空間拿出來分一分</em></p>\n<h2 id=\"Flex語法\"><a href=\"#Flex語法\" class=\"headerlink\" title=\"Flex語法\"></a>Flex語法</h2><p>參考資料:<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex\">MDN</a> <a href=\"https://www.w3schools.com/cssref/css3_pr_flex.asp\">W3c</a><br>flex 屬性可以指定1個，2個或3個值<br>單值語法：</p>\n<ol>\n<li>一個無單位數( <number>) :它會被當作<flex-grow>的值 EX：flex : 1</li>\n<li>一個有效的寬度( width)值:它會被當作 <flex-basis>的值 EX：flex : 30px</li>\n<li>關鍵字none，auto或initial<br>EX：flex：auto 等於 flex：1 1 auto<br>flex：initial 等於 0 1 auto<br>flex：none 等於 0 0 auto</li>\n</ol>\n<p>雙值語法 ： ::第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值:: 。第二個值必須為以下之一：</p>\n<ol>\n<li>一個無單位數：它會被當作 <flex-shrink> 的值</li>\n<li>一個有效的寬度值:它會被當作 <flex-basis> 的值</li>\n</ol>\n<p>三值語法：</p>\n<ol>\n<li>第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值。</li>\n<li>第二個值必須為一個無單位數，並且它會被當作 <flex-shrink> 的值。</li>\n<li>第三個值必須為一個有效的寬度值，並且它會被當作 <flex-basis> 的值。</li>\n</ol>\n<hr>\n<p>問答<br>Q：flex: 0 0 30%;這行是什麼意思??</p>\n<p>flex是(flex-grow、flex-shrink 和 flex-basis)縮寫<br>因此上面分別代表<br>flex-grow：0<br>flex-shrink：0<br>flex-basis：30%</p>\n<blockquote>\n<blockquote>\n<p>flex 寬度設百分比 是依照父元素寬度(不含padding值)<br>Q：這三個區塊的高度一樣是下了什麼語法呢?我好像沒有看到min-height/max-height語法在上面? <a href=\"https://codepen.io/chunwen/pen/bZZWpG\">練習</a></p>\n</blockquote>\n</blockquote>\n<p><img src=\"https://i.imgur.com/gkBhyNk.png\" alt=\"\"></p>\n<p>A：在.item-group 上設置 display: flex 就可以使內部的子元素等高嚕!</p>\n<hr>\n<h2 id=\"參考資料-建議閱讀順序\"><a href=\"#參考資料-建議閱讀順序\" class=\"headerlink\" title=\"參考資料(建議閱讀順序)\"></a>參考資料(建議閱讀順序)</h2><p>說明為何要使用flex-box/介紹flex練習小遊戲 ： <a href=\"https://bitsofco.de/6-reasons-to-start-using-flexbox/\">6 Reasons to Start Using Flexbox</a> (1)<br>六角學院 <a href=\"https://paper.dropbox.com/doc/Flex-tvaJQP4EtjCMAK0pgnpGt\">flex共筆</a> (2)<br>六角學院卡斯柏 <a href=\"https://wcc723.github.io/css/2017/07/21/css-flex/\">blog</a> (2)<br>六角學院 <a href=\"https://www.youtube.com/watch?v=lmBM7_OTDBQ\">影片教學</a> (3)</p>\n<p>若還有不了解地方可以再參考下面文件<br><a href=\"http://fokayx.com/2015/12/24/CSS-Flex-Guide.html\">介紹清楚且排版舒適</a> (1)<br>非常詳細 <a href=\"https://www.oxxostudio.tw/articles/201501/css-flexbox.html\">部落格</a> (2)<br><a href=\"https://www.youtube.com/watch?v=_nCBQ6AIzDU\">Alex排版教學</a> (3 缺點：時間太長)<br><a href=\"https://css-tricks.com/almanac/properties/f/flex/\">https://css-tricks.com/almanac/properties/f/flex/</a> (3)</p>\n<p>練習工具：<br>好玩的青蛙遊戲： <a href=\"https://flexboxfroggy.com/\">https://flexboxfroggy.com/</a> </p>\n","site":{"data":{}},"length":4289,"excerpt":"<p>文章內容來源：主要整理自卡斯伯老師文章與六角學院共筆。</p>","more":"<hr>\n<p><code>Flex 中分為外容器與內元件(如下圖)，並靠調整外容器、內元件屬性</code>達成以下常見目的：<br>1.垂直置中<br>2.水平置中<br>3.三欄內容不等高，但希望外框顯示為等高 父元素設定display:flex<br>4.三個物件水平等距排列(數值彈性)    justify-content:space-around</p>\n<p><img src=\"https://i.imgur.com/1lgd3M1.png\" alt=\"\"></p>\n<h2 id=\"外層元素與內層元素簡介\"><a href=\"#外層元素與內層元素簡介\" class=\"headerlink\" title=\"外層元素與內層元素簡介\"></a>外層元素與內層元素簡介</h2><p>Flex 外容器屬性：</p>\n<ul>\n<li>display：flex, inline-flex 必備屬性</li>\n<li>flex-direction：決定 flex 軸線 →  <a href=\"https://codepen.io/chunwen/pen/JzdNNN\">https://codepen.io/chunwen/pen/JzdNNN</a></li>\n<li>justify-content：主軸線的對齊 → <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a></li>\n<li>flex-wrap：決定換行的屬性 → <a href=\"https://codepen.io/Wcc723/pen/xroRaB\">https://codepen.io/Wcc723/pen/xroRaB</a></li>\n<li>align-items：交錯軸線的對齊 →  <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a></li>\n<li>align-content：整體的對齊  → <a href=\"https://codepen.io/chunwen/pen/qvdPmj\">https://codepen.io/chunwen/pen/qvdPmj</a></li>\n</ul>\n<p>Flex 內元件屬性：</p>\n<ul>\n<li>flex<ul>\n<li>flex-grow：伸展比 //其數值與其它物件可分配伸展比有關</li>\n<li>flex-shrink：收縮比</li>\n<li>flex-basis：絕對值</li>\n</ul>\n</li>\n<li>order：排序 → <a href=\"https://codepen.io/Wcc723/pen/OgKGjw\">https://codepen.io/Wcc723/pen/OgKGjw</a></li>\n<li>align-self：單一個物件的交錯軸對齊 → <a href=\"https://codepen.io/Wcc723/pen/pwMBem\">https://codepen.io/Wcc723/pen/pwMBem</a></li>\n</ul>\n<blockquote>\n<p>補充：flex各種預設值  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flex-direction：row</span><br><span class=\"line\">justify-content：flex-start</span><br><span class=\"line\">align-items：stretch</span><br><span class=\"line\">flex-wrap：nowrap</span><br><span class=\"line\">flex-shrink:1;</span><br><span class=\"line\">flex-grow:0;</span><br><span class=\"line\">order:0;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以下將開始介紹\"><a href=\"#以下將開始介紹\" class=\"headerlink\" title=\"以下將開始介紹\"></a>以下將開始介紹</h3><ol>\n<li>軸線</li>\n<li>外部元件特性</li>\n<li>內部元件介紹</li>\n</ol>\n<ul>\n<li>軸線(分為兩種)<br>flex排版起頭觀念，搞懂後基本上就會30%。flex軸線主要有分兩種</li>\n</ul>\n<p>1.主軸線<br>2.交錯軸<br><img src=\"https://i.imgur.com/65I3rBe.png\" alt=\"\"><br>這時我們會介紹到外層屬性的flex-direction：<br>Flex-direction 就是來改變上圖中的軸線方向，可以將軸線做水平反轉、轉為垂直、垂直反轉等。<br>flex-direction:row(一開始預設狀態)<br>flex-direction:row-reverse<br><code>&gt;&gt;交錯軸上方是Start 下方是End</code><br>flex-direction:column<br>flex-direction:column-reverse<br><code>&gt;&gt;交錯軸左方是 Start 右方是End</code><br>備註：主軸線是可以調整方向的！<br>Tips：記得是主軸線調整方向喔!交錯軸永遠都跟主軸垂直<br><img src=\"https://i.imgur.com/08WlFJx.png\" alt=\"\"><br>練習一下：<br><a href=\"https://codepen.io/chunwen/pen/OqLKWw\">https://codepen.io/chunwen/pen/OqLKWw</a></p>\n<h2 id=\"外部元件特性\"><a href=\"#外部元件特性\" class=\"headerlink\" title=\"外部元件特性\"></a>外部元件特性</h2><h3 id=\"display：flex-inline-flex\"><a href=\"#display：flex-inline-flex\" class=\"headerlink\" title=\"display：flex, inline-flex\"></a>display：flex, inline-flex</h3><p>display 是我們熟知的 CSS 屬性，對於 Flexbox 來說，多了有兩種方式可以設定，預設為「flex」，其布局方式與 block 幾乎類似，都會強迫換行，但設定display:flex的子元素卻具備了更多彈性的設定，此外另外一種方式則是「inline-flex」，和 inline-block 也是幾乎雷同，意義上都是一個display:flex的元素外面包覆display:inline的屬性，在後方的元素不會換行。</p>\n<p><img src=\"https://i.imgur.com/CTl1bn6.png\" alt=\"\">圖片來源：<a href=\"https://www.oxxostudio.tw/articles/201501/css-flexbox.html\">深入解析 CSS Flexbox</a></p>\n<h3 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h3><p>flex-direction 決定 flex 主軸線 的「排列方向」，分別有下列四種。範例： <a href=\"https://codepen.io/chunwen/pen/JzdNNN\">https://codepen.io/chunwen/pen/JzdNNN</a></p>\n<p>row：預設值，由左到右，從上到下<br>row-reverse：與 row 相反<br>column：從上到下，再由左到右<br>column-reverse：與 column 相反</p>\n<h3 id=\"justify-content-決定了主軸線的對齊方式\"><a href=\"#justify-content-決定了主軸線的對齊方式\" class=\"headerlink\" title=\"justify-content(決定了主軸線的對齊方式)\"></a>justify-content(決定了主軸線的對齊方式)</h3><p>justify-content <strong>決定了主軸線的對齊方式</strong>，回顧上面講的 Flexbox 盒子模型，具有 main start 與 main end 左右兩個端點，justify-content 就是按照這個方式做設定，而其中的設定值總共有下列五個。( 範例： <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a> )</p>\n<p>flex-start：預設值，對齊最左邊的 main start<br>flex-end：對齊最左邊的 main end<br>center：水平置中<br>space-between：平均分配內容元素，左右元素將會與 main start 和 main end 貼齊<br>space-around：平均分配內容元素，間距也是平均分配</p>\n<blockquote>\n<p>備註： 27分開始，使用margin-right:auto，auto可以把剩餘空間推擠出來  </p>\n</blockquote>\n<h3 id=\"align-items-決定了交錯軸對齊方式\"><a href=\"#align-items-決定了交錯軸對齊方式\" class=\"headerlink\" title=\"align-items(決定了交錯軸對齊方式)\"></a>align-items(決定了交錯軸對齊方式)</h3><p>align-items 剛好和 justify-content 相反，<strong>align-items 決定了交錯軸對齊方式</strong>，回想一下最上面講的 Flexbox 盒子模型，具有 cross start 與 cross end 左右兩個端點，align-items 與 align-self 就是按照這個方式做設定，設定值總共有下列五個。( 範例： <a href=\"https://codepen.io/chunwen/pen/wOaeXz\">https://codepen.io/chunwen/pen/wOaeXz</a> )</p>\n<p>flex-start：對齊最上面的 cross start<br>flex-end：對齊最下面的 cross end<br>center：垂直置中<br>stretch：預設值，將內容元素全部撐開至 Flexbox 的高度<br>baseline：以所有內容元素的基線作為對齊標準</p>\n<p>::Tips：:: 注意 stretch 在高度被限制的情況下不會正常伸展</p>\n<h3 id=\"align-content\"><a href=\"#align-content\" class=\"headerlink\" title=\"align-content\"></a>align-content</h3><p>主要針對多行版本(範例： <a href=\"https://codepen.io/chunwen/pen/qvdPmj\">https://codepen.io/chunwen/pen/qvdPmj</a> )</p>\n<h3 id=\"flex-wrap\"><a href=\"#flex-wrap\" class=\"headerlink\" title=\"flex-wrap\"></a>flex-wrap</h3><p> <a href=\"https://codepen.io/chunwen/pen/ywWxXR\">範例</a><br>這個屬性負責的是讓內容的元素換行，因為當我們把父元素的 display 設定為 flex 或 inline-flex 的時候，子元素就是以單行的方式，彈性撐滿父元素，所以就要利用 flex-wrap 來換行，共有三個設定值。</p>\n<p>nowrap：預設值，單行<br>wrap：多行<br>wrap-reverse：多行，但內容元素反轉<br><img src=\"https://i.imgur.com/lKQ6ATr.png\" alt=\"\">圖片來源：<a href=\"https://www.oxxostudio.tw/articles/201501/css-flexbox.html\">深入解析 CSS Flexbox</a></p>\n<h2 id=\"內層元素\"><a href=\"#內層元素\" class=\"headerlink\" title=\"內層元素\"></a>內層元素</h2><h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><p>align-self 的設定與 align-items 相同，但目的不同，align-self 的作用在於覆寫已經套用 align-items 的屬性， align-items 是針對子元素</p>\n<h3 id=\"order\"><a href=\"#order\" class=\"headerlink\" title=\"order\"></a>order</h3><p>剛剛在 flex-wrap 的屬性裏頭看到了可以把元素反轉，order 這個屬性更是可以直接指定一個數字，就可以由小到大的排列順序，沒有寫的話就往後排。<br>(範本： <a href=\"https://codepen.io/chunwen/pen/PLqJRX\">https://codepen.io/chunwen/pen/PLqJRX</a> )</p>\n<p>Tips：順序由小排到大，order:1開始，接續2、3、4中間不能斷</p>\n<h3 id=\"flex-影片42分開始\"><a href=\"#flex-影片42分開始\" class=\"headerlink\" title=\"flex(影片42分開始)\"></a>flex(影片42分開始)</h3><p><a href=\"https://codepen.io/chunwen/pen/JzqZLr\">範例</a><br>flex 其實是由三個屬性組合而成，依照先後順序分別是「flex-grow」、「flex-shrink」和「flex-basis」，至於三個屬性的解釋如下：</p>\n<p>flex-grow：數字，無單位，當子元素的 flex-basis 長度「小」於它自己在父元素分配到的長度，按照數字做相對應的「伸展」比例分配，<strong>預設值為 0</strong>，不會進行彈性變化，不可為負值，設為 1 則會進行彈性變化。</p>\n<p>flex-shrink：數字，無單位，當子元素的 flex-basis 長度「大」於它自己在父元素分配到的長度，按照數字做相對應的「壓縮」比例分配，<strong>預設值為 1</strong>，設為 0 的話不會進行彈性變化，不可為負值。</p>\n<p>flex-basis：子元素的基本大小，作為父元素的大小比較基準，<strong>預設值為 0</strong>，也因為預設值為 0，所以沒有設定此屬性的時候，會以直接採用 flex-grow 屬性，flex-basis 也可以設為 auto，如果設為 auto，就表示子元素以自己的基本大小為單位。</p>\n<p>三個屬性可以分開設定，也可以合在一起用一個 flex 統一設定</p>\n<h3 id=\"Flex-grow-公式\"><a href=\"#Flex-grow-公式\" class=\"headerlink\" title=\"Flex-grow 公式\"></a>Flex-grow 公式</h3><p>(剩餘可分配寬度 / 總分配等分) * 分配等分 + 固定佔有寬度=一個元素寬度 原理說明： <a href=\"https://css-tricks.com/flex-grow-is-weird/\">https://css-tricks.com/flex-grow-is-weird/</a></p>\n<p><img src=\"https://i.imgur.com/joBKJab.png\" alt=\"\"></p>\n<h3 id=\"Flex-shrink-公式\"><a href=\"#Flex-shrink-公式\" class=\"headerlink\" title=\"Flex-shrink 公式\"></a>Flex-shrink 公式</h3><p>相反計算方式<br>固定空間 - (多餘可分配的空間 / 總分配等分 * 分配等分)</p>\n<p><em>白話文: 多的空間拿出來分一分</em></p>\n<h2 id=\"Flex語法\"><a href=\"#Flex語法\" class=\"headerlink\" title=\"Flex語法\"></a>Flex語法</h2><p>參考資料:<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex\">MDN</a> <a href=\"https://www.w3schools.com/cssref/css3_pr_flex.asp\">W3c</a><br>flex 屬性可以指定1個，2個或3個值<br>單值語法：</p>\n<ol>\n<li>一個無單位數( <number>) :它會被當作<flex-grow>的值 EX：flex : 1</li>\n<li>一個有效的寬度( width)值:它會被當作 <flex-basis>的值 EX：flex : 30px</li>\n<li>關鍵字none，auto或initial<br>EX：flex：auto 等於 flex：1 1 auto<br>flex：initial 等於 0 1 auto<br>flex：none 等於 0 0 auto</li>\n</ol>\n<p>雙值語法 ： ::第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值:: 。第二個值必須為以下之一：</p>\n<ol>\n<li>一個無單位數：它會被當作 <flex-shrink> 的值</li>\n<li>一個有效的寬度值:它會被當作 <flex-basis> 的值</li>\n</ol>\n<p>三值語法：</p>\n<ol>\n<li>第一個值必須為一個無單位數，並且它會被當作 <flex-grow> 的值。</li>\n<li>第二個值必須為一個無單位數，並且它會被當作 <flex-shrink> 的值。</li>\n<li>第三個值必須為一個有效的寬度值，並且它會被當作 <flex-basis> 的值。</li>\n</ol>\n<hr>\n<p>問答<br>Q：flex: 0 0 30%;這行是什麼意思??</p>\n<p>flex是(flex-grow、flex-shrink 和 flex-basis)縮寫<br>因此上面分別代表<br>flex-grow：0<br>flex-shrink：0<br>flex-basis：30%</p>\n<blockquote>\n<blockquote>\n<p>flex 寬度設百分比 是依照父元素寬度(不含padding值)<br>Q：這三個區塊的高度一樣是下了什麼語法呢?我好像沒有看到min-height/max-height語法在上面? <a href=\"https://codepen.io/chunwen/pen/bZZWpG\">練習</a></p>\n</blockquote>\n</blockquote>\n<p><img src=\"https://i.imgur.com/gkBhyNk.png\" alt=\"\"></p>\n<p>A：在.item-group 上設置 display: flex 就可以使內部的子元素等高嚕!</p>\n<hr>\n<h2 id=\"參考資料-建議閱讀順序\"><a href=\"#參考資料-建議閱讀順序\" class=\"headerlink\" title=\"參考資料(建議閱讀順序)\"></a>參考資料(建議閱讀順序)</h2><p>說明為何要使用flex-box/介紹flex練習小遊戲 ： <a href=\"https://bitsofco.de/6-reasons-to-start-using-flexbox/\">6 Reasons to Start Using Flexbox</a> (1)<br>六角學院 <a href=\"https://paper.dropbox.com/doc/Flex-tvaJQP4EtjCMAK0pgnpGt\">flex共筆</a> (2)<br>六角學院卡斯柏 <a href=\"https://wcc723.github.io/css/2017/07/21/css-flex/\">blog</a> (2)<br>六角學院 <a href=\"https://www.youtube.com/watch?v=lmBM7_OTDBQ\">影片教學</a> (3)</p>\n<p>若還有不了解地方可以再參考下面文件<br><a href=\"http://fokayx.com/2015/12/24/CSS-Flex-Guide.html\">介紹清楚且排版舒適</a> (1)<br>非常詳細 <a href=\"https://www.oxxostudio.tw/articles/201501/css-flexbox.html\">部落格</a> (2)<br><a href=\"https://www.youtube.com/watch?v=_nCBQ6AIzDU\">Alex排版教學</a> (3 缺點：時間太長)<br><a href=\"https://css-tricks.com/almanac/properties/f/flex/\">https://css-tricks.com/almanac/properties/f/flex/</a> (3)</p>\n<p>練習工具：<br>好玩的青蛙遊戲： <a href=\"https://flexboxfroggy.com/\">https://flexboxfroggy.com/</a> </p>"},{"title":"JS30挑戰-Day5-Flex+Panel","abbrlink":4027575200,"date":"2019-09-03T04:46:33.000Z","_content":"\n本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[demo連結](https://chun-wen.github.io/JavaScript30/05%20-%20Flex%20Panel%20Gallery/index-chunwen.html)\n\n參考資料：\n[Alex直播連結](https://www.youtube.com/watch?v=7hGFTNGommU&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=5)\n[JS30紀錄-其他人的筆記](https://shunnien.github.io/2017/12/18/Javascript30days-5/)\n<!-- more -->\n- - - -\n## Css講解\n[Flex整理教學](https://chun-wen.github.io/2019/09/03/2019-09-03Flex%E6%8E%92%E7%89%88%E6%95%B4%E7%90%86/#more)\n### 使用Flex巢狀結構\n小技巧：可以使用`border : 1px solid red`來觀察排版\n\n```css\n/* Flex Children，這邊是針對每個p段落再設定flex container*/\n    .panel > * {\n      margin: 0;\n      width: 100%;\n      transition: transform 0.5s;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex:1;\n      border: 1px solid red;\n    }\n```\n補充：`省略.panel > * {justify-content: center;} `示意圖如下\n![](https://i.imgur.com/yBHTdgK.png)\n\n\n## JS開始講解\n### 1.動態切換class\n[影片連結](https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1524)\n[MDN-classList](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/classList) 與 jQuery add/remove/toggle 效果一樣\n```javascript\n     // class切換\n      function clickHandler(e){\n        this.classList.toggle('open')\n      }\n```\n\n### 2.兩段動畫切換\n[TransitionEnd 影片教學](https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2362)\nTransitionend：\ntransitionend 事件會在CSS transition  結束後觸發。[MDN資料](https://developer.mozilla.org/zh-CN/docs/Web/Events/transitionend)\n注意：TransitionEnd會因為屬性數量不同，而觸發不同次效果。\n可以透過`console.log(e)`查看\n課堂範例：\n```css\n.panel {\n        transition:\n        font-size 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),\n        flex 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11);\n}\n```\n```javascript\n   function changeHandler(e){\n        console.log(e)\n        if(e.propertyName.includes('flex')){\n          this.classList.toggle('open-active')\n        }\n      }\n```\n說明：\n如果我們不加入`if判斷式`來指定特定propertyName觸發，會造成效果出不來。\n原因如下：\n1.TransitionEnd會因為屬性數量不同，而觸發不同次效果\n2.而我們又使用toggle，如果是觸發偶數屬性則會`先開又被關`，基數則不會\n\n#### 小結論\n>建議：若不確定屬性數量，可以使用console.log(e)，印出來屬性數量\n\n#### 撰寫心得：\n1.卡在transitionend 事件\n2.includes 跟 === 搞混   [陣列處理方法](https://chun-wen.github.io/2019/08/30/2019-08-30-JavaScript%20%E9%99%A3%E5%88%97%E8%99%95%E7%90%86%E6%96%B9%E6%B3%95/)\n3.this用法 ","source":"_posts/2019-09-03JS30挑戰-Day5-Flex+Panel.md","raw":"---\ntitle: JS30挑戰-Day5-Flex+Panel\ntags:\n  - flex\n  - JavaScript\n  - JavaScript30天挑戰\n  - css\ncategories:\n  - JavaScript\nabbrlink: 4027575200\ndate:\n---\n\n本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[demo連結](https://chun-wen.github.io/JavaScript30/05%20-%20Flex%20Panel%20Gallery/index-chunwen.html)\n\n參考資料：\n[Alex直播連結](https://www.youtube.com/watch?v=7hGFTNGommU&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=5)\n[JS30紀錄-其他人的筆記](https://shunnien.github.io/2017/12/18/Javascript30days-5/)\n<!-- more -->\n- - - -\n## Css講解\n[Flex整理教學](https://chun-wen.github.io/2019/09/03/2019-09-03Flex%E6%8E%92%E7%89%88%E6%95%B4%E7%90%86/#more)\n### 使用Flex巢狀結構\n小技巧：可以使用`border : 1px solid red`來觀察排版\n\n```css\n/* Flex Children，這邊是針對每個p段落再設定flex container*/\n    .panel > * {\n      margin: 0;\n      width: 100%;\n      transition: transform 0.5s;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex:1;\n      border: 1px solid red;\n    }\n```\n補充：`省略.panel > * {justify-content: center;} `示意圖如下\n![](https://i.imgur.com/yBHTdgK.png)\n\n\n## JS開始講解\n### 1.動態切換class\n[影片連結](https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1524)\n[MDN-classList](https://developer.mozilla.org/zh-TW/docs/Web/API/Element/classList) 與 jQuery add/remove/toggle 效果一樣\n```javascript\n     // class切換\n      function clickHandler(e){\n        this.classList.toggle('open')\n      }\n```\n\n### 2.兩段動畫切換\n[TransitionEnd 影片教學](https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2362)\nTransitionend：\ntransitionend 事件會在CSS transition  結束後觸發。[MDN資料](https://developer.mozilla.org/zh-CN/docs/Web/Events/transitionend)\n注意：TransitionEnd會因為屬性數量不同，而觸發不同次效果。\n可以透過`console.log(e)`查看\n課堂範例：\n```css\n.panel {\n        transition:\n        font-size 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11),\n        flex 0.7s cubic-bezier(0.61,-0.19, 0.7,-0.11);\n}\n```\n```javascript\n   function changeHandler(e){\n        console.log(e)\n        if(e.propertyName.includes('flex')){\n          this.classList.toggle('open-active')\n        }\n      }\n```\n說明：\n如果我們不加入`if判斷式`來指定特定propertyName觸發，會造成效果出不來。\n原因如下：\n1.TransitionEnd會因為屬性數量不同，而觸發不同次效果\n2.而我們又使用toggle，如果是觸發偶數屬性則會`先開又被關`，基數則不會\n\n#### 小結論\n>建議：若不確定屬性數量，可以使用console.log(e)，印出來屬性數量\n\n#### 撰寫心得：\n1.卡在transitionend 事件\n2.includes 跟 === 搞混   [陣列處理方法](https://chun-wen.github.io/2019/08/30/2019-08-30-JavaScript%20%E9%99%A3%E5%88%97%E8%99%95%E7%90%86%E6%96%B9%E6%B3%95/)\n3.this用法 ","slug":"2019-09-03JS30挑戰-Day5-Flex+Panel","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t25000kzqzi0kxd5f34","content":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/05%20-%20Flex%20Panel%20Gallery/index-chunwen.html\">demo連結</a></p>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=7hGFTNGommU&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=5\">Alex直播連結</a><br><a href=\"https://shunnien.github.io/2017/12/18/Javascript30days-5/\">JS30紀錄-其他人的筆記</a></p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"Css講解\"><a href=\"#Css講解\" class=\"headerlink\" title=\"Css講解\"></a>Css講解</h2><p><a href=\"https://chun-wen.github.io/2019/09/03/2019-09-03Flex%E6%8E%92%E7%89%88%E6%95%B4%E7%90%86/#more\">Flex整理教學</a></p>\n<h3 id=\"使用Flex巢狀結構\"><a href=\"#使用Flex巢狀結構\" class=\"headerlink\" title=\"使用Flex巢狀結構\"></a>使用Flex巢狀結構</h3><p>小技巧：可以使用<code>border : 1px solid red</code>來觀察排版</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Flex Children，這邊是針對每個p段落再設定flex container*/</span></span><br><span class=\"line\">    <span class=\"selector-class\">.panel</span> &gt; * &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transition</span>: transform <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">      <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">flex</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>補充：<code>省略.panel &gt; * &#123;justify-content: center;&#125;</code>示意圖如下<br><img src=\"https://i.imgur.com/yBHTdgK.png\" alt=\"\"></p>\n<h2 id=\"JS開始講解\"><a href=\"#JS開始講解\" class=\"headerlink\" title=\"JS開始講解\"></a>JS開始講解</h2><h3 id=\"1-動態切換class\"><a href=\"#1-動態切換class\" class=\"headerlink\" title=\"1.動態切換class\"></a>1.動態切換class</h3><p><a href=\"https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1524\">影片連結</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/classList\">MDN-classList</a> 與 jQuery add/remove/toggle 效果一樣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class切換</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clickHandler</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">this</span>.classList.toggle(<span class=\"string\">&#x27;open&#x27;</span>)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-兩段動畫切換\"><a href=\"#2-兩段動畫切換\" class=\"headerlink\" title=\"2.兩段動畫切換\"></a>2.兩段動畫切換</h3><p><a href=\"https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2362\">TransitionEnd 影片教學</a><br>Transitionend：<br>transitionend 事件會在CSS transition  結束後觸發。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/transitionend\">MDN資料</a><br>注意：TransitionEnd會因為屬性數量不同，而觸發不同次效果。<br>可以透過<code>console.log(e)</code>查看<br>課堂範例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transition</span>:</span><br><span class=\"line\">        font-size <span class=\"number\">0.7s</span> <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.61</span>,-<span class=\"number\">0.19</span>, <span class=\"number\">0.7</span>,-<span class=\"number\">0.11</span>),</span><br><span class=\"line\">        flex <span class=\"number\">0.7s</span> <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.61</span>,-<span class=\"number\">0.19</span>, <span class=\"number\">0.7</span>,-<span class=\"number\">0.11</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHandler</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(e.propertyName.includes(<span class=\"string\">&#x27;flex&#x27;</span>))&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.classList.toggle(<span class=\"string\">&#x27;open-active&#x27;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>說明：<br>如果我們不加入<code>if判斷式</code>來指定特定propertyName觸發，會造成效果出不來。<br>原因如下：<br>1.TransitionEnd會因為屬性數量不同，而觸發不同次效果<br>2.而我們又使用toggle，如果是觸發偶數屬性則會<code>先開又被關</code>，基數則不會</p>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><blockquote>\n<p>建議：若不確定屬性數量，可以使用console.log(e)，印出來屬性數量</p>\n</blockquote>\n<h4 id=\"撰寫心得：\"><a href=\"#撰寫心得：\" class=\"headerlink\" title=\"撰寫心得：\"></a>撰寫心得：</h4><p>1.卡在transitionend 事件<br>2.includes 跟 === 搞混   <a href=\"https://chun-wen.github.io/2019/08/30/2019-08-30-JavaScript%20%E9%99%A3%E5%88%97%E8%99%95%E7%90%86%E6%96%B9%E6%B3%95/\">陣列處理方法</a><br>3.this用法 </p>\n","site":{"data":{}},"length":1163,"excerpt":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/05%20-%20Flex%20Panel%20Gallery/index-chunwen.html\">demo連結</a></p>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=7hGFTNGommU&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=5\">Alex直播連結</a><br><a href=\"https://shunnien.github.io/2017/12/18/Javascript30days-5/\">JS30紀錄-其他人的筆記</a></p>","more":"<hr>\n<h2 id=\"Css講解\"><a href=\"#Css講解\" class=\"headerlink\" title=\"Css講解\"></a>Css講解</h2><p><a href=\"https://chun-wen.github.io/2019/09/03/2019-09-03Flex%E6%8E%92%E7%89%88%E6%95%B4%E7%90%86/#more\">Flex整理教學</a></p>\n<h3 id=\"使用Flex巢狀結構\"><a href=\"#使用Flex巢狀結構\" class=\"headerlink\" title=\"使用Flex巢狀結構\"></a>使用Flex巢狀結構</h3><p>小技巧：可以使用<code>border : 1px solid red</code>來觀察排版</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Flex Children，這邊是針對每個p段落再設定flex container*/</span></span><br><span class=\"line\">    <span class=\"selector-class\">.panel</span> &gt; * &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">      <span class=\"attribute\">transition</span>: transform <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">      <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">      <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">      <span class=\"attribute\">flex</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>補充：<code>省略.panel &gt; * &#123;justify-content: center;&#125;</code>示意圖如下<br><img src=\"https://i.imgur.com/yBHTdgK.png\" alt=\"\"></p>\n<h2 id=\"JS開始講解\"><a href=\"#JS開始講解\" class=\"headerlink\" title=\"JS開始講解\"></a>JS開始講解</h2><h3 id=\"1-動態切換class\"><a href=\"#1-動態切換class\" class=\"headerlink\" title=\"1.動態切換class\"></a>1.動態切換class</h3><p><a href=\"https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1524\">影片連結</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Element/classList\">MDN-classList</a> 與 jQuery add/remove/toggle 效果一樣</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class切換</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clickHandler</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">this</span>.classList.toggle(<span class=\"string\">&#x27;open&#x27;</span>)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-兩段動畫切換\"><a href=\"#2-兩段動畫切換\" class=\"headerlink\" title=\"2.兩段動畫切換\"></a>2.兩段動畫切換</h3><p><a href=\"https://youtu.be/7hGFTNGommU?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2362\">TransitionEnd 影片教學</a><br>Transitionend：<br>transitionend 事件會在CSS transition  結束後觸發。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/transitionend\">MDN資料</a><br>注意：TransitionEnd會因為屬性數量不同，而觸發不同次效果。<br>可以透過<code>console.log(e)</code>查看<br>課堂範例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.panel</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">transition</span>:</span><br><span class=\"line\">        font-size <span class=\"number\">0.7s</span> <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.61</span>,-<span class=\"number\">0.19</span>, <span class=\"number\">0.7</span>,-<span class=\"number\">0.11</span>),</span><br><span class=\"line\">        flex <span class=\"number\">0.7s</span> <span class=\"built_in\">cubic-bezier</span>(<span class=\"number\">0.61</span>,-<span class=\"number\">0.19</span>, <span class=\"number\">0.7</span>,-<span class=\"number\">0.11</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeHandler</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(e.propertyName.includes(<span class=\"string\">&#x27;flex&#x27;</span>))&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.classList.toggle(<span class=\"string\">&#x27;open-active&#x27;</span>)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>說明：<br>如果我們不加入<code>if判斷式</code>來指定特定propertyName觸發，會造成效果出不來。<br>原因如下：<br>1.TransitionEnd會因為屬性數量不同，而觸發不同次效果<br>2.而我們又使用toggle，如果是觸發偶數屬性則會<code>先開又被關</code>，基數則不會</p>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><blockquote>\n<p>建議：若不確定屬性數量，可以使用console.log(e)，印出來屬性數量</p>\n</blockquote>\n<h4 id=\"撰寫心得：\"><a href=\"#撰寫心得：\" class=\"headerlink\" title=\"撰寫心得：\"></a>撰寫心得：</h4><p>1.卡在transitionend 事件<br>2.includes 跟 === 搞混   <a href=\"https://chun-wen.github.io/2019/08/30/2019-08-30-JavaScript%20%E9%99%A3%E5%88%97%E8%99%95%E7%90%86%E6%96%B9%E6%B3%95/\">陣列處理方法</a><br>3.this用法 </p>"},{"title":"JS30挑戰-day3-Update CSS Variables with JS","abbrlink":14473383,"date":"2019-09-03T15:32:55.000Z","_content":"本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[demo連結](https://chun-wen.github.io/JavaScript30/03%20-%20CSS%20Variables/index-chunewen.html)\n<!-- more -->\n[Alex影片連結](https://www.youtube.com/watch?v=fIE2Lmfbo4k&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=3)\n- - - -\nCSS變數操控（目前使用率低，所以不用深入研究）\n\n* 偽類選取器\n`:root`  ===html\n![](https://i.imgur.com/OwVpr4e.png)\n* 變數選取器寫法介紹與取用\n```css\n    /* CSS變數命名前面需要：-- */\n    :root {\n      --base: #ffc600;\n      --spacing: 10px;\n      --blur: 10px;\n    }\n    /* 變數讀取則需要var */\n    img {\n      padding: var(--spacing);\n      background: var(--base);\n      filter: blur(var(--blur));\n    }\n```\n* 補充：寫法介紹\n```\n    //自定義名稱  值（三種格式：string、長度、顏色）\nvar(custom-name, value)\n範例：\n:root {\n      --main-color: #ffc600;\n      --text: attr(class);\n      --div-size: 100px;  \n    }\n```\n參考資料：[W3cschool](https://www.w3schools.com/css/css3_variables.asp)[詳細介紹](https://muki.tw/tech/native-css-variables/)\n\n## JS\n下面主要著重使用到的語法：\n* [This](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3946)取用\n> 提醒：必須清楚知道當下this為何？  \n\n* 設定全域變數\n方法一：[使用Switch用法撰寫](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2063)\n>使用JS直接更新畫面\n方法二：使用[setProperty](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2695)\n 加入全域變數前：\n[記得確認目前變數資料放的位置](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2623)\n\n* [forEach使用](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1898)\n\n* 三元運算子 [課堂範例](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3042)\n寫法：條件 ？成立：不成立   [MDN介紹](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators)\n\n* 總結：[影片59分開始](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3560)\n\n## 心得\n1.setProperty取用  [w3cschool介紹](https://www.w3schools.com/jsref/met_cssstyle_setproperty.asp)\n2.switch用法複習\n3.this取用\n4.filter用法練習","source":"_posts/2019-09-03JS30挑戰-day3.md","raw":"---\ntitle: JS30挑戰-day3-Update CSS Variables with JS\ntags:\n  - JavaScript\n  - JavaScript30天挑戰\ncategories:\n  - JavaScript\nabbrlink: 14473383\ndate: 2019-09-03 23:32:55\n---\n本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄\n[demo連結](https://chun-wen.github.io/JavaScript30/03%20-%20CSS%20Variables/index-chunewen.html)\n<!-- more -->\n[Alex影片連結](https://www.youtube.com/watch?v=fIE2Lmfbo4k&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=3)\n- - - -\nCSS變數操控（目前使用率低，所以不用深入研究）\n\n* 偽類選取器\n`:root`  ===html\n![](https://i.imgur.com/OwVpr4e.png)\n* 變數選取器寫法介紹與取用\n```css\n    /* CSS變數命名前面需要：-- */\n    :root {\n      --base: #ffc600;\n      --spacing: 10px;\n      --blur: 10px;\n    }\n    /* 變數讀取則需要var */\n    img {\n      padding: var(--spacing);\n      background: var(--base);\n      filter: blur(var(--blur));\n    }\n```\n* 補充：寫法介紹\n```\n    //自定義名稱  值（三種格式：string、長度、顏色）\nvar(custom-name, value)\n範例：\n:root {\n      --main-color: #ffc600;\n      --text: attr(class);\n      --div-size: 100px;  \n    }\n```\n參考資料：[W3cschool](https://www.w3schools.com/css/css3_variables.asp)[詳細介紹](https://muki.tw/tech/native-css-variables/)\n\n## JS\n下面主要著重使用到的語法：\n* [This](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3946)取用\n> 提醒：必須清楚知道當下this為何？  \n\n* 設定全域變數\n方法一：[使用Switch用法撰寫](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2063)\n>使用JS直接更新畫面\n方法二：使用[setProperty](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2695)\n 加入全域變數前：\n[記得確認目前變數資料放的位置](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2623)\n\n* [forEach使用](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1898)\n\n* 三元運算子 [課堂範例](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3042)\n寫法：條件 ？成立：不成立   [MDN介紹](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators)\n\n* 總結：[影片59分開始](https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3560)\n\n## 心得\n1.setProperty取用  [w3cschool介紹](https://www.w3schools.com/jsref/met_cssstyle_setproperty.asp)\n2.switch用法複習\n3.this取用\n4.filter用法練習","slug":"2019-09-03JS30挑戰-day3","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t27000pzqzi7hkobjfw","content":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/03%20-%20CSS%20Variables/index-chunewen.html\">demo連結</a></p>\n<span id=\"more\"></span>\n<p><a href=\"https://www.youtube.com/watch?v=fIE2Lmfbo4k&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=3\">Alex影片連結</a></p>\n<hr>\n<p>CSS變數操控（目前使用率低，所以不用深入研究）</p>\n<ul>\n<li>偽類選取器<br><code>:root</code>  ===html<br><img src=\"https://i.imgur.com/OwVpr4e.png\" alt=\"\"></li>\n<li>變數選取器寫法介紹與取用<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS變數命名前面需要：-- */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  --base: <span class=\"number\">#ffc600</span>;</span><br><span class=\"line\">  --spacing: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  --blur: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 變數讀取則需要var */</span></span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--spacing);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--base);</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(<span class=\"built_in\">var</span>(--blur));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>補充：寫法介紹<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F;自定義名稱  值（三種格式：string、長度、顏色）</span><br><span class=\"line\">var(custom-name, value)</span><br><span class=\"line\">範例：</span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">      --main-color: #ffc600;</span><br><span class=\"line\">      --text: attr(class);</span><br><span class=\"line\">      --div-size: 100px;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n參考資料：<a href=\"https://www.w3schools.com/css/css3_variables.asp\">W3cschool</a><a href=\"https://muki.tw/tech/native-css-variables/\">詳細介紹</a></li>\n</ul>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><p>下面主要著重使用到的語法：</p>\n<ul>\n<li><p><a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3946\">This</a>取用</p>\n<blockquote>\n<p>提醒：必須清楚知道當下this為何？  </p>\n</blockquote>\n</li>\n<li><p>設定全域變數<br>方法一：<a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2063\">使用Switch用法撰寫</a></p>\n<blockquote>\n<p>使用JS直接更新畫面<br>方法二：使用<a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2695\">setProperty</a><br>加入全域變數前：<br><a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2623\">記得確認目前變數資料放的位置</a></p>\n</blockquote>\n</li>\n<li><p><a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1898\">forEach使用</a></p>\n</li>\n<li><p>三元運算子 <a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3042\">課堂範例</a><br>寫法：條件 ？成立：不成立   <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\">MDN介紹</a></p>\n</li>\n<li><p>總結：<a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3560\">影片59分開始</a></p>\n</li>\n</ul>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>1.setProperty取用  <a href=\"https://www.w3schools.com/jsref/met_cssstyle_setproperty.asp\">w3cschool介紹</a><br>2.switch用法複習<br>3.this取用<br>4.filter用法練習</p>\n","site":{"data":{}},"length":672,"excerpt":"<p>本篇文章主要紀錄觀看Alex大大直播紀錄後，所做的筆記記錄<br><a href=\"https://chun-wen.github.io/JavaScript30/03%20-%20CSS%20Variables/index-chunewen.html\">demo連結</a></p>","more":"<p><a href=\"https://www.youtube.com/watch?v=fIE2Lmfbo4k&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=3\">Alex影片連結</a></p>\n<hr>\n<p>CSS變數操控（目前使用率低，所以不用深入研究）</p>\n<ul>\n<li>偽類選取器<br><code>:root</code>  ===html<br><img src=\"https://i.imgur.com/OwVpr4e.png\" alt=\"\"></li>\n<li>變數選取器寫法介紹與取用<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* CSS變數命名前面需要：-- */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  --base: <span class=\"number\">#ffc600</span>;</span><br><span class=\"line\">  --spacing: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  --blur: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 變數讀取則需要var */</span></span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"built_in\">var</span>(--spacing);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--base);</span><br><span class=\"line\">  <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(<span class=\"built_in\">var</span>(--blur));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>補充：寫法介紹<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &#x2F;&#x2F;自定義名稱  值（三種格式：string、長度、顏色）</span><br><span class=\"line\">var(custom-name, value)</span><br><span class=\"line\">範例：</span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">      --main-color: #ffc600;</span><br><span class=\"line\">      --text: attr(class);</span><br><span class=\"line\">      --div-size: 100px;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n參考資料：<a href=\"https://www.w3schools.com/css/css3_variables.asp\">W3cschool</a><a href=\"https://muki.tw/tech/native-css-variables/\">詳細介紹</a></li>\n</ul>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><p>下面主要著重使用到的語法：</p>\n<ul>\n<li><p><a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3946\">This</a>取用</p>\n<blockquote>\n<p>提醒：必須清楚知道當下this為何？  </p>\n</blockquote>\n</li>\n<li><p>設定全域變數<br>方法一：<a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2063\">使用Switch用法撰寫</a></p>\n<blockquote>\n<p>使用JS直接更新畫面<br>方法二：使用<a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2695\">setProperty</a><br>加入全域變數前：<br><a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2623\">記得確認目前變數資料放的位置</a></p>\n</blockquote>\n</li>\n<li><p><a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1898\">forEach使用</a></p>\n</li>\n<li><p>三元運算子 <a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3042\">課堂範例</a><br>寫法：條件 ？成立：不成立   <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\">MDN介紹</a></p>\n</li>\n<li><p>總結：<a href=\"https://youtu.be/fIE2Lmfbo4k?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3560\">影片59分開始</a></p>\n</li>\n</ul>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>1.setProperty取用  <a href=\"https://www.w3schools.com/jsref/met_cssstyle_setproperty.asp\">w3cschool介紹</a><br>2.switch用法複習<br>3.this取用<br>4.filter用法練習</p>"},{"title":"Vue指令V-bind介紹","abbrlink":233607298,"date":"2019-09-03T11:09:36.000Z","_content":"\n參考資料：\n[Vue.js官網教學](https://cn.vuejs.org/v2/api/#v-bind)\n<!-- more -->\n---\n## V-bind\n目的：用來動態新增或綁定一個或多個屬性（src、class、style）\n縮寫：`:`\n我們先來看一個範例：\n[範例連結](https://jsbin.com/koyixiguxe/edit?html,js,output)\n```html\n<div id=\"app\">\n  <img v-bind:src=\"imgSrc\" v-bind:class=\"className\" alt=\"\">\n</div>\n\n<script>\nvar app = new Vue({\n  el: '＃app',\n  data: {\n    imgSrc: 'https://i.imgur.com/b28TAf1.png',\n    className:'img-fluid'\n  }\n})\n</script>\n```\n範例中為新增圖片屬性、className屬性  \n![](https://i.imgur.com/5pSLFO3.png)圖片來源：[property 跟 attribute差別](https://cythilya.github.io/2017/09/10/jquery-attr-vs-prop/) \n\n## V-bind 動態切換ClassName與Style\n參考資料：[官網介紹Class 與Style 綁定](https://cn.vuejs.org/v2/guide/class-and-style.html)\n#### 動態加上className、陣列、物件寫法簡介：   \n[練習連結](https://codepen.io/chunwen/pen/bGbovrm?editors=1010#0)\n```html\n//{}內，前面是自定義className 後面是判斷式（truthiness才會顯示）\n <div :class=\"{ blue: isBlue }\">\n      1 Hello Vue!\n    </div>\n    //class:blue\n\n    <div :class=\"'blue'\">  \n      2 Hello Vue!\n    </div>\n    //class:blue\n\n    <div :class=\"largeFont\">  \n      3 Hello Vue!\n    </div>\n    //class:big-size \n                    \n    <div :class=\"[largeFont, pinkBackground] \"> \n      4 Hello Vue!\n    </div>\n    //class:big-size pink-bg\n```\n```javascript\n   var vm = new Vue({\n      el: '#app',\n      data: {\n        isBlue: false,\n        largeFont: 'big-size',\n        pinkBackground: 'pink-bg',\n       }\n    });\n```\n\n#### 小結論：\n \n> 1.加上單引號時 class 是字串，如：`:class=\"'blue'\"`，會去讀取已經定義好的 CSS 樣式  \n> 補充：className有`-`連結 如：`btn-outline-primary`需要使用引號\n寫法如下： `:class=\"'btn-outline-primary'\" `\n> 2.沒有加上單引號則會去取得在 Vue 定義的 data 資料 \n若還是不清楚，可以觀看這範例[練習連結](https://codepen.io/chunwen/pen/RXQxYR?editors=1010) \n\n#### 綁定style行內樣式寫法\n這種寫法跟css寫法很像喔～\n寫法：`前面是css屬性名稱 後面值請去實體(vue instance)尋找` \n[範例連結](https://jsbin.com/hukafoleji/3/edit?html,js,output) \n```html\n<div id=\"app\">\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\">Hello Vue1!</div>\n\n    <hr>\n\n    <div :style=\"styleObject1\">\n      Hello Vue2!\n    </div>\n\n    <div :style=\"[styleObject1, styleObject2]\">\n      Hello Vue3!\n    </div>\n  </div>\n\n```\n```javascript\n var vm = new Vue({\n      el: '#app',\n      data: {\n        activeColor: 'red',\n        fontSize: 30,\n        styleObject1: {\n          color: 'green',\n          'font-size': '100px',  //有-，加上‘’即可\n          marginBottom: '50px'\n        },\n        styleObject2: {\n          color:'black',     //後面屬性會蓋掉前面顏色\n          backgroundColor: 'cyan',\n          lineHeight: '2em'\n        }\n      }\n    });\n```\n>注意：\n1.Css屬性有`-`，記得加上`''`雙引號，才不會噴錯喔！\n\n- - - -\n### 延伸閱讀：V-bind動態切換ClassName與Style\n> 同樣介紹綁定樣式寫法，但相對上面例子更為複雜。建議先理解上面例子後，再來閱讀下面內容 \n> [練習檔案連結](https://codepen.io/chunwen/pen/QepYbg) \n#### 物件寫法整理如下\n使用物件寫法共分兩種  \n```html\n1.物件寫法ㄧ\n//{}內，前面是className 後面是判斷式（true才會顯示）\n<div class=“box” :class=“{‘rotate’:isTransform , ‘bg-danger’:boxColor}”></div>\n\n<button class=\"btn btn-outline-primary\" @click=\"isTransform = !isTransform\">選轉物件</button>\n說明：isTransform = !isTransform 可以參考下方備註\n\n2.物件寫法二（很少使用，所以知道用法就好，不用深入）\n<div class=“box” :class=“objectClass”></div>\n\n<button class=\"btn \b\bbtn-outline-primary\"\n<input type=\"checkbox\" class=\"form-check-input\" id=\"classToggle2\" v-model=\"objectClass['bg-danger'] \">\n\ndata中資料\nobjectClass: {\n    'rotate': false,\n    'bg-danger': false },\n```\n> 其實兩種寫法都只是在切換true或false而已，來動態新增class  \n> 備註：點擊按鈕就把 isTransform 的結果顛倒過來 \n\n#### 陣列寫法整理如下\n陣列寫法也有兩種：適合用在長度不確定  \n```html\n1.直接綁定className\n<button class=“btn” :class=“[ activeClass, errorClass, border]”>請操作本元件</button>\n\n補充一下：data資料會這樣撰寫\ndata: {\n       activeClass: 'active',\n       errorClass: 'text-warning',\n       border:'border',\n}\n\n2.使用陣列傳入\n<button class=\"btn\" :class=\"arrayClass\">請操作本元件</button>\n\n<div class=\"form-check\">\n<input type=\"checkbox\" class=\"form-check-input\" id=\"classToggle4\" v-model=\"arrayClass\" value=\"active\">\n<label class=\"form-check-label\" for=\"classToggle4\">啟用元素狀態</label>\n</div>\n```\n上面範例2使用陣列傳入原理：\n> 藉由v-model綁定`arrayClass`，並透過value動態傳入className\n> 補充：[HTML input標籤的value 屬性](https://www.w3school.com.cn/tags/att_input_value.asp)  \n\n#### 動態新增ClassName結論：\n> 一、物件\n> 1.物件寫法一中，className是否要加引號都沒差，但遇到有`-`className就一定要加 \n> 二、陣列   \n> 1.加上單引號時 class 是字串，會去讀取已經定義好的 CSS 樣式  \n> 補充：className有`-`連結 如：`btn-outline-primary`’需要使用引號  \n> 2.沒有加上單引號則會去取得在 Vue 定義的 data 資料  \n\n#### 綁定style行內樣式寫法\n```html\n總共有下列四種方式\n<div class=\"box\" :style=\"{['background-color']:'blue'}\"></div>\n<div class=\"box\" :style=\"styleObject\"></div>\n<div class=\"box\" :style=\"[{'backgroundColor':'green'},{'borderWidth':'20px'}]\"></div>\n<div class=\"box\" :style=\"[styleObject,styleObject2]\"></div>\n\nstyleObject: {\n  backgroundColor: 'red',\n  borderWidth: '5px'\n},\nstyleObject2: {\n  boxShadow: '3px 3px 5px rgba(0, 0, 0, 0.16)'\n},\n```\n結果如下圖：\n![](https://i.imgur.com/X5VhkMG.png)\n> 撰寫時，注意事項：  \n> 1.如果屬性名稱（attribute）有`-`，要用`[]`選取  \n> Q1:什麼時候用v-bind、什麼時候用v-model?  \n> A: v-bind 是將狀態綁定到元素上  \n> 而 v-model 是接收資料，所以基本上 v-model 只會用在 input, textarea, select  \n\n\n","source":"_posts/2019-09-03Vue模板語法V-bind介紹.md","raw":"---\ntitle: Vue指令V-bind介紹\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 233607298\ndate: 2019-09-03 19:09:36\n---\n\n參考資料：\n[Vue.js官網教學](https://cn.vuejs.org/v2/api/#v-bind)\n<!-- more -->\n---\n## V-bind\n目的：用來動態新增或綁定一個或多個屬性（src、class、style）\n縮寫：`:`\n我們先來看一個範例：\n[範例連結](https://jsbin.com/koyixiguxe/edit?html,js,output)\n```html\n<div id=\"app\">\n  <img v-bind:src=\"imgSrc\" v-bind:class=\"className\" alt=\"\">\n</div>\n\n<script>\nvar app = new Vue({\n  el: '＃app',\n  data: {\n    imgSrc: 'https://i.imgur.com/b28TAf1.png',\n    className:'img-fluid'\n  }\n})\n</script>\n```\n範例中為新增圖片屬性、className屬性  \n![](https://i.imgur.com/5pSLFO3.png)圖片來源：[property 跟 attribute差別](https://cythilya.github.io/2017/09/10/jquery-attr-vs-prop/) \n\n## V-bind 動態切換ClassName與Style\n參考資料：[官網介紹Class 與Style 綁定](https://cn.vuejs.org/v2/guide/class-and-style.html)\n#### 動態加上className、陣列、物件寫法簡介：   \n[練習連結](https://codepen.io/chunwen/pen/bGbovrm?editors=1010#0)\n```html\n//{}內，前面是自定義className 後面是判斷式（truthiness才會顯示）\n <div :class=\"{ blue: isBlue }\">\n      1 Hello Vue!\n    </div>\n    //class:blue\n\n    <div :class=\"'blue'\">  \n      2 Hello Vue!\n    </div>\n    //class:blue\n\n    <div :class=\"largeFont\">  \n      3 Hello Vue!\n    </div>\n    //class:big-size \n                    \n    <div :class=\"[largeFont, pinkBackground] \"> \n      4 Hello Vue!\n    </div>\n    //class:big-size pink-bg\n```\n```javascript\n   var vm = new Vue({\n      el: '#app',\n      data: {\n        isBlue: false,\n        largeFont: 'big-size',\n        pinkBackground: 'pink-bg',\n       }\n    });\n```\n\n#### 小結論：\n \n> 1.加上單引號時 class 是字串，如：`:class=\"'blue'\"`，會去讀取已經定義好的 CSS 樣式  \n> 補充：className有`-`連結 如：`btn-outline-primary`需要使用引號\n寫法如下： `:class=\"'btn-outline-primary'\" `\n> 2.沒有加上單引號則會去取得在 Vue 定義的 data 資料 \n若還是不清楚，可以觀看這範例[練習連結](https://codepen.io/chunwen/pen/RXQxYR?editors=1010) \n\n#### 綁定style行內樣式寫法\n這種寫法跟css寫法很像喔～\n寫法：`前面是css屬性名稱 後面值請去實體(vue instance)尋找` \n[範例連結](https://jsbin.com/hukafoleji/3/edit?html,js,output) \n```html\n<div id=\"app\">\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\">Hello Vue1!</div>\n\n    <hr>\n\n    <div :style=\"styleObject1\">\n      Hello Vue2!\n    </div>\n\n    <div :style=\"[styleObject1, styleObject2]\">\n      Hello Vue3!\n    </div>\n  </div>\n\n```\n```javascript\n var vm = new Vue({\n      el: '#app',\n      data: {\n        activeColor: 'red',\n        fontSize: 30,\n        styleObject1: {\n          color: 'green',\n          'font-size': '100px',  //有-，加上‘’即可\n          marginBottom: '50px'\n        },\n        styleObject2: {\n          color:'black',     //後面屬性會蓋掉前面顏色\n          backgroundColor: 'cyan',\n          lineHeight: '2em'\n        }\n      }\n    });\n```\n>注意：\n1.Css屬性有`-`，記得加上`''`雙引號，才不會噴錯喔！\n\n- - - -\n### 延伸閱讀：V-bind動態切換ClassName與Style\n> 同樣介紹綁定樣式寫法，但相對上面例子更為複雜。建議先理解上面例子後，再來閱讀下面內容 \n> [練習檔案連結](https://codepen.io/chunwen/pen/QepYbg) \n#### 物件寫法整理如下\n使用物件寫法共分兩種  \n```html\n1.物件寫法ㄧ\n//{}內，前面是className 後面是判斷式（true才會顯示）\n<div class=“box” :class=“{‘rotate’:isTransform , ‘bg-danger’:boxColor}”></div>\n\n<button class=\"btn btn-outline-primary\" @click=\"isTransform = !isTransform\">選轉物件</button>\n說明：isTransform = !isTransform 可以參考下方備註\n\n2.物件寫法二（很少使用，所以知道用法就好，不用深入）\n<div class=“box” :class=“objectClass”></div>\n\n<button class=\"btn \b\bbtn-outline-primary\"\n<input type=\"checkbox\" class=\"form-check-input\" id=\"classToggle2\" v-model=\"objectClass['bg-danger'] \">\n\ndata中資料\nobjectClass: {\n    'rotate': false,\n    'bg-danger': false },\n```\n> 其實兩種寫法都只是在切換true或false而已，來動態新增class  \n> 備註：點擊按鈕就把 isTransform 的結果顛倒過來 \n\n#### 陣列寫法整理如下\n陣列寫法也有兩種：適合用在長度不確定  \n```html\n1.直接綁定className\n<button class=“btn” :class=“[ activeClass, errorClass, border]”>請操作本元件</button>\n\n補充一下：data資料會這樣撰寫\ndata: {\n       activeClass: 'active',\n       errorClass: 'text-warning',\n       border:'border',\n}\n\n2.使用陣列傳入\n<button class=\"btn\" :class=\"arrayClass\">請操作本元件</button>\n\n<div class=\"form-check\">\n<input type=\"checkbox\" class=\"form-check-input\" id=\"classToggle4\" v-model=\"arrayClass\" value=\"active\">\n<label class=\"form-check-label\" for=\"classToggle4\">啟用元素狀態</label>\n</div>\n```\n上面範例2使用陣列傳入原理：\n> 藉由v-model綁定`arrayClass`，並透過value動態傳入className\n> 補充：[HTML input標籤的value 屬性](https://www.w3school.com.cn/tags/att_input_value.asp)  \n\n#### 動態新增ClassName結論：\n> 一、物件\n> 1.物件寫法一中，className是否要加引號都沒差，但遇到有`-`className就一定要加 \n> 二、陣列   \n> 1.加上單引號時 class 是字串，會去讀取已經定義好的 CSS 樣式  \n> 補充：className有`-`連結 如：`btn-outline-primary`’需要使用引號  \n> 2.沒有加上單引號則會去取得在 Vue 定義的 data 資料  \n\n#### 綁定style行內樣式寫法\n```html\n總共有下列四種方式\n<div class=\"box\" :style=\"{['background-color']:'blue'}\"></div>\n<div class=\"box\" :style=\"styleObject\"></div>\n<div class=\"box\" :style=\"[{'backgroundColor':'green'},{'borderWidth':'20px'}]\"></div>\n<div class=\"box\" :style=\"[styleObject,styleObject2]\"></div>\n\nstyleObject: {\n  backgroundColor: 'red',\n  borderWidth: '5px'\n},\nstyleObject2: {\n  boxShadow: '3px 3px 5px rgba(0, 0, 0, 0.16)'\n},\n```\n結果如下圖：\n![](https://i.imgur.com/X5VhkMG.png)\n> 撰寫時，注意事項：  \n> 1.如果屬性名稱（attribute）有`-`，要用`[]`選取  \n> Q1:什麼時候用v-bind、什麼時候用v-model?  \n> A: v-bind 是將狀態綁定到元素上  \n> 而 v-model 是接收資料，所以基本上 v-model 只會用在 input, textarea, select  \n\n\n","slug":"2019-09-03Vue模板語法V-bind介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t28000qzqzi0rro17kj","content":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/api/#v-bind\">Vue.js官網教學</a></p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"V-bind\"><a href=\"#V-bind\" class=\"headerlink\" title=\"V-bind\"></a>V-bind</h2><p>目的：用來動態新增或綁定一個或多個屬性（src、class、style）<br>縮寫：<code>:</code><br>我們先來看一個範例：<br><a href=\"https://jsbin.com/koyixiguxe/edit?html,js,output\">範例連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">&quot;imgSrc&quot;</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;className&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  el: <span class=\"string\">&#x27;＃app&#x27;</span>,</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">    imgSrc: <span class=\"string\">&#x27;https://i.imgur.com/b28TAf1.png&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    className:<span class=\"string\">&#x27;img-fluid&#x27;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>範例中為新增圖片屬性、className屬性<br><img src=\"https://i.imgur.com/5pSLFO3.png\" alt=\"\">圖片來源：<a href=\"https://cythilya.github.io/2017/09/10/jquery-attr-vs-prop/\">property 跟 attribute差別</a> </p>\n<h2 id=\"V-bind-動態切換ClassName與Style\"><a href=\"#V-bind-動態切換ClassName與Style\" class=\"headerlink\" title=\"V-bind 動態切換ClassName與Style\"></a>V-bind 動態切換ClassName與Style</h2><p>參考資料：<a href=\"https://cn.vuejs.org/v2/guide/class-and-style.html\">官網介紹Class 與Style 綁定</a></p>\n<h4 id=\"動態加上className、陣列、物件寫法簡介：\"><a href=\"#動態加上className、陣列、物件寫法簡介：\" class=\"headerlink\" title=\"動態加上className、陣列、物件寫法簡介：\"></a>動態加上className、陣列、物件寫法簡介：</h4><p><a href=\"https://codepen.io/chunwen/pen/bGbovrm?editors=1010#0\">練習連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//&#123;&#125;內，前面是自定義className 後面是判斷式（truthiness才會顯示）</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; blue: isBlue &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">      1 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:blue</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#x27;blue&#x27;&quot;</span>&gt;</span>  </span><br><span class=\"line\">      2 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:blue</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;largeFont&quot;</span>&gt;</span>  </span><br><span class=\"line\">      3 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:big-size </span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[largeFont, pinkBackground] &quot;</span>&gt;</span> </span><br><span class=\"line\">      4 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:big-size pink-bg</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     isBlue: <span class=\"literal\">false</span>,</span><br><span class=\"line\">     largeFont: <span class=\"string\">&#x27;big-size&#x27;</span>,</span><br><span class=\"line\">     pinkBackground: <span class=\"string\">&#x27;pink-bg&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><blockquote>\n<p>1.加上單引號時 class 是字串，如：<code>:class=&quot;&#39;blue&#39;&quot;</code>，會去讀取已經定義好的 CSS 樣式<br>補充：className有<code>-</code>連結 如：<code>btn-outline-primary</code>需要使用引號<br>寫法如下： <code>:class=&quot;&#39;btn-outline-primary&#39;&quot;</code><br>2.沒有加上單引號則會去取得在 Vue 定義的 data 資料<br>若還是不清楚，可以觀看這範例<a href=\"https://codepen.io/chunwen/pen/RXQxYR?editors=1010\">練習連結</a> </p>\n</blockquote>\n<h4 id=\"綁定style行內樣式寫法\"><a href=\"#綁定style行內樣式寫法\" class=\"headerlink\" title=\"綁定style行內樣式寫法\"></a>綁定style行內樣式寫法</h4><p>這種寫法跟css寫法很像喔～<br>寫法：<code>前面是css屬性名稱 後面值請去實體(vue instance)尋找</code><br><a href=\"https://jsbin.com/hukafoleji/3/edit?html,js,output\">範例連結</a> </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>Hello Vue1!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObject1&quot;</span>&gt;</span></span><br><span class=\"line\">      Hello Vue2!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[styleObject1, styleObject2]&quot;</span>&gt;</span></span><br><span class=\"line\">      Hello Vue3!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       activeColor: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">       fontSize: <span class=\"number\">30</span>,</span><br><span class=\"line\">       styleObject1: &#123;</span><br><span class=\"line\">         color: <span class=\"string\">&#x27;green&#x27;</span>,</span><br><span class=\"line\">         <span class=\"string\">&#x27;font-size&#x27;</span>: <span class=\"string\">&#x27;100px&#x27;</span>,  <span class=\"comment\">//有-，加上‘’即可</span></span><br><span class=\"line\">         marginBottom: <span class=\"string\">&#x27;50px&#x27;</span></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       styleObject2: &#123;</span><br><span class=\"line\">         color:<span class=\"string\">&#x27;black&#x27;</span>,     <span class=\"comment\">//後面屬性會蓋掉前面顏色</span></span><br><span class=\"line\">         backgroundColor: <span class=\"string\">&#x27;cyan&#x27;</span>,</span><br><span class=\"line\">         lineHeight: <span class=\"string\">&#x27;2em&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<br>1.Css屬性有<code>-</code>，記得加上<code>&#39;&#39;</code>雙引號，才不會噴錯喔！</p>\n</blockquote>\n<hr>\n<h3 id=\"延伸閱讀：V-bind動態切換ClassName與Style\"><a href=\"#延伸閱讀：V-bind動態切換ClassName與Style\" class=\"headerlink\" title=\"延伸閱讀：V-bind動態切換ClassName與Style\"></a>延伸閱讀：V-bind動態切換ClassName與Style</h3><blockquote>\n<p>同樣介紹綁定樣式寫法，但相對上面例子更為複雜。建議先理解上面例子後，再來閱讀下面內容<br><a href=\"https://codepen.io/chunwen/pen/QepYbg\">練習檔案連結</a> </p>\n</blockquote>\n<h4 id=\"物件寫法整理如下\"><a href=\"#物件寫法整理如下\" class=\"headerlink\" title=\"物件寫法整理如下\"></a>物件寫法整理如下</h4><p>使用物件寫法共分兩種  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.物件寫法ㄧ</span><br><span class=\"line\">//&#123;&#125;內，前面是className 後面是判斷式（true才會顯示）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">“box”</span> <span class=\"attr\">:class</span>=<span class=\"string\">“&#123;‘rotate’:isTransform</span> , ‘<span class=\"attr\">bg-danger</span>’<span class=\"attr\">:boxColor</span>&#125;”&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-outline-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isTransform = !isTransform&quot;</span>&gt;</span>選轉物件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">說明：isTransform = !isTransform 可以參考下方備註</span><br><span class=\"line\"></span><br><span class=\"line\">2.物件寫法二（很少使用，所以知道用法就好，不用深入）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">“box”</span> <span class=\"attr\">:class</span>=<span class=\"string\">“objectClass”</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn \b\bbtn-outline-primary&quot;</span></span></span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;classToggle2&quot; v-model=&quot;objectClass[&#x27;bg-danger&#x27;] &quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data中資料</span><br><span class=\"line\">objectClass: &#123;</span><br><span class=\"line\">    &#x27;rotate&#x27;: false,</span><br><span class=\"line\">    &#x27;bg-danger&#x27;: false &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其實兩種寫法都只是在切換true或false而已，來動態新增class<br>備註：點擊按鈕就把 isTransform 的結果顛倒過來 </p>\n</blockquote>\n<h4 id=\"陣列寫法整理如下\"><a href=\"#陣列寫法整理如下\" class=\"headerlink\" title=\"陣列寫法整理如下\"></a>陣列寫法整理如下</h4><p>陣列寫法也有兩種：適合用在長度不確定  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.直接綁定className</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">“btn”</span> <span class=\"attr\">:class</span>=<span class=\"string\">“[</span> <span class=\"attr\">activeClass</span>, <span class=\"attr\">errorClass</span>, <span class=\"attr\">border</span>]”&gt;</span>請操作本元件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">補充一下：data資料會這樣撰寫</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">       activeClass: &#x27;active&#x27;,</span><br><span class=\"line\">       errorClass: &#x27;text-warning&#x27;,</span><br><span class=\"line\">       border:&#x27;border&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2.使用陣列傳入</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;arrayClass&quot;</span>&gt;</span>請操作本元件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;classToggle4&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;arrayClass&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;classToggle4&quot;</span>&gt;</span>啟用元素狀態<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面範例2使用陣列傳入原理：</p>\n<blockquote>\n<p>藉由v-model綁定<code>arrayClass</code>，並透過value動態傳入className<br>補充：<a href=\"https://www.w3school.com.cn/tags/att_input_value.asp\">HTML input標籤的value 屬性</a>  </p>\n</blockquote>\n<h4 id=\"動態新增ClassName結論：\"><a href=\"#動態新增ClassName結論：\" class=\"headerlink\" title=\"動態新增ClassName結論：\"></a>動態新增ClassName結論：</h4><blockquote>\n<p>一、物件<br>1.物件寫法一中，className是否要加引號都沒差，但遇到有<code>-</code>className就一定要加<br>二、陣列<br>1.加上單引號時 class 是字串，會去讀取已經定義好的 CSS 樣式<br>補充：className有<code>-</code>連結 如：<code>btn-outline-primary</code>’需要使用引號<br>2.沒有加上單引號則會去取得在 Vue 定義的 data 資料  </p>\n</blockquote>\n<h4 id=\"綁定style行內樣式寫法-1\"><a href=\"#綁定style行內樣式寫法-1\" class=\"headerlink\" title=\"綁定style行內樣式寫法\"></a>綁定style行內樣式寫法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">總共有下列四種方式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;[&#x27;background-color&#x27;]:&#x27;blue&#x27;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[&#123;&#x27;backgroundColor&#x27;:&#x27;green&#x27;&#125;,&#123;&#x27;borderWidth&#x27;:&#x27;20px&#x27;&#125;]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[styleObject,styleObject2]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">styleObject: &#123;</span><br><span class=\"line\">  backgroundColor: &#x27;red&#x27;,</span><br><span class=\"line\">  borderWidth: &#x27;5px&#x27;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">styleObject2: &#123;</span><br><span class=\"line\">  boxShadow: &#x27;3px 3px 5px rgba(0, 0, 0, 0.16)&#x27;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>結果如下圖：<br><img src=\"https://i.imgur.com/X5VhkMG.png\" alt=\"\"></p>\n<blockquote>\n<p>撰寫時，注意事項：<br>1.如果屬性名稱（attribute）有<code>-</code>，要用<code>[]</code>選取<br>Q1:什麼時候用v-bind、什麼時候用v-model?<br>A: v-bind 是將狀態綁定到元素上<br>而 v-model 是接收資料，所以基本上 v-model 只會用在 input, textarea, select  </p>\n</blockquote>\n","site":{"data":{}},"length":4700,"excerpt":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/api/#v-bind\">Vue.js官網教學</a></p>","more":"<hr>\n<h2 id=\"V-bind\"><a href=\"#V-bind\" class=\"headerlink\" title=\"V-bind\"></a>V-bind</h2><p>目的：用來動態新增或綁定一個或多個屬性（src、class、style）<br>縮寫：<code>:</code><br>我們先來看一個範例：<br><a href=\"https://jsbin.com/koyixiguxe/edit?html,js,output\">範例連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">&quot;imgSrc&quot;</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;className&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  el: <span class=\"string\">&#x27;＃app&#x27;</span>,</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">    imgSrc: <span class=\"string\">&#x27;https://i.imgur.com/b28TAf1.png&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    className:<span class=\"string\">&#x27;img-fluid&#x27;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>範例中為新增圖片屬性、className屬性<br><img src=\"https://i.imgur.com/5pSLFO3.png\" alt=\"\">圖片來源：<a href=\"https://cythilya.github.io/2017/09/10/jquery-attr-vs-prop/\">property 跟 attribute差別</a> </p>\n<h2 id=\"V-bind-動態切換ClassName與Style\"><a href=\"#V-bind-動態切換ClassName與Style\" class=\"headerlink\" title=\"V-bind 動態切換ClassName與Style\"></a>V-bind 動態切換ClassName與Style</h2><p>參考資料：<a href=\"https://cn.vuejs.org/v2/guide/class-and-style.html\">官網介紹Class 與Style 綁定</a></p>\n<h4 id=\"動態加上className、陣列、物件寫法簡介：\"><a href=\"#動態加上className、陣列、物件寫法簡介：\" class=\"headerlink\" title=\"動態加上className、陣列、物件寫法簡介：\"></a>動態加上className、陣列、物件寫法簡介：</h4><p><a href=\"https://codepen.io/chunwen/pen/bGbovrm?editors=1010#0\">練習連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//&#123;&#125;內，前面是自定義className 後面是判斷式（truthiness才會顯示）</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; blue: isBlue &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">      1 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:blue</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#x27;blue&#x27;&quot;</span>&gt;</span>  </span><br><span class=\"line\">      2 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:blue</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;largeFont&quot;</span>&gt;</span>  </span><br><span class=\"line\">      3 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:big-size </span><br><span class=\"line\">                    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[largeFont, pinkBackground] &quot;</span>&gt;</span> </span><br><span class=\"line\">      4 Hello Vue!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    //class:big-size pink-bg</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     isBlue: <span class=\"literal\">false</span>,</span><br><span class=\"line\">     largeFont: <span class=\"string\">&#x27;big-size&#x27;</span>,</span><br><span class=\"line\">     pinkBackground: <span class=\"string\">&#x27;pink-bg&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><blockquote>\n<p>1.加上單引號時 class 是字串，如：<code>:class=&quot;&#39;blue&#39;&quot;</code>，會去讀取已經定義好的 CSS 樣式<br>補充：className有<code>-</code>連結 如：<code>btn-outline-primary</code>需要使用引號<br>寫法如下： <code>:class=&quot;&#39;btn-outline-primary&#39;&quot;</code><br>2.沒有加上單引號則會去取得在 Vue 定義的 data 資料<br>若還是不清楚，可以觀看這範例<a href=\"https://codepen.io/chunwen/pen/RXQxYR?editors=1010\">練習連結</a> </p>\n</blockquote>\n<h4 id=\"綁定style行內樣式寫法\"><a href=\"#綁定style行內樣式寫法\" class=\"headerlink\" title=\"綁定style行內樣式寫法\"></a>綁定style行內樣式寫法</h4><p>這種寫法跟css寫法很像喔～<br>寫法：<code>前面是css屬性名稱 後面值請去實體(vue instance)尋找</code><br><a href=\"https://jsbin.com/hukafoleji/3/edit?html,js,output\">範例連結</a> </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>Hello Vue1!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObject1&quot;</span>&gt;</span></span><br><span class=\"line\">      Hello Vue2!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[styleObject1, styleObject2]&quot;</span>&gt;</span></span><br><span class=\"line\">      Hello Vue3!</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       activeColor: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">       fontSize: <span class=\"number\">30</span>,</span><br><span class=\"line\">       styleObject1: &#123;</span><br><span class=\"line\">         color: <span class=\"string\">&#x27;green&#x27;</span>,</span><br><span class=\"line\">         <span class=\"string\">&#x27;font-size&#x27;</span>: <span class=\"string\">&#x27;100px&#x27;</span>,  <span class=\"comment\">//有-，加上‘’即可</span></span><br><span class=\"line\">         marginBottom: <span class=\"string\">&#x27;50px&#x27;</span></span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       styleObject2: &#123;</span><br><span class=\"line\">         color:<span class=\"string\">&#x27;black&#x27;</span>,     <span class=\"comment\">//後面屬性會蓋掉前面顏色</span></span><br><span class=\"line\">         backgroundColor: <span class=\"string\">&#x27;cyan&#x27;</span>,</span><br><span class=\"line\">         lineHeight: <span class=\"string\">&#x27;2em&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<br>1.Css屬性有<code>-</code>，記得加上<code>&#39;&#39;</code>雙引號，才不會噴錯喔！</p>\n</blockquote>\n<hr>\n<h3 id=\"延伸閱讀：V-bind動態切換ClassName與Style\"><a href=\"#延伸閱讀：V-bind動態切換ClassName與Style\" class=\"headerlink\" title=\"延伸閱讀：V-bind動態切換ClassName與Style\"></a>延伸閱讀：V-bind動態切換ClassName與Style</h3><blockquote>\n<p>同樣介紹綁定樣式寫法，但相對上面例子更為複雜。建議先理解上面例子後，再來閱讀下面內容<br><a href=\"https://codepen.io/chunwen/pen/QepYbg\">練習檔案連結</a> </p>\n</blockquote>\n<h4 id=\"物件寫法整理如下\"><a href=\"#物件寫法整理如下\" class=\"headerlink\" title=\"物件寫法整理如下\"></a>物件寫法整理如下</h4><p>使用物件寫法共分兩種  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.物件寫法ㄧ</span><br><span class=\"line\">//&#123;&#125;內，前面是className 後面是判斷式（true才會顯示）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">“box”</span> <span class=\"attr\">:class</span>=<span class=\"string\">“&#123;‘rotate’:isTransform</span> , ‘<span class=\"attr\">bg-danger</span>’<span class=\"attr\">:boxColor</span>&#125;”&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-outline-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isTransform = !isTransform&quot;</span>&gt;</span>選轉物件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">說明：isTransform = !isTransform 可以參考下方備註</span><br><span class=\"line\"></span><br><span class=\"line\">2.物件寫法二（很少使用，所以知道用法就好，不用深入）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">“box”</span> <span class=\"attr\">:class</span>=<span class=\"string\">“objectClass”</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn \b\bbtn-outline-primary&quot;</span></span></span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; class=&quot;form-check-input&quot; id=&quot;classToggle2&quot; v-model=&quot;objectClass[&#x27;bg-danger&#x27;] &quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data中資料</span><br><span class=\"line\">objectClass: &#123;</span><br><span class=\"line\">    &#x27;rotate&#x27;: false,</span><br><span class=\"line\">    &#x27;bg-danger&#x27;: false &#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其實兩種寫法都只是在切換true或false而已，來動態新增class<br>備註：點擊按鈕就把 isTransform 的結果顛倒過來 </p>\n</blockquote>\n<h4 id=\"陣列寫法整理如下\"><a href=\"#陣列寫法整理如下\" class=\"headerlink\" title=\"陣列寫法整理如下\"></a>陣列寫法整理如下</h4><p>陣列寫法也有兩種：適合用在長度不確定  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.直接綁定className</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">“btn”</span> <span class=\"attr\">:class</span>=<span class=\"string\">“[</span> <span class=\"attr\">activeClass</span>, <span class=\"attr\">errorClass</span>, <span class=\"attr\">border</span>]”&gt;</span>請操作本元件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">補充一下：data資料會這樣撰寫</span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">       activeClass: &#x27;active&#x27;,</span><br><span class=\"line\">       errorClass: &#x27;text-warning&#x27;,</span><br><span class=\"line\">       border:&#x27;border&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2.使用陣列傳入</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;arrayClass&quot;</span>&gt;</span>請操作本元件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;classToggle4&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;arrayClass&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;classToggle4&quot;</span>&gt;</span>啟用元素狀態<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面範例2使用陣列傳入原理：</p>\n<blockquote>\n<p>藉由v-model綁定<code>arrayClass</code>，並透過value動態傳入className<br>補充：<a href=\"https://www.w3school.com.cn/tags/att_input_value.asp\">HTML input標籤的value 屬性</a>  </p>\n</blockquote>\n<h4 id=\"動態新增ClassName結論：\"><a href=\"#動態新增ClassName結論：\" class=\"headerlink\" title=\"動態新增ClassName結論：\"></a>動態新增ClassName結論：</h4><blockquote>\n<p>一、物件<br>1.物件寫法一中，className是否要加引號都沒差，但遇到有<code>-</code>className就一定要加<br>二、陣列<br>1.加上單引號時 class 是字串，會去讀取已經定義好的 CSS 樣式<br>補充：className有<code>-</code>連結 如：<code>btn-outline-primary</code>’需要使用引號<br>2.沒有加上單引號則會去取得在 Vue 定義的 data 資料  </p>\n</blockquote>\n<h4 id=\"綁定style行內樣式寫法-1\"><a href=\"#綁定style行內樣式寫法-1\" class=\"headerlink\" title=\"綁定style行內樣式寫法\"></a>綁定style行內樣式寫法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">總共有下列四種方式</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;[&#x27;background-color&#x27;]:&#x27;blue&#x27;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[&#123;&#x27;backgroundColor&#x27;:&#x27;green&#x27;&#125;,&#123;&#x27;borderWidth&#x27;:&#x27;20px&#x27;&#125;]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[styleObject,styleObject2]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">styleObject: &#123;</span><br><span class=\"line\">  backgroundColor: &#x27;red&#x27;,</span><br><span class=\"line\">  borderWidth: &#x27;5px&#x27;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">styleObject2: &#123;</span><br><span class=\"line\">  boxShadow: &#x27;3px 3px 5px rgba(0, 0, 0, 0.16)&#x27;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>結果如下圖：<br><img src=\"https://i.imgur.com/X5VhkMG.png\" alt=\"\"></p>\n<blockquote>\n<p>撰寫時，注意事項：<br>1.如果屬性名稱（attribute）有<code>-</code>，要用<code>[]</code>選取<br>Q1:什麼時候用v-bind、什麼時候用v-model?<br>A: v-bind 是將狀態綁定到元素上<br>而 v-model 是接收資料，所以基本上 v-model 只會用在 input, textarea, select  </p>\n</blockquote>"},{"title":"Css-transition、animation(animate)動畫效果","abbrlink":4076619072,"date":"2019-09-03T04:57:39.000Z","_content":"\n參考資料：\n[Day27：小事之 Transition 與 Animation](https://ithelp.ithome.com.tw/articles/10197303)\n[範例](https://codepen.io/chunwen/pen/rRrwKp)\n<!-- more -->\n- - - -\n## Transition\n轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場\n只能定義起始狀態跟結束狀態，中間狀態不能設定\n![](https://i.imgur.com/hLg9uIp.png)圖片來源：[Day27：小事之 Transition 與 Animation](https://ithelp.ithome.com.tw/articles/10197303)\n有下列幾個屬性：\n1.transition-property(屬性) EX：width、height\n2.transition-duration(時間)\n3.transition-timing-function(特效) EX：ease-out\n4.transition-delay(延遲)\n預設值：all 0 ease 0\n\n### 使用時機\n常用於滑鼠事件（:hover、:active、:focus、click）或鍵盤輸入時觸發 \n[範例](https://codepen.io/chunwen/pen/rRrwKp)\n>注意：transition效果是寫在`原本A狀態`\n>而變化後的屬性則是寫在`B狀態中`如：`.header:hover {height:200px}`\n範例\n```css\n.header{\nwidth:100px;\nheight:50px;\nbackground:green;\nborder:1px solid red;\ntransition:width 3s ease-out 1s;\ntransition:height 1s; //一秒\n}\n.header:hover{\nwidth:200px;\nheight:100px;\n}\n```\nQ：是不是不能同時設定改變多個屬性質? EX：width、height等\nA：分開寫不就好了\n\n補充：transition 搭配 transform [範例](https://www.w3schools.com/css/tryit.asp?filename=trycss3_transition_transform)\n參考資料：\n[Ｗ3cschool](https://www.w3school.com.cn/cssref/pr_transition.asp)\n[CSSTransition 轉場效果](https://carlos-studio.com/2017/02/23/css-transition-%E8%BD%89%E5%A0%B4%E6%95%88%E6%9E%9C/)\n\n## animation(動畫效果)\n可以自行撰寫動畫 開始、進行間、結束時各階段的變化，適合用來做較細微的動畫表現。但需要明確的指定關鍵影格(@keyframes)的參數。\n目前多會直接使用animate.css套件，詳情可以看\n [jquery ch5-33](https://www.udemy.com/jquery-learning/learn/v4/t/lecture/5190570?start=300) 或 [官網](https://daneden.github.io/animate.css/) \nanimate用法介紹： [pjchen](https://pjchender.blogspot.com/2015/12/cssanimation-keyframes.html) \n\n語法如下： [範例](https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation1)\n```css\n.box{\nanimation: change 5s ; //八個屬性中至少要有名稱（自行命名）、時間\n\n//正常會寫成這樣\nanimation: change 5s linear 2s infinite alternate;\n}\n```\n\n//設定多個狀態，可以非常詳細\n```css\n@keyframes change{\n0%{ background: #4BC0C8;}\n20%{ background: #C779D0;}\n60%{ background: #FEAC5E;}\n80%{ background: #185a9d;}\n100%{ background: #4BC0C8;}\n}\n```\n\n### 載入animate.css語法\n使用方式：\n1.在head裡面插入連結\n```html\n<head>\n<meta charset=\"UTF-8\">\n<title>Animate.css </title>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css\">\n</head>\n```\n\n2.在想進行動畫的元素上加上class，一定要先加 animated 再加上要使用的動畫名稱（注意大小寫），如果想要動畫一直動作可以加上 infinite。 [範例](https://codepen.io/chunwen/pen/rRrwKp)\n```html\n<body>\n    <h1 class=\"animated fadeIn\">我是LOGO</h1>\n    <h2 class=\"animated infinite jello\">INFINITE</h2>\n</body>\n```\n\n## animate與transition比較\n![](https://i.imgur.com/HGV5BAR.png)圖片來源：[Day27：小事之 Transition 與 Animation](https://ithelp.ithome.com.tw/articles/10197303)\n### 差異點\ntansition 是當參數改變時觸發，而 animations 則是直接就執行，所以動畫效果需要明確的指定關鍵影格的參數。\n","source":"_posts/2019-09-03[筆記]Css-transition、animation(animate)動畫效果.md","raw":"---\ntitle: Css-transition、animation(animate)動畫效果\ntags:\n  - transition\n  - Css\ncategories:\n  - Css\nabbrlink: 4076619072\ndate:\n---\n\n參考資料：\n[Day27：小事之 Transition 與 Animation](https://ithelp.ithome.com.tw/articles/10197303)\n[範例](https://codepen.io/chunwen/pen/rRrwKp)\n<!-- more -->\n- - - -\n## Transition\n轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場\n只能定義起始狀態跟結束狀態，中間狀態不能設定\n![](https://i.imgur.com/hLg9uIp.png)圖片來源：[Day27：小事之 Transition 與 Animation](https://ithelp.ithome.com.tw/articles/10197303)\n有下列幾個屬性：\n1.transition-property(屬性) EX：width、height\n2.transition-duration(時間)\n3.transition-timing-function(特效) EX：ease-out\n4.transition-delay(延遲)\n預設值：all 0 ease 0\n\n### 使用時機\n常用於滑鼠事件（:hover、:active、:focus、click）或鍵盤輸入時觸發 \n[範例](https://codepen.io/chunwen/pen/rRrwKp)\n>注意：transition效果是寫在`原本A狀態`\n>而變化後的屬性則是寫在`B狀態中`如：`.header:hover {height:200px}`\n範例\n```css\n.header{\nwidth:100px;\nheight:50px;\nbackground:green;\nborder:1px solid red;\ntransition:width 3s ease-out 1s;\ntransition:height 1s; //一秒\n}\n.header:hover{\nwidth:200px;\nheight:100px;\n}\n```\nQ：是不是不能同時設定改變多個屬性質? EX：width、height等\nA：分開寫不就好了\n\n補充：transition 搭配 transform [範例](https://www.w3schools.com/css/tryit.asp?filename=trycss3_transition_transform)\n參考資料：\n[Ｗ3cschool](https://www.w3school.com.cn/cssref/pr_transition.asp)\n[CSSTransition 轉場效果](https://carlos-studio.com/2017/02/23/css-transition-%E8%BD%89%E5%A0%B4%E6%95%88%E6%9E%9C/)\n\n## animation(動畫效果)\n可以自行撰寫動畫 開始、進行間、結束時各階段的變化，適合用來做較細微的動畫表現。但需要明確的指定關鍵影格(@keyframes)的參數。\n目前多會直接使用animate.css套件，詳情可以看\n [jquery ch5-33](https://www.udemy.com/jquery-learning/learn/v4/t/lecture/5190570?start=300) 或 [官網](https://daneden.github.io/animate.css/) \nanimate用法介紹： [pjchen](https://pjchender.blogspot.com/2015/12/cssanimation-keyframes.html) \n\n語法如下： [範例](https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation1)\n```css\n.box{\nanimation: change 5s ; //八個屬性中至少要有名稱（自行命名）、時間\n\n//正常會寫成這樣\nanimation: change 5s linear 2s infinite alternate;\n}\n```\n\n//設定多個狀態，可以非常詳細\n```css\n@keyframes change{\n0%{ background: #4BC0C8;}\n20%{ background: #C779D0;}\n60%{ background: #FEAC5E;}\n80%{ background: #185a9d;}\n100%{ background: #4BC0C8;}\n}\n```\n\n### 載入animate.css語法\n使用方式：\n1.在head裡面插入連結\n```html\n<head>\n<meta charset=\"UTF-8\">\n<title>Animate.css </title>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css\">\n</head>\n```\n\n2.在想進行動畫的元素上加上class，一定要先加 animated 再加上要使用的動畫名稱（注意大小寫），如果想要動畫一直動作可以加上 infinite。 [範例](https://codepen.io/chunwen/pen/rRrwKp)\n```html\n<body>\n    <h1 class=\"animated fadeIn\">我是LOGO</h1>\n    <h2 class=\"animated infinite jello\">INFINITE</h2>\n</body>\n```\n\n## animate與transition比較\n![](https://i.imgur.com/HGV5BAR.png)圖片來源：[Day27：小事之 Transition 與 Animation](https://ithelp.ithome.com.tw/articles/10197303)\n### 差異點\ntansition 是當參數改變時觸發，而 animations 則是直接就執行，所以動畫效果需要明確的指定關鍵影格的參數。\n","slug":"2019-09-03[筆記]Css-transition、animation(animate)動畫效果","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2a000vzqzif75l2u0z","content":"<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10197303\">Day27：小事之 Transition 與 Animation</a><br><a href=\"https://codepen.io/chunwen/pen/rRrwKp\">範例</a></p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><p>轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場<br>只能定義起始狀態跟結束狀態，中間狀態不能設定<br><img src=\"https://i.imgur.com/hLg9uIp.png\" alt=\"\">圖片來源：<a href=\"https://ithelp.ithome.com.tw/articles/10197303\">Day27：小事之 Transition 與 Animation</a><br>有下列幾個屬性：<br>1.transition-property(屬性) EX：width、height<br>2.transition-duration(時間)<br>3.transition-timing-function(特效) EX：ease-out<br>4.transition-delay(延遲)<br>預設值：all 0 ease 0</p>\n<h3 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h3><p>常用於滑鼠事件（:hover、:active、:focus、click）或鍵盤輸入時觸發<br><a href=\"https://codepen.io/chunwen/pen/rRrwKp\">範例</a></p>\n<blockquote>\n<p>注意：transition效果是寫在<code>原本A狀態</code><br>而變化後的屬性則是寫在<code>B狀態中</code>如：<code>.header:hover &#123;height:200px&#125;</code><br>範例</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\"><span class=\"attribute\">background</span>:green;</span><br><span class=\"line\"><span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</span><br><span class=\"line\"><span class=\"attribute\">transition</span>:width <span class=\"number\">3s</span> ease-out <span class=\"number\">1s</span>;</span><br><span class=\"line\"><span class=\"attribute\">transition</span>:height <span class=\"number\">1s</span>; //一秒</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Q：是不是不能同時設定改變多個屬性質? EX：width、height等<br>A：分開寫不就好了</p>\n<p>補充：transition 搭配 transform <a href=\"https://www.w3schools.com/css/tryit.asp?filename=trycss3_transition_transform\">範例</a><br>參考資料：<br><a href=\"https://www.w3school.com.cn/cssref/pr_transition.asp\">Ｗ3cschool</a><br><a href=\"https://carlos-studio.com/2017/02/23/css-transition-%E8%BD%89%E5%A0%B4%E6%95%88%E6%9E%9C/\">CSSTransition 轉場效果</a></p>\n<h2 id=\"animation-動畫效果\"><a href=\"#animation-動畫效果\" class=\"headerlink\" title=\"animation(動畫效果)\"></a>animation(動畫效果)</h2><p>可以自行撰寫動畫 開始、進行間、結束時各階段的變化，適合用來做較細微的動畫表現。但需要明確的指定關鍵影格(@keyframes)的參數。<br>目前多會直接使用animate.css套件，詳情可以看<br> <a href=\"https://www.udemy.com/jquery-learning/learn/v4/t/lecture/5190570?start=300\">jquery ch5-33</a> 或 <a href=\"https://daneden.github.io/animate.css/\">官網</a><br>animate用法介紹： <a href=\"https://pjchender.blogspot.com/2015/12/cssanimation-keyframes.html\">pjchen</a> </p>\n<p>語法如下： <a href=\"https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation1\">範例</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">animation</span>: change <span class=\"number\">5s</span> ; //八個屬性中至少要有名稱（自行命名）、時間</span><br><span class=\"line\"></span><br><span class=\"line\">//正常會寫成這樣</span><br><span class=\"line\"><span class=\"attribute\">animation</span>: change <span class=\"number\">5s</span> linear <span class=\"number\">2s</span> infinite alternate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>//設定多個狀態，可以非常詳細</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> change&#123;</span><br><span class=\"line\"><span class=\"number\">0%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#4BC0C8</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">20%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#C779D0</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">60%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#FEAC5E</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">80%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#185a9d</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">100%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#4BC0C8</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"載入animate-css語法\"><a href=\"#載入animate-css語法\" class=\"headerlink\" title=\"載入animate.css語法\"></a>載入animate.css語法</h3><p>使用方式：<br>1.在head裡面插入連結</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Animate.css <span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.在想進行動畫的元素上加上class，一定要先加 animated 再加上要使用的動畫名稱（注意大小寫），如果想要動畫一直動作可以加上 infinite。 <a href=\"https://codepen.io/chunwen/pen/rRrwKp\">範例</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;animated fadeIn&quot;</span>&gt;</span>我是LOGO<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;animated infinite jello&quot;</span>&gt;</span>INFINITE<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"animate與transition比較\"><a href=\"#animate與transition比較\" class=\"headerlink\" title=\"animate與transition比較\"></a>animate與transition比較</h2><p><img src=\"https://i.imgur.com/HGV5BAR.png\" alt=\"\">圖片來源：<a href=\"https://ithelp.ithome.com.tw/articles/10197303\">Day27：小事之 Transition 與 Animation</a></p>\n<h3 id=\"差異點\"><a href=\"#差異點\" class=\"headerlink\" title=\"差異點\"></a>差異點</h3><p>tansition 是當參數改變時觸發，而 animations 則是直接就執行，所以動畫效果需要明確的指定關鍵影格的參數。</p>\n","site":{"data":{}},"length":1804,"excerpt":"<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10197303\">Day27：小事之 Transition 與 Animation</a><br><a href=\"https://codepen.io/chunwen/pen/rRrwKp\">範例</a></p>","more":"<hr>\n<h2 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h2><p>轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場<br>只能定義起始狀態跟結束狀態，中間狀態不能設定<br><img src=\"https://i.imgur.com/hLg9uIp.png\" alt=\"\">圖片來源：<a href=\"https://ithelp.ithome.com.tw/articles/10197303\">Day27：小事之 Transition 與 Animation</a><br>有下列幾個屬性：<br>1.transition-property(屬性) EX：width、height<br>2.transition-duration(時間)<br>3.transition-timing-function(特效) EX：ease-out<br>4.transition-delay(延遲)<br>預設值：all 0 ease 0</p>\n<h3 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h3><p>常用於滑鼠事件（:hover、:active、:focus、click）或鍵盤輸入時觸發<br><a href=\"https://codepen.io/chunwen/pen/rRrwKp\">範例</a></p>\n<blockquote>\n<p>注意：transition效果是寫在<code>原本A狀態</code><br>而變化後的屬性則是寫在<code>B狀態中</code>如：<code>.header:hover &#123;height:200px&#125;</code><br>範例</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\"><span class=\"attribute\">background</span>:green;</span><br><span class=\"line\"><span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</span><br><span class=\"line\"><span class=\"attribute\">transition</span>:width <span class=\"number\">3s</span> ease-out <span class=\"number\">1s</span>;</span><br><span class=\"line\"><span class=\"attribute\">transition</span>:height <span class=\"number\">1s</span>; //一秒</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.header</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\"><span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Q：是不是不能同時設定改變多個屬性質? EX：width、height等<br>A：分開寫不就好了</p>\n<p>補充：transition 搭配 transform <a href=\"https://www.w3schools.com/css/tryit.asp?filename=trycss3_transition_transform\">範例</a><br>參考資料：<br><a href=\"https://www.w3school.com.cn/cssref/pr_transition.asp\">Ｗ3cschool</a><br><a href=\"https://carlos-studio.com/2017/02/23/css-transition-%E8%BD%89%E5%A0%B4%E6%95%88%E6%9E%9C/\">CSSTransition 轉場效果</a></p>\n<h2 id=\"animation-動畫效果\"><a href=\"#animation-動畫效果\" class=\"headerlink\" title=\"animation(動畫效果)\"></a>animation(動畫效果)</h2><p>可以自行撰寫動畫 開始、進行間、結束時各階段的變化，適合用來做較細微的動畫表現。但需要明確的指定關鍵影格(@keyframes)的參數。<br>目前多會直接使用animate.css套件，詳情可以看<br> <a href=\"https://www.udemy.com/jquery-learning/learn/v4/t/lecture/5190570?start=300\">jquery ch5-33</a> 或 <a href=\"https://daneden.github.io/animate.css/\">官網</a><br>animate用法介紹： <a href=\"https://pjchender.blogspot.com/2015/12/cssanimation-keyframes.html\">pjchen</a> </p>\n<p>語法如下： <a href=\"https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation1\">範例</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">animation</span>: change <span class=\"number\">5s</span> ; //八個屬性中至少要有名稱（自行命名）、時間</span><br><span class=\"line\"></span><br><span class=\"line\">//正常會寫成這樣</span><br><span class=\"line\"><span class=\"attribute\">animation</span>: change <span class=\"number\">5s</span> linear <span class=\"number\">2s</span> infinite alternate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>//設定多個狀態，可以非常詳細</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> change&#123;</span><br><span class=\"line\"><span class=\"number\">0%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#4BC0C8</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">20%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#C779D0</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">60%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#FEAC5E</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">80%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#185a9d</span>;&#125;</span><br><span class=\"line\"><span class=\"number\">100%</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#4BC0C8</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"載入animate-css語法\"><a href=\"#載入animate-css語法\" class=\"headerlink\" title=\"載入animate.css語法\"></a>載入animate.css語法</h3><p>使用方式：<br>1.在head裡面插入連結</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Animate.css <span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.0/animate.min.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.在想進行動畫的元素上加上class，一定要先加 animated 再加上要使用的動畫名稱（注意大小寫），如果想要動畫一直動作可以加上 infinite。 <a href=\"https://codepen.io/chunwen/pen/rRrwKp\">範例</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;animated fadeIn&quot;</span>&gt;</span>我是LOGO<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;animated infinite jello&quot;</span>&gt;</span>INFINITE<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"animate與transition比較\"><a href=\"#animate與transition比較\" class=\"headerlink\" title=\"animate與transition比較\"></a>animate與transition比較</h2><p><img src=\"https://i.imgur.com/HGV5BAR.png\" alt=\"\">圖片來源：<a href=\"https://ithelp.ithome.com.tw/articles/10197303\">Day27：小事之 Transition 與 Animation</a></p>\n<h3 id=\"差異點\"><a href=\"#差異點\" class=\"headerlink\" title=\"差異點\"></a>差異點</h3><p>tansition 是當參數改變時觸發，而 animations 則是直接就執行，所以動畫效果需要明確的指定關鍵影格的參數。</p>"},{"title":"Vue出一個樂透選取器","abbrlink":409592500,"date":"2019-09-04T16:41:45.000Z","_content":"[練習範本連結](https://codepen.io/chunwen/pen/VwZrPzP)\n[Demo作品](https://codepen.io/chunwen/pen/eYOegdo)\n延伸閱讀：[取出不重複數字--使用ES6 set](https://blog.techbridge.cc/2017/02/11/javascript-data-structure-algorithm-set/)\n<!-- more -->\n- - - -\n步驟：\nStep1.利用v-for range選染出49個陣列\nStep2.點選號碼（確認是否點擊到）\n```html\n<div v-for=\"n in 49\" @click=\"selectNum(n)\"> {{n}}</div>\n```\n```javascript\n    methods: {\n        selectNum(n){\n          console.log(n)\n        }\n      },\n```\nStep3.接著就可以將選中號碼印出對應顏色\n```htnl\n:class=\"{ selected: choose.includes(n) }\"\n```\nStep4.挑選不重複六個號碼\n```javascript\nmethods: {\n        selectNum(n) {\n          // 不加入重複的陣列資料\n          if (this.choose.includes(n)) {\n            this.choose = this.choose.filter(d => d !== n)\n            // console.log(this.choose)\n          } \n          // 挑選最多六個\n          else if (this.choose.length <6) {\n            this.choose.push(n)\n          }\n        }\n      },\n\n```\nStep5\n隨機開獎六個數字\n```javascript\n      getLotteryNum() {\n          if (this.choose.length < 6) {\n            alert('請挑選六個數字')\n          }\n          else{\n          // 需要挑選不重複六組號碼\n          var ary = [];\n          for (let i = 1; i < 50; i++) {\n            ary.push(i)\n          }\n          // 洗牌\n          var random = ary.sort(() => Math.random() - 0.5)\n          // console.log(random)\n\n          // 挑選六個號碼\n          this.lotteryNum = random.slice(0, 6)\n          console.log(this.lotteryNum)\n          }\n        },\n```\nStep6.\n印出開講顏色（紅色）\n```html\n     <div v-for=\"n in 49\" @click=\"selectNum(n)\" \n      :class=\"{ \n         selected: choose.includes(n),\n         highlight: lotteryNum.includes(n),\n          }\"> {{n}}\n</div>\n```\n\n\n\n\n\n","source":"_posts/2019-09-04Vue出一個樂透選取器.md","raw":"---\ntitle: Vue出一個樂透選取器\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 409592500\ndate: 2019-09-05 00:41:45\n---\n[練習範本連結](https://codepen.io/chunwen/pen/VwZrPzP)\n[Demo作品](https://codepen.io/chunwen/pen/eYOegdo)\n延伸閱讀：[取出不重複數字--使用ES6 set](https://blog.techbridge.cc/2017/02/11/javascript-data-structure-algorithm-set/)\n<!-- more -->\n- - - -\n步驟：\nStep1.利用v-for range選染出49個陣列\nStep2.點選號碼（確認是否點擊到）\n```html\n<div v-for=\"n in 49\" @click=\"selectNum(n)\"> {{n}}</div>\n```\n```javascript\n    methods: {\n        selectNum(n){\n          console.log(n)\n        }\n      },\n```\nStep3.接著就可以將選中號碼印出對應顏色\n```htnl\n:class=\"{ selected: choose.includes(n) }\"\n```\nStep4.挑選不重複六個號碼\n```javascript\nmethods: {\n        selectNum(n) {\n          // 不加入重複的陣列資料\n          if (this.choose.includes(n)) {\n            this.choose = this.choose.filter(d => d !== n)\n            // console.log(this.choose)\n          } \n          // 挑選最多六個\n          else if (this.choose.length <6) {\n            this.choose.push(n)\n          }\n        }\n      },\n\n```\nStep5\n隨機開獎六個數字\n```javascript\n      getLotteryNum() {\n          if (this.choose.length < 6) {\n            alert('請挑選六個數字')\n          }\n          else{\n          // 需要挑選不重複六組號碼\n          var ary = [];\n          for (let i = 1; i < 50; i++) {\n            ary.push(i)\n          }\n          // 洗牌\n          var random = ary.sort(() => Math.random() - 0.5)\n          // console.log(random)\n\n          // 挑選六個號碼\n          this.lotteryNum = random.slice(0, 6)\n          console.log(this.lotteryNum)\n          }\n        },\n```\nStep6.\n印出開講顏色（紅色）\n```html\n     <div v-for=\"n in 49\" @click=\"selectNum(n)\" \n      :class=\"{ \n         selected: choose.includes(n),\n         highlight: lotteryNum.includes(n),\n          }\"> {{n}}\n</div>\n```\n\n\n\n\n\n","slug":"2019-09-04Vue出一個樂透選取器","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2b000yzqzi2py7d65g","content":"<p><a href=\"https://codepen.io/chunwen/pen/VwZrPzP\">練習範本連結</a><br><a href=\"https://codepen.io/chunwen/pen/eYOegdo\">Demo作品</a><br>延伸閱讀：<a href=\"https://blog.techbridge.cc/2017/02/11/javascript-data-structure-algorithm-set/\">取出不重複數字–使用ES6 set</a></p>\n<span id=\"more\"></span>\n<hr>\n<p>步驟：<br>Step1.利用v-for range選染出49個陣列<br>Step2.點選號碼（確認是否點擊到）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;n in 49&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;selectNum(n)&quot;</span>&gt;</span> &#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">selectNum</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>Step3.接著就可以將選中號碼印出對應顏色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:class&#x3D;&quot;&#123; selected: choose.includes(n) &#125;&quot;</span><br></pre></td></tr></table></figure>\n<p>Step4.挑選不重複六個號碼</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">selectNum</span>(<span class=\"params\">n</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 不加入重複的陣列資料</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.choose.includes(n)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.choose = <span class=\"built_in\">this</span>.choose.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d !== n)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(this.choose)</span></span><br><span class=\"line\">          &#125; </span><br><span class=\"line\">          <span class=\"comment\">// 挑選最多六個</span></span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.choose.length &lt;<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.choose.push(n)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Step5<br>隨機開獎六個數字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">getLotteryNum</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.choose.length &lt; <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;請挑選六個數字&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要挑選不重複六組號碼</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ary = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">      ary.push(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 洗牌</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> random = ary.sort(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(random)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 挑選六個號碼</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lotteryNum = random.slice(<span class=\"number\">0</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.lotteryNum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>Step6.<br>印出開講顏色（紅色）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;n in 49&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;selectNum(n)&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">         selected: choose.includes(n),</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">         highlight: lotteryNum.includes(n),</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          &#125;&quot;</span>&gt;</span> &#123;&#123;n&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"length":1177,"excerpt":"<p><a href=\"https://codepen.io/chunwen/pen/VwZrPzP\">練習範本連結</a><br><a href=\"https://codepen.io/chunwen/pen/eYOegdo\">Demo作品</a><br>延伸閱讀：<a href=\"https://blog.techbridge.cc/2017/02/11/javascript-data-structure-algorithm-set/\">取出不重複數字–使用ES6 set</a></p>","more":"<hr>\n<p>步驟：<br>Step1.利用v-for range選染出49個陣列<br>Step2.點選號碼（確認是否點擊到）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;n in 49&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;selectNum(n)&quot;</span>&gt;</span> &#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">selectNum</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>Step3.接著就可以將選中號碼印出對應顏色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:class&#x3D;&quot;&#123; selected: choose.includes(n) &#125;&quot;</span><br></pre></td></tr></table></figure>\n<p>Step4.挑選不重複六個號碼</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">selectNum</span>(<span class=\"params\">n</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 不加入重複的陣列資料</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.choose.includes(n)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.choose = <span class=\"built_in\">this</span>.choose.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d !== n)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(this.choose)</span></span><br><span class=\"line\">          &#125; </span><br><span class=\"line\">          <span class=\"comment\">// 挑選最多六個</span></span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.choose.length &lt;<span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.choose.push(n)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Step5<br>隨機開獎六個數字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">getLotteryNum</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.choose.length &lt; <span class=\"number\">6</span>) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;請挑選六個數字&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要挑選不重複六組號碼</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ary = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">      ary.push(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 洗牌</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> random = ary.sort(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"comment\">// console.log(random)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 挑選六個號碼</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.lotteryNum = random.slice(<span class=\"number\">0</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.lotteryNum)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>Step6.<br>印出開講顏色（紅色）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;n in 49&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;selectNum(n)&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">         selected: choose.includes(n),</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">         highlight: lotteryNum.includes(n),</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">          &#125;&quot;</span>&gt;</span> &#123;&#123;n&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vue指令語法V-if、V-show介紹","abbrlink":2719563524,"date":"2019-09-04T16:40:28.000Z","_content":"[官網資料](https://cn.vuejs.org/v2/guide/conditional.html)\n[全部練習範例檔案](https://codepen.io/chunwen/pen/GVQbRB?editors=1010#0)\n<!-- more -->\n- - - -\n## V-if & V-show\n用途：條件性地渲染內容。這塊內容只會在`指令的表達式返回truthy值`的時候被渲染。\n[練習連結](https://codepen.io/chunwen/pen/OJLqRQZ)\n```html\n    <h1 v-if=\"cond1\">Yes</h1>\n    <h1 v-else>No</h1>\n    <hr>\n    <h1 v-show=\"cond1\">Yes</h1>\n\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        cond1: true\n      }\n    });\n\n```\n\n### V-if、V-else切換\n```html\n<div class=\"alert alert-success\" v-if=\"isSuccess\">成功!</div>\n<div class=\"alert alert-danger\"  v-else>失敗!</div>\n```\n> 備註：V-else元素必須緊跟在帶`v-if`或者`v-else-if`的元素的後面，否則它將不會被識別。  \n\n### 在Template元素上使用`v-if`條件渲染分組\n用途：同時綁定多個元素，維護程式碼整潔，且template不會渲染在畫面上。`template 無法與 v-show 共⽤用`\n```html\n<template v-if=\"showTemplate\">\n              <tr>\n                <td>1</td>\n                <td>安妮</td>\n              </tr>\n              <tr>\n                <td>2</td>\n                <td>小明</td>\n              </tr>\n            </template>\n```\n### v-else-if切換分頁\n```html\n<p>使用 v-else-if 做出分頁頁籤</p>\n<a class=\"nav-link\" href=\"#\"  @click.prevent=\"link='a'\">標題一</a>\n<a class=\"nav-link\" href=\"#\" @click.prevent=\"link='b'\">標題二</a>\n<a class=\"nav-link\" href=\"#\" @click.prevent=\"link='c'\">標題三</a>\n\n          <div class=\"content\">\n            <!-- 記得要用 邏輯運算子 === 來判斷是否相同  -->\n            <!-- ＝是賦予值 -->\n            <div v-if=\"link === 'a'\">Ａ</div>\n            <div v-else-if=\"link === 'b'\">Ｂ</div>\n            <div v-else-if=\"link === 'c'\">Ｃ</div>\n          </div>\n```\n\n### 用`key`管理可複用的元素\nVue渲染網頁時候，並不會從頭開始渲染而是會複用相同元素，使得載入速度加快。而這時候如果我們想要重新渲染就需要用`key`屬性來添加唯一值\n```html\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\" key=\"1\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\" key=\"2\">\n</template>\n```\n> 備註：key可以自行命名  \n### V-if & V-show差異：\n```html\n<div class=\"alert alert-success\" v-show=\"isSuccess\">成功!\n</div>\n\n<div class=\"alert alert-danger\" v-show=\"!isSuccess\">失敗!</div>\n\n```\n說明：\nv-if 與 v-show 最大的差別在是否對 `DOM` 操作，`v-if` 會依照條件決定是否將元件渲染⾄至網⾴頁上。\nV-show一定會渲染出物件，但是以CSS方式切換顯示與否（display:none），所以當頻繁切換是否顯示時當然使用V-show效能較好。\n\n#### 小結論\n結論：\nV-if：`操控dom元素`\nV-show：`操控display:none`\n","source":"_posts/2019-09-04Vue模板語法V-if、V-show介紹.md","raw":"---\ntitle: Vue指令語法V-if、V-show介紹\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 2719563524\ndate: 2019-09-05 00:40:28\n---\n[官網資料](https://cn.vuejs.org/v2/guide/conditional.html)\n[全部練習範例檔案](https://codepen.io/chunwen/pen/GVQbRB?editors=1010#0)\n<!-- more -->\n- - - -\n## V-if & V-show\n用途：條件性地渲染內容。這塊內容只會在`指令的表達式返回truthy值`的時候被渲染。\n[練習連結](https://codepen.io/chunwen/pen/OJLqRQZ)\n```html\n    <h1 v-if=\"cond1\">Yes</h1>\n    <h1 v-else>No</h1>\n    <hr>\n    <h1 v-show=\"cond1\">Yes</h1>\n\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        cond1: true\n      }\n    });\n\n```\n\n### V-if、V-else切換\n```html\n<div class=\"alert alert-success\" v-if=\"isSuccess\">成功!</div>\n<div class=\"alert alert-danger\"  v-else>失敗!</div>\n```\n> 備註：V-else元素必須緊跟在帶`v-if`或者`v-else-if`的元素的後面，否則它將不會被識別。  \n\n### 在Template元素上使用`v-if`條件渲染分組\n用途：同時綁定多個元素，維護程式碼整潔，且template不會渲染在畫面上。`template 無法與 v-show 共⽤用`\n```html\n<template v-if=\"showTemplate\">\n              <tr>\n                <td>1</td>\n                <td>安妮</td>\n              </tr>\n              <tr>\n                <td>2</td>\n                <td>小明</td>\n              </tr>\n            </template>\n```\n### v-else-if切換分頁\n```html\n<p>使用 v-else-if 做出分頁頁籤</p>\n<a class=\"nav-link\" href=\"#\"  @click.prevent=\"link='a'\">標題一</a>\n<a class=\"nav-link\" href=\"#\" @click.prevent=\"link='b'\">標題二</a>\n<a class=\"nav-link\" href=\"#\" @click.prevent=\"link='c'\">標題三</a>\n\n          <div class=\"content\">\n            <!-- 記得要用 邏輯運算子 === 來判斷是否相同  -->\n            <!-- ＝是賦予值 -->\n            <div v-if=\"link === 'a'\">Ａ</div>\n            <div v-else-if=\"link === 'b'\">Ｂ</div>\n            <div v-else-if=\"link === 'c'\">Ｃ</div>\n          </div>\n```\n\n### 用`key`管理可複用的元素\nVue渲染網頁時候，並不會從頭開始渲染而是會複用相同元素，使得載入速度加快。而這時候如果我們想要重新渲染就需要用`key`屬性來添加唯一值\n```html\n<template v-if=\"loginType === 'username'\">\n  <label>Username</label>\n  <input placeholder=\"Enter your username\" key=\"1\">\n</template>\n<template v-else>\n  <label>Email</label>\n  <input placeholder=\"Enter your email address\" key=\"2\">\n</template>\n```\n> 備註：key可以自行命名  \n### V-if & V-show差異：\n```html\n<div class=\"alert alert-success\" v-show=\"isSuccess\">成功!\n</div>\n\n<div class=\"alert alert-danger\" v-show=\"!isSuccess\">失敗!</div>\n\n```\n說明：\nv-if 與 v-show 最大的差別在是否對 `DOM` 操作，`v-if` 會依照條件決定是否將元件渲染⾄至網⾴頁上。\nV-show一定會渲染出物件，但是以CSS方式切換顯示與否（display:none），所以當頻繁切換是否顯示時當然使用V-show效能較好。\n\n#### 小結論\n結論：\nV-if：`操控dom元素`\nV-show：`操控display:none`\n","slug":"2019-09-04Vue模板語法V-if、V-show介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2c0013zqzi3fxz7pkf","content":"<p><a href=\"https://cn.vuejs.org/v2/guide/conditional.html\">官網資料</a><br><a href=\"https://codepen.io/chunwen/pen/GVQbRB?editors=1010#0\">全部練習範例檔案</a></p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"V-if-amp-V-show\"><a href=\"#V-if-amp-V-show\" class=\"headerlink\" title=\"V-if &amp; V-show\"></a>V-if &amp; V-show</h2><p>用途：條件性地渲染內容。這塊內容只會在<code>指令的表達式返回truthy值</code>的時候被渲染。<br><a href=\"https://codepen.io/chunwen/pen/OJLqRQZ\">練習連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;cond1&quot;</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;cond1&quot;</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    cond1: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"V-if、V-else切換\"><a href=\"#V-if、V-else切換\" class=\"headerlink\" title=\"V-if、V-else切換\"></a>V-if、V-else切換</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-success&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isSuccess&quot;</span>&gt;</span>成功!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>  <span class=\"attr\">v-else</span>&gt;</span>失敗!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>備註：V-else元素必須緊跟在帶<code>v-if</code>或者<code>v-else-if</code>的元素的後面，否則它將不會被識別。  </p>\n</blockquote>\n<h3 id=\"在Template元素上使用v-if條件渲染分組\"><a href=\"#在Template元素上使用v-if條件渲染分組\" class=\"headerlink\" title=\"在Template元素上使用v-if條件渲染分組\"></a>在Template元素上使用<code>v-if</code>條件渲染分組</h3><p>用途：同時綁定多個元素，維護程式碼整潔，且template不會渲染在畫面上。<code>template 無法與 v-show 共⽤用</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;showTemplate&quot;</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>安妮<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>小明<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"v-else-if切換分頁\"><a href=\"#v-else-if切換分頁\" class=\"headerlink\" title=\"v-else-if切換分頁\"></a>v-else-if切換分頁</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 v-else-if 做出分頁頁籤<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>  @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;link=&#x27;a&#x27;&quot;</span>&gt;</span>標題一<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;link=&#x27;b&#x27;&quot;</span>&gt;</span>標題二<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;link=&#x27;c&#x27;&quot;</span>&gt;</span>標題三<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 記得要用 邏輯運算子 === 來判斷是否相同  --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- ＝是賦予值 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;link === &#x27;a&#x27;&quot;</span>&gt;</span>Ａ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;link === &#x27;b&#x27;&quot;</span>&gt;</span>Ｂ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;link === &#x27;c&#x27;&quot;</span>&gt;</span>Ｃ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用key管理可複用的元素\"><a href=\"#用key管理可複用的元素\" class=\"headerlink\" title=\"用key管理可複用的元素\"></a>用<code>key</code>管理可複用的元素</h3><p>Vue渲染網頁時候，並不會從頭開始渲染而是會複用相同元素，使得載入速度加快。而這時候如果我們想要重新渲染就需要用<code>key</code>屬性來添加唯一值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter your username&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter your email address&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>備註：key可以自行命名  </p>\n</blockquote>\n<h3 id=\"V-if-amp-V-show差異：\"><a href=\"#V-if-amp-V-show差異：\" class=\"headerlink\" title=\"V-if &amp; V-show差異：\"></a>V-if &amp; V-show差異：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-success&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isSuccess&quot;</span>&gt;</span>成功!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;!isSuccess&quot;</span>&gt;</span>失敗!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>說明：<br>v-if 與 v-show 最大的差別在是否對 <code>DOM</code> 操作，<code>v-if</code> 會依照條件決定是否將元件渲染⾄至網⾴頁上。<br>V-show一定會渲染出物件，但是以CSS方式切換顯示與否（display:none），所以當頻繁切換是否顯示時當然使用V-show效能較好。</p>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>結論：<br>V-if：<code>操控dom元素</code><br>V-show：<code>操控display:none</code></p>\n","site":{"data":{}},"length":2288,"excerpt":"<p><a href=\"https://cn.vuejs.org/v2/guide/conditional.html\">官網資料</a><br><a href=\"https://codepen.io/chunwen/pen/GVQbRB?editors=1010#0\">全部練習範例檔案</a></p>","more":"<hr>\n<h2 id=\"V-if-amp-V-show\"><a href=\"#V-if-amp-V-show\" class=\"headerlink\" title=\"V-if &amp; V-show\"></a>V-if &amp; V-show</h2><p>用途：條件性地渲染內容。這塊內容只會在<code>指令的表達式返回truthy值</code>的時候被渲染。<br><a href=\"https://codepen.io/chunwen/pen/OJLqRQZ\">練習連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;cond1&quot;</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;cond1&quot;</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    cond1: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"V-if、V-else切換\"><a href=\"#V-if、V-else切換\" class=\"headerlink\" title=\"V-if、V-else切換\"></a>V-if、V-else切換</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-success&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isSuccess&quot;</span>&gt;</span>成功!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span>  <span class=\"attr\">v-else</span>&gt;</span>失敗!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>備註：V-else元素必須緊跟在帶<code>v-if</code>或者<code>v-else-if</code>的元素的後面，否則它將不會被識別。  </p>\n</blockquote>\n<h3 id=\"在Template元素上使用v-if條件渲染分組\"><a href=\"#在Template元素上使用v-if條件渲染分組\" class=\"headerlink\" title=\"在Template元素上使用v-if條件渲染分組\"></a>在Template元素上使用<code>v-if</code>條件渲染分組</h3><p>用途：同時綁定多個元素，維護程式碼整潔，且template不會渲染在畫面上。<code>template 無法與 v-show 共⽤用</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;showTemplate&quot;</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>安妮<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>小明<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"v-else-if切換分頁\"><a href=\"#v-else-if切換分頁\" class=\"headerlink\" title=\"v-else-if切換分頁\"></a>v-else-if切換分頁</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 v-else-if 做出分頁頁籤<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>  @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;link=&#x27;a&#x27;&quot;</span>&gt;</span>標題一<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;link=&#x27;b&#x27;&quot;</span>&gt;</span>標題二<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;link=&#x27;c&#x27;&quot;</span>&gt;</span>標題三<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 記得要用 邏輯運算子 === 來判斷是否相同  --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- ＝是賦予值 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;link === &#x27;a&#x27;&quot;</span>&gt;</span>Ａ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;link === &#x27;b&#x27;&quot;</span>&gt;</span>Ｂ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;link === &#x27;c&#x27;&quot;</span>&gt;</span>Ｃ<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用key管理可複用的元素\"><a href=\"#用key管理可複用的元素\" class=\"headerlink\" title=\"用key管理可複用的元素\"></a>用<code>key</code>管理可複用的元素</h3><p>Vue渲染網頁時候，並不會從頭開始渲染而是會複用相同元素，使得載入速度加快。而這時候如果我們想要重新渲染就需要用<code>key</code>屬性來添加唯一值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter your username&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>Email<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter your email address&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>備註：key可以自行命名  </p>\n</blockquote>\n<h3 id=\"V-if-amp-V-show差異：\"><a href=\"#V-if-amp-V-show差異：\" class=\"headerlink\" title=\"V-if &amp; V-show差異：\"></a>V-if &amp; V-show差異：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-success&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isSuccess&quot;</span>&gt;</span>成功!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;alert alert-danger&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;!isSuccess&quot;</span>&gt;</span>失敗!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>說明：<br>v-if 與 v-show 最大的差別在是否對 <code>DOM</code> 操作，<code>v-if</code> 會依照條件決定是否將元件渲染⾄至網⾴頁上。<br>V-show一定會渲染出物件，但是以CSS方式切換顯示與否（display:none），所以當頻繁切換是否顯示時當然使用V-show效能較好。</p>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>結論：<br>V-if：<code>操控dom元素</code><br>V-show：<code>操控display:none</code></p>"},{"title":"SASS教學-環境、寫法篇","abbrlink":752255252,"date":"2019-09-05T15:48:28.000Z","_content":"\n參考資料：\n[SaSS 課程 講義補充](https://quip.com/OVV1AtQbIRYj)\n[Sass/SCSS 簡明入門教學](https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/)\n<!-- more -->\n\n本章作業練習：\n[題目](https://www.udemy.com/sasssecret/learn/lecture/14367144#questions/7144762) \n- - - -\n### 簡介：\nSass 是一個 CSS 預處理器，而它有兩種撰寫的風格\n1.一個是 SASS\n2.另一個就是 SCSS(較常使用這種寫法，原因是跟原本css寫法類似，較為直覺好懂)\n\nSass常見編譯方式主要有下面三種\n1.軟體編譯 EX：prepros\n2.gulp、webpack 前端任務/打包工具\n3.編輯器內建的插件\n\n### 接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\n今天將介紹sublime、Vscode兩種編輯器處理方式\n一、編輯器：sublime text3\n1.為了讓 Sublime Text 3 支援 Sass、Scss 語法，請安裝 `Sass、Scss Plugin`\n\n#### 補充：使用sublime text3編輯器撰寫方式\n1.將all.scss檔案開啟 放置左邊\n2.將以編譯好的all.css放置右邊(方便同時觀看)\n![](https://i.imgur.com/b2MEoj0.png)\n\n2.環境建置篇：\n先下載Prepos [前端軟體-Prepos介紹](https://wcc723.github.io/tools/2013/12/27/prepos-intro/)\n安裝完成後，請將資料夾丟進prepos內 如下圖所示\n接著，新增一個資料夾Sass，並在裡面放進一隻.scss檔案\n如果畫面右下角有出現success就表示有成功喽~\n![](https://i.imgur.com/yHIMQXa.png)\n\n二、編輯器Vscode\n在vscode中新增一個xxx.scss檔案，並記得按下左下角watching即可及時編譯喔\n![](https://i.imgur.com/VZAYGiD.png)\n\n### SASS、 SCSS語法撰寫\n#### SCSS語法\n將子階層內容直接寫進父元素中 如下 codepen [練習連結](https://codepen.io/chunwen/pen/JqyQMK)\nTips：&連結詞使用，可以連接上一層\n```css\n.menu {\n  li {\n    a {\n      color: red;\n      text-decoration: none;\n      font-size: 30px;\n      &:hover {\n        color: grey;\n      }\n    }\n  }\n}\n```\n\n如此，編譯結果為如下\n![](https://i.imgur.com/XUbw7rr.png)\n\n#### SASS語法撰寫 \n[codepen練習](https://codepen.io/chunwen/pen/VOMvBW)\n備註：1.不用括號和逗點 2.每往下一個階層都需要兩個空白或是一個tab\n```css\n.menu\n  li\n    a\n      font-size: 30px\n      text-decoration: none\n      \n.second\n  font-size: 40px\n  color: red\n```\n\n記得:後要空一個(沒有空的話，會顯示編譯成功，但程式碼不會出現)\n成功的話，會出現下圖\n![](https://i.imgur.com/D37gRLL.png)\n\n### 結論：\n1.\n![](https://i.imgur.com/0JaBszm.png)\n2.編譯錯誤記得去prepos log中看錯誤在哪~~\n3.如果CSS後面沒加`分號;`會編譯錯誤\n4.CSS巢狀不要超過四層(避免網頁渲染效能有所影響)\n```\n//巢狀指的就是下面撰寫內容\n.menu {\n  li {\n    a {\n      color: red;\n      text-decoration: none;\n      font-size: 30px;\n      &:hover {\n        color: grey;\n      }\n    }\n  }\n}\n```\n\n","source":"_posts/2019-09-05-SASS教學-環境、寫法篇.md","raw":"---\ntitle: SASS教學-環境、寫法篇\ntags:\n  - SASS\n  - SCSS\ncategories:\n  - CSS\nabbrlink: 752255252\ndate: 2019-09-05 23:48:28\n---\n\n參考資料：\n[SaSS 課程 講義補充](https://quip.com/OVV1AtQbIRYj)\n[Sass/SCSS 簡明入門教學](https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/)\n<!-- more -->\n\n本章作業練習：\n[題目](https://www.udemy.com/sasssecret/learn/lecture/14367144#questions/7144762) \n- - - -\n### 簡介：\nSass 是一個 CSS 預處理器，而它有兩種撰寫的風格\n1.一個是 SASS\n2.另一個就是 SCSS(較常使用這種寫法，原因是跟原本css寫法類似，較為直覺好懂)\n\nSass常見編譯方式主要有下面三種\n1.軟體編譯 EX：prepros\n2.gulp、webpack 前端任務/打包工具\n3.編輯器內建的插件\n\n### 接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\n今天將介紹sublime、Vscode兩種編輯器處理方式\n一、編輯器：sublime text3\n1.為了讓 Sublime Text 3 支援 Sass、Scss 語法，請安裝 `Sass、Scss Plugin`\n\n#### 補充：使用sublime text3編輯器撰寫方式\n1.將all.scss檔案開啟 放置左邊\n2.將以編譯好的all.css放置右邊(方便同時觀看)\n![](https://i.imgur.com/b2MEoj0.png)\n\n2.環境建置篇：\n先下載Prepos [前端軟體-Prepos介紹](https://wcc723.github.io/tools/2013/12/27/prepos-intro/)\n安裝完成後，請將資料夾丟進prepos內 如下圖所示\n接著，新增一個資料夾Sass，並在裡面放進一隻.scss檔案\n如果畫面右下角有出現success就表示有成功喽~\n![](https://i.imgur.com/yHIMQXa.png)\n\n二、編輯器Vscode\n在vscode中新增一個xxx.scss檔案，並記得按下左下角watching即可及時編譯喔\n![](https://i.imgur.com/VZAYGiD.png)\n\n### SASS、 SCSS語法撰寫\n#### SCSS語法\n將子階層內容直接寫進父元素中 如下 codepen [練習連結](https://codepen.io/chunwen/pen/JqyQMK)\nTips：&連結詞使用，可以連接上一層\n```css\n.menu {\n  li {\n    a {\n      color: red;\n      text-decoration: none;\n      font-size: 30px;\n      &:hover {\n        color: grey;\n      }\n    }\n  }\n}\n```\n\n如此，編譯結果為如下\n![](https://i.imgur.com/XUbw7rr.png)\n\n#### SASS語法撰寫 \n[codepen練習](https://codepen.io/chunwen/pen/VOMvBW)\n備註：1.不用括號和逗點 2.每往下一個階層都需要兩個空白或是一個tab\n```css\n.menu\n  li\n    a\n      font-size: 30px\n      text-decoration: none\n      \n.second\n  font-size: 40px\n  color: red\n```\n\n記得:後要空一個(沒有空的話，會顯示編譯成功，但程式碼不會出現)\n成功的話，會出現下圖\n![](https://i.imgur.com/D37gRLL.png)\n\n### 結論：\n1.\n![](https://i.imgur.com/0JaBszm.png)\n2.編譯錯誤記得去prepos log中看錯誤在哪~~\n3.如果CSS後面沒加`分號;`會編譯錯誤\n4.CSS巢狀不要超過四層(避免網頁渲染效能有所影響)\n```\n//巢狀指的就是下面撰寫內容\n.menu {\n  li {\n    a {\n      color: red;\n      text-decoration: none;\n      font-size: 30px;\n      &:hover {\n        color: grey;\n      }\n    }\n  }\n}\n```\n\n","slug":"2019-09-05-SASS教學-環境、寫法篇","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2d0016zqzicvs82xlq","content":"<p>參考資料：<br><a href=\"https://quip.com/OVV1AtQbIRYj\">SaSS 課程 講義補充</a><br><a href=\"https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/\">Sass/SCSS 簡明入門教學</a></p>\n<span id=\"more\"></span>\n\n<p>本章作業練習：<br><a href=\"https://www.udemy.com/sasssecret/learn/lecture/14367144#questions/7144762\">題目</a> </p>\n<hr>\n<h3 id=\"簡介：\"><a href=\"#簡介：\" class=\"headerlink\" title=\"簡介：\"></a>簡介：</h3><p>Sass 是一個 CSS 預處理器，而它有兩種撰寫的風格<br>1.一個是 SASS<br>2.另一個就是 SCSS(較常使用這種寫法，原因是跟原本css寫法類似，較為直覺好懂)</p>\n<p>Sass常見編譯方式主要有下面三種<br>1.軟體編譯 EX：prepros<br>2.gulp、webpack 前端任務/打包工具<br>3.編輯器內建的插件</p>\n<h3 id=\"接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\"><a href=\"#接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\" class=\"headerlink\" title=\"接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\"></a>接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式</h3><p>今天將介紹sublime、Vscode兩種編輯器處理方式<br>一、編輯器：sublime text3<br>1.為了讓 Sublime Text 3 支援 Sass、Scss 語法，請安裝 <code>Sass、Scss Plugin</code></p>\n<h4 id=\"補充：使用sublime-text3編輯器撰寫方式\"><a href=\"#補充：使用sublime-text3編輯器撰寫方式\" class=\"headerlink\" title=\"補充：使用sublime text3編輯器撰寫方式\"></a>補充：使用sublime text3編輯器撰寫方式</h4><p>1.將all.scss檔案開啟 放置左邊<br>2.將以編譯好的all.css放置右邊(方便同時觀看)<br><img src=\"https://i.imgur.com/b2MEoj0.png\" alt=\"\"></p>\n<p>2.環境建置篇：<br>先下載Prepos <a href=\"https://wcc723.github.io/tools/2013/12/27/prepos-intro/\">前端軟體-Prepos介紹</a><br>安裝完成後，請將資料夾丟進prepos內 如下圖所示<br>接著，新增一個資料夾Sass，並在裡面放進一隻.scss檔案<br>如果畫面右下角有出現success就表示有成功喽~<br><img src=\"https://i.imgur.com/yHIMQXa.png\" alt=\"\"></p>\n<p>二、編輯器Vscode<br>在vscode中新增一個xxx.scss檔案，並記得按下左下角watching即可及時編譯喔<br><img src=\"https://i.imgur.com/VZAYGiD.png\" alt=\"\"></p>\n<h3 id=\"SASS、-SCSS語法撰寫\"><a href=\"#SASS、-SCSS語法撰寫\" class=\"headerlink\" title=\"SASS、 SCSS語法撰寫\"></a>SASS、 SCSS語法撰寫</h3><h4 id=\"SCSS語法\"><a href=\"#SCSS語法\" class=\"headerlink\" title=\"SCSS語法\"></a>SCSS語法</h4><p>將子階層內容直接寫進父元素中 如下 codepen <a href=\"https://codepen.io/chunwen/pen/JqyQMK\">練習連結</a><br>Tips：&amp;連結詞使用，可以連接上一層</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">      <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">      &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此，編譯結果為如下<br><img src=\"https://i.imgur.com/XUbw7rr.png\" alt=\"\"></p>\n<h4 id=\"SASS語法撰寫\"><a href=\"#SASS語法撰寫\" class=\"headerlink\" title=\"SASS語法撰寫\"></a>SASS語法撰寫</h4><p><a href=\"https://codepen.io/chunwen/pen/VOMvBW\">codepen練習</a><br>備註：1.不用括號和逗點 2.每往下一個階層都需要兩個空白或是一個tab</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.menu</span></span><br><span class=\"line\">  <span class=\"selector-tag\">li</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span></span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span></span><br><span class=\"line\">      text-decoration: none</span><br><span class=\"line\">      </span><br><span class=\"line\">.second</span><br><span class=\"line\">  font-size: <span class=\"number\">40px</span></span><br><span class=\"line\">  color: red</span><br></pre></td></tr></table></figure>\n\n<p>記得:後要空一個(沒有空的話，會顯示編譯成功，但程式碼不會出現)<br>成功的話，會出現下圖<br><img src=\"https://i.imgur.com/D37gRLL.png\" alt=\"\"></p>\n<h3 id=\"結論：\"><a href=\"#結論：\" class=\"headerlink\" title=\"結論：\"></a>結論：</h3><p>1.<br><img src=\"https://i.imgur.com/0JaBszm.png\" alt=\"\"><br>2.編譯錯誤記得去prepos log中看錯誤在哪~~<br>3.如果CSS後面沒加<code>分號;</code>會編譯錯誤<br>4.CSS巢狀不要超過四層(避免網頁渲染效能有所影響)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;巢狀指的就是下面撰寫內容</span><br><span class=\"line\">.menu &#123;</span><br><span class=\"line\">  li &#123;</span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">      color: red;</span><br><span class=\"line\">      text-decoration: none;</span><br><span class=\"line\">      font-size: 30px;</span><br><span class=\"line\">      &amp;:hover &#123;</span><br><span class=\"line\">        color: grey;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":1180,"excerpt":"<p>參考資料：<br><a href=\"https://quip.com/OVV1AtQbIRYj\">SaSS 課程 講義補充</a><br><a href=\"https://blog.techbridge.cc/2017/06/30/sass-scss-tutorial-introduction/\">Sass/SCSS 簡明入門教學</a></p>","more":"<p>本章作業練習：<br><a href=\"https://www.udemy.com/sasssecret/learn/lecture/14367144#questions/7144762\">題目</a> </p>\n<hr>\n<h3 id=\"簡介：\"><a href=\"#簡介：\" class=\"headerlink\" title=\"簡介：\"></a>簡介：</h3><p>Sass 是一個 CSS 預處理器，而它有兩種撰寫的風格<br>1.一個是 SASS<br>2.另一個就是 SCSS(較常使用這種寫法，原因是跟原本css寫法類似，較為直覺好懂)</p>\n<p>Sass常見編譯方式主要有下面三種<br>1.軟體編譯 EX：prepros<br>2.gulp、webpack 前端任務/打包工具<br>3.編輯器內建的插件</p>\n<h3 id=\"接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\"><a href=\"#接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\" class=\"headerlink\" title=\"接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式\"></a>接下來，就讓我介紹軟體編譯、Vscode內建的插件使用方式</h3><p>今天將介紹sublime、Vscode兩種編輯器處理方式<br>一、編輯器：sublime text3<br>1.為了讓 Sublime Text 3 支援 Sass、Scss 語法，請安裝 <code>Sass、Scss Plugin</code></p>\n<h4 id=\"補充：使用sublime-text3編輯器撰寫方式\"><a href=\"#補充：使用sublime-text3編輯器撰寫方式\" class=\"headerlink\" title=\"補充：使用sublime text3編輯器撰寫方式\"></a>補充：使用sublime text3編輯器撰寫方式</h4><p>1.將all.scss檔案開啟 放置左邊<br>2.將以編譯好的all.css放置右邊(方便同時觀看)<br><img src=\"https://i.imgur.com/b2MEoj0.png\" alt=\"\"></p>\n<p>2.環境建置篇：<br>先下載Prepos <a href=\"https://wcc723.github.io/tools/2013/12/27/prepos-intro/\">前端軟體-Prepos介紹</a><br>安裝完成後，請將資料夾丟進prepos內 如下圖所示<br>接著，新增一個資料夾Sass，並在裡面放進一隻.scss檔案<br>如果畫面右下角有出現success就表示有成功喽~<br><img src=\"https://i.imgur.com/yHIMQXa.png\" alt=\"\"></p>\n<p>二、編輯器Vscode<br>在vscode中新增一個xxx.scss檔案，並記得按下左下角watching即可及時編譯喔<br><img src=\"https://i.imgur.com/VZAYGiD.png\" alt=\"\"></p>\n<h3 id=\"SASS、-SCSS語法撰寫\"><a href=\"#SASS、-SCSS語法撰寫\" class=\"headerlink\" title=\"SASS、 SCSS語法撰寫\"></a>SASS、 SCSS語法撰寫</h3><h4 id=\"SCSS語法\"><a href=\"#SCSS語法\" class=\"headerlink\" title=\"SCSS語法\"></a>SCSS語法</h4><p>將子階層內容直接寫進父元素中 如下 codepen <a href=\"https://codepen.io/chunwen/pen/JqyQMK\">練習連結</a><br>Tips：&amp;連結詞使用，可以連接上一層</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.menu</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">      <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">      &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此，編譯結果為如下<br><img src=\"https://i.imgur.com/XUbw7rr.png\" alt=\"\"></p>\n<h4 id=\"SASS語法撰寫\"><a href=\"#SASS語法撰寫\" class=\"headerlink\" title=\"SASS語法撰寫\"></a>SASS語法撰寫</h4><p><a href=\"https://codepen.io/chunwen/pen/VOMvBW\">codepen練習</a><br>備註：1.不用括號和逗點 2.每往下一個階層都需要兩個空白或是一個tab</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.menu</span></span><br><span class=\"line\">  <span class=\"selector-tag\">li</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span></span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span></span><br><span class=\"line\">      text-decoration: none</span><br><span class=\"line\">      </span><br><span class=\"line\">.second</span><br><span class=\"line\">  font-size: <span class=\"number\">40px</span></span><br><span class=\"line\">  color: red</span><br></pre></td></tr></table></figure>\n\n<p>記得:後要空一個(沒有空的話，會顯示編譯成功，但程式碼不會出現)<br>成功的話，會出現下圖<br><img src=\"https://i.imgur.com/D37gRLL.png\" alt=\"\"></p>\n<h3 id=\"結論：\"><a href=\"#結論：\" class=\"headerlink\" title=\"結論：\"></a>結論：</h3><p>1.<br><img src=\"https://i.imgur.com/0JaBszm.png\" alt=\"\"><br>2.編譯錯誤記得去prepos log中看錯誤在哪~~<br>3.如果CSS後面沒加<code>分號;</code>會編譯錯誤<br>4.CSS巢狀不要超過四層(避免網頁渲染效能有所影響)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;巢狀指的就是下面撰寫內容</span><br><span class=\"line\">.menu &#123;</span><br><span class=\"line\">  li &#123;</span><br><span class=\"line\">    a &#123;</span><br><span class=\"line\">      color: red;</span><br><span class=\"line\">      text-decoration: none;</span><br><span class=\"line\">      font-size: 30px;</span><br><span class=\"line\">      &amp;:hover &#123;</span><br><span class=\"line\">        color: grey;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JS30挑戰-Day4-Array Cardio Day1","abbrlink":688811109,"date":"2019-09-11T14:41:21.000Z","_content":"\n參考資料：\n[Alex老師直播](https://www.youtube.com/watch?v=8JzVwrzkUrM&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=4)\n<!-- more -->\n- - - -\n這個範例主要練習Array陣列操作方式，並利用一些範例來幫助我們了解如何運用。此練習也可以搭配之前文章[[JavaScript 陣列處理方法]]閱讀。\n\n* console.table\n將陣列資料呈現表格狀\n![](https://i.imgur.com/9A2SDLk.png)\n\n### 練習一：從列表中撈出1500年代出生的人\n```javascript\n    let ans = inventors.filter(function(item){\n        return item.year >1500 && item.year<1600\n    })\n    console.table(ans);\n\n```\nFilter不會影響到原始資料，他會回傳一個true或false，`並會產生一個新的陣列`\n箭頭函示預設就會return，所以撰寫時候return不用寫！改用ES6寫法如下\n```javascript\nlet ans = inventors.filter(item => item.year > 1500 && item.year < 1600)\n\nconsole.table(ans);\n```\n\n### 練習二：將陣列中姓氏與名字組合成一個新的陣列\n[練習二影片教學](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=999)\nMap：會對陣列每個元素都執行一次，跟Filter一樣會產生一個新陣列\n```javascript\n       let ans =inventors.map(function(fullName){\n            return `${fullName.first} ${fullName.last}` \n        })\n        console.table(ans)\n```\n\nforEach：會對陣列每個元素都執行一次，但不會有回傳值\n```javascript\nlet ary=[];\n        let ans =inventors.forEach(function(fullName){\n          ary.push(`${fullName.first} ${fullName.last}`)\n        })\n        console.table(ary)\n```\n[兩者比較](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1171)\n\n### 練習三：將陣列中人物依照年齡從大到小\n[Sort影片教學](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324) [MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。\n穩定排序：指的是如果比較數值相同，不會調整原始資料順序\n用法有兩種：\n1.直接針對資料sort（），通常用在value、數值           =>預設升冪排列\n2.針對資料進行減法運算（比較推薦使用，如下範例）\n```javascript\nlet ary=[1,110,23,54]\nary.sort((a,b)=>a.year-b.year); // 1,0,-1\n```\n補充說明：升冪（以a為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 a 小於 b) {\n    return -1;   \n  }\n  if (在某排序標準下 a 大於 b) {\n    return 1;     \n  }\n  // a 必須等於 b\n  return 0;\n}\n```\n補充說明：降冪（以b為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 b 小於 a) {\n    return -1;   \n  }\n  if (在某排序標準下 b 大於 a) {\n    return 1;     \n  }\n  // b 必須等於 a\n  return 0;\n}\n```\n\n解答：\n```javascript\n     let ans = inventors.sort(function(a,b){\n     return (a.year > b.year) ? 1: (b.year > a.year) ? -1:0           \n})\n     console.table(ans);\n```\n\n### 練習四：Reduce（累加）將陣列中人物年齡加總\n[forEach作法](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2117)(以前用法)\n[Reduce作法](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2230)\n```javascript\nvar reduce =\n陣列.reduce((累加數值,當前數值)＝>{return 累加數值 +當前數值},0)\nconsole.log(reduceArray); \n```\n說明：\n0：代表初始值，會當作累加數值的初始值\n解答：\n```javascript\n       let ans = inventors.reduce(function(initial,life){\n            return initial + (life.passed - life.year)\n        },0)\n        console.log(ans). //861\n```\n> 提醒：使用reduce（）記得加上初始值結果！  \n\n### 練習五:將資料內容中的人物活年齡由小到大\n[影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2446)\n```javascript\n        let ary=[];\n        let ans =inventors.forEach(function(life){\n            ary.push(life.passed - life.year)\n        })\n        console.table(ary)\n        let result = ary.sort((a,b)=> a- b)\n        console.table(result)\n```\n- 額外bonus:請對陣列添加一個年齡欄位\n使用到物件點陣法新增欄位喔 [MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Basics)  \n```javascript\n      inventors.forEach(function(life){\n            life.years = life.passed -life.year\n        })\n```\n\n### 練習六搜尋陣列中包含‘de’的名字\n[練習六影片](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2812)\n```javascript\n let ary = [];\ndocument.querySelectorAll\n('.mw-category-group li a').\nforEach(function (a) { ary.push(a.title) });\n\nlet ans = ary.filter(function(item)\n{ return item.includes('de')}) \n\n```\nindexOf() \n寫法：`arr.indexOf(searchElement[, fromIndex])`\nindexOf() 方法會回傳給定元素 陣列中第一個被找到索引值，若不存在於陣列中則回傳 -1。[MDN介紹](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n```javascript\nlet ary=[];\ndocument.querySelectorAll('.mw-category-group li a').\nforEach(function(a){ ary.push(a.title)});\n\nvar ans = ary.filter(function(item)\n{ return item.indexOf('de') !== -1 })\n```\n補充：處理陣列找東西方法：\n[JavaScript 陣列處理：找東西 - indexOf、$.inArray 與 filter](https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/)\n\n### 練習七：將陣列中資料依照姓氏字母順序排列 \n[影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3123)\n解答如下\n```javascript\n       let ans =people.sort(function(a,b){\n            let [aFist,aLast] =a.split(', ');\n            let [bFist,bLast] =b.split(', ');\n            return \n            aLast[0] > bLast[0] ? 1 :bLast[0]>aLast[0] ? -1:0\n        })\n        console.table(ans)\n```\n\n1.三元運算子組合(示範如下)\n```javascript\naLast > bLast ? 1 : aLast < bLast: -1: 0\n```\n2.split方法練習  \n`str.split([separator[, limit]])`\n說明：針對字串進行分割，`會回傳一個陣列`\nThe split() method is used to split a string into an array of substrings, and returns the new array.[取自Ｗ3cshool](https://www.w3schools.com/jsref/jsref_split.asp)\n補充：[slice()、splice()、split() 傻傻分不清](https://medium.com/@bebebobohaha/slice-splice-split-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85-46d9c8992729)\n\n3.解構賦值概念 [影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=4160)\n```javascript\nconst [aLast, aFirst] = lastOne.split(', ');\n```\n\n### 練習八--reduce\n[影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3774)\n```javascript\n    let ans =data.reduce(function(obj,item){\n            if(!obj[item]) {obj[item]=0}\n            obj[item]++\n            return  objnsol\n        },{}) \n        console.table(ans)\n```\n卡斯伯老師說明：[連結](https://www.udemy.com/course/javascript-learning/learn/lecture/6791226#questions/8049104)\n上面寫法沒有 else，所以無論如何都會執行 obj[item] +=1\n\n[影片－今日課程整理](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3949)\n### 心得\n1.撰寫練習四時，忘記把初始值加回，所以一開始結果一直錯誤！\n提醒：使用reduce（）記得加上初始值結果！\n2.物件點陣法（dot notation複習）\n3.解構賦值第一次使用\n4.搜尋方法整理（indexOf、includes、filter）\n\n\n\n\n","source":"_posts/2019-09-11-JS30挑戰-day4.md","raw":"---\ntitle: JS30挑戰-Day4-Array Cardio Day1\ntags:\n  - JavaScript\n  - JavaScript30天挑戰\ncategories:\n  - JavaScript\nabbrlink: 688811109\ndate: 2019-09-11 22:41:21\n---\n\n參考資料：\n[Alex老師直播](https://www.youtube.com/watch?v=8JzVwrzkUrM&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=4)\n<!-- more -->\n- - - -\n這個範例主要練習Array陣列操作方式，並利用一些範例來幫助我們了解如何運用。此練習也可以搭配之前文章[[JavaScript 陣列處理方法]]閱讀。\n\n* console.table\n將陣列資料呈現表格狀\n![](https://i.imgur.com/9A2SDLk.png)\n\n### 練習一：從列表中撈出1500年代出生的人\n```javascript\n    let ans = inventors.filter(function(item){\n        return item.year >1500 && item.year<1600\n    })\n    console.table(ans);\n\n```\nFilter不會影響到原始資料，他會回傳一個true或false，`並會產生一個新的陣列`\n箭頭函示預設就會return，所以撰寫時候return不用寫！改用ES6寫法如下\n```javascript\nlet ans = inventors.filter(item => item.year > 1500 && item.year < 1600)\n\nconsole.table(ans);\n```\n\n### 練習二：將陣列中姓氏與名字組合成一個新的陣列\n[練習二影片教學](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=999)\nMap：會對陣列每個元素都執行一次，跟Filter一樣會產生一個新陣列\n```javascript\n       let ans =inventors.map(function(fullName){\n            return `${fullName.first} ${fullName.last}` \n        })\n        console.table(ans)\n```\n\nforEach：會對陣列每個元素都執行一次，但不會有回傳值\n```javascript\nlet ary=[];\n        let ans =inventors.forEach(function(fullName){\n          ary.push(`${fullName.first} ${fullName.last}`)\n        })\n        console.table(ary)\n```\n[兩者比較](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1171)\n\n### 練習三：將陣列中人物依照年齡從大到小\n[Sort影片教學](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324) [MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。\n穩定排序：指的是如果比較數值相同，不會調整原始資料順序\n用法有兩種：\n1.直接針對資料sort（），通常用在value、數值           =>預設升冪排列\n2.針對資料進行減法運算（比較推薦使用，如下範例）\n```javascript\nlet ary=[1,110,23,54]\nary.sort((a,b)=>a.year-b.year); // 1,0,-1\n```\n補充說明：升冪（以a為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 a 小於 b) {\n    return -1;   \n  }\n  if (在某排序標準下 a 大於 b) {\n    return 1;     \n  }\n  // a 必須等於 b\n  return 0;\n}\n```\n補充說明：降冪（以b為比較基準點）\n```javascript\nfunction compare(a, b) {\n  if (在某排序標準下 b 小於 a) {\n    return -1;   \n  }\n  if (在某排序標準下 b 大於 a) {\n    return 1;     \n  }\n  // b 必須等於 a\n  return 0;\n}\n```\n\n解答：\n```javascript\n     let ans = inventors.sort(function(a,b){\n     return (a.year > b.year) ? 1: (b.year > a.year) ? -1:0           \n})\n     console.table(ans);\n```\n\n### 練習四：Reduce（累加）將陣列中人物年齡加總\n[forEach作法](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2117)(以前用法)\n[Reduce作法](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2230)\n```javascript\nvar reduce =\n陣列.reduce((累加數值,當前數值)＝>{return 累加數值 +當前數值},0)\nconsole.log(reduceArray); \n```\n說明：\n0：代表初始值，會當作累加數值的初始值\n解答：\n```javascript\n       let ans = inventors.reduce(function(initial,life){\n            return initial + (life.passed - life.year)\n        },0)\n        console.log(ans). //861\n```\n> 提醒：使用reduce（）記得加上初始值結果！  \n\n### 練習五:將資料內容中的人物活年齡由小到大\n[影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2446)\n```javascript\n        let ary=[];\n        let ans =inventors.forEach(function(life){\n            ary.push(life.passed - life.year)\n        })\n        console.table(ary)\n        let result = ary.sort((a,b)=> a- b)\n        console.table(result)\n```\n- 額外bonus:請對陣列添加一個年齡欄位\n使用到物件點陣法新增欄位喔 [MDN參考資料](https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Basics)  \n```javascript\n      inventors.forEach(function(life){\n            life.years = life.passed -life.year\n        })\n```\n\n### 練習六搜尋陣列中包含‘de’的名字\n[練習六影片](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2812)\n```javascript\n let ary = [];\ndocument.querySelectorAll\n('.mw-category-group li a').\nforEach(function (a) { ary.push(a.title) });\n\nlet ans = ary.filter(function(item)\n{ return item.includes('de')}) \n\n```\nindexOf() \n寫法：`arr.indexOf(searchElement[, fromIndex])`\nindexOf() 方法會回傳給定元素 陣列中第一個被找到索引值，若不存在於陣列中則回傳 -1。[MDN介紹](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)\n```javascript\nlet ary=[];\ndocument.querySelectorAll('.mw-category-group li a').\nforEach(function(a){ ary.push(a.title)});\n\nvar ans = ary.filter(function(item)\n{ return item.indexOf('de') !== -1 })\n```\n補充：處理陣列找東西方法：\n[JavaScript 陣列處理：找東西 - indexOf、$.inArray 與 filter](https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/)\n\n### 練習七：將陣列中資料依照姓氏字母順序排列 \n[影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3123)\n解答如下\n```javascript\n       let ans =people.sort(function(a,b){\n            let [aFist,aLast] =a.split(', ');\n            let [bFist,bLast] =b.split(', ');\n            return \n            aLast[0] > bLast[0] ? 1 :bLast[0]>aLast[0] ? -1:0\n        })\n        console.table(ans)\n```\n\n1.三元運算子組合(示範如下)\n```javascript\naLast > bLast ? 1 : aLast < bLast: -1: 0\n```\n2.split方法練習  \n`str.split([separator[, limit]])`\n說明：針對字串進行分割，`會回傳一個陣列`\nThe split() method is used to split a string into an array of substrings, and returns the new array.[取自Ｗ3cshool](https://www.w3schools.com/jsref/jsref_split.asp)\n補充：[slice()、splice()、split() 傻傻分不清](https://medium.com/@bebebobohaha/slice-splice-split-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85-46d9c8992729)\n\n3.解構賦值概念 [影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=4160)\n```javascript\nconst [aLast, aFirst] = lastOne.split(', ');\n```\n\n### 練習八--reduce\n[影片連結](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3774)\n```javascript\n    let ans =data.reduce(function(obj,item){\n            if(!obj[item]) {obj[item]=0}\n            obj[item]++\n            return  objnsol\n        },{}) \n        console.table(ans)\n```\n卡斯伯老師說明：[連結](https://www.udemy.com/course/javascript-learning/learn/lecture/6791226#questions/8049104)\n上面寫法沒有 else，所以無論如何都會執行 obj[item] +=1\n\n[影片－今日課程整理](https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3949)\n### 心得\n1.撰寫練習四時，忘記把初始值加回，所以一開始結果一直錯誤！\n提醒：使用reduce（）記得加上初始值結果！\n2.物件點陣法（dot notation複習）\n3.解構賦值第一次使用\n4.搜尋方法整理（indexOf、includes、filter）\n\n\n\n\n","slug":"2019-09-11-JS30挑戰-day4","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2e001bzqzi8kvn5v6x","content":"<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=8JzVwrzkUrM&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=4\">Alex老師直播</a></p>\n<span id=\"more\"></span>\n<hr>\n<p>這個範例主要練習Array陣列操作方式，並利用一些範例來幫助我們了解如何運用。此練習也可以搭配之前文章[[JavaScript 陣列處理方法]]閱讀。</p>\n<ul>\n<li>console.table<br>將陣列資料呈現表格狀<br><img src=\"https://i.imgur.com/9A2SDLk.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"練習一：從列表中撈出1500年代出生的人\"><a href=\"#練習一：從列表中撈出1500年代出生的人\" class=\"headerlink\" title=\"練習一：從列表中撈出1500年代出生的人\"></a>練習一：從列表中撈出1500年代出生的人</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans = inventors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.year &gt;<span class=\"number\">1500</span> &amp;&amp; item.year&lt;<span class=\"number\">1600</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ans);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Filter不會影響到原始資料，他會回傳一個true或false，<code>並會產生一個新的陣列</code><br>箭頭函示預設就會return，所以撰寫時候return不用寫！改用ES6寫法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans = inventors.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.year &gt; <span class=\"number\">1500</span> &amp;&amp; item.year &lt; <span class=\"number\">1600</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ans);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"練習二：將陣列中姓氏與名字組合成一個新的陣列\"><a href=\"#練習二：將陣列中姓氏與名字組合成一個新的陣列\" class=\"headerlink\" title=\"練習二：將陣列中姓氏與名字組合成一個新的陣列\"></a>練習二：將陣列中姓氏與名字組合成一個新的陣列</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=999\">練習二影片教學</a><br>Map：會對陣列每個元素都執行一次，跟Filter一樣會產生一個新陣列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans =inventors.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fullName</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;fullName.first&#125;</span> <span class=\"subst\">$&#123;fullName.last&#125;</span>`</span> </span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.table(ans)</span><br></pre></td></tr></table></figure>\n\n<p>forEach：會對陣列每個元素都執行一次，但不會有回傳值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ans =inventors.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fullName</span>)</span>&#123;</span><br><span class=\"line\">          ary.push(<span class=\"string\">`<span class=\"subst\">$&#123;fullName.first&#125;</span> <span class=\"subst\">$&#123;fullName.last&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.table(ary)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1171\">兩者比較</a></p>\n<h3 id=\"練習三：將陣列中人物依照年齡從大到小\"><a href=\"#練習三：將陣列中人物依照年齡從大到小\" class=\"headerlink\" title=\"練習三：將陣列中人物依照年齡從大到小\"></a>練習三：將陣列中人物依照年齡從大到小</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324\">Sort影片教學</a> <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">MDN參考資料</a><br>預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。<br>穩定排序：指的是如果比較數值相同，不會調整原始資料順序<br>用法有兩種：<br>1.直接針對資料sort（），通常用在value、數值           =&gt;預設升冪排列<br>2.針對資料進行減法運算（比較推薦使用，如下範例）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[<span class=\"number\">1</span>,<span class=\"number\">110</span>,<span class=\"number\">23</span>,<span class=\"number\">54</span>]</span><br><span class=\"line\">ary.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a.year-b.year); <span class=\"comment\">// 1,0,-1</span></span><br></pre></td></tr></table></figure>\n<p>補充說明：升冪（以a為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 小於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 大於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// a 必須等於 b</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>補充說明：降冪（以b為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 小於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 大於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// b 必須等於 a</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解答：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">let</span> ans = inventors.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (a.year &gt; b.year) ? <span class=\"number\">1</span>: (b.year &gt; a.year) ? -<span class=\"number\">1</span>:<span class=\"number\">0</span>           </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.table(ans);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"練習四：Reduce（累加）將陣列中人物年齡加總\"><a href=\"#練習四：Reduce（累加）將陣列中人物年齡加總\" class=\"headerlink\" title=\"練習四：Reduce（累加）將陣列中人物年齡加總\"></a>練習四：Reduce（累加）將陣列中人物年齡加總</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2117\">forEach作法</a>(以前用法)<br><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2230\">Reduce作法</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reduce =</span><br><span class=\"line\">陣列.reduce((累加數值,當前數值)＝&gt;&#123;<span class=\"keyword\">return</span> 累加數值 +當前數值&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reduceArray); </span><br></pre></td></tr></table></figure>\n<p>說明：<br>0：代表初始值，會當作累加數值的初始值<br>解答：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans = inventors.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">initial,life</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> initial + (life.passed - life.year)</span><br><span class=\"line\"> &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(ans). <span class=\"comment\">//861</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：使用reduce（）記得加上初始值結果！  </p>\n</blockquote>\n<h3 id=\"練習五-將資料內容中的人物活年齡由小到大\"><a href=\"#練習五-將資料內容中的人物活年齡由小到大\" class=\"headerlink\" title=\"練習五:將資料內容中的人物活年齡由小到大\"></a>練習五:將資料內容中的人物活年齡由小到大</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2446\">影片連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ans =inventors.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">life</span>)</span>&#123;</span><br><span class=\"line\">    ary.push(life.passed - life.year)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ary)</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = ary.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> a- b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(result)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>額外bonus:請對陣列添加一個年齡欄位<br>使用到物件點陣法新增欄位喔 <a href=\"https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Basics\">MDN參考資料</a>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inventors.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">life</span>)</span>&#123;</span><br><span class=\"line\">      life.years = life.passed -life.year</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"練習六搜尋陣列中包含‘de’的名字\"><a href=\"#練習六搜尋陣列中包含‘de’的名字\" class=\"headerlink\" title=\"練習六搜尋陣列中包含‘de’的名字\"></a>練習六搜尋陣列中包含‘de’的名字</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2812\">練習六影片</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> ary = [];</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll</span><br><span class=\"line\">(<span class=\"string\">&#x27;.mw-category-group li a&#x27;</span>).</span><br><span class=\"line\">forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123; ary.push(a.title) &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ans = ary.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> item.includes(<span class=\"string\">&#x27;de&#x27;</span>)&#125;) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>indexOf()<br>寫法：<code>arr.indexOf(searchElement[, fromIndex])</code><br>indexOf() 方法會回傳給定元素 陣列中第一個被找到索引值，若不存在於陣列中則回傳 -1。<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">MDN介紹</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[];</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.mw-category-group li a&#x27;</span>).</span><br><span class=\"line\">forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123; ary.push(a.title)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = ary.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> item.indexOf(<span class=\"string\">&#x27;de&#x27;</span>) !== -<span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>補充：處理陣列找東西方法：<br><a href=\"https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/\">JavaScript 陣列處理：找東西 - indexOf、$.inArray 與 filter</a></p>\n<h3 id=\"練習七：將陣列中資料依照姓氏字母順序排列\"><a href=\"#練習七：將陣列中資料依照姓氏字母順序排列\" class=\"headerlink\" title=\"練習七：將陣列中資料依照姓氏字母順序排列\"></a>練習七：將陣列中資料依照姓氏字母順序排列</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3123\">影片連結</a><br>解答如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans =people.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [aFist,aLast] =a.split(<span class=\"string\">&#x27;, &#x27;</span>);</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [bFist,bLast] =b.split(<span class=\"string\">&#x27;, &#x27;</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> </span><br><span class=\"line\">     aLast[<span class=\"number\">0</span>] &gt; bLast[<span class=\"number\">0</span>] ? <span class=\"number\">1</span> :bLast[<span class=\"number\">0</span>]&gt;aLast[<span class=\"number\">0</span>] ? -<span class=\"number\">1</span>:<span class=\"number\">0</span></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.table(ans)</span><br></pre></td></tr></table></figure>\n\n<p>1.三元運算子組合(示範如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aLast &gt; bLast ? <span class=\"number\">1</span> : aLast &lt; bLast: -<span class=\"number\">1</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>2.split方法練習<br><code>str.split([separator[, limit]])</code><br>說明：針對字串進行分割，<code>會回傳一個陣列</code><br>The split() method is used to split a string into an array of substrings, and returns the new array.<a href=\"https://www.w3schools.com/jsref/jsref_split.asp\">取自Ｗ3cshool</a><br>補充：<a href=\"https://medium.com/@bebebobohaha/slice-splice-split-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85-46d9c8992729\">slice()、splice()、split() 傻傻分不清</a></p>\n<p>3.解構賦值概念 <a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=4160\">影片連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [aLast, aFirst] = lastOne.split(<span class=\"string\">&#x27;, &#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"練習八–reduce\"><a href=\"#練習八–reduce\" class=\"headerlink\" title=\"練習八–reduce\"></a>練習八–reduce</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3774\">影片連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans =data.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj,item</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!obj[item]) &#123;obj[item]=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">        obj[item]++</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  objnsol</span><br><span class=\"line\">    &#125;,&#123;&#125;) </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.table(ans)</span><br></pre></td></tr></table></figure>\n<p>卡斯伯老師說明：<a href=\"https://www.udemy.com/course/javascript-learning/learn/lecture/6791226#questions/8049104\">連結</a><br>上面寫法沒有 else，所以無論如何都會執行 obj[item] +=1</p>\n<p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3949\">影片－今日課程整理</a></p>\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p>1.撰寫練習四時，忘記把初始值加回，所以一開始結果一直錯誤！<br>提醒：使用reduce（）記得加上初始值結果！<br>2.物件點陣法（dot notation複習）<br>3.解構賦值第一次使用<br>4.搜尋方法整理（indexOf、includes、filter）</p>\n","site":{"data":{}},"length":3566,"excerpt":"<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=8JzVwrzkUrM&list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&index=4\">Alex老師直播</a></p>","more":"<hr>\n<p>這個範例主要練習Array陣列操作方式，並利用一些範例來幫助我們了解如何運用。此練習也可以搭配之前文章[[JavaScript 陣列處理方法]]閱讀。</p>\n<ul>\n<li>console.table<br>將陣列資料呈現表格狀<br><img src=\"https://i.imgur.com/9A2SDLk.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"練習一：從列表中撈出1500年代出生的人\"><a href=\"#練習一：從列表中撈出1500年代出生的人\" class=\"headerlink\" title=\"練習一：從列表中撈出1500年代出生的人\"></a>練習一：從列表中撈出1500年代出生的人</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans = inventors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item.year &gt;<span class=\"number\">1500</span> &amp;&amp; item.year&lt;<span class=\"number\">1600</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ans);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Filter不會影響到原始資料，他會回傳一個true或false，<code>並會產生一個新的陣列</code><br>箭頭函示預設就會return，所以撰寫時候return不用寫！改用ES6寫法如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans = inventors.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.year &gt; <span class=\"number\">1500</span> &amp;&amp; item.year &lt; <span class=\"number\">1600</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ans);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"練習二：將陣列中姓氏與名字組合成一個新的陣列\"><a href=\"#練習二：將陣列中姓氏與名字組合成一個新的陣列\" class=\"headerlink\" title=\"練習二：將陣列中姓氏與名字組合成一個新的陣列\"></a>練習二：將陣列中姓氏與名字組合成一個新的陣列</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=999\">練習二影片教學</a><br>Map：會對陣列每個元素都執行一次，跟Filter一樣會產生一個新陣列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans =inventors.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fullName</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;fullName.first&#125;</span> <span class=\"subst\">$&#123;fullName.last&#125;</span>`</span> </span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.table(ans)</span><br></pre></td></tr></table></figure>\n\n<p>forEach：會對陣列每個元素都執行一次，但不會有回傳值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[];</span><br><span class=\"line\">        <span class=\"keyword\">let</span> ans =inventors.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fullName</span>)</span>&#123;</span><br><span class=\"line\">          ary.push(<span class=\"string\">`<span class=\"subst\">$&#123;fullName.first&#125;</span> <span class=\"subst\">$&#123;fullName.last&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.table(ary)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1171\">兩者比較</a></p>\n<h3 id=\"練習三：將陣列中人物依照年齡從大到小\"><a href=\"#練習三：將陣列中人物依照年齡從大到小\" class=\"headerlink\" title=\"練習三：將陣列中人物依照年齡從大到小\"></a>練習三：將陣列中人物依照年齡從大到小</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=1324\">Sort影片教學</a> <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">MDN參考資料</a><br>預設的排序順序是根據字串的 Unicode 編碼位置（code points）而定。<br>穩定排序：指的是如果比較數值相同，不會調整原始資料順序<br>用法有兩種：<br>1.直接針對資料sort（），通常用在value、數值           =&gt;預設升冪排列<br>2.針對資料進行減法運算（比較推薦使用，如下範例）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[<span class=\"number\">1</span>,<span class=\"number\">110</span>,<span class=\"number\">23</span>,<span class=\"number\">54</span>]</span><br><span class=\"line\">ary.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a.year-b.year); <span class=\"comment\">// 1,0,-1</span></span><br></pre></td></tr></table></figure>\n<p>補充說明：升冪（以a為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 小於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 a 大於 b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// a 必須等於 b</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>補充說明：降冪（以b為比較基準點）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 小於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (在某排序標準下 b 大於 a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;     </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// b 必須等於 a</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解答：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">let</span> ans = inventors.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (a.year &gt; b.year) ? <span class=\"number\">1</span>: (b.year &gt; a.year) ? -<span class=\"number\">1</span>:<span class=\"number\">0</span>           </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.table(ans);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"練習四：Reduce（累加）將陣列中人物年齡加總\"><a href=\"#練習四：Reduce（累加）將陣列中人物年齡加總\" class=\"headerlink\" title=\"練習四：Reduce（累加）將陣列中人物年齡加總\"></a>練習四：Reduce（累加）將陣列中人物年齡加總</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2117\">forEach作法</a>(以前用法)<br><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2230\">Reduce作法</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reduce =</span><br><span class=\"line\">陣列.reduce((累加數值,當前數值)＝&gt;&#123;<span class=\"keyword\">return</span> 累加數值 +當前數值&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reduceArray); </span><br></pre></td></tr></table></figure>\n<p>說明：<br>0：代表初始值，會當作累加數值的初始值<br>解答：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans = inventors.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">initial,life</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> initial + (life.passed - life.year)</span><br><span class=\"line\"> &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(ans). <span class=\"comment\">//861</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：使用reduce（）記得加上初始值結果！  </p>\n</blockquote>\n<h3 id=\"練習五-將資料內容中的人物活年齡由小到大\"><a href=\"#練習五-將資料內容中的人物活年齡由小到大\" class=\"headerlink\" title=\"練習五:將資料內容中的人物活年齡由小到大\"></a>練習五:將資料內容中的人物活年齡由小到大</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2446\">影片連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ans =inventors.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">life</span>)</span>&#123;</span><br><span class=\"line\">    ary.push(life.passed - life.year)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ary)</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = ary.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span> a- b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(result)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>額外bonus:請對陣列添加一個年齡欄位<br>使用到物件點陣法新增欄位喔 <a href=\"https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Basics\">MDN參考資料</a>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inventors.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">life</span>)</span>&#123;</span><br><span class=\"line\">      life.years = life.passed -life.year</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"練習六搜尋陣列中包含‘de’的名字\"><a href=\"#練習六搜尋陣列中包含‘de’的名字\" class=\"headerlink\" title=\"練習六搜尋陣列中包含‘de’的名字\"></a>練習六搜尋陣列中包含‘de’的名字</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2812\">練習六影片</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> ary = [];</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll</span><br><span class=\"line\">(<span class=\"string\">&#x27;.mw-category-group li a&#x27;</span>).</span><br><span class=\"line\">forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123; ary.push(a.title) &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ans = ary.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> item.includes(<span class=\"string\">&#x27;de&#x27;</span>)&#125;) </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>indexOf()<br>寫法：<code>arr.indexOf(searchElement[, fromIndex])</code><br>indexOf() 方法會回傳給定元素 陣列中第一個被找到索引值，若不存在於陣列中則回傳 -1。<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\">MDN介紹</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary=[];</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;.mw-category-group li a&#x27;</span>).</span><br><span class=\"line\">forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123; ary.push(a.title)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = ary.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> item.indexOf(<span class=\"string\">&#x27;de&#x27;</span>) !== -<span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>補充：處理陣列找東西方法：<br><a href=\"https://cythilya.github.io/2017/05/08/javascript-find-item-in-an-array/\">JavaScript 陣列處理：找東西 - indexOf、$.inArray 與 filter</a></p>\n<h3 id=\"練習七：將陣列中資料依照姓氏字母順序排列\"><a href=\"#練習七：將陣列中資料依照姓氏字母順序排列\" class=\"headerlink\" title=\"練習七：將陣列中資料依照姓氏字母順序排列\"></a>練習七：將陣列中資料依照姓氏字母順序排列</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3123\">影片連結</a><br>解答如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans =people.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [aFist,aLast] =a.split(<span class=\"string\">&#x27;, &#x27;</span>);</span><br><span class=\"line\">     <span class=\"keyword\">let</span> [bFist,bLast] =b.split(<span class=\"string\">&#x27;, &#x27;</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> </span><br><span class=\"line\">     aLast[<span class=\"number\">0</span>] &gt; bLast[<span class=\"number\">0</span>] ? <span class=\"number\">1</span> :bLast[<span class=\"number\">0</span>]&gt;aLast[<span class=\"number\">0</span>] ? -<span class=\"number\">1</span>:<span class=\"number\">0</span></span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.table(ans)</span><br></pre></td></tr></table></figure>\n\n<p>1.三元運算子組合(示範如下)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aLast &gt; bLast ? <span class=\"number\">1</span> : aLast &lt; bLast: -<span class=\"number\">1</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>2.split方法練習<br><code>str.split([separator[, limit]])</code><br>說明：針對字串進行分割，<code>會回傳一個陣列</code><br>The split() method is used to split a string into an array of substrings, and returns the new array.<a href=\"https://www.w3schools.com/jsref/jsref_split.asp\">取自Ｗ3cshool</a><br>補充：<a href=\"https://medium.com/@bebebobohaha/slice-splice-split-%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85-46d9c8992729\">slice()、splice()、split() 傻傻分不清</a></p>\n<p>3.解構賦值概念 <a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=4160\">影片連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [aLast, aFirst] = lastOne.split(<span class=\"string\">&#x27;, &#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"練習八–reduce\"><a href=\"#練習八–reduce\" class=\"headerlink\" title=\"練習八–reduce\"></a>練習八–reduce</h3><p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3774\">影片連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ans =data.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj,item</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!obj[item]) &#123;obj[item]=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">        obj[item]++</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  objnsol</span><br><span class=\"line\">    &#125;,&#123;&#125;) </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.table(ans)</span><br></pre></td></tr></table></figure>\n<p>卡斯伯老師說明：<a href=\"https://www.udemy.com/course/javascript-learning/learn/lecture/6791226#questions/8049104\">連結</a><br>上面寫法沒有 else，所以無論如何都會執行 obj[item] +=1</p>\n<p><a href=\"https://youtu.be/8JzVwrzkUrM?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3949\">影片－今日課程整理</a></p>\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p>1.撰寫練習四時，忘記把初始值加回，所以一開始結果一直錯誤！<br>提醒：使用reduce（）記得加上初始值結果！<br>2.物件點陣法（dot notation複習）<br>3.解構賦值第一次使用<br>4.搜尋方法整理（indexOf、includes、filter）</p>"},{"title":"JS30挑戰-Day7-Array Cardio Day2","abbrlink":324123510,"date":"2019-09-13T16:00:00.000Z","_content":"\n參考資料：\n[操作陣列的20種方法](https://hsiangfeng.github.io/javascript/20190421/1216566123/)\n[Alex直播影片](https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=613)\n[JS時間取得方法筆記](https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more)\n[Demo練習](https://chun-wen.github.io/JavaScript30/07%20-%20Array%20Cardio%20Day%202//index-chunwen.html)\n<!-- more -->\n- - - -\n### some\n回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合\n```javascript\nconstans=people.some(y => newDate().getFullYear()-y.year>=19)\nconsole.log(ans); //true\n```\n\n### every\n用來檢查所有陣列是否符合條件，僅會回傳一個值true或false\n```javascript\nconstans = people.every(function(year){\nreturn newDate().getFullYear()-year.year>=19;\n})\nconsole.log(ans);\n```\n\n### find\n適合用來搜尋是否有符合資料，僅會回傳第一筆資料\n```javascript\nconstans = comments.find(id=>id.id===823423)\nconsole.log(ans)\n```\n\n### findIndex\n尋找第一個符合條件的序號\n```javascript\nconstans = comments.findIndex(id => id.id === 823423 )\nconsole.log(ans) //1\n```\n\n### slice\n>目的：不要動到原始資料\n```javascript\nconstans = comments.slice(0,1)\nconstans2 = comments.slice(2)\nconstans3 = [...ans,...ans2]\nconsole.log(ans3)\n```\n\n### splice\n```javascript\nconstans = comments.splice(1,1);\nconsole.log(ans)\n```\n[今日影片重點整理](https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2226)\n\n### 補充：複製物件介紹\n[影片講解](https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3098)\n```javascript\n    let obj1 = { count: 1 };\n    let obj2 = obj1;\n    let obj3 = Object.assign({}, obj1)\n    obj1.count = 5;\n    let obj4 = JSON.parse(JSON.stringify(obj1))\n\nconsole.log(obj1.count + obj2.count + obj3.count + obj4.count) \n// 5+5+1+5 =16\n```\n\n### 心得\n1.解構賦值概念\n2.取得資料時盡量不要對原始資料進行更動\n3.splice、slice比較\n4.取得時間方法整理 [JS時間取得方法筆記](https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more)\n\n\n\n\n","source":"_posts/2019-09-11-JS30挑戰-day7Array Cardio Day2.md","raw":"---\ntitle: JS30挑戰-Day7-Array Cardio Day2\ntags:\n  - JavaScript\n  - JavaScript30天挑戰\ncategories:\n  - JavaScript\nabbrlink: 324123510\ndate: 2019-09-14 00:00:00\n---\n\n參考資料：\n[操作陣列的20種方法](https://hsiangfeng.github.io/javascript/20190421/1216566123/)\n[Alex直播影片](https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=613)\n[JS時間取得方法筆記](https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more)\n[Demo練習](https://chun-wen.github.io/JavaScript30/07%20-%20Array%20Cardio%20Day%202//index-chunwen.html)\n<!-- more -->\n- - - -\n### some\n回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合\n```javascript\nconstans=people.some(y => newDate().getFullYear()-y.year>=19)\nconsole.log(ans); //true\n```\n\n### every\n用來檢查所有陣列是否符合條件，僅會回傳一個值true或false\n```javascript\nconstans = people.every(function(year){\nreturn newDate().getFullYear()-year.year>=19;\n})\nconsole.log(ans);\n```\n\n### find\n適合用來搜尋是否有符合資料，僅會回傳第一筆資料\n```javascript\nconstans = comments.find(id=>id.id===823423)\nconsole.log(ans)\n```\n\n### findIndex\n尋找第一個符合條件的序號\n```javascript\nconstans = comments.findIndex(id => id.id === 823423 )\nconsole.log(ans) //1\n```\n\n### slice\n>目的：不要動到原始資料\n```javascript\nconstans = comments.slice(0,1)\nconstans2 = comments.slice(2)\nconstans3 = [...ans,...ans2]\nconsole.log(ans3)\n```\n\n### splice\n```javascript\nconstans = comments.splice(1,1);\nconsole.log(ans)\n```\n[今日影片重點整理](https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2226)\n\n### 補充：複製物件介紹\n[影片講解](https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3098)\n```javascript\n    let obj1 = { count: 1 };\n    let obj2 = obj1;\n    let obj3 = Object.assign({}, obj1)\n    obj1.count = 5;\n    let obj4 = JSON.parse(JSON.stringify(obj1))\n\nconsole.log(obj1.count + obj2.count + obj3.count + obj4.count) \n// 5+5+1+5 =16\n```\n\n### 心得\n1.解構賦值概念\n2.取得資料時盡量不要對原始資料進行更動\n3.splice、slice比較\n4.取得時間方法整理 [JS時間取得方法筆記](https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more)\n\n\n\n\n","slug":"2019-09-11-JS30挑戰-day7Array Cardio Day2","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2f001dzqzic5qz3341","content":"<p>參考資料：<br><a href=\"https://hsiangfeng.github.io/javascript/20190421/1216566123/\">操作陣列的20種方法</a><br><a href=\"https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=613\">Alex直播影片</a><br><a href=\"https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more\">JS時間取得方法筆記</a><br><a href=\"https://chun-wen.github.io/JavaScript30/07%20-%20Array%20Cardio%20Day%202//index-chunwen.html\">Demo練習</a></p>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h3><p>回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans=people.some(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> newDate().getFullYear()-y.year&gt;=<span class=\"number\">19</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h3><p>用來檢查所有陣列是否符合條件，僅會回傳一個值true或false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = people.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">year</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> newDate().getFullYear()-year.year&gt;=<span class=\"number\">19</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>適合用來搜尋是否有符合資料，僅會回傳第一筆資料</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.find(<span class=\"function\"><span class=\"params\">id</span>=&gt;</span>id.id===<span class=\"number\">823423</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a>findIndex</h3><p>尋找第一個符合條件的序號</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.findIndex(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> id.id === <span class=\"number\">823423</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><blockquote>\n<p>目的：不要動到原始資料</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">constans2 = comments.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">constans3 = [...ans,...ans2]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2226\">今日影片重點整理</a></p>\n<h3 id=\"補充：複製物件介紹\"><a href=\"#補充：複製物件介紹\" class=\"headerlink\" title=\"補充：複製物件介紹\"></a>補充：複製物件介紹</h3><p><a href=\"https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3098\">影片講解</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">count</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj2 = obj1;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj3 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">    obj1.count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj4 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.count + obj2.count + obj3.count + obj4.count) </span><br><span class=\"line\"><span class=\"comment\">// 5+5+1+5 =16</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p>1.解構賦值概念<br>2.取得資料時盡量不要對原始資料進行更動<br>3.splice、slice比較<br>4.取得時間方法整理 <a href=\"https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more\">JS時間取得方法筆記</a></p>\n","site":{"data":{}},"length":982,"excerpt":"<p>參考資料：<br><a href=\"https://hsiangfeng.github.io/javascript/20190421/1216566123/\">操作陣列的20種方法</a><br><a href=\"https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=613\">Alex直播影片</a><br><a href=\"https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more\">JS時間取得方法筆記</a><br><a href=\"https://chun-wen.github.io/JavaScript30/07%20-%20Array%20Cardio%20Day%202//index-chunwen.html\">Demo練習</a></p>","more":"<hr>\n<h3 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h3><p>回傳 true or false，差異僅在 every() 需完全符合，some() 僅需要部分符合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans=people.some(<span class=\"function\"><span class=\"params\">y</span> =&gt;</span> newDate().getFullYear()-y.year&gt;=<span class=\"number\">19</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h3><p>用來檢查所有陣列是否符合條件，僅會回傳一個值true或false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = people.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">year</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> newDate().getFullYear()-year.year&gt;=<span class=\"number\">19</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>適合用來搜尋是否有符合資料，僅會回傳第一筆資料</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.find(<span class=\"function\"><span class=\"params\">id</span>=&gt;</span>id.id===<span class=\"number\">823423</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a>findIndex</h3><p>尋找第一個符合條件的序號</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.findIndex(<span class=\"function\"><span class=\"params\">id</span> =&gt;</span> id.id === <span class=\"number\">823423</span> )</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans) <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><blockquote>\n<p>目的：不要動到原始資料</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">constans2 = comments.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">constans3 = [...ans,...ans2]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice\"></a>splice</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constans = comments.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=2226\">今日影片重點整理</a></p>\n<h3 id=\"補充：複製物件介紹\"><a href=\"#補充：複製物件介紹\" class=\"headerlink\" title=\"補充：複製物件介紹\"></a>補充：複製物件介紹</h3><p><a href=\"https://youtu.be/OdNA37WSwzc?list=PLEfh-m_KG4dYbxVoYDyT_fmXZHnuKg2Fq&t=3098\">影片講解</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> obj1 = &#123; <span class=\"attr\">count</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj2 = obj1;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj3 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">    obj1.count = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj4 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj1))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.count + obj2.count + obj3.count + obj4.count) </span><br><span class=\"line\"><span class=\"comment\">// 5+5+1+5 =16</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h3><p>1.解構賦值概念<br>2.取得資料時盡量不要對原始資料進行更動<br>3.splice、slice比較<br>4.取得時間方法整理 <a href=\"https://chun-wen.github.io/2019/09/13/date%E7%89%A9%E4%BB%B6%E4%BB%8B%E7%B4%B9/#more\">JS時間取得方法筆記</a></p>"},{"title":"Javascript-date物件介紹","abbrlink":2391042330,"date":"2019-09-13T15:48:42.000Z","_content":"參考資料：\n[MDN-Date](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date)\n[JavaScript Date 時間和日期整理(推薦1)](https://www.fooish.com/javascript/date/)\n[PJChen—JavaScript Date Time Method 日期時間](https://pjchender.github.io/2017/12/27/js-javascript-date-time-method-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/)\n[JavaScript 初心者筆記](https://ithelp.ithome.com.tw/articles/10214769#response-310945)\n[保哥—關於 JavaScript 中 Date 型別的常見地雷與建議作法](https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details)\n[Ｗ3C—JavaScript Get Date Methods](https://www.w3schools.com/js/js_date_methods.asp)\n<!-- more -->\n- - - -\n### 前言\n本篇要來教大家如何用JS取得時間，並用幾個簡單範例幫助大家清楚實務上該如何操作。開始前，我們必須要來了解一下語法該如何撰寫\n\n### 語法撰寫\n首先，我們先介紹建立時間物件寫法：\n```javascript\nnew Date()   //回傳目前時間的物件\n接著，我們先在Chrome 開發者工具看，會發現會回傳一個本地時間\n// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)\n```\n> 提醒：  \nDate物件僅能透過new建構子來產生物件喔！  \n\n四種語法：\n```javascript\n1. new Date();                //回傳目前時間的物件\n2. new Date(value);           //需傳入一個整數值\n3. new Date(dateString);\n4. new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n```\n範例：\n```javascript\n1.new Date(); \n// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)\n\n2.new Date(1568363900509)\n// Fri Sep 13 2019 16:38:20 GMT+0800 (台北標準時間)\n\n3.new Date('2019-09-13T08:21:03.989Z')\n// Fri Sep 13 2019 16:21:03 GMT+0800 (台北標準時間)\n\n4.new Date(2019,8,13,16,30,4)\n//Fri Sep 13 2019 16:30:04 GMT+0800 (台北標準時間)\n//month計算由0~11，所以輸入８，才會顯示九月\n```\n> 提醒：  \n> 1.month計算由0~11  \n> 2.使用第三種方法傳入String，請使用**ISO 8601 Extended Format**格式  \n> 寫法如下：  \n```javascript\n寫法：\nYYYY-MM-DDTHH:mm:ss.sssZ\n範例：\n2019-09-13T08:21:03.989Z\n//Ｔ代表與時間分隔\n```\n### 取得、設定Date物件方法\n* getFullYear（） / setFullYear（）：取得/設定年份（4 位數）\n* getMonth（）/ setMonth（）：取得/設定月份（0 - 11）\n* getDate（） / setDate（）：取得/設定月份日期 (1-31)\n* getDay（）：取得當週日期（0 - 6）\n* getHours（）/ setHours（）：取得/設定小時（0 - 23）\n* getMinutes（） / setMinutes（）：取得/設定分鐘（0 - 59）\n* getSeconds（） / setSeconds（）：取得/設定秒數（0 - 59）\n* getMilliseconds（） / setMilliseconds（）：取得/設定毫秒（0 - 999）\n* getTime（） / setTime（）：取得/設定自 1970 年 1 月 1 日 00:00:00 以來的毫秒數。\n* toDateString（） ：取得具可讀性的日期字串       \n如：Fri Sep 13 2019\n* toTimeString（） ：取得具可讀性的時間字串  \n如：\"18:04:00 GMT+0800 (台北標準時間)\"\n* toISOString（）：取得ISO格式字串       \n如：2019-09-13T10:02:00.035Z\n* toString（） ：取得日期時間的字串\n如：Fri Sep 13 2019 18:04:45 GMT+0800 (台北標準時間)\n\n範例：\n1.取得目前時間\n```javascript\nvar dayName = ['星期天','星期一','星期二','星期三','星期四','星期五','星期六'];\nvar currentTime = new Date();\nvar y = currentTime.getFullYear();\nvar m = currentTime.getMonth();\nvar d = currentTime.getDate();\nvar day = dayName[currentTime.getDay()];\nconsole.log('今天是'+y+'年'+m+'月'+d+'號'+day)\n//今天是2019年8月13號星期五\n```\n2.日期比較\n```javascript\n//今天日期是否大於2019\nvar now = new Date().getFullYear();\nvar compare = new Date().setFullYear(2017)\nif(compare < now){\n  alert('compare小於2017年')\n}\n  else {\n  alert('compare 大於2017年');\n}\n```\n補充：參考[stack overflow回答](https://stackoverflow.com/questions/492994/compare-two-dates-with-javascript)，若要比較兩者時間，建議使用getTime（）來比較\n3.設定日期\n```javascript\nvar now = new Date();  // 建立時間物件\nvar changeDay = 30;    // 設定要往前或往後幾天\nvar next = now.setDate(now.getDate() + changeDay)\n//now.getDate()用來取得今天是幾號\nconsole.log(now.toDateString()) \n// 把物件轉成字串 Sun Oct 13 2019\n```\n\n### 重點筆記\n```javascript\nDate.now()   //回傳當前的timestamp(毫秒)\nnew Date()   //回傳目前時間的物件\n```\n","source":"_posts/2019-09-13-date物件介紹.md","raw":"---\ntitle: Javascript-date物件介紹\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 2391042330\ndate: 2019-09-13 23:48:42\n---\n參考資料：\n[MDN-Date](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date)\n[JavaScript Date 時間和日期整理(推薦1)](https://www.fooish.com/javascript/date/)\n[PJChen—JavaScript Date Time Method 日期時間](https://pjchender.github.io/2017/12/27/js-javascript-date-time-method-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/)\n[JavaScript 初心者筆記](https://ithelp.ithome.com.tw/articles/10214769#response-310945)\n[保哥—關於 JavaScript 中 Date 型別的常見地雷與建議作法](https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details)\n[Ｗ3C—JavaScript Get Date Methods](https://www.w3schools.com/js/js_date_methods.asp)\n<!-- more -->\n- - - -\n### 前言\n本篇要來教大家如何用JS取得時間，並用幾個簡單範例幫助大家清楚實務上該如何操作。開始前，我們必須要來了解一下語法該如何撰寫\n\n### 語法撰寫\n首先，我們先介紹建立時間物件寫法：\n```javascript\nnew Date()   //回傳目前時間的物件\n接著，我們先在Chrome 開發者工具看，會發現會回傳一個本地時間\n// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)\n```\n> 提醒：  \nDate物件僅能透過new建構子來產生物件喔！  \n\n四種語法：\n```javascript\n1. new Date();                //回傳目前時間的物件\n2. new Date(value);           //需傳入一個整數值\n3. new Date(dateString);\n4. new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);\n```\n範例：\n```javascript\n1.new Date(); \n// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)\n\n2.new Date(1568363900509)\n// Fri Sep 13 2019 16:38:20 GMT+0800 (台北標準時間)\n\n3.new Date('2019-09-13T08:21:03.989Z')\n// Fri Sep 13 2019 16:21:03 GMT+0800 (台北標準時間)\n\n4.new Date(2019,8,13,16,30,4)\n//Fri Sep 13 2019 16:30:04 GMT+0800 (台北標準時間)\n//month計算由0~11，所以輸入８，才會顯示九月\n```\n> 提醒：  \n> 1.month計算由0~11  \n> 2.使用第三種方法傳入String，請使用**ISO 8601 Extended Format**格式  \n> 寫法如下：  \n```javascript\n寫法：\nYYYY-MM-DDTHH:mm:ss.sssZ\n範例：\n2019-09-13T08:21:03.989Z\n//Ｔ代表與時間分隔\n```\n### 取得、設定Date物件方法\n* getFullYear（） / setFullYear（）：取得/設定年份（4 位數）\n* getMonth（）/ setMonth（）：取得/設定月份（0 - 11）\n* getDate（） / setDate（）：取得/設定月份日期 (1-31)\n* getDay（）：取得當週日期（0 - 6）\n* getHours（）/ setHours（）：取得/設定小時（0 - 23）\n* getMinutes（） / setMinutes（）：取得/設定分鐘（0 - 59）\n* getSeconds（） / setSeconds（）：取得/設定秒數（0 - 59）\n* getMilliseconds（） / setMilliseconds（）：取得/設定毫秒（0 - 999）\n* getTime（） / setTime（）：取得/設定自 1970 年 1 月 1 日 00:00:00 以來的毫秒數。\n* toDateString（） ：取得具可讀性的日期字串       \n如：Fri Sep 13 2019\n* toTimeString（） ：取得具可讀性的時間字串  \n如：\"18:04:00 GMT+0800 (台北標準時間)\"\n* toISOString（）：取得ISO格式字串       \n如：2019-09-13T10:02:00.035Z\n* toString（） ：取得日期時間的字串\n如：Fri Sep 13 2019 18:04:45 GMT+0800 (台北標準時間)\n\n範例：\n1.取得目前時間\n```javascript\nvar dayName = ['星期天','星期一','星期二','星期三','星期四','星期五','星期六'];\nvar currentTime = new Date();\nvar y = currentTime.getFullYear();\nvar m = currentTime.getMonth();\nvar d = currentTime.getDate();\nvar day = dayName[currentTime.getDay()];\nconsole.log('今天是'+y+'年'+m+'月'+d+'號'+day)\n//今天是2019年8月13號星期五\n```\n2.日期比較\n```javascript\n//今天日期是否大於2019\nvar now = new Date().getFullYear();\nvar compare = new Date().setFullYear(2017)\nif(compare < now){\n  alert('compare小於2017年')\n}\n  else {\n  alert('compare 大於2017年');\n}\n```\n補充：參考[stack overflow回答](https://stackoverflow.com/questions/492994/compare-two-dates-with-javascript)，若要比較兩者時間，建議使用getTime（）來比較\n3.設定日期\n```javascript\nvar now = new Date();  // 建立時間物件\nvar changeDay = 30;    // 設定要往前或往後幾天\nvar next = now.setDate(now.getDate() + changeDay)\n//now.getDate()用來取得今天是幾號\nconsole.log(now.toDateString()) \n// 把物件轉成字串 Sun Oct 13 2019\n```\n\n### 重點筆記\n```javascript\nDate.now()   //回傳當前的timestamp(毫秒)\nnew Date()   //回傳目前時間的物件\n```\n","slug":"2019-09-13-date物件介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2h001izqzi7g3k4t8i","content":"<p>參考資料：<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date\">MDN-Date</a><br><a href=\"https://www.fooish.com/javascript/date/\">JavaScript Date 時間和日期整理(推薦1)</a><br><a href=\"https://pjchender.github.io/2017/12/27/js-javascript-date-time-method-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/\">PJChen—JavaScript Date Time Method 日期時間</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10214769#response-310945\">JavaScript 初心者筆記</a><br><a href=\"https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details\">保哥—關於 JavaScript 中 Date 型別的常見地雷與建議作法</a><br><a href=\"https://www.w3schools.com/js/js_date_methods.asp\">Ｗ3C—JavaScript Get Date Methods</a></p>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本篇要來教大家如何用JS取得時間，並用幾個簡單範例幫助大家清楚實務上該如何操作。開始前，我們必須要來了解一下語法該如何撰寫</p>\n<h3 id=\"語法撰寫\"><a href=\"#語法撰寫\" class=\"headerlink\" title=\"語法撰寫\"></a>語法撰寫</h3><p>首先，我們先介紹建立時間物件寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()   <span class=\"comment\">//回傳目前時間的物件</span></span><br><span class=\"line\">接著，我們先在Chrome 開發者工具看，會發現會回傳一個本地時間</span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：<br>Date物件僅能透過new建構子來產生物件喔！  </p>\n</blockquote>\n<p>四種語法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();                <span class=\"comment\">//回傳目前時間的物件</span></span><br><span class=\"line\"><span class=\"number\">2.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(value);           <span class=\"comment\">//需傳入一個整數值</span></span><br><span class=\"line\"><span class=\"number\">3.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dateString);</span><br><span class=\"line\"><span class=\"number\">4.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span><br></pre></td></tr></table></figure>\n<p>範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); </span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1568363900509</span>)</span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 16:38:20 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2019-09-13T08:21:03.989Z&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 16:21:03 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2019</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>,<span class=\"number\">16</span>,<span class=\"number\">30</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">//Fri Sep 13 2019 16:30:04 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"><span class=\"comment\">//month計算由0~11，所以輸入８，才會顯示九月</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：<br>1.month計算由0~11<br>2.使用第三種方法傳入String，請使用<strong>ISO 8601 Extended Format</strong>格式<br>寫法如下：  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">寫法：</span><br><span class=\"line\">YYYY-MM-DDTHH:mm:ss.sssZ</span><br><span class=\"line\">範例：</span><br><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">09</span>-13T08:<span class=\"number\">21</span>:<span class=\"number\">03</span>.989Z</span><br><span class=\"line\"><span class=\"comment\">//Ｔ代表與時間分隔</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"取得、設定Date物件方法\"><a href=\"#取得、設定Date物件方法\" class=\"headerlink\" title=\"取得、設定Date物件方法\"></a>取得、設定Date物件方法</h3><ul>\n<li>getFullYear（） / setFullYear（）：取得/設定年份（4 位數）</li>\n<li>getMonth（）/ setMonth（）：取得/設定月份（0 - 11）</li>\n<li>getDate（） / setDate（）：取得/設定月份日期 (1-31)</li>\n<li>getDay（）：取得當週日期（0 - 6）</li>\n<li>getHours（）/ setHours（）：取得/設定小時（0 - 23）</li>\n<li>getMinutes（） / setMinutes（）：取得/設定分鐘（0 - 59）</li>\n<li>getSeconds（） / setSeconds（）：取得/設定秒數（0 - 59）</li>\n<li>getMilliseconds（） / setMilliseconds（）：取得/設定毫秒（0 - 999）</li>\n<li>getTime（） / setTime（）：取得/設定自 1970 年 1 月 1 日 00:00:00 以來的毫秒數。</li>\n<li>toDateString（） ：取得具可讀性的日期字串<br>如：Fri Sep 13 2019</li>\n<li>toTimeString（） ：取得具可讀性的時間字串<br>如：”18:04:00 GMT+0800 (台北標準時間)”</li>\n<li>toISOString（）：取得ISO格式字串<br>如：2019-09-13T10:02:00.035Z</li>\n<li>toString（） ：取得日期時間的字串<br>如：Fri Sep 13 2019 18:04:45 GMT+0800 (台北標準時間)</li>\n</ul>\n<p>範例：<br>1.取得目前時間</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dayName = [<span class=\"string\">&#x27;星期天&#x27;</span>,<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = currentTime.getFullYear();</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = currentTime.getMonth();</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = currentTime.getDate();</span><br><span class=\"line\"><span class=\"keyword\">var</span> day = dayName[currentTime.getDay()];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;今天是&#x27;</span>+y+<span class=\"string\">&#x27;年&#x27;</span>+m+<span class=\"string\">&#x27;月&#x27;</span>+d+<span class=\"string\">&#x27;號&#x27;</span>+day)</span><br><span class=\"line\"><span class=\"comment\">//今天是2019年8月13號星期五</span></span><br></pre></td></tr></table></figure>\n<p>2.日期比較</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//今天日期是否大於2019</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().setFullYear(<span class=\"number\">2017</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(compare &lt; now)&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&#x27;compare小於2017年&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&#x27;compare 大於2017年&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>補充：參考<a href=\"https://stackoverflow.com/questions/492994/compare-two-dates-with-javascript\">stack overflow回答</a>，若要比較兩者時間，建議使用getTime（）來比較<br>3.設定日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();  <span class=\"comment\">// 建立時間物件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> changeDay = <span class=\"number\">30</span>;    <span class=\"comment\">// 設定要往前或往後幾天</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = now.setDate(now.getDate() + changeDay)</span><br><span class=\"line\"><span class=\"comment\">//now.getDate()用來取得今天是幾號</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now.toDateString()) </span><br><span class=\"line\"><span class=\"comment\">// 把物件轉成字串 Sun Oct 13 2019</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重點筆記\"><a href=\"#重點筆記\" class=\"headerlink\" title=\"重點筆記\"></a>重點筆記</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>.now()   <span class=\"comment\">//回傳當前的timestamp(毫秒)</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()   <span class=\"comment\">//回傳目前時間的物件</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":2391,"excerpt":"<p>參考資料：<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date\">MDN-Date</a><br><a href=\"https://www.fooish.com/javascript/date/\">JavaScript Date 時間和日期整理(推薦1)</a><br><a href=\"https://pjchender.github.io/2017/12/27/js-javascript-date-time-method-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/\">PJChen—JavaScript Date Time Method 日期時間</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10214769#response-310945\">JavaScript 初心者筆記</a><br><a href=\"https://blog.miniasp.com/post/2016/09/25/JavaScript-Date-usage-in-details\">保哥—關於 JavaScript 中 Date 型別的常見地雷與建議作法</a><br><a href=\"https://www.w3schools.com/js/js_date_methods.asp\">Ｗ3C—JavaScript Get Date Methods</a></p>","more":"<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本篇要來教大家如何用JS取得時間，並用幾個簡單範例幫助大家清楚實務上該如何操作。開始前，我們必須要來了解一下語法該如何撰寫</p>\n<h3 id=\"語法撰寫\"><a href=\"#語法撰寫\" class=\"headerlink\" title=\"語法撰寫\"></a>語法撰寫</h3><p>首先，我們先介紹建立時間物件寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()   <span class=\"comment\">//回傳目前時間的物件</span></span><br><span class=\"line\">接著，我們先在Chrome 開發者工具看，會發現會回傳一個本地時間</span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：<br>Date物件僅能透過new建構子來產生物件喔！  </p>\n</blockquote>\n<p>四種語法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();                <span class=\"comment\">//回傳目前時間的物件</span></span><br><span class=\"line\"><span class=\"number\">2.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(value);           <span class=\"comment\">//需傳入一個整數值</span></span><br><span class=\"line\"><span class=\"number\">3.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dateString);</span><br><span class=\"line\"><span class=\"number\">4.</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span><br></pre></td></tr></table></figure>\n<p>範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); </span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 15:54:29 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1568363900509</span>)</span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 16:38:20 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&#x27;2019-09-13T08:21:03.989Z&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// Fri Sep 13 2019 16:21:03 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2019</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>,<span class=\"number\">16</span>,<span class=\"number\">30</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">//Fri Sep 13 2019 16:30:04 GMT+0800 (台北標準時間)</span></span><br><span class=\"line\"><span class=\"comment\">//month計算由0~11，所以輸入８，才會顯示九月</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：<br>1.month計算由0~11<br>2.使用第三種方法傳入String，請使用<strong>ISO 8601 Extended Format</strong>格式<br>寫法如下：  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">寫法：</span><br><span class=\"line\">YYYY-MM-DDTHH:mm:ss.sssZ</span><br><span class=\"line\">範例：</span><br><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">09</span>-13T08:<span class=\"number\">21</span>:<span class=\"number\">03</span>.989Z</span><br><span class=\"line\"><span class=\"comment\">//Ｔ代表與時間分隔</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"取得、設定Date物件方法\"><a href=\"#取得、設定Date物件方法\" class=\"headerlink\" title=\"取得、設定Date物件方法\"></a>取得、設定Date物件方法</h3><ul>\n<li>getFullYear（） / setFullYear（）：取得/設定年份（4 位數）</li>\n<li>getMonth（）/ setMonth（）：取得/設定月份（0 - 11）</li>\n<li>getDate（） / setDate（）：取得/設定月份日期 (1-31)</li>\n<li>getDay（）：取得當週日期（0 - 6）</li>\n<li>getHours（）/ setHours（）：取得/設定小時（0 - 23）</li>\n<li>getMinutes（） / setMinutes（）：取得/設定分鐘（0 - 59）</li>\n<li>getSeconds（） / setSeconds（）：取得/設定秒數（0 - 59）</li>\n<li>getMilliseconds（） / setMilliseconds（）：取得/設定毫秒（0 - 999）</li>\n<li>getTime（） / setTime（）：取得/設定自 1970 年 1 月 1 日 00:00:00 以來的毫秒數。</li>\n<li>toDateString（） ：取得具可讀性的日期字串<br>如：Fri Sep 13 2019</li>\n<li>toTimeString（） ：取得具可讀性的時間字串<br>如：”18:04:00 GMT+0800 (台北標準時間)”</li>\n<li>toISOString（）：取得ISO格式字串<br>如：2019-09-13T10:02:00.035Z</li>\n<li>toString（） ：取得日期時間的字串<br>如：Fri Sep 13 2019 18:04:45 GMT+0800 (台北標準時間)</li>\n</ul>\n<p>範例：<br>1.取得目前時間</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dayName = [<span class=\"string\">&#x27;星期天&#x27;</span>,<span class=\"string\">&#x27;星期一&#x27;</span>,<span class=\"string\">&#x27;星期二&#x27;</span>,<span class=\"string\">&#x27;星期三&#x27;</span>,<span class=\"string\">&#x27;星期四&#x27;</span>,<span class=\"string\">&#x27;星期五&#x27;</span>,<span class=\"string\">&#x27;星期六&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = currentTime.getFullYear();</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = currentTime.getMonth();</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = currentTime.getDate();</span><br><span class=\"line\"><span class=\"keyword\">var</span> day = dayName[currentTime.getDay()];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;今天是&#x27;</span>+y+<span class=\"string\">&#x27;年&#x27;</span>+m+<span class=\"string\">&#x27;月&#x27;</span>+d+<span class=\"string\">&#x27;號&#x27;</span>+day)</span><br><span class=\"line\"><span class=\"comment\">//今天是2019年8月13號星期五</span></span><br></pre></td></tr></table></figure>\n<p>2.日期比較</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//今天日期是否大於2019</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().setFullYear(<span class=\"number\">2017</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(compare &lt; now)&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&#x27;compare小於2017年&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&#x27;compare 大於2017年&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>補充：參考<a href=\"https://stackoverflow.com/questions/492994/compare-two-dates-with-javascript\">stack overflow回答</a>，若要比較兩者時間，建議使用getTime（）來比較<br>3.設定日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();  <span class=\"comment\">// 建立時間物件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> changeDay = <span class=\"number\">30</span>;    <span class=\"comment\">// 設定要往前或往後幾天</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = now.setDate(now.getDate() + changeDay)</span><br><span class=\"line\"><span class=\"comment\">//now.getDate()用來取得今天是幾號</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(now.toDateString()) </span><br><span class=\"line\"><span class=\"comment\">// 把物件轉成字串 Sun Oct 13 2019</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重點筆記\"><a href=\"#重點筆記\" class=\"headerlink\" title=\"重點筆記\"></a>重點筆記</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>.now()   <span class=\"comment\">//回傳當前的timestamp(毫秒)</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()   <span class=\"comment\">//回傳目前時間的物件</span></span><br></pre></td></tr></table></figure>"},{"title":"JSON介紹","abbrlink":2338827219,"date":"2019-09-20T03:27:24.000Z","_content":"參考資料：\nJSON 格式與 JavaScript 解析教學範例 [連結](https://footmark.info/javascript/json-format-and-javascript/#sj_chapter-1)\n[❲筆記❳ JavaScript中物件(object)和JSON格式的轉換](https://pjchender.blogspot.com/2016/01/javascriptobjectjson.html)\n<!-- more -->\n- - - -\n## JSON(JavaScript Object Notation)：\n是一種輕量級交換結構，存在目的在於讓資料與資料間能夠更方便解讀\n而我們該如何取得json資料呢?最常見的就是政府公開資訊站 [連結](https://data.gov.tw/)\n\n### 格式：\nJSON字串可以包含（物件）或陣列資料（Array）。就像下面範例：\n```javascript\nvar obj=[\n    123,\n      {\n        'objec':123,\n        'test':[\n                124,125,126\n               ]\n      }\n]\n或\n{\"array\": [\"string\", 10, 1.0, -1, true, false, null]}\n```\n注意部分：\n1. JSON就是一組字串\n2. 使用`{ }`建立物件時，JSON格式，該屬性名稱一定要有`引號`（非常重要！！）\n3. 若物件中的值為function，是無法透過JSON傳遞的。\n- - - -\n### JSON.stringify( ) 、JSON.parse( )介紹\nJSON.parse( ) [連結](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n用來將JSON格式轉回物件或陣列\n補充：[JSON.parse() 不容許尾部有逗號](https://www.udemy.com/javascript-learning/learn/lecture/6992622#questions/7530232)\n `JSON.parse(‘[1, 2, 3, 4, ]’);`\nJSON.stringify( ) [連結](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n用來將物件或陣列轉回JSON格式，儲存在localStorage中\n- - - -\n### 補充：\n1.chrome上的 [JSON套件](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc)\n目的：幫助我們瀏覽上更為方便，不會很混亂\n2.下載到本機後開啟json資料\n[https://jsoneditoronline.org/](https://jsoneditoronline.org/) \n\n### json如何擷取格式呢?\nStep1.先到公開資訊站\nStep2.找尋想查詢資料 [範例](https://data.gov.tw/dataset/28318)\nStep3.按右鍵檢查網頁原始碼 將網頁資料複製\nStep4.放入編輯器中，利用object、array特性擷取資料\n```javascript\nvar data=\n{\"success\":true,\"result\":{\"resource_id\":\"382000000A-000352-001\"}}\nconsole.log(data.result.records[0].ar);\n```\n- - - -\n問題集：\nQ1：若本身就是以中文命名的物件\nEX：\" 地 點\"(中間有空格)、\"速限(km/h)\"，這該如何抓取?\n\n以下抓取會出現錯誤:\nconsole.log(HsinchuSpeed[i].地 點)\nconsole.log(HsinchuSpeed[i].速限(km/h))\n\nA：可以透過 bracket notation 方法選取\n```javascript\nvar obj = {\n蘋果:'red',\n香蕉:'yellow'\n}\n\n// ERROR\n// console.log(obj.蘋果);\n\n// 正確\nconsole.log(obj[\"蘋果\"]);\n```\nQ2：為何else中，還要再寫一次變數，不然回出現undefined:undefined沒有下大雨\nQ3：if函式中的var 是全域變數嗎?為何不能直接給else函式中使用?\n```javascript\nvar length = data.length;\nfor (var i = 0; i <length; i++) {\nif(data[i].Rainfall6hr>5){\nvar County=data[i].County;\nvar Township=data[i].Township;\nconsole.log(County+\":\"+Township+\"下大雨\");\n}\nelse{\n// var County=data[i].County;\n// var Township=data[i].Township;\nconsole.log(County+\":\"+Township+\"沒有下大雨\");\n}\n}\n```\nA2： 因為你變數宣告在 if 裡面，如果判斷式不成立時不會執行裡面的程式碼唷。應該要宣告在 if 之前，這樣 if else 的判斷式都能使用到 修改如下\nA3：呈上一題，原因是因為沒有執行，所以也不會被宣告\n```javascript\nvar total = data.length;\n\nfor (i = 0; i < total; i++) {\n  var country = data[i].County;\n  var countrySite = data[i].SiteName;\n  if (data[i].Rainfall10min == 0) {\n    console.log(country + \"的\" + countrySite + \"放晴了\");\n  }\n  else if (data[i].Rainfall10min > 0) {\n  console.log(country + \"的\" + countrySite + \"現在正在下雨\");\n  }\n}\n```","source":"_posts/2019-09-20-JSON介紹.md","raw":"---\ntitle: JSON介紹\ntags:\n  - JavaScript\n  - JSON\ncategories:\n  - JavaScript\nabbrlink: 2338827219\ndate: 2019-09-20 11:27:24\n---\n參考資料：\nJSON 格式與 JavaScript 解析教學範例 [連結](https://footmark.info/javascript/json-format-and-javascript/#sj_chapter-1)\n[❲筆記❳ JavaScript中物件(object)和JSON格式的轉換](https://pjchender.blogspot.com/2016/01/javascriptobjectjson.html)\n<!-- more -->\n- - - -\n## JSON(JavaScript Object Notation)：\n是一種輕量級交換結構，存在目的在於讓資料與資料間能夠更方便解讀\n而我們該如何取得json資料呢?最常見的就是政府公開資訊站 [連結](https://data.gov.tw/)\n\n### 格式：\nJSON字串可以包含（物件）或陣列資料（Array）。就像下面範例：\n```javascript\nvar obj=[\n    123,\n      {\n        'objec':123,\n        'test':[\n                124,125,126\n               ]\n      }\n]\n或\n{\"array\": [\"string\", 10, 1.0, -1, true, false, null]}\n```\n注意部分：\n1. JSON就是一組字串\n2. 使用`{ }`建立物件時，JSON格式，該屬性名稱一定要有`引號`（非常重要！！）\n3. 若物件中的值為function，是無法透過JSON傳遞的。\n- - - -\n### JSON.stringify( ) 、JSON.parse( )介紹\nJSON.parse( ) [連結](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n用來將JSON格式轉回物件或陣列\n補充：[JSON.parse() 不容許尾部有逗號](https://www.udemy.com/javascript-learning/learn/lecture/6992622#questions/7530232)\n `JSON.parse(‘[1, 2, 3, 4, ]’);`\nJSON.stringify( ) [連結](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n用來將物件或陣列轉回JSON格式，儲存在localStorage中\n- - - -\n### 補充：\n1.chrome上的 [JSON套件](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc)\n目的：幫助我們瀏覽上更為方便，不會很混亂\n2.下載到本機後開啟json資料\n[https://jsoneditoronline.org/](https://jsoneditoronline.org/) \n\n### json如何擷取格式呢?\nStep1.先到公開資訊站\nStep2.找尋想查詢資料 [範例](https://data.gov.tw/dataset/28318)\nStep3.按右鍵檢查網頁原始碼 將網頁資料複製\nStep4.放入編輯器中，利用object、array特性擷取資料\n```javascript\nvar data=\n{\"success\":true,\"result\":{\"resource_id\":\"382000000A-000352-001\"}}\nconsole.log(data.result.records[0].ar);\n```\n- - - -\n問題集：\nQ1：若本身就是以中文命名的物件\nEX：\" 地 點\"(中間有空格)、\"速限(km/h)\"，這該如何抓取?\n\n以下抓取會出現錯誤:\nconsole.log(HsinchuSpeed[i].地 點)\nconsole.log(HsinchuSpeed[i].速限(km/h))\n\nA：可以透過 bracket notation 方法選取\n```javascript\nvar obj = {\n蘋果:'red',\n香蕉:'yellow'\n}\n\n// ERROR\n// console.log(obj.蘋果);\n\n// 正確\nconsole.log(obj[\"蘋果\"]);\n```\nQ2：為何else中，還要再寫一次變數，不然回出現undefined:undefined沒有下大雨\nQ3：if函式中的var 是全域變數嗎?為何不能直接給else函式中使用?\n```javascript\nvar length = data.length;\nfor (var i = 0; i <length; i++) {\nif(data[i].Rainfall6hr>5){\nvar County=data[i].County;\nvar Township=data[i].Township;\nconsole.log(County+\":\"+Township+\"下大雨\");\n}\nelse{\n// var County=data[i].County;\n// var Township=data[i].Township;\nconsole.log(County+\":\"+Township+\"沒有下大雨\");\n}\n}\n```\nA2： 因為你變數宣告在 if 裡面，如果判斷式不成立時不會執行裡面的程式碼唷。應該要宣告在 if 之前，這樣 if else 的判斷式都能使用到 修改如下\nA3：呈上一題，原因是因為沒有執行，所以也不會被宣告\n```javascript\nvar total = data.length;\n\nfor (i = 0; i < total; i++) {\n  var country = data[i].County;\n  var countrySite = data[i].SiteName;\n  if (data[i].Rainfall10min == 0) {\n    console.log(country + \"的\" + countrySite + \"放晴了\");\n  }\n  else if (data[i].Rainfall10min > 0) {\n  console.log(country + \"的\" + countrySite + \"現在正在下雨\");\n  }\n}\n```","slug":"2019-09-20-JSON介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2i001lzqzicfvn2qac","content":"<p>參考資料：<br>JSON 格式與 JavaScript 解析教學範例 <a href=\"https://footmark.info/javascript/json-format-and-javascript/#sj_chapter-1\">連結</a><br><a href=\"https://pjchender.blogspot.com/2016/01/javascriptobjectjson.html\">❲筆記❳ JavaScript中物件(object)和JSON格式的轉換</a></p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"JSON-JavaScript-Object-Notation-：\"><a href=\"#JSON-JavaScript-Object-Notation-：\" class=\"headerlink\" title=\"JSON(JavaScript Object Notation)：\"></a>JSON(JavaScript Object Notation)：</h2><p>是一種輕量級交換結構，存在目的在於讓資料與資料間能夠更方便解讀<br>而我們該如何取得json資料呢?最常見的就是政府公開資訊站 <a href=\"https://data.gov.tw/\">連結</a></p>\n<h3 id=\"格式：\"><a href=\"#格式：\" class=\"headerlink\" title=\"格式：\"></a>格式：</h3><p>JSON字串可以包含（物件）或陣列資料（Array）。就像下面範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=[</span><br><span class=\"line\">    <span class=\"number\">123</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;objec&#x27;</span>:<span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;test&#x27;</span>:[</span><br><span class=\"line\">                <span class=\"number\">124</span>,<span class=\"number\">125</span>,<span class=\"number\">126</span></span><br><span class=\"line\">               ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">或</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;array&quot;</span>: [<span class=\"string\">&quot;string&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">1.0</span>, -<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>]&#125;</span><br></pre></td></tr></table></figure>\n<p>注意部分：</p>\n<ol>\n<li>JSON就是一組字串</li>\n<li>使用<code>&#123; &#125;</code>建立物件時，JSON格式，該屬性名稱一定要有<code>引號</code>（非常重要！！）</li>\n<li>若物件中的值為function，是無法透過JSON傳遞的。</li>\n</ol>\n<hr>\n<h3 id=\"JSON-stringify-、JSON-parse-介紹\"><a href=\"#JSON-stringify-、JSON-parse-介紹\" class=\"headerlink\" title=\"JSON.stringify( ) 、JSON.parse( )介紹\"></a>JSON.stringify( ) 、JSON.parse( )介紹</h3><p>JSON.parse( ) <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">連結</a><br>用來將JSON格式轉回物件或陣列<br>補充：<a href=\"https://www.udemy.com/javascript-learning/learn/lecture/6992622#questions/7530232\">JSON.parse() 不容許尾部有逗號</a><br> <code>JSON.parse(‘[1, 2, 3, 4, ]’);</code><br>JSON.stringify( ) <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">連結</a><br>用來將物件或陣列轉回JSON格式，儲存在localStorage中</p>\n<hr>\n<h3 id=\"補充：\"><a href=\"#補充：\" class=\"headerlink\" title=\"補充：\"></a>補充：</h3><p>1.chrome上的 <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\">JSON套件</a><br>目的：幫助我們瀏覽上更為方便，不會很混亂<br>2.下載到本機後開啟json資料<br><a href=\"https://jsoneditoronline.org/\">https://jsoneditoronline.org/</a> </p>\n<h3 id=\"json如何擷取格式呢\"><a href=\"#json如何擷取格式呢\" class=\"headerlink\" title=\"json如何擷取格式呢?\"></a>json如何擷取格式呢?</h3><p>Step1.先到公開資訊站<br>Step2.找尋想查詢資料 <a href=\"https://data.gov.tw/dataset/28318\">範例</a><br>Step3.按右鍵檢查網頁原始碼 將網頁資料複製<br>Step4.放入編輯器中，利用object、array特性擷取資料</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data=</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;success&quot;</span>:<span class=\"literal\">true</span>,<span class=\"string\">&quot;result&quot;</span>:&#123;<span class=\"string\">&quot;resource_id&quot;</span>:<span class=\"string\">&quot;382000000A-000352-001&quot;</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.result.records[<span class=\"number\">0</span>].ar);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>問題集：<br>Q1：若本身就是以中文命名的物件<br>EX：” 地 點”(中間有空格)、”速限(km/h)”，這該如何抓取?</p>\n<p>以下抓取會出現錯誤:<br>console.log(HsinchuSpeed[i].地 點)<br>console.log(HsinchuSpeed[i].速限(km/h))</p>\n<p>A：可以透過 bracket notation 方法選取</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">蘋果:<span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">香蕉:<span class=\"string\">&#x27;yellow&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ERROR</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(obj.蘋果);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正確</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj[<span class=\"string\">&quot;蘋果&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<p>Q2：為何else中，還要再寫一次變數，不然回出現undefined:undefined沒有下大雨<br>Q3：if函式中的var 是全域變數嗎?為何不能直接給else函式中使用?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> length = data.length;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;length; i++) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(data[i].Rainfall6hr&gt;<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> County=data[i].County;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Township=data[i].Township;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(County+<span class=\"string\">&quot;:&quot;</span>+Township+<span class=\"string\">&quot;下大雨&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// var County=data[i].County;</span></span><br><span class=\"line\"><span class=\"comment\">// var Township=data[i].Township;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(County+<span class=\"string\">&quot;:&quot;</span>+Township+<span class=\"string\">&quot;沒有下大雨&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A2： 因為你變數宣告在 if 裡面，如果判斷式不成立時不會執行裡面的程式碼唷。應該要宣告在 if 之前，這樣 if else 的判斷式都能使用到 修改如下<br>A3：呈上一題，原因是因為沒有執行，所以也不會被宣告</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = data.length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; total; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> country = data[i].County;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> countrySite = data[i].SiteName;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data[i].Rainfall10min == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(country + <span class=\"string\">&quot;的&quot;</span> + countrySite + <span class=\"string\">&quot;放晴了&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data[i].Rainfall10min &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(country + <span class=\"string\">&quot;的&quot;</span> + countrySite + <span class=\"string\">&quot;現在正在下雨&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2149,"excerpt":"<p>參考資料：<br>JSON 格式與 JavaScript 解析教學範例 <a href=\"https://footmark.info/javascript/json-format-and-javascript/#sj_chapter-1\">連結</a><br><a href=\"https://pjchender.blogspot.com/2016/01/javascriptobjectjson.html\">❲筆記❳ JavaScript中物件(object)和JSON格式的轉換</a></p>","more":"<hr>\n<h2 id=\"JSON-JavaScript-Object-Notation-：\"><a href=\"#JSON-JavaScript-Object-Notation-：\" class=\"headerlink\" title=\"JSON(JavaScript Object Notation)：\"></a>JSON(JavaScript Object Notation)：</h2><p>是一種輕量級交換結構，存在目的在於讓資料與資料間能夠更方便解讀<br>而我們該如何取得json資料呢?最常見的就是政府公開資訊站 <a href=\"https://data.gov.tw/\">連結</a></p>\n<h3 id=\"格式：\"><a href=\"#格式：\" class=\"headerlink\" title=\"格式：\"></a>格式：</h3><p>JSON字串可以包含（物件）或陣列資料（Array）。就像下面範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=[</span><br><span class=\"line\">    <span class=\"number\">123</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;objec&#x27;</span>:<span class=\"number\">123</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;test&#x27;</span>:[</span><br><span class=\"line\">                <span class=\"number\">124</span>,<span class=\"number\">125</span>,<span class=\"number\">126</span></span><br><span class=\"line\">               ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">或</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;array&quot;</span>: [<span class=\"string\">&quot;string&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">1.0</span>, -<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>]&#125;</span><br></pre></td></tr></table></figure>\n<p>注意部分：</p>\n<ol>\n<li>JSON就是一組字串</li>\n<li>使用<code>&#123; &#125;</code>建立物件時，JSON格式，該屬性名稱一定要有<code>引號</code>（非常重要！！）</li>\n<li>若物件中的值為function，是無法透過JSON傳遞的。</li>\n</ol>\n<hr>\n<h3 id=\"JSON-stringify-、JSON-parse-介紹\"><a href=\"#JSON-stringify-、JSON-parse-介紹\" class=\"headerlink\" title=\"JSON.stringify( ) 、JSON.parse( )介紹\"></a>JSON.stringify( ) 、JSON.parse( )介紹</h3><p>JSON.parse( ) <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">連結</a><br>用來將JSON格式轉回物件或陣列<br>補充：<a href=\"https://www.udemy.com/javascript-learning/learn/lecture/6992622#questions/7530232\">JSON.parse() 不容許尾部有逗號</a><br> <code>JSON.parse(‘[1, 2, 3, 4, ]’);</code><br>JSON.stringify( ) <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">連結</a><br>用來將物件或陣列轉回JSON格式，儲存在localStorage中</p>\n<hr>\n<h3 id=\"補充：\"><a href=\"#補充：\" class=\"headerlink\" title=\"補充：\"></a>補充：</h3><p>1.chrome上的 <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\">JSON套件</a><br>目的：幫助我們瀏覽上更為方便，不會很混亂<br>2.下載到本機後開啟json資料<br><a href=\"https://jsoneditoronline.org/\">https://jsoneditoronline.org/</a> </p>\n<h3 id=\"json如何擷取格式呢\"><a href=\"#json如何擷取格式呢\" class=\"headerlink\" title=\"json如何擷取格式呢?\"></a>json如何擷取格式呢?</h3><p>Step1.先到公開資訊站<br>Step2.找尋想查詢資料 <a href=\"https://data.gov.tw/dataset/28318\">範例</a><br>Step3.按右鍵檢查網頁原始碼 將網頁資料複製<br>Step4.放入編輯器中，利用object、array特性擷取資料</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data=</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;success&quot;</span>:<span class=\"literal\">true</span>,<span class=\"string\">&quot;result&quot;</span>:&#123;<span class=\"string\">&quot;resource_id&quot;</span>:<span class=\"string\">&quot;382000000A-000352-001&quot;</span>&#125;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.result.records[<span class=\"number\">0</span>].ar);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>問題集：<br>Q1：若本身就是以中文命名的物件<br>EX：” 地 點”(中間有空格)、”速限(km/h)”，這該如何抓取?</p>\n<p>以下抓取會出現錯誤:<br>console.log(HsinchuSpeed[i].地 點)<br>console.log(HsinchuSpeed[i].速限(km/h))</p>\n<p>A：可以透過 bracket notation 方法選取</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">蘋果:<span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">香蕉:<span class=\"string\">&#x27;yellow&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ERROR</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(obj.蘋果);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正確</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj[<span class=\"string\">&quot;蘋果&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<p>Q2：為何else中，還要再寫一次變數，不然回出現undefined:undefined沒有下大雨<br>Q3：if函式中的var 是全域變數嗎?為何不能直接給else函式中使用?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> length = data.length;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;length; i++) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(data[i].Rainfall6hr&gt;<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> County=data[i].County;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Township=data[i].Township;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(County+<span class=\"string\">&quot;:&quot;</span>+Township+<span class=\"string\">&quot;下大雨&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// var County=data[i].County;</span></span><br><span class=\"line\"><span class=\"comment\">// var Township=data[i].Township;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(County+<span class=\"string\">&quot;:&quot;</span>+Township+<span class=\"string\">&quot;沒有下大雨&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A2： 因為你變數宣告在 if 裡面，如果判斷式不成立時不會執行裡面的程式碼唷。應該要宣告在 if 之前，這樣 if else 的判斷式都能使用到 修改如下<br>A3：呈上一題，原因是因為沒有執行，所以也不會被宣告</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total = data.length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; total; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> country = data[i].County;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> countrySite = data[i].SiteName;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data[i].Rainfall10min == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(country + <span class=\"string\">&quot;的&quot;</span> + countrySite + <span class=\"string\">&quot;放晴了&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data[i].Rainfall10min &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(country + <span class=\"string\">&quot;的&quot;</span> + countrySite + <span class=\"string\">&quot;現在正在下雨&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue Router介紹","abbrlink":4197762796,"date":"2019-09-20T02:57:22.000Z","_content":"參考資料：\n[vue-router的兩種模式的區別](https://juejin.im/post/5a61908c6fb9a01c9064f20a)\n[官方文件](https://router.vuejs.org/zh/installation.html)\n<!-- more -->\n- - - -\nVue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。\n![](https://i.imgur.com/1eCr3wR.png)\n## 安裝方式\n一、方法一\n1.`npm install vue-router` \n不用寫成這樣`npm install vue-router --save` \n因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency \n [連結說明](https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install)\n\n2.接著在終端機中輸入 `npm run serve `\n補充：使用`npm run dev`，會出錯因為`package.json`沒有這行指令\n[vue开发----npm run dev 报错：missing script:dev](https://blog.csdn.net/qq_32107121/article/details/84378217)\n原因：\n`npm run dev`是Vue CLI2指令\n`npm run serve`則是Vue CLI3指令 \n> 兩者不可以混用喔！  \n\n3.接著要在router.js啟用`Vue.use(VueRouter)`\n\n二、方法二\n創建新的檔案時( vue create project)，就直接勾選`Vue router`，Vue就會幫我們直接新增`router.js`\n\n以上兩種方式，都可以安裝Vue Router\n\n## 路由配置介紹\n### 組件名詞介紹\n`<router-view></router-view>`         呈現路由配置元件\n`<router-link></router-link>`         路由路徑\n`main.js`           進路點\nVue Components（如：app.vue檔）      分頁內容 \n\n### 路由配置教學\n配置路由會在`router.js`、`main.js`、`app.vue`這三個檔案設定\nㄧ、router.js\n主要負責處理路由檔案配置管理。\n![](https://i.imgur.com/7W3tlCY.png)補充：\n1.@是絕對路徑，`src` 目錄的縮寫 \n2.export default 是 ES6 的模組匯出概念\n\n二\b、main.js\nWebpack進入點\n![](https://i.imgur.com/YIo2sMP.png)\n三、app.vue\n在這被拿來當作`首頁使用`，若有其他預設首頁可以自行更換\n![](https://i.imgur.com/3mnsdwG.png)\n\n### 巢狀路由\n寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。\n一、Page.vue檔案：\n說明：我們會在要配置路由主頁，新增路由配置\n![](https://i.imgur.com/GeZ89AK.png)\n二、Router.js檔案：\n說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增`children:[ { } ]而已`\n```javascript\n{\n     path:'/page',//對應的虛擬路徑\n     name:'分頁',//元件呈現的名稱\n     component:Page,//對應元件\n     children:[\n{\n     path:'',//如果沒有填入入徑，元件child1預設會是主頁\n     name:'child1',\n     component:child\n},\n{\n     path:'child2',\n     name:'child2',\n     component:child2\n]\n},\n```\n### 動態路由\n#### 前置作業：\n1.安裝 Vue-axios [NPM安裝連結](https://www.npmjs.com/package/vue-axios)\n2.安裝 random Api   [連結](https://randomuser.me/documentation)\n#### 使用目的：\n切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 [參考文章](https://www.itread01.com/content/1537269627.html)\n參考文件：[路由對象屬性介紹](https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1)\n寫法拆解如下：\nㄧ、Router.js檔案\n![](https://i.imgur.com/4qG7Evd.png)\n二、分頁：child3.vue\n![](https://i.imgur.com/dmqRhBS.png)\n三、Main.js\n![](https://i.imgur.com/vdsK6Ny.png)\n\n### 同一個頁面載入不同元件\n補充：router-view\n「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」\n白話文：父組件中會包含 router-view` 作為子組件的渲染出口!`\nㄧ、index.js\n![](https://i.imgur.com/NRL2TcJ.png)說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將上層`”name”`隱藏\n二、App.vue\n這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件\n![](https://i.imgur.com/uEYGd4v.png)\n三、Menu.vue 和 page.vue\n![](https://i.imgur.com/xl1pHaP.png)\n#### 問題詢問\n我把檔案做了以下調整\n1.App.vue檔中，我移除`<router-view name=“menu”></router-view>`\n2.在page.vue中新增 `<router-view name=“menu”></router-view>`\n結果畫面只出現child1分頁內容，為何？\n![](https://i.imgur.com/bwmgHkd.png)\nA：因為如果我把`<router-view name=“menu”></router-view>`放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。\n如果更改為下面範例：\n```javascript\n{\n  path: '',\n  name: 'child 1',\n  components:{\n    default: child,\n    menu: Menu,\n  },\n},\n```\n畫面就可以成功出現摟\n![](https://i.imgur.com/htGJGpi.png)\n\n##### 小結論\nrouter-view\n白話文：父組件中會包含 router-view`作為子組件的渲染出口!`\n參考文章：[跟著 Vue 闖盪前端世界](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n![](https://i.imgur.com/rsBF7wn.png)\n\n### 常用Vue Router 參數設定\n#### Router建構選項\n[參考文件](https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9)\n* mode\n可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）\n* linkActiveClass\n可以將標籤className替換\n```javascript\nexport default new VueRouter({\n    mode:'history',  \n// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。\n// 而是後端切換路由，因此後端路徑也必須重新配置\n    linkActiveClass:'active',  //標籤className替換\n    routes: [\n        {\n            path: '/index',    //對應的虛擬路徑\n            name: 'home',     //元件呈現的名稱\n            component: Home,  //對應元件\n        },\n    ]\n});\n```\n#### 切換路徑方法\n[文件參考](https://router.vuejs.org/zh/guide/essentials/navigation.html)\n![](https://i.imgur.com/2aSL90S.png)\n補充說明：\n* 為何官網上寫`router.push(‘/page/child2’)`，而我們這邊卻使用\n`this.$router.push(‘/page/child2’)`呢？\nＡ：原因在於我們在main.js中，有先執行了 vue.use(....)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源\n* 比較：\n`router.push()`  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。 \n`router.replace()`   不會向history添加新記錄\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-09-20-vue Router介紹.md","raw":"---\ntitle: Vue Router介紹\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 4197762796\ndate: 2019-09-20 10:57:22\n---\n參考資料：\n[vue-router的兩種模式的區別](https://juejin.im/post/5a61908c6fb9a01c9064f20a)\n[官方文件](https://router.vuejs.org/zh/installation.html)\n<!-- more -->\n- - - -\nVue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。\n![](https://i.imgur.com/1eCr3wR.png)\n## 安裝方式\n一、方法一\n1.`npm install vue-router` \n不用寫成這樣`npm install vue-router --save` \n因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency \n [連結說明](https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install)\n\n2.接著在終端機中輸入 `npm run serve `\n補充：使用`npm run dev`，會出錯因為`package.json`沒有這行指令\n[vue开发----npm run dev 报错：missing script:dev](https://blog.csdn.net/qq_32107121/article/details/84378217)\n原因：\n`npm run dev`是Vue CLI2指令\n`npm run serve`則是Vue CLI3指令 \n> 兩者不可以混用喔！  \n\n3.接著要在router.js啟用`Vue.use(VueRouter)`\n\n二、方法二\n創建新的檔案時( vue create project)，就直接勾選`Vue router`，Vue就會幫我們直接新增`router.js`\n\n以上兩種方式，都可以安裝Vue Router\n\n## 路由配置介紹\n### 組件名詞介紹\n`<router-view></router-view>`         呈現路由配置元件\n`<router-link></router-link>`         路由路徑\n`main.js`           進路點\nVue Components（如：app.vue檔）      分頁內容 \n\n### 路由配置教學\n配置路由會在`router.js`、`main.js`、`app.vue`這三個檔案設定\nㄧ、router.js\n主要負責處理路由檔案配置管理。\n![](https://i.imgur.com/7W3tlCY.png)補充：\n1.@是絕對路徑，`src` 目錄的縮寫 \n2.export default 是 ES6 的模組匯出概念\n\n二\b、main.js\nWebpack進入點\n![](https://i.imgur.com/YIo2sMP.png)\n三、app.vue\n在這被拿來當作`首頁使用`，若有其他預設首頁可以自行更換\n![](https://i.imgur.com/3mnsdwG.png)\n\n### 巢狀路由\n寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。\n一、Page.vue檔案：\n說明：我們會在要配置路由主頁，新增路由配置\n![](https://i.imgur.com/GeZ89AK.png)\n二、Router.js檔案：\n說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增`children:[ { } ]而已`\n```javascript\n{\n     path:'/page',//對應的虛擬路徑\n     name:'分頁',//元件呈現的名稱\n     component:Page,//對應元件\n     children:[\n{\n     path:'',//如果沒有填入入徑，元件child1預設會是主頁\n     name:'child1',\n     component:child\n},\n{\n     path:'child2',\n     name:'child2',\n     component:child2\n]\n},\n```\n### 動態路由\n#### 前置作業：\n1.安裝 Vue-axios [NPM安裝連結](https://www.npmjs.com/package/vue-axios)\n2.安裝 random Api   [連結](https://randomuser.me/documentation)\n#### 使用目的：\n切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 [參考文章](https://www.itread01.com/content/1537269627.html)\n參考文件：[路由對象屬性介紹](https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1)\n寫法拆解如下：\nㄧ、Router.js檔案\n![](https://i.imgur.com/4qG7Evd.png)\n二、分頁：child3.vue\n![](https://i.imgur.com/dmqRhBS.png)\n三、Main.js\n![](https://i.imgur.com/vdsK6Ny.png)\n\n### 同一個頁面載入不同元件\n補充：router-view\n「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」\n白話文：父組件中會包含 router-view` 作為子組件的渲染出口!`\nㄧ、index.js\n![](https://i.imgur.com/NRL2TcJ.png)說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將上層`”name”`隱藏\n二、App.vue\n這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件\n![](https://i.imgur.com/uEYGd4v.png)\n三、Menu.vue 和 page.vue\n![](https://i.imgur.com/xl1pHaP.png)\n#### 問題詢問\n我把檔案做了以下調整\n1.App.vue檔中，我移除`<router-view name=“menu”></router-view>`\n2.在page.vue中新增 `<router-view name=“menu”></router-view>`\n結果畫面只出現child1分頁內容，為何？\n![](https://i.imgur.com/bwmgHkd.png)\nA：因為如果我把`<router-view name=“menu”></router-view>`放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。\n如果更改為下面範例：\n```javascript\n{\n  path: '',\n  name: 'child 1',\n  components:{\n    default: child,\n    menu: Menu,\n  },\n},\n```\n畫面就可以成功出現摟\n![](https://i.imgur.com/htGJGpi.png)\n\n##### 小結論\nrouter-view\n白話文：父組件中會包含 router-view`作為子組件的渲染出口!`\n參考文章：[跟著 Vue 闖盪前端世界](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n![](https://i.imgur.com/rsBF7wn.png)\n\n### 常用Vue Router 參數設定\n#### Router建構選項\n[參考文件](https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9)\n* mode\n可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）\n* linkActiveClass\n可以將標籤className替換\n```javascript\nexport default new VueRouter({\n    mode:'history',  \n// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。\n// 而是後端切換路由，因此後端路徑也必須重新配置\n    linkActiveClass:'active',  //標籤className替換\n    routes: [\n        {\n            path: '/index',    //對應的虛擬路徑\n            name: 'home',     //元件呈現的名稱\n            component: Home,  //對應元件\n        },\n    ]\n});\n```\n#### 切換路徑方法\n[文件參考](https://router.vuejs.org/zh/guide/essentials/navigation.html)\n![](https://i.imgur.com/2aSL90S.png)\n補充說明：\n* 為何官網上寫`router.push(‘/page/child2’)`，而我們這邊卻使用\n`this.$router.push(‘/page/child2’)`呢？\nＡ：原因在於我們在main.js中，有先執行了 vue.use(....)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源\n* 比較：\n`router.push()`  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。 \n`router.replace()`   不會向history添加新記錄\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-09-20-vue Router介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2k001pzqzi9imk8xfg","content":"<p>參考資料：<br><a href=\"https://juejin.im/post/5a61908c6fb9a01c9064f20a\">vue-router的兩種模式的區別</a><br><a href=\"https://router.vuejs.org/zh/installation.html\">官方文件</a></p>\n<span id=\"more\"></span>\n<hr>\n<p>Vue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。<br><img src=\"https://i.imgur.com/1eCr3wR.png\" alt=\"\"></p>\n<h2 id=\"安裝方式\"><a href=\"#安裝方式\" class=\"headerlink\" title=\"安裝方式\"></a>安裝方式</h2><p>一、方法一<br>1.<code>npm install vue-router</code><br>不用寫成這樣<code>npm install vue-router --save</code><br>因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency<br> <a href=\"https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install\">連結說明</a></p>\n<p>2.接著在終端機中輸入 <code>npm run serve</code><br>補充：使用<code>npm run dev</code>，會出錯因為<code>package.json</code>沒有這行指令<br><a href=\"https://blog.csdn.net/qq_32107121/article/details/84378217\">vue开发—-npm run dev 报错：missing script:dev</a><br>原因：<br><code>npm run dev</code>是Vue CLI2指令<br><code>npm run serve</code>則是Vue CLI3指令 </p>\n<blockquote>\n<p>兩者不可以混用喔！  </p>\n</blockquote>\n<p>3.接著要在router.js啟用<code>Vue.use(VueRouter)</code></p>\n<p>二、方法二<br>創建新的檔案時( vue create project)，就直接勾選<code>Vue router</code>，Vue就會幫我們直接新增<code>router.js</code></p>\n<p>以上兩種方式，都可以安裝Vue Router</p>\n<h2 id=\"路由配置介紹\"><a href=\"#路由配置介紹\" class=\"headerlink\" title=\"路由配置介紹\"></a>路由配置介紹</h2><h3 id=\"組件名詞介紹\"><a href=\"#組件名詞介紹\" class=\"headerlink\" title=\"組件名詞介紹\"></a>組件名詞介紹</h3><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code>         呈現路由配置元件<br><code>&lt;router-link&gt;&lt;/router-link&gt;</code>         路由路徑<br><code>main.js</code>           進路點<br>Vue Components（如：app.vue檔）      分頁內容 </p>\n<h3 id=\"路由配置教學\"><a href=\"#路由配置教學\" class=\"headerlink\" title=\"路由配置教學\"></a>路由配置教學</h3><p>配置路由會在<code>router.js</code>、<code>main.js</code>、<code>app.vue</code>這三個檔案設定<br>ㄧ、router.js<br>主要負責處理路由檔案配置管理。<br><img src=\"https://i.imgur.com/7W3tlCY.png\" alt=\"\">補充：<br>1.@是絕對路徑，<code>src</code> 目錄的縮寫<br>2.export default 是 ES6 的模組匯出概念</p>\n<p>二\b、main.js<br>Webpack進入點<br><img src=\"https://i.imgur.com/YIo2sMP.png\" alt=\"\"><br>三、app.vue<br>在這被拿來當作<code>首頁使用</code>，若有其他預設首頁可以自行更換<br><img src=\"https://i.imgur.com/3mnsdwG.png\" alt=\"\"></p>\n<h3 id=\"巢狀路由\"><a href=\"#巢狀路由\" class=\"headerlink\" title=\"巢狀路由\"></a>巢狀路由</h3><p>寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。<br>一、Page.vue檔案：<br>說明：我們會在要配置路由主頁，新增路由配置<br><img src=\"https://i.imgur.com/GeZ89AK.png\" alt=\"\"><br>二、Router.js檔案：<br>說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增<code>children:[ &#123; &#125; ]而已</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;/page&#x27;</span>,<span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;分頁&#x27;</span>,<span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">     component:Page,<span class=\"comment\">//對應元件</span></span><br><span class=\"line\">     children:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//如果沒有填入入徑，元件child1預設會是主頁</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child1&#x27;</span>,</span><br><span class=\"line\">     component:child</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     component:child2</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"動態路由\"><a href=\"#動態路由\" class=\"headerlink\" title=\"動態路由\"></a>動態路由</h3><h4 id=\"前置作業：\"><a href=\"#前置作業：\" class=\"headerlink\" title=\"前置作業：\"></a>前置作業：</h4><p>1.安裝 Vue-axios <a href=\"https://www.npmjs.com/package/vue-axios\">NPM安裝連結</a><br>2.安裝 random Api   <a href=\"https://randomuser.me/documentation\">連結</a></p>\n<h4 id=\"使用目的：\"><a href=\"#使用目的：\" class=\"headerlink\" title=\"使用目的：\"></a>使用目的：</h4><p>切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 <a href=\"https://www.itread01.com/content/1537269627.html\">參考文章</a><br>參考文件：<a href=\"https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1\">路由對象屬性介紹</a><br>寫法拆解如下：<br>ㄧ、Router.js檔案<br><img src=\"https://i.imgur.com/4qG7Evd.png\" alt=\"\"><br>二、分頁：child3.vue<br><img src=\"https://i.imgur.com/dmqRhBS.png\" alt=\"\"><br>三、Main.js<br><img src=\"https://i.imgur.com/vdsK6Ny.png\" alt=\"\"></p>\n<h3 id=\"同一個頁面載入不同元件\"><a href=\"#同一個頁面載入不同元件\" class=\"headerlink\" title=\"同一個頁面載入不同元件\"></a>同一個頁面載入不同元件</h3><p>補充：router-view<br>「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code><br>ㄧ、index.js<br><img src=\"https://i.imgur.com/NRL2TcJ.png\" alt=\"\">說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將上層<code>”name”</code>隱藏<br>二、App.vue<br>這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件<br><img src=\"https://i.imgur.com/uEYGd4v.png\" alt=\"\"><br>三、Menu.vue 和 page.vue<br><img src=\"https://i.imgur.com/xl1pHaP.png\" alt=\"\"></p>\n<h4 id=\"問題詢問\"><a href=\"#問題詢問\" class=\"headerlink\" title=\"問題詢問\"></a>問題詢問</h4><p>我把檔案做了以下調整<br>1.App.vue檔中，我移除<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>2.在page.vue中新增 <code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>結果畫面只出現child1分頁內容，為何？<br><img src=\"https://i.imgur.com/bwmgHkd.png\" alt=\"\"><br>A：因為如果我把<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code>放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。<br>如果更改為下面範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;child 1&#x27;</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: child,</span><br><span class=\"line\">    menu: Menu,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>畫面就可以成功出現摟<br><img src=\"https://i.imgur.com/htGJGpi.png\" alt=\"\"></p>\n<h5 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h5><p>router-view<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code><br>參考文章：<a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">跟著 Vue 闖盪前端世界</a><br><img src=\"https://i.imgur.com/rsBF7wn.png\" alt=\"\"></p>\n<h3 id=\"常用Vue-Router-參數設定\"><a href=\"#常用Vue-Router-參數設定\" class=\"headerlink\" title=\"常用Vue Router 參數設定\"></a>常用Vue Router 參數設定</h3><h4 id=\"Router建構選項\"><a href=\"#Router建構選項\" class=\"headerlink\" title=\"Router建構選項\"></a>Router建構選項</h4><p><a href=\"https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9\">參考文件</a></p>\n<ul>\n<li>mode<br>可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）</li>\n<li>linkActiveClass<br>可以將標籤className替換<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    mode:<span class=\"string\">&#x27;history&#x27;</span>,  </span><br><span class=\"line\"><span class=\"comment\">// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。</span></span><br><span class=\"line\"><span class=\"comment\">// 而是後端切換路由，因此後端路徑也必須重新配置</span></span><br><span class=\"line\">    linkActiveClass:<span class=\"string\">&#x27;active&#x27;</span>,  <span class=\"comment\">//標籤className替換</span></span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">&#x27;/index&#x27;</span>,    <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">            name: <span class=\"string\">&#x27;home&#x27;</span>,     <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">            component: Home,  <span class=\"comment\">//對應元件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"切換路徑方法\"><a href=\"#切換路徑方法\" class=\"headerlink\" title=\"切換路徑方法\"></a>切換路徑方法</h4><a href=\"https://router.vuejs.org/zh/guide/essentials/navigation.html\">文件參考</a><br><img src=\"https://i.imgur.com/2aSL90S.png\" alt=\"\"><br>補充說明：</li>\n<li>為何官網上寫<code>router.push(‘/page/child2’)</code>，而我們這邊卻使用<br><code>this.$router.push(‘/page/child2’)</code>呢？<br>Ａ：原因在於我們在main.js中，有先執行了 vue.use(….)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源</li>\n<li>比較：<br><code>router.push()</code>  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。<br><code>router.replace()</code>   不會向history添加新記錄</li>\n</ul>\n","site":{"data":{}},"length":2823,"excerpt":"<p>參考資料：<br><a href=\"https://juejin.im/post/5a61908c6fb9a01c9064f20a\">vue-router的兩種模式的區別</a><br><a href=\"https://router.vuejs.org/zh/installation.html\">官方文件</a></p>","more":"<hr>\n<p>Vue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。<br><img src=\"https://i.imgur.com/1eCr3wR.png\" alt=\"\"></p>\n<h2 id=\"安裝方式\"><a href=\"#安裝方式\" class=\"headerlink\" title=\"安裝方式\"></a>安裝方式</h2><p>一、方法一<br>1.<code>npm install vue-router</code><br>不用寫成這樣<code>npm install vue-router --save</code><br>因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency<br> <a href=\"https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install\">連結說明</a></p>\n<p>2.接著在終端機中輸入 <code>npm run serve</code><br>補充：使用<code>npm run dev</code>，會出錯因為<code>package.json</code>沒有這行指令<br><a href=\"https://blog.csdn.net/qq_32107121/article/details/84378217\">vue开发—-npm run dev 报错：missing script:dev</a><br>原因：<br><code>npm run dev</code>是Vue CLI2指令<br><code>npm run serve</code>則是Vue CLI3指令 </p>\n<blockquote>\n<p>兩者不可以混用喔！  </p>\n</blockquote>\n<p>3.接著要在router.js啟用<code>Vue.use(VueRouter)</code></p>\n<p>二、方法二<br>創建新的檔案時( vue create project)，就直接勾選<code>Vue router</code>，Vue就會幫我們直接新增<code>router.js</code></p>\n<p>以上兩種方式，都可以安裝Vue Router</p>\n<h2 id=\"路由配置介紹\"><a href=\"#路由配置介紹\" class=\"headerlink\" title=\"路由配置介紹\"></a>路由配置介紹</h2><h3 id=\"組件名詞介紹\"><a href=\"#組件名詞介紹\" class=\"headerlink\" title=\"組件名詞介紹\"></a>組件名詞介紹</h3><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code>         呈現路由配置元件<br><code>&lt;router-link&gt;&lt;/router-link&gt;</code>         路由路徑<br><code>main.js</code>           進路點<br>Vue Components（如：app.vue檔）      分頁內容 </p>\n<h3 id=\"路由配置教學\"><a href=\"#路由配置教學\" class=\"headerlink\" title=\"路由配置教學\"></a>路由配置教學</h3><p>配置路由會在<code>router.js</code>、<code>main.js</code>、<code>app.vue</code>這三個檔案設定<br>ㄧ、router.js<br>主要負責處理路由檔案配置管理。<br><img src=\"https://i.imgur.com/7W3tlCY.png\" alt=\"\">補充：<br>1.@是絕對路徑，<code>src</code> 目錄的縮寫<br>2.export default 是 ES6 的模組匯出概念</p>\n<p>二\b、main.js<br>Webpack進入點<br><img src=\"https://i.imgur.com/YIo2sMP.png\" alt=\"\"><br>三、app.vue<br>在這被拿來當作<code>首頁使用</code>，若有其他預設首頁可以自行更換<br><img src=\"https://i.imgur.com/3mnsdwG.png\" alt=\"\"></p>\n<h3 id=\"巢狀路由\"><a href=\"#巢狀路由\" class=\"headerlink\" title=\"巢狀路由\"></a>巢狀路由</h3><p>寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。<br>一、Page.vue檔案：<br>說明：我們會在要配置路由主頁，新增路由配置<br><img src=\"https://i.imgur.com/GeZ89AK.png\" alt=\"\"><br>二、Router.js檔案：<br>說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增<code>children:[ &#123; &#125; ]而已</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;/page&#x27;</span>,<span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;分頁&#x27;</span>,<span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">     component:Page,<span class=\"comment\">//對應元件</span></span><br><span class=\"line\">     children:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//如果沒有填入入徑，元件child1預設會是主頁</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child1&#x27;</span>,</span><br><span class=\"line\">     component:child</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     component:child2</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"動態路由\"><a href=\"#動態路由\" class=\"headerlink\" title=\"動態路由\"></a>動態路由</h3><h4 id=\"前置作業：\"><a href=\"#前置作業：\" class=\"headerlink\" title=\"前置作業：\"></a>前置作業：</h4><p>1.安裝 Vue-axios <a href=\"https://www.npmjs.com/package/vue-axios\">NPM安裝連結</a><br>2.安裝 random Api   <a href=\"https://randomuser.me/documentation\">連結</a></p>\n<h4 id=\"使用目的：\"><a href=\"#使用目的：\" class=\"headerlink\" title=\"使用目的：\"></a>使用目的：</h4><p>切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 <a href=\"https://www.itread01.com/content/1537269627.html\">參考文章</a><br>參考文件：<a href=\"https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1\">路由對象屬性介紹</a><br>寫法拆解如下：<br>ㄧ、Router.js檔案<br><img src=\"https://i.imgur.com/4qG7Evd.png\" alt=\"\"><br>二、分頁：child3.vue<br><img src=\"https://i.imgur.com/dmqRhBS.png\" alt=\"\"><br>三、Main.js<br><img src=\"https://i.imgur.com/vdsK6Ny.png\" alt=\"\"></p>\n<h3 id=\"同一個頁面載入不同元件\"><a href=\"#同一個頁面載入不同元件\" class=\"headerlink\" title=\"同一個頁面載入不同元件\"></a>同一個頁面載入不同元件</h3><p>補充：router-view<br>「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code><br>ㄧ、index.js<br><img src=\"https://i.imgur.com/NRL2TcJ.png\" alt=\"\">說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將上層<code>”name”</code>隱藏<br>二、App.vue<br>這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件<br><img src=\"https://i.imgur.com/uEYGd4v.png\" alt=\"\"><br>三、Menu.vue 和 page.vue<br><img src=\"https://i.imgur.com/xl1pHaP.png\" alt=\"\"></p>\n<h4 id=\"問題詢問\"><a href=\"#問題詢問\" class=\"headerlink\" title=\"問題詢問\"></a>問題詢問</h4><p>我把檔案做了以下調整<br>1.App.vue檔中，我移除<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>2.在page.vue中新增 <code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>結果畫面只出現child1分頁內容，為何？<br><img src=\"https://i.imgur.com/bwmgHkd.png\" alt=\"\"><br>A：因為如果我把<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code>放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。<br>如果更改為下面範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;child 1&#x27;</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: child,</span><br><span class=\"line\">    menu: Menu,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>畫面就可以成功出現摟<br><img src=\"https://i.imgur.com/htGJGpi.png\" alt=\"\"></p>\n<h5 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h5><p>router-view<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code><br>參考文章：<a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">跟著 Vue 闖盪前端世界</a><br><img src=\"https://i.imgur.com/rsBF7wn.png\" alt=\"\"></p>\n<h3 id=\"常用Vue-Router-參數設定\"><a href=\"#常用Vue-Router-參數設定\" class=\"headerlink\" title=\"常用Vue Router 參數設定\"></a>常用Vue Router 參數設定</h3><h4 id=\"Router建構選項\"><a href=\"#Router建構選項\" class=\"headerlink\" title=\"Router建構選項\"></a>Router建構選項</h4><p><a href=\"https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9\">參考文件</a></p>\n<ul>\n<li>mode<br>可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）</li>\n<li>linkActiveClass<br>可以將標籤className替換<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    mode:<span class=\"string\">&#x27;history&#x27;</span>,  </span><br><span class=\"line\"><span class=\"comment\">// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。</span></span><br><span class=\"line\"><span class=\"comment\">// 而是後端切換路由，因此後端路徑也必須重新配置</span></span><br><span class=\"line\">    linkActiveClass:<span class=\"string\">&#x27;active&#x27;</span>,  <span class=\"comment\">//標籤className替換</span></span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">&#x27;/index&#x27;</span>,    <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">            name: <span class=\"string\">&#x27;home&#x27;</span>,     <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">            component: Home,  <span class=\"comment\">//對應元件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"切換路徑方法\"><a href=\"#切換路徑方法\" class=\"headerlink\" title=\"切換路徑方法\"></a>切換路徑方法</h4><a href=\"https://router.vuejs.org/zh/guide/essentials/navigation.html\">文件參考</a><br><img src=\"https://i.imgur.com/2aSL90S.png\" alt=\"\"><br>補充說明：</li>\n<li>為何官網上寫<code>router.push(‘/page/child2’)</code>，而我們這邊卻使用<br><code>this.$router.push(‘/page/child2’)</code>呢？<br>Ａ：原因在於我們在main.js中，有先執行了 vue.use(….)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源</li>\n<li>比較：<br><code>router.push()</code>  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。<br><code>router.replace()</code>   不會向history添加新記錄</li>\n</ul>"},{"title":"Vue模板語法、V-text、V-html、V-once介紹","abbrlink":1684315816,"date":"2019-09-21T06:21:58.000Z","_content":"參考資料：\n[Vue.js官網教學](https://cn.vuejs.org/v2/guide/index.html#)\n[Vue api 指令介紹](https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4)\n[Vue.js Core 30天屠龍記(第5天): 模板語法 Part 1 - Mustache 標籤](https://ithelp.ithome.com.tw/articles/10202967)\n<!-- more -->\n- - - -\n## 模板語法\n> 模板語法是`邏輯`跟`頁面`之間溝通的媒介\n\nVue.js 使用了基於HTML 的模板語法，允許開發者聲明式(declaratively)地將DOM 綁定至底層Vue 實例的數據。[官網介紹](https://cn.vuejs.org/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4)\n#### Vue模板語法共分為兩種\n1.插值 `Mustache語法`\n2.指令 如：v-bind、v-on、v-model、v-for\n\n### 一、插值 Mustache語法\n#### 範例1:加入文字  [jsbin連結](https://jsbin.com/pejuqujasa/1/edit?html,js,output)\n寫法：使用`Mustache語法`(就是雙大括號)\n```html\n<span>Message: {{ msg }}</span>\n\n補充：若希望文字能單次綁定 只要加上`v-once`即可，之後再變更實體內msg文字內容畫面也不會改變\n<span v-once >Message: {{ msg }}</span>\n```\n\n### 二、指令 Directives\n> 指令是Vue 所提供特殊的 DOM 屬性， Vue 內建的指令通常會以「 v- 」作為開頭。  \n> 指令中的「值」通常⽤用來表⽰某個 JS 運算式。而指令的作用，是將某個運算式執⾏後的結果回饋到對應的 DOM 上。 \n#### 範例1:插入原始HTML結構\n寫法：v-html\n```html\n<h4 class=\"mt-3\">原始 HTML</h4>\n{{ rawHtml }}\n<p v-html=\"rawHtml\">這邊會渲染出原始 HTML 結構</p>\n```\n> 補充：  \n> 網站上動態渲染的任意HTML可能會非常危險，因為它很容易導致XSS攻擊  \n> 不建議使用地方：使用者輸入框、密碼欄位等  \n#### 範例2:新增參數\n寫法：使用v-bind綁定，新增屬性如id、href\n```html\n<h4 class=\"mt-3\" v-bind:id=\"htmlId\">HTML 屬性</h4>\n```\n#### 範例3:動態新增參數 \nVue2.6版本新增 \n```html\n<div id=\"app\">\n  <a v-bind:[attributeName]=\"url\"> ... </a>\n</div>\n```\n說明：如果Vue實體內有一個data屬性attributeName，其值為\"href\"，那麼這個綁定等同`v-bind:href` [參考資料](https://openbox.pt/vuejs/vue-js-2-6-dynamic-directive-arguments/)\n#### 範例4:修飾符 \n使用`.`當作修飾符\n```html\n<a v-on:submit.prevent=\"onSubmit\">...</a>\n```\n說明：`.prevent修飾符`等同告訴v-on指令對於觸發的事件使用`event.preventDefault()`\n\n##### 補充:介紹修飾符\n[ 官網--修飾符介紹](https://cn.vuejs.org/v2/guide/events.html)\nVue 的修飾⼦最主要分成兩種:`表單元素的修飾⼦` 與 `事件的修飾⼦`。\n> 修飾符目的：\n> 用來增強指令 (directive) 附加功能的語法糖。\n> 寫法介紹：` v-xxx 的指令後加上「 .xxx 」`\n\n而修飾符依照種類可以區分下面幾種：\n1. 表單修飾符\n2. 事件修飾符（如：事件冒泡事件）\n3. 鼠標修飾符\n4. 按鍵修飾符\n5. 鍵值修飾符\n\n表單修飾符：  \n> .lazy(不會即時更新input)、  \n> .number（將input輸入資料轉為數值）、  \n> .trim（去除首尾空白字符）  \n```html\n<p>lazy修飾符示範</p>\n<div>msg: {{ msg }}</div>\n<input type=\"text\" v-model.lazy=\"msg\">\n```\n\n事件修飾符：[codepen範例原始碼](https://codepen.io/chunwen/pen/bXgqaB?editors=1010)，範例將示範如何翻轉字串\nHTML部分\n```html\n<div id=\"app\">\n<input type=\"text\" class=\"form-control\" v-model=\"text\" @keyup.enter=\"reverseText\">\n\n<a href=\"http://www.google.com\" @click.prevent=\"reverseText\" class=\"btn btn-primary mt-1\">反轉字串</a>\n\n<ul>\n   <li class=\"mt-3\" v-for=\"item in content\">\n       {{ item.title }}\n    </li>\n  </ul>\n</div>\n```\nJavaScript部分\n```javascript\nvar app = new Vue({\n  el: '#app',\n  data: {\n    text: '',\n    newText:'',\n    //儲存newText資料\n    content: [\n      // {\n      //  title:'', \n      // }\n    ],\n  },\n  // 請在此撰寫 JavaScript\n  methods: {\n    reverseText:function() {\n      // event.preventDefault();\n      this.newText= this.text.split('').reverse().join('');\n      this.content.push(\n      {\n        title: this.newText,\n      }\n      )\n      this.text =''; //清空資料\n    }\n  }\n});\n\n```\n> 注意縮寫時候，`v-on:` 可以全部取代為＠ \n\n\n### 內建指令如下：\n![](https://i.imgur.com/q51LoQ1.png)\n\n### V-text、V-html、V-once\nV-text插入：渲染純文字內容\nV-html：插入整個html結構\nV-once：將 data 內的內容渲染後，不再追蹤其變化\n```javascript\n    <div v-html=\"rawHTML\"></div>\n    <hr>\n    <div v-once>msg with v-once: {{ msg }}</div>\n    <hr>\n    <div v-text=\"msg\"></div>\n```\n\n### 小結：模板語法撰寫重點\n1.必須使用表達式（expression）。簡單來說表達式就是要能產生一個值（或是一個結果）\n範例如下：\n```javascript\n          {{ rawHtml + text + (number1+number2) }}\n          {{ number1+number2 }}\n          {{ text.split('').reverse().join('') }}\n          {{ ok ? 'Yes': 'No'}}\n```\n> 有個限制，每個綁定都只能包含單個表達式，所以下面的例子都不會生效。  \n```javascript\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n\n\n\n","source":"_posts/2019-09-21-Vue模板語法介紹.md","raw":"---\ntitle: Vue模板語法、V-text、V-html、V-once介紹\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 1684315816\ndate: 2019-09-21 14:21:58\n---\n參考資料：\n[Vue.js官網教學](https://cn.vuejs.org/v2/guide/index.html#)\n[Vue api 指令介紹](https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4)\n[Vue.js Core 30天屠龍記(第5天): 模板語法 Part 1 - Mustache 標籤](https://ithelp.ithome.com.tw/articles/10202967)\n<!-- more -->\n- - - -\n## 模板語法\n> 模板語法是`邏輯`跟`頁面`之間溝通的媒介\n\nVue.js 使用了基於HTML 的模板語法，允許開發者聲明式(declaratively)地將DOM 綁定至底層Vue 實例的數據。[官網介紹](https://cn.vuejs.org/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4)\n#### Vue模板語法共分為兩種\n1.插值 `Mustache語法`\n2.指令 如：v-bind、v-on、v-model、v-for\n\n### 一、插值 Mustache語法\n#### 範例1:加入文字  [jsbin連結](https://jsbin.com/pejuqujasa/1/edit?html,js,output)\n寫法：使用`Mustache語法`(就是雙大括號)\n```html\n<span>Message: {{ msg }}</span>\n\n補充：若希望文字能單次綁定 只要加上`v-once`即可，之後再變更實體內msg文字內容畫面也不會改變\n<span v-once >Message: {{ msg }}</span>\n```\n\n### 二、指令 Directives\n> 指令是Vue 所提供特殊的 DOM 屬性， Vue 內建的指令通常會以「 v- 」作為開頭。  \n> 指令中的「值」通常⽤用來表⽰某個 JS 運算式。而指令的作用，是將某個運算式執⾏後的結果回饋到對應的 DOM 上。 \n#### 範例1:插入原始HTML結構\n寫法：v-html\n```html\n<h4 class=\"mt-3\">原始 HTML</h4>\n{{ rawHtml }}\n<p v-html=\"rawHtml\">這邊會渲染出原始 HTML 結構</p>\n```\n> 補充：  \n> 網站上動態渲染的任意HTML可能會非常危險，因為它很容易導致XSS攻擊  \n> 不建議使用地方：使用者輸入框、密碼欄位等  \n#### 範例2:新增參數\n寫法：使用v-bind綁定，新增屬性如id、href\n```html\n<h4 class=\"mt-3\" v-bind:id=\"htmlId\">HTML 屬性</h4>\n```\n#### 範例3:動態新增參數 \nVue2.6版本新增 \n```html\n<div id=\"app\">\n  <a v-bind:[attributeName]=\"url\"> ... </a>\n</div>\n```\n說明：如果Vue實體內有一個data屬性attributeName，其值為\"href\"，那麼這個綁定等同`v-bind:href` [參考資料](https://openbox.pt/vuejs/vue-js-2-6-dynamic-directive-arguments/)\n#### 範例4:修飾符 \n使用`.`當作修飾符\n```html\n<a v-on:submit.prevent=\"onSubmit\">...</a>\n```\n說明：`.prevent修飾符`等同告訴v-on指令對於觸發的事件使用`event.preventDefault()`\n\n##### 補充:介紹修飾符\n[ 官網--修飾符介紹](https://cn.vuejs.org/v2/guide/events.html)\nVue 的修飾⼦最主要分成兩種:`表單元素的修飾⼦` 與 `事件的修飾⼦`。\n> 修飾符目的：\n> 用來增強指令 (directive) 附加功能的語法糖。\n> 寫法介紹：` v-xxx 的指令後加上「 .xxx 」`\n\n而修飾符依照種類可以區分下面幾種：\n1. 表單修飾符\n2. 事件修飾符（如：事件冒泡事件）\n3. 鼠標修飾符\n4. 按鍵修飾符\n5. 鍵值修飾符\n\n表單修飾符：  \n> .lazy(不會即時更新input)、  \n> .number（將input輸入資料轉為數值）、  \n> .trim（去除首尾空白字符）  \n```html\n<p>lazy修飾符示範</p>\n<div>msg: {{ msg }}</div>\n<input type=\"text\" v-model.lazy=\"msg\">\n```\n\n事件修飾符：[codepen範例原始碼](https://codepen.io/chunwen/pen/bXgqaB?editors=1010)，範例將示範如何翻轉字串\nHTML部分\n```html\n<div id=\"app\">\n<input type=\"text\" class=\"form-control\" v-model=\"text\" @keyup.enter=\"reverseText\">\n\n<a href=\"http://www.google.com\" @click.prevent=\"reverseText\" class=\"btn btn-primary mt-1\">反轉字串</a>\n\n<ul>\n   <li class=\"mt-3\" v-for=\"item in content\">\n       {{ item.title }}\n    </li>\n  </ul>\n</div>\n```\nJavaScript部分\n```javascript\nvar app = new Vue({\n  el: '#app',\n  data: {\n    text: '',\n    newText:'',\n    //儲存newText資料\n    content: [\n      // {\n      //  title:'', \n      // }\n    ],\n  },\n  // 請在此撰寫 JavaScript\n  methods: {\n    reverseText:function() {\n      // event.preventDefault();\n      this.newText= this.text.split('').reverse().join('');\n      this.content.push(\n      {\n        title: this.newText,\n      }\n      )\n      this.text =''; //清空資料\n    }\n  }\n});\n\n```\n> 注意縮寫時候，`v-on:` 可以全部取代為＠ \n\n\n### 內建指令如下：\n![](https://i.imgur.com/q51LoQ1.png)\n\n### V-text、V-html、V-once\nV-text插入：渲染純文字內容\nV-html：插入整個html結構\nV-once：將 data 內的內容渲染後，不再追蹤其變化\n```javascript\n    <div v-html=\"rawHTML\"></div>\n    <hr>\n    <div v-once>msg with v-once: {{ msg }}</div>\n    <hr>\n    <div v-text=\"msg\"></div>\n```\n\n### 小結：模板語法撰寫重點\n1.必須使用表達式（expression）。簡單來說表達式就是要能產生一個值（或是一個結果）\n範例如下：\n```javascript\n          {{ rawHtml + text + (number1+number2) }}\n          {{ number1+number2 }}\n          {{ text.split('').reverse().join('') }}\n          {{ ok ? 'Yes': 'No'}}\n```\n> 有個限制，每個綁定都只能包含單個表達式，所以下面的例子都不會生效。  \n```javascript\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n\n\n\n","slug":"2019-09-21-Vue模板語法介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2l001tzqzihlku2f3x","content":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/index.html#\">Vue.js官網教學</a><br><a href=\"https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4\">Vue api 指令介紹</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10202967\">Vue.js Core 30天屠龍記(第5天): 模板語法 Part 1 - Mustache 標籤</a></p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"模板語法\"><a href=\"#模板語法\" class=\"headerlink\" title=\"模板語法\"></a>模板語法</h2><blockquote>\n<p>模板語法是<code>邏輯</code>跟<code>頁面</code>之間溝通的媒介</p>\n</blockquote>\n<p>Vue.js 使用了基於HTML 的模板語法，允許開發者聲明式(declaratively)地將DOM 綁定至底層Vue 實例的數據。<a href=\"https://cn.vuejs.org/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4\">官網介紹</a></p>\n<h4 id=\"Vue模板語法共分為兩種\"><a href=\"#Vue模板語法共分為兩種\" class=\"headerlink\" title=\"Vue模板語法共分為兩種\"></a>Vue模板語法共分為兩種</h4><p>1.插值 <code>Mustache語法</code><br>2.指令 如：v-bind、v-on、v-model、v-for</p>\n<h3 id=\"一、插值-Mustache語法\"><a href=\"#一、插值-Mustache語法\" class=\"headerlink\" title=\"一、插值 Mustache語法\"></a>一、插值 Mustache語法</h3><h4 id=\"範例1-加入文字-jsbin連結\"><a href=\"#範例1-加入文字-jsbin連結\" class=\"headerlink\" title=\"範例1:加入文字  jsbin連結\"></a>範例1:加入文字  <a href=\"https://jsbin.com/pejuqujasa/1/edit?html,js,output\">jsbin連結</a></h4><p>寫法：使用<code>Mustache語法</code>(就是雙大括號)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">補充：若希望文字能單次綁定 只要加上`v-once`即可，之後再變更實體內msg文字內容畫面也不會改變</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span> &gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、指令-Directives\"><a href=\"#二、指令-Directives\" class=\"headerlink\" title=\"二、指令 Directives\"></a>二、指令 Directives</h3><blockquote>\n<p>指令是Vue 所提供特殊的 DOM 屬性， Vue 內建的指令通常會以「 v- 」作為開頭。<br>指令中的「值」通常⽤用來表⽰某個 JS 運算式。而指令的作用，是將某個運算式執⾏後的結果回饋到對應的 DOM 上。 </p>\n</blockquote>\n<h4 id=\"範例1-插入原始HTML結構\"><a href=\"#範例1-插入原始HTML結構\" class=\"headerlink\" title=\"範例1:插入原始HTML結構\"></a>範例1:插入原始HTML結構</h4><p>寫法：v-html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>原始 HTML<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; rawHtml &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span>這邊會渲染出原始 HTML 結構<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：<br>網站上動態渲染的任意HTML可能會非常危險，因為它很容易導致XSS攻擊<br>不建議使用地方：使用者輸入框、密碼欄位等  </p>\n</blockquote>\n<h4 id=\"範例2-新增參數\"><a href=\"#範例2-新增參數\" class=\"headerlink\" title=\"範例2:新增參數\"></a>範例2:新增參數</h4><p>寫法：使用v-bind綁定，新增屬性如id、href</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;htmlId&quot;</span>&gt;</span>HTML 屬性<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"範例3-動態新增參數\"><a href=\"#範例3-動態新增參數\" class=\"headerlink\" title=\"範例3:動態新增參數\"></a>範例3:動態新增參數</h4><p>Vue2.6版本新增 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：如果Vue實體內有一個data屬性attributeName，其值為”href”，那麼這個綁定等同<code>v-bind:href</code> <a href=\"https://openbox.pt/vuejs/vue-js-2-6-dynamic-directive-arguments/\">參考資料</a></p>\n<h4 id=\"範例4-修飾符\"><a href=\"#範例4-修飾符\" class=\"headerlink\" title=\"範例4:修飾符\"></a>範例4:修飾符</h4><p>使用<code>.</code>當作修飾符</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：<code>.prevent修飾符</code>等同告訴v-on指令對於觸發的事件使用<code>event.preventDefault()</code></p>\n<h5 id=\"補充-介紹修飾符\"><a href=\"#補充-介紹修飾符\" class=\"headerlink\" title=\"補充:介紹修飾符\"></a>補充:介紹修飾符</h5><p><a href=\"https://cn.vuejs.org/v2/guide/events.html\"> 官網–修飾符介紹</a><br>Vue 的修飾⼦最主要分成兩種:<code>表單元素的修飾⼦</code> 與 <code>事件的修飾⼦</code>。</p>\n<blockquote>\n<p>修飾符目的：<br>用來增強指令 (directive) 附加功能的語法糖。<br>寫法介紹：<code>v-xxx 的指令後加上「 .xxx 」</code></p>\n</blockquote>\n<p>而修飾符依照種類可以區分下面幾種：</p>\n<ol>\n<li>表單修飾符</li>\n<li>事件修飾符（如：事件冒泡事件）</li>\n<li>鼠標修飾符</li>\n<li>按鍵修飾符</li>\n<li>鍵值修飾符</li>\n</ol>\n<p>表單修飾符：  </p>\n<blockquote>\n<p>.lazy(不會即時更新input)、<br>.number（將input輸入資料轉為數值）、<br>.trim（去除首尾空白字符）  </p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>lazy修飾符示範<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>msg: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>事件修飾符：<a href=\"https://codepen.io/chunwen/pen/bXgqaB?editors=1010\">codepen範例原始碼</a>，範例將示範如何翻轉字串<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;reverseText&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.google.com&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;reverseText&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary mt-1&quot;</span>&gt;</span>反轉字串<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in content&quot;</span>&gt;</span></span><br><span class=\"line\">       &#123;&#123; item.title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    newText:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//儲存newText資料</span></span><br><span class=\"line\">    content: [</span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//  title:&#x27;&#x27;, </span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 請在此撰寫 JavaScript</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseText:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// event.preventDefault();</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.newText= <span class=\"built_in\">this</span>.text.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.content.push(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        title: <span class=\"built_in\">this</span>.newText,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.text =<span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">//清空資料</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意縮寫時候，<code>v-on:</code> 可以全部取代為＠ </p>\n</blockquote>\n<h3 id=\"內建指令如下：\"><a href=\"#內建指令如下：\" class=\"headerlink\" title=\"內建指令如下：\"></a>內建指令如下：</h3><p><img src=\"https://i.imgur.com/q51LoQ1.png\" alt=\"\"></p>\n<h3 id=\"V-text、V-html、V-once\"><a href=\"#V-text、V-html、V-once\" class=\"headerlink\" title=\"V-text、V-html、V-once\"></a>V-text、V-html、V-once</h3><p>V-text插入：渲染純文字內容<br>V-html：插入整個html結構<br>V-once：將 data 內的內容渲染後，不再追蹤其變化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-html=<span class=\"string\">&quot;rawHTML&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">&lt;div v-once&gt;msg <span class=\"keyword\">with</span> v-once: &#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">&lt;div v-text=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小結：模板語法撰寫重點\"><a href=\"#小結：模板語法撰寫重點\" class=\"headerlink\" title=\"小結：模板語法撰寫重點\"></a>小結：模板語法撰寫重點</h3><p>1.必須使用表達式（expression）。簡單來說表達式就是要能產生一個值（或是一個結果）<br>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; rawHtml + text + (number1+number2) &#125;&#125;</span><br><span class=\"line\">&#123;&#123; number1+number2 &#125;&#125;</span><br><span class=\"line\">&#123;&#123; text.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>) &#125;&#125;</span><br><span class=\"line\">&#123;&#123; ok ? <span class=\"string\">&#x27;Yes&#x27;</span>: <span class=\"string\">&#x27;No&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>有個限制，每個綁定都只能包含單個表達式，所以下面的例子都不會生效。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; <span class=\"keyword\">if</span> (ok) &#123; <span class=\"keyword\">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"length":3286,"excerpt":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/index.html#\">Vue.js官網教學</a><br><a href=\"https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4\">Vue api 指令介紹</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10202967\">Vue.js Core 30天屠龍記(第5天): 模板語法 Part 1 - Mustache 標籤</a></p>","more":"<hr>\n<h2 id=\"模板語法\"><a href=\"#模板語法\" class=\"headerlink\" title=\"模板語法\"></a>模板語法</h2><blockquote>\n<p>模板語法是<code>邏輯</code>跟<code>頁面</code>之間溝通的媒介</p>\n</blockquote>\n<p>Vue.js 使用了基於HTML 的模板語法，允許開發者聲明式(declaratively)地將DOM 綁定至底層Vue 實例的數據。<a href=\"https://cn.vuejs.org/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4\">官網介紹</a></p>\n<h4 id=\"Vue模板語法共分為兩種\"><a href=\"#Vue模板語法共分為兩種\" class=\"headerlink\" title=\"Vue模板語法共分為兩種\"></a>Vue模板語法共分為兩種</h4><p>1.插值 <code>Mustache語法</code><br>2.指令 如：v-bind、v-on、v-model、v-for</p>\n<h3 id=\"一、插值-Mustache語法\"><a href=\"#一、插值-Mustache語法\" class=\"headerlink\" title=\"一、插值 Mustache語法\"></a>一、插值 Mustache語法</h3><h4 id=\"範例1-加入文字-jsbin連結\"><a href=\"#範例1-加入文字-jsbin連結\" class=\"headerlink\" title=\"範例1:加入文字  jsbin連結\"></a>範例1:加入文字  <a href=\"https://jsbin.com/pejuqujasa/1/edit?html,js,output\">jsbin連結</a></h4><p>寫法：使用<code>Mustache語法</code>(就是雙大括號)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">補充：若希望文字能單次綁定 只要加上`v-once`即可，之後再變更實體內msg文字內容畫面也不會改變</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span> &gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、指令-Directives\"><a href=\"#二、指令-Directives\" class=\"headerlink\" title=\"二、指令 Directives\"></a>二、指令 Directives</h3><blockquote>\n<p>指令是Vue 所提供特殊的 DOM 屬性， Vue 內建的指令通常會以「 v- 」作為開頭。<br>指令中的「值」通常⽤用來表⽰某個 JS 運算式。而指令的作用，是將某個運算式執⾏後的結果回饋到對應的 DOM 上。 </p>\n</blockquote>\n<h4 id=\"範例1-插入原始HTML結構\"><a href=\"#範例1-插入原始HTML結構\" class=\"headerlink\" title=\"範例1:插入原始HTML結構\"></a>範例1:插入原始HTML結構</h4><p>寫法：v-html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>原始 HTML<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; rawHtml &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span>這邊會渲染出原始 HTML 結構<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：<br>網站上動態渲染的任意HTML可能會非常危險，因為它很容易導致XSS攻擊<br>不建議使用地方：使用者輸入框、密碼欄位等  </p>\n</blockquote>\n<h4 id=\"範例2-新增參數\"><a href=\"#範例2-新增參數\" class=\"headerlink\" title=\"範例2:新增參數\"></a>範例2:新增參數</h4><p>寫法：使用v-bind綁定，新增屬性如id、href</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;htmlId&quot;</span>&gt;</span>HTML 屬性<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"範例3-動態新增參數\"><a href=\"#範例3-動態新增參數\" class=\"headerlink\" title=\"範例3:動態新增參數\"></a>範例3:動態新增參數</h4><p>Vue2.6版本新增 </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:</span>[<span class=\"attr\">attributeName</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：如果Vue實體內有一個data屬性attributeName，其值為”href”，那麼這個綁定等同<code>v-bind:href</code> <a href=\"https://openbox.pt/vuejs/vue-js-2-6-dynamic-directive-arguments/\">參考資料</a></p>\n<h4 id=\"範例4-修飾符\"><a href=\"#範例4-修飾符\" class=\"headerlink\" title=\"範例4:修飾符\"></a>範例4:修飾符</h4><p>使用<code>.</code>當作修飾符</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：<code>.prevent修飾符</code>等同告訴v-on指令對於觸發的事件使用<code>event.preventDefault()</code></p>\n<h5 id=\"補充-介紹修飾符\"><a href=\"#補充-介紹修飾符\" class=\"headerlink\" title=\"補充:介紹修飾符\"></a>補充:介紹修飾符</h5><p><a href=\"https://cn.vuejs.org/v2/guide/events.html\"> 官網–修飾符介紹</a><br>Vue 的修飾⼦最主要分成兩種:<code>表單元素的修飾⼦</code> 與 <code>事件的修飾⼦</code>。</p>\n<blockquote>\n<p>修飾符目的：<br>用來增強指令 (directive) 附加功能的語法糖。<br>寫法介紹：<code>v-xxx 的指令後加上「 .xxx 」</code></p>\n</blockquote>\n<p>而修飾符依照種類可以區分下面幾種：</p>\n<ol>\n<li>表單修飾符</li>\n<li>事件修飾符（如：事件冒泡事件）</li>\n<li>鼠標修飾符</li>\n<li>按鍵修飾符</li>\n<li>鍵值修飾符</li>\n</ol>\n<p>表單修飾符：  </p>\n<blockquote>\n<p>.lazy(不會即時更新input)、<br>.number（將input輸入資料轉為數值）、<br>.trim（去除首尾空白字符）  </p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>lazy修飾符示範<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>msg: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>事件修飾符：<a href=\"https://codepen.io/chunwen/pen/bXgqaB?editors=1010\">codepen範例原始碼</a>，範例將示範如何翻轉字串<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;reverseText&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://www.google.com&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;reverseText&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary mt-1&quot;</span>&gt;</span>反轉字串<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in content&quot;</span>&gt;</span></span><br><span class=\"line\">       &#123;&#123; item.title &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    newText:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//儲存newText資料</span></span><br><span class=\"line\">    content: [</span><br><span class=\"line\">      <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//  title:&#x27;&#x27;, </span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 請在此撰寫 JavaScript</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseText:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// event.preventDefault();</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.newText= <span class=\"built_in\">this</span>.text.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.content.push(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        title: <span class=\"built_in\">this</span>.newText,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.text =<span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">//清空資料</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意縮寫時候，<code>v-on:</code> 可以全部取代為＠ </p>\n</blockquote>\n<h3 id=\"內建指令如下：\"><a href=\"#內建指令如下：\" class=\"headerlink\" title=\"內建指令如下：\"></a>內建指令如下：</h3><p><img src=\"https://i.imgur.com/q51LoQ1.png\" alt=\"\"></p>\n<h3 id=\"V-text、V-html、V-once\"><a href=\"#V-text、V-html、V-once\" class=\"headerlink\" title=\"V-text、V-html、V-once\"></a>V-text、V-html、V-once</h3><p>V-text插入：渲染純文字內容<br>V-html：插入整個html結構<br>V-once：將 data 內的內容渲染後，不再追蹤其變化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div v-html=<span class=\"string\">&quot;rawHTML&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">&lt;div v-once&gt;msg <span class=\"keyword\">with</span> v-once: &#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;hr&gt;</span><br><span class=\"line\">&lt;div v-text=<span class=\"string\">&quot;msg&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小結：模板語法撰寫重點\"><a href=\"#小結：模板語法撰寫重點\" class=\"headerlink\" title=\"小結：模板語法撰寫重點\"></a>小結：模板語法撰寫重點</h3><p>1.必須使用表達式（expression）。簡單來說表達式就是要能產生一個值（或是一個結果）<br>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; rawHtml + text + (number1+number2) &#125;&#125;</span><br><span class=\"line\">&#123;&#123; number1+number2 &#125;&#125;</span><br><span class=\"line\">&#123;&#123; text.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>) &#125;&#125;</span><br><span class=\"line\">&#123;&#123; ok ? <span class=\"string\">&#x27;Yes&#x27;</span>: <span class=\"string\">&#x27;No&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>有個限制，每個綁定都只能包含單個表達式，所以下面的例子都不會生效。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; <span class=\"keyword\">var</span> a = <span class=\"number\">1</span> &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class=\"line\">&#123;&#123; <span class=\"keyword\">if</span> (ok) &#123; <span class=\"keyword\">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue指令 V-model、V-on介紹","abbrlink":378863984,"date":"2019-09-22T05:27:43.000Z","_content":"\n參考資料：\n[官網表單輸入綁定介紹](https://cn.vuejs.org/v2/guide/forms.html)\n[Ch2課堂基礎範本](https://jsbin.com/bafayot/12/edit?html,output)\n[參考資料：Summer— data、v-model 與雙向綁定](https://cythilya.github.io/2017/04/14/vue-data-v-model/)\n<!-- more -->\n- - - -\n用途：綁定雙向資料，主要用在四個地方：`<input>`、`<select>`、`<textarea>`、自訂components。`v-model`本質負責監聽用戶的輸入事件以更新數據。\n備註：\n> 1.V-model會忽略所有表單元素的value、checked、selected的初始值，請記得一定要在data中聲明初始值  \n> 2.V-model跟html結構上標籤（如：selected）同時出現時，V-model權重比較高，會優先顯示data中的資料  \n### 常見用法介紹\n我們直接來看例子吧. [課堂練習範本](https://codepen.io/chunwen/pen/oKMjBx?editors=1010#0)\n```html\n情境一：單行文字\n<input type=\"text\" v-model=\"message\">\n<p>Message is {{message}}</p>\n\n情境二：多行文字\n<textarea name=\"\" id=\"\" v-model=\"message\"></textarea>\n<p>Message is {{message}}</p>\n\n情境三：checkbox\n單選\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n<label for=\"checkbox\">{{ checked }}</label>\n複選\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n\n情境四：radio\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n\n情境五：select\n單選(傳統寫法)\n<select name=\"\" id=\"\" v-model=\"selected\">\n<option disabled value=\"\">請選擇</option>\n<option value=\"小美\">小美</option>\n<option value=\"可愛小妞\">可愛小妞</option>\n</select>\n<p>小明喜歡的女生是 {{ selected }}。</p>\n\n單選（用v-for製做）\n<select name=\"\" id=\"\" v-model=\"selected2\">\n<option disabled value=\"\">請選擇</option>\n<option v-bind:value=\"item\" \nv-for=\"item in selectData \">{{item}}\n</option>  \n\n//說明：v-model過去綁定通常為靜態，若想改為動態綁定。可以使用v-bind語法來動態綁定\n</select>\n<p>小明喜歡的女生是 {{ selected2 }}。</p>\n\n複選（只要加multipe就可以～）\n<select v-model=\"multiSelected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n<br>\n<span>Selected: {{ multiSelected }}</span>\n\n情境六：checkbox值綁定\n<div class=\"form-check\">\n<input type=\"checkbox\" class=\"form-check-input\" id=\"sex\" v-model=\"sex\" true-value=\"男生\" false-value=\"女生\">\n<label class=\"form-check-label\" for=\"sex\">{{ sex }}</label>\n</div>\n//說明：這用法挺特別，可以留意一下：true-value、false-value\n\n```\n參考資料：[Day10 vue.js - v-model 雙向綁定 (2)](https://ithelp.ithome.com.tw/articles/10214919)\n\nData 格式\n```javascript\ndata:{\n  message:'',\n  checked:false, \n  checkedNames:[],\n  picked: '',\n  selected:'',\n  selectData: ['小美', '可愛小妞', '漂亮阿姨'],\n  selected2: '',\n  multiSelected：[],\n  sex：'男生',\n}\n```\n### 修飾符（Modifiers）\n```html\n情境一：lazy（輸入文字不會及時更新）\n<input type=\"text\" class=\"form-control\" v-model.lazy=\"lazyMsg\">\n\n情境二：number(轉為純數字)\n<pre>{{ age }}</pre>\n<pre>{{typeof(age)}}</pre> //string\n<input type=\"number\" class=\"form-control\" v-model.number=\"age\">\n\n情境三： trim，刪除前後多餘空白       \n<input type=\"text\" class=\"form-control\" v-model.trim=\"trimMsg\">\n\n\n資料結構：\nlazyMsg: '',\nage: '',\ntrimMsg: ''\n```\n\n## V-on事件\n參考資料：\n[官網文件說明](https://cn.vuejs.org/v2/guide/events.html)\n[好文推薦：DOM 的事件傳遞機制：捕獲與冒泡](https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/)\n- - - -\nv-on用途：監聽DOM事件，並執行JavaScript程式碼運行\n寫法： `v-on:[事件名] 如 v-on:click=''`\n縮寫：`@click=''`\n事件名：如click事件(可以使用原來JS事件來撰寫）\n> 備註：JS原生事件如change、close、dblclick、focus、blur都可以綁定，但必須注意這些只能監聽原生DOM事件，而用在自定義元素上時，也可以監聽子組件觸發的**自定義事件** [官網API說明](https://cn.vuejs.org/v2/api/#v-on)  \n\nHTML結構 [練習檔案](https://codepen.io/chunwen/pen/gVjoWQ?editors=1011)\n```html\n情境一：基礎用法\n<p>請切換下方 box 的 className</p>\n<div class=\"box\" :class=\"{'rotate': isRotate }\"></div>\n<hr>\n<button class=\"btn btn-outline-primary\" @click=\"changeRotate\">切換 box 樣式</button>\n\n情境二：帶入參數(很重要，表格排序作業有使用到)\n<li v-for=\"item in arrayData\" class=\"my-2\">\n{{ item.name }} 有 {{ item.cash }} 元\n\n<button class=\"btn btn-sm btn-outline-primary\" @click=\"storeMoney(item)\">儲值</button>\n</li>\n說明：這邊的storeMoney(item)，參數item會傳入methods中\n\n情境三：事件修飾符(記得把console.log打開來看結果)\n常見的如.stop、.prevent、.capture、.self等等\n<h6 class=\"mt-3\">事件偵聽器時使用 self 模式</h6>\n<div class=\"p-3 bg-primary\" @click.self=\"trigger('div')\">\n<button class=\"btn btn-outline-secondary\" @click.self=\"trigger('button')\">按我</button>\n</span>\n</div>\n\n情境四：按鍵修飾符\n共有三種種類\n1. {keyCode | keyAlias} - 事件是從特定鍵觸發時才觸發回調\n2. 別名修飾 - .enter, .tab, .delete, .esc, .space, .up等\n3. 組合修飾符，實現僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器 - .ctrl, .alt, .shift, .meta\n\n<h6 class=\"mt-3\">別名修飾</h6>\n<input type=\"text\" class=\"form-control\" v-model=\"text\" @keyup.space=\"trigger('space')\">\n\n\n情境五：滑鼠事件\n.left .right .middle\n<div class=\"p-3 bg-primary\">\n<span class=\"box\" @click.middle=\"trigger('Right button')\">\n</span>\n</div>\n\n```\nJavaScript結構\n```javascript\ndata:{\n    isRotate: false,\n    text: '',\n},\nmethods: {\n    changeRotate: function() {\n      this.isRotate = !this.isRotate;\n    },\n    storeMoney: function(item) {\n      item.cash = item.cash + 500;\n    },\n    trigger: function(name) {\n      console.log(name, '此事件被觸發了')\n    }\n  }\n\n```\n\n### 問題紀錄：\n> Q.官網上有介紹v-on相關用法，我對於id=“example-2”這個例子中這段語法有些疑惑 [連結](https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95)   \n```javascript\nif (event) {\nalert(event.target.tagName)\n}\n//If（）中不是應該放可以判斷true或false的內容，而這邊放event是什麼意思？\n```\nA：if ( ) 除了判斷式也可傳入 JavaScript 的所有型別， 這部份屬於真值與假值的概念，之前在Kuro大大文章中有提到這個概念[重新認識JavaScript:Boolean的真假判斷](https://ithelp.ithome.com.tw/articles/10191343) 或直接參考[ＭＤＮ介紹](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)\n\n### 補充this使用時機\n1.methods, computed, created, watch 等 Vue 內的方法都是指向同一個 this也就是 Vue 的實例（instance）\n2.若使用到處理陣列方法如；filter、forEach、map等等，則需要另外撰寫 `vm = this` 。若沒有使用到這些陣列處理方法，則可以直接使用this\n3.data中的資料都`不需要另外撰寫this`，vue會自動讀取資訊如\n`data: { isRotate: false,}`\n","source":"_posts/2019-09-22-Vue指令V-model、V-on介紹.md","raw":"---\ntitle: Vue指令 V-model、V-on介紹\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 378863984\ndate: 2019-09-22 13:27:43\n---\n\n參考資料：\n[官網表單輸入綁定介紹](https://cn.vuejs.org/v2/guide/forms.html)\n[Ch2課堂基礎範本](https://jsbin.com/bafayot/12/edit?html,output)\n[參考資料：Summer— data、v-model 與雙向綁定](https://cythilya.github.io/2017/04/14/vue-data-v-model/)\n<!-- more -->\n- - - -\n用途：綁定雙向資料，主要用在四個地方：`<input>`、`<select>`、`<textarea>`、自訂components。`v-model`本質負責監聽用戶的輸入事件以更新數據。\n備註：\n> 1.V-model會忽略所有表單元素的value、checked、selected的初始值，請記得一定要在data中聲明初始值  \n> 2.V-model跟html結構上標籤（如：selected）同時出現時，V-model權重比較高，會優先顯示data中的資料  \n### 常見用法介紹\n我們直接來看例子吧. [課堂練習範本](https://codepen.io/chunwen/pen/oKMjBx?editors=1010#0)\n```html\n情境一：單行文字\n<input type=\"text\" v-model=\"message\">\n<p>Message is {{message}}</p>\n\n情境二：多行文字\n<textarea name=\"\" id=\"\" v-model=\"message\"></textarea>\n<p>Message is {{message}}</p>\n\n情境三：checkbox\n單選\n<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\">\n<label for=\"checkbox\">{{ checked }}</label>\n複選\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n\n情境四：radio\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\">\n<label for=\"one\">One</label>\n<br>\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\">\n<label for=\"two\">Two</label>\n<br>\n<span>Picked: {{ picked }}</span>\n\n情境五：select\n單選(傳統寫法)\n<select name=\"\" id=\"\" v-model=\"selected\">\n<option disabled value=\"\">請選擇</option>\n<option value=\"小美\">小美</option>\n<option value=\"可愛小妞\">可愛小妞</option>\n</select>\n<p>小明喜歡的女生是 {{ selected }}。</p>\n\n單選（用v-for製做）\n<select name=\"\" id=\"\" v-model=\"selected2\">\n<option disabled value=\"\">請選擇</option>\n<option v-bind:value=\"item\" \nv-for=\"item in selectData \">{{item}}\n</option>  \n\n//說明：v-model過去綁定通常為靜態，若想改為動態綁定。可以使用v-bind語法來動態綁定\n</select>\n<p>小明喜歡的女生是 {{ selected2 }}。</p>\n\n複選（只要加multipe就可以～）\n<select v-model=\"multiSelected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n<br>\n<span>Selected: {{ multiSelected }}</span>\n\n情境六：checkbox值綁定\n<div class=\"form-check\">\n<input type=\"checkbox\" class=\"form-check-input\" id=\"sex\" v-model=\"sex\" true-value=\"男生\" false-value=\"女生\">\n<label class=\"form-check-label\" for=\"sex\">{{ sex }}</label>\n</div>\n//說明：這用法挺特別，可以留意一下：true-value、false-value\n\n```\n參考資料：[Day10 vue.js - v-model 雙向綁定 (2)](https://ithelp.ithome.com.tw/articles/10214919)\n\nData 格式\n```javascript\ndata:{\n  message:'',\n  checked:false, \n  checkedNames:[],\n  picked: '',\n  selected:'',\n  selectData: ['小美', '可愛小妞', '漂亮阿姨'],\n  selected2: '',\n  multiSelected：[],\n  sex：'男生',\n}\n```\n### 修飾符（Modifiers）\n```html\n情境一：lazy（輸入文字不會及時更新）\n<input type=\"text\" class=\"form-control\" v-model.lazy=\"lazyMsg\">\n\n情境二：number(轉為純數字)\n<pre>{{ age }}</pre>\n<pre>{{typeof(age)}}</pre> //string\n<input type=\"number\" class=\"form-control\" v-model.number=\"age\">\n\n情境三： trim，刪除前後多餘空白       \n<input type=\"text\" class=\"form-control\" v-model.trim=\"trimMsg\">\n\n\n資料結構：\nlazyMsg: '',\nage: '',\ntrimMsg: ''\n```\n\n## V-on事件\n參考資料：\n[官網文件說明](https://cn.vuejs.org/v2/guide/events.html)\n[好文推薦：DOM 的事件傳遞機制：捕獲與冒泡](https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/)\n- - - -\nv-on用途：監聽DOM事件，並執行JavaScript程式碼運行\n寫法： `v-on:[事件名] 如 v-on:click=''`\n縮寫：`@click=''`\n事件名：如click事件(可以使用原來JS事件來撰寫）\n> 備註：JS原生事件如change、close、dblclick、focus、blur都可以綁定，但必須注意這些只能監聽原生DOM事件，而用在自定義元素上時，也可以監聽子組件觸發的**自定義事件** [官網API說明](https://cn.vuejs.org/v2/api/#v-on)  \n\nHTML結構 [練習檔案](https://codepen.io/chunwen/pen/gVjoWQ?editors=1011)\n```html\n情境一：基礎用法\n<p>請切換下方 box 的 className</p>\n<div class=\"box\" :class=\"{'rotate': isRotate }\"></div>\n<hr>\n<button class=\"btn btn-outline-primary\" @click=\"changeRotate\">切換 box 樣式</button>\n\n情境二：帶入參數(很重要，表格排序作業有使用到)\n<li v-for=\"item in arrayData\" class=\"my-2\">\n{{ item.name }} 有 {{ item.cash }} 元\n\n<button class=\"btn btn-sm btn-outline-primary\" @click=\"storeMoney(item)\">儲值</button>\n</li>\n說明：這邊的storeMoney(item)，參數item會傳入methods中\n\n情境三：事件修飾符(記得把console.log打開來看結果)\n常見的如.stop、.prevent、.capture、.self等等\n<h6 class=\"mt-3\">事件偵聽器時使用 self 模式</h6>\n<div class=\"p-3 bg-primary\" @click.self=\"trigger('div')\">\n<button class=\"btn btn-outline-secondary\" @click.self=\"trigger('button')\">按我</button>\n</span>\n</div>\n\n情境四：按鍵修飾符\n共有三種種類\n1. {keyCode | keyAlias} - 事件是從特定鍵觸發時才觸發回調\n2. 別名修飾 - .enter, .tab, .delete, .esc, .space, .up等\n3. 組合修飾符，實現僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器 - .ctrl, .alt, .shift, .meta\n\n<h6 class=\"mt-3\">別名修飾</h6>\n<input type=\"text\" class=\"form-control\" v-model=\"text\" @keyup.space=\"trigger('space')\">\n\n\n情境五：滑鼠事件\n.left .right .middle\n<div class=\"p-3 bg-primary\">\n<span class=\"box\" @click.middle=\"trigger('Right button')\">\n</span>\n</div>\n\n```\nJavaScript結構\n```javascript\ndata:{\n    isRotate: false,\n    text: '',\n},\nmethods: {\n    changeRotate: function() {\n      this.isRotate = !this.isRotate;\n    },\n    storeMoney: function(item) {\n      item.cash = item.cash + 500;\n    },\n    trigger: function(name) {\n      console.log(name, '此事件被觸發了')\n    }\n  }\n\n```\n\n### 問題紀錄：\n> Q.官網上有介紹v-on相關用法，我對於id=“example-2”這個例子中這段語法有些疑惑 [連結](https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95)   \n```javascript\nif (event) {\nalert(event.target.tagName)\n}\n//If（）中不是應該放可以判斷true或false的內容，而這邊放event是什麼意思？\n```\nA：if ( ) 除了判斷式也可傳入 JavaScript 的所有型別， 這部份屬於真值與假值的概念，之前在Kuro大大文章中有提到這個概念[重新認識JavaScript:Boolean的真假判斷](https://ithelp.ithome.com.tw/articles/10191343) 或直接參考[ＭＤＮ介紹](https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy)\n\n### 補充this使用時機\n1.methods, computed, created, watch 等 Vue 內的方法都是指向同一個 this也就是 Vue 的實例（instance）\n2.若使用到處理陣列方法如；filter、forEach、map等等，則需要另外撰寫 `vm = this` 。若沒有使用到這些陣列處理方法，則可以直接使用this\n3.data中的資料都`不需要另外撰寫this`，vue會自動讀取資訊如\n`data: { isRotate: false,}`\n","slug":"2019-09-22-Vue指令V-model、V-on介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2m001wzqziakhg05lb","content":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/forms.html\">官網表單輸入綁定介紹</a><br><a href=\"https://jsbin.com/bafayot/12/edit?html,output\">Ch2課堂基礎範本</a><br><a href=\"https://cythilya.github.io/2017/04/14/vue-data-v-model/\">參考資料：Summer— data、v-model 與雙向綁定</a></p>\n<span id=\"more\"></span>\n<hr>\n<p>用途：綁定雙向資料，主要用在四個地方：<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、自訂components。<code>v-model</code>本質負責監聽用戶的輸入事件以更新數據。<br>備註：</p>\n<blockquote>\n<p>1.V-model會忽略所有表單元素的value、checked、selected的初始值，請記得一定要在data中聲明初始值<br>2.V-model跟html結構上標籤（如：selected）同時出現時，V-model權重比較高，會優先顯示data中的資料  </p>\n</blockquote>\n<h3 id=\"常見用法介紹\"><a href=\"#常見用法介紹\" class=\"headerlink\" title=\"常見用法介紹\"></a>常見用法介紹</h3><p>我們直接來看例子吧. <a href=\"https://codepen.io/chunwen/pen/oKMjBx?editors=1010#0\">課堂練習範本</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：單行文字</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：多行文字</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境三：checkbox</span><br><span class=\"line\">單選</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checked&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">複選</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jack&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Jack&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;jack&quot;</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;john&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;John&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境四：radio</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;one&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;One&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;one&quot;</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;two&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Two&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;two&quot;</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境五：select</span><br><span class=\"line\">單選(傳統寫法)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>請選擇<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小美&quot;</span>&gt;</span>小美<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;可愛小妞&quot;</span>&gt;</span>可愛小妞<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>小明喜歡的女生是 &#123;&#123; selected &#125;&#125;。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">單選（用v-for製做）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>請選擇<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;item&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in selectData &quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">//說明：v-model過去綁定通常為靜態，若想改為動態綁定。可以使用v-bind語法來動態綁定</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>小明喜歡的女生是 &#123;&#123; selected2 &#125;&#125;。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">複選（只要加multipe就可以～）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;multiSelected&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; multiSelected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境六：checkbox值綁定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">true-value</span>=<span class=\"string\">&quot;男生&quot;</span> <span class=\"attr\">false-value</span>=<span class=\"string\">&quot;女生&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span>&#123;&#123; sex &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//說明：這用法挺特別，可以留意一下：true-value、false-value</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>參考資料：<a href=\"https://ithelp.ithome.com.tw/articles/10214919\">Day10 vue.js - v-model 雙向綁定 (2)</a></p>\n<p>Data 格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">  message:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  checked:<span class=\"literal\">false</span>, </span><br><span class=\"line\">  checkedNames:[],</span><br><span class=\"line\">  picked: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  selected:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  selectData: [<span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"string\">&#x27;可愛小妞&#x27;</span>, <span class=\"string\">&#x27;漂亮阿姨&#x27;</span>],</span><br><span class=\"line\">  selected2: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  multiSelected：[],</span><br><span class=\"line\">  sex：<span class=\"string\">&#x27;男生&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修飾符（Modifiers）\"><a href=\"#修飾符（Modifiers）\" class=\"headerlink\" title=\"修飾符（Modifiers）\"></a>修飾符（Modifiers）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：lazy（輸入文字不會及時更新）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;lazyMsg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：number(轉為純數字)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123;typeof(age)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span> //string</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境三： trim，刪除前後多餘空白       </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">&quot;trimMsg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">資料結構：</span><br><span class=\"line\">lazyMsg: &#x27;&#x27;,</span><br><span class=\"line\">age: &#x27;&#x27;,</span><br><span class=\"line\">trimMsg: &#x27;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"V-on事件\"><a href=\"#V-on事件\" class=\"headerlink\" title=\"V-on事件\"></a>V-on事件</h2><p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/events.html\">官網文件說明</a><br><a href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">好文推薦：DOM 的事件傳遞機制：捕獲與冒泡</a></p>\n<hr>\n<p>v-on用途：監聽DOM事件，並執行JavaScript程式碼運行<br>寫法： <code>v-on:[事件名] 如 v-on:click=&#39;&#39;</code><br>縮寫：<code>@click=&#39;&#39;</code><br>事件名：如click事件(可以使用原來JS事件來撰寫）</p>\n<blockquote>\n<p>備註：JS原生事件如change、close、dblclick、focus、blur都可以綁定，但必須注意這些只能監聽原生DOM事件，而用在自定義元素上時，也可以監聽子組件觸發的<strong>自定義事件</strong> <a href=\"https://cn.vuejs.org/v2/api/#v-on\">官網API說明</a>  </p>\n</blockquote>\n<p>HTML結構 <a href=\"https://codepen.io/chunwen/pen/gVjoWQ?editors=1011\">練習檔案</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：基礎用法</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>請切換下方 box 的 className<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;rotate&#x27;: isRotate &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-outline-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeRotate&quot;</span>&gt;</span>切換 box 樣式<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：帶入參數(很重要，表格排序作業有使用到)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in arrayData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;my-2&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; item.name &#125;&#125; 有 &#123;&#123; item.cash &#125;&#125; 元</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-outline-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;storeMoney(item)&quot;</span>&gt;</span>儲值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">說明：這邊的storeMoney(item)，參數item會傳入methods中</span><br><span class=\"line\"></span><br><span class=\"line\">情境三：事件修飾符(記得把console.log打開來看結果)</span><br><span class=\"line\">常見的如.stop、.prevent、.capture、.self等等</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>事件偵聽器時使用 self 模式<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;p-3 bg-primary&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;trigger(&#x27;div&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-outline-secondary&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;trigger(&#x27;button&#x27;)&quot;</span>&gt;</span>按我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境四：按鍵修飾符</span><br><span class=\"line\">共有三種種類</span><br><span class=\"line\">1. &#123;keyCode | keyAlias&#125; - 事件是從特定鍵觸發時才觸發回調</span><br><span class=\"line\">2. 別名修飾 - .enter, .tab, .delete, .esc, .space, .up等</span><br><span class=\"line\">3. 組合修飾符，實現僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器 - .ctrl, .alt, .shift, .meta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>別名修飾<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.space</span>=<span class=\"string\">&quot;trigger(&#x27;space&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">情境五：滑鼠事件</span><br><span class=\"line\">.left .right .middle</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;p-3 bg-primary&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click.middle</span>=<span class=\"string\">&quot;trigger(&#x27;Right button&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>JavaScript結構</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">    isRotate: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    text: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    changeRotate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.isRotate = !<span class=\"built_in\">this</span>.isRotate;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    storeMoney: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      item.cash = item.cash + <span class=\"number\">500</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name, <span class=\"string\">&#x27;此事件被觸發了&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"問題紀錄：\"><a href=\"#問題紀錄：\" class=\"headerlink\" title=\"問題紀錄：\"></a>問題紀錄：</h3><blockquote>\n<p>Q.官網上有介紹v-on相關用法，我對於id=“example-2”這個例子中這段語法有些疑惑 <a href=\"https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95\">連結</a>   </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">alert(event.target.tagName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//If（）中不是應該放可以判斷true或false的內容，而這邊放event是什麼意思？</span></span><br></pre></td></tr></table></figure>\n<p>A：if ( ) 除了判斷式也可傳入 JavaScript 的所有型別， 這部份屬於真值與假值的概念，之前在Kuro大大文章中有提到這個概念<a href=\"https://ithelp.ithome.com.tw/articles/10191343\">重新認識JavaScript:Boolean的真假判斷</a> 或直接參考<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\">ＭＤＮ介紹</a></p>\n<h3 id=\"補充this使用時機\"><a href=\"#補充this使用時機\" class=\"headerlink\" title=\"補充this使用時機\"></a>補充this使用時機</h3><p>1.methods, computed, created, watch 等 Vue 內的方法都是指向同一個 this也就是 Vue 的實例（instance）<br>2.若使用到處理陣列方法如；filter、forEach、map等等，則需要另外撰寫 <code>vm = this</code> 。若沒有使用到這些陣列處理方法，則可以直接使用this<br>3.data中的資料都<code>不需要另外撰寫this</code>，vue會自動讀取資訊如<br><code>data: &#123; isRotate: false,&#125;</code></p>\n","site":{"data":{}},"length":6342,"excerpt":"<p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/forms.html\">官網表單輸入綁定介紹</a><br><a href=\"https://jsbin.com/bafayot/12/edit?html,output\">Ch2課堂基礎範本</a><br><a href=\"https://cythilya.github.io/2017/04/14/vue-data-v-model/\">參考資料：Summer— data、v-model 與雙向綁定</a></p>","more":"<hr>\n<p>用途：綁定雙向資料，主要用在四個地方：<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、自訂components。<code>v-model</code>本質負責監聽用戶的輸入事件以更新數據。<br>備註：</p>\n<blockquote>\n<p>1.V-model會忽略所有表單元素的value、checked、selected的初始值，請記得一定要在data中聲明初始值<br>2.V-model跟html結構上標籤（如：selected）同時出現時，V-model權重比較高，會優先顯示data中的資料  </p>\n</blockquote>\n<h3 id=\"常見用法介紹\"><a href=\"#常見用法介紹\" class=\"headerlink\" title=\"常見用法介紹\"></a>常見用法介紹</h3><p>我們直接來看例子吧. <a href=\"https://codepen.io/chunwen/pen/oKMjBx?editors=1010#0\">課堂練習範本</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：單行文字</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：多行文字</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Message is &#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境三：checkbox</span><br><span class=\"line\">單選</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checked&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">複選</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jack&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Jack&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;jack&quot;</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;john&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;John&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境四：radio</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;one&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;One&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;one&quot;</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;two&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Two&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;two&quot;</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境五：select</span><br><span class=\"line\">單選(傳統寫法)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>請選擇<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;小美&quot;</span>&gt;</span>小美<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;可愛小妞&quot;</span>&gt;</span>可愛小妞<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>小明喜歡的女生是 &#123;&#123; selected &#125;&#125;。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">單選（用v-for製做）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>請選擇<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;item&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in selectData &quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">//說明：v-model過去綁定通常為靜態，若想改為動態綁定。可以使用v-bind語法來動態綁定</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>小明喜歡的女生是 &#123;&#123; selected2 &#125;&#125;。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">複選（只要加multipe就可以～）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;multiSelected&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Selected: &#123;&#123; multiSelected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境六：checkbox值綁定</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-input&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">true-value</span>=<span class=\"string\">&quot;男生&quot;</span> <span class=\"attr\">false-value</span>=<span class=\"string\">&quot;女生&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-check-label&quot;</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span>&#123;&#123; sex &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">//說明：這用法挺特別，可以留意一下：true-value、false-value</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>參考資料：<a href=\"https://ithelp.ithome.com.tw/articles/10214919\">Day10 vue.js - v-model 雙向綁定 (2)</a></p>\n<p>Data 格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">  message:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  checked:<span class=\"literal\">false</span>, </span><br><span class=\"line\">  checkedNames:[],</span><br><span class=\"line\">  picked: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  selected:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  selectData: [<span class=\"string\">&#x27;小美&#x27;</span>, <span class=\"string\">&#x27;可愛小妞&#x27;</span>, <span class=\"string\">&#x27;漂亮阿姨&#x27;</span>],</span><br><span class=\"line\">  selected2: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  multiSelected：[],</span><br><span class=\"line\">  sex：<span class=\"string\">&#x27;男生&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修飾符（Modifiers）\"><a href=\"#修飾符（Modifiers）\" class=\"headerlink\" title=\"修飾符（Modifiers）\"></a>修飾符（Modifiers）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：lazy（輸入文字不會及時更新）</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;lazyMsg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：number(轉為純數字)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">pre</span>&gt;</span>&#123;&#123;typeof(age)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span> //string</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model.number</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境三： trim，刪除前後多餘空白       </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">&quot;trimMsg&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">資料結構：</span><br><span class=\"line\">lazyMsg: &#x27;&#x27;,</span><br><span class=\"line\">age: &#x27;&#x27;,</span><br><span class=\"line\">trimMsg: &#x27;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"V-on事件\"><a href=\"#V-on事件\" class=\"headerlink\" title=\"V-on事件\"></a>V-on事件</h2><p>參考資料：<br><a href=\"https://cn.vuejs.org/v2/guide/events.html\">官網文件說明</a><br><a href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">好文推薦：DOM 的事件傳遞機制：捕獲與冒泡</a></p>\n<hr>\n<p>v-on用途：監聽DOM事件，並執行JavaScript程式碼運行<br>寫法： <code>v-on:[事件名] 如 v-on:click=&#39;&#39;</code><br>縮寫：<code>@click=&#39;&#39;</code><br>事件名：如click事件(可以使用原來JS事件來撰寫）</p>\n<blockquote>\n<p>備註：JS原生事件如change、close、dblclick、focus、blur都可以綁定，但必須注意這些只能監聽原生DOM事件，而用在自定義元素上時，也可以監聽子組件觸發的<strong>自定義事件</strong> <a href=\"https://cn.vuejs.org/v2/api/#v-on\">官網API說明</a>  </p>\n</blockquote>\n<p>HTML結構 <a href=\"https://codepen.io/chunwen/pen/gVjoWQ?editors=1011\">練習檔案</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：基礎用法</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>請切換下方 box 的 className<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;rotate&#x27;: isRotate &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-outline-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeRotate&quot;</span>&gt;</span>切換 box 樣式<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：帶入參數(很重要，表格排序作業有使用到)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in arrayData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;my-2&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; item.name &#125;&#125; 有 &#123;&#123; item.cash &#125;&#125; 元</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-outline-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;storeMoney(item)&quot;</span>&gt;</span>儲值<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">說明：這邊的storeMoney(item)，參數item會傳入methods中</span><br><span class=\"line\"></span><br><span class=\"line\">情境三：事件修飾符(記得把console.log打開來看結果)</span><br><span class=\"line\">常見的如.stop、.prevent、.capture、.self等等</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>事件偵聽器時使用 self 模式<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;p-3 bg-primary&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;trigger(&#x27;div&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-outline-secondary&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;trigger(&#x27;button&#x27;)&quot;</span>&gt;</span>按我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">情境四：按鍵修飾符</span><br><span class=\"line\">共有三種種類</span><br><span class=\"line\">1. &#123;keyCode | keyAlias&#125; - 事件是從特定鍵觸發時才觸發回調</span><br><span class=\"line\">2. 別名修飾 - .enter, .tab, .delete, .esc, .space, .up等</span><br><span class=\"line\">3. 組合修飾符，實現僅在按下相應按鍵時才觸發鼠標或鍵盤事件的監聽器 - .ctrl, .alt, .shift, .meta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>別名修飾<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.space</span>=<span class=\"string\">&quot;trigger(&#x27;space&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">情境五：滑鼠事件</span><br><span class=\"line\">.left .right .middle</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;p-3 bg-primary&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> @<span class=\"attr\">click.middle</span>=<span class=\"string\">&quot;trigger(&#x27;Right button&#x27;)&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>JavaScript結構</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:&#123;</span><br><span class=\"line\">    isRotate: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    text: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    changeRotate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.isRotate = !<span class=\"built_in\">this</span>.isRotate;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    storeMoney: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      item.cash = item.cash + <span class=\"number\">500</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name, <span class=\"string\">&#x27;此事件被觸發了&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"問題紀錄：\"><a href=\"#問題紀錄：\" class=\"headerlink\" title=\"問題紀錄：\"></a>問題紀錄：</h3><blockquote>\n<p>Q.官網上有介紹v-on相關用法，我對於id=“example-2”這個例子中這段語法有些疑惑 <a href=\"https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95\">連結</a>   </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">alert(event.target.tagName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//If（）中不是應該放可以判斷true或false的內容，而這邊放event是什麼意思？</span></span><br></pre></td></tr></table></figure>\n<p>A：if ( ) 除了判斷式也可傳入 JavaScript 的所有型別， 這部份屬於真值與假值的概念，之前在Kuro大大文章中有提到這個概念<a href=\"https://ithelp.ithome.com.tw/articles/10191343\">重新認識JavaScript:Boolean的真假判斷</a> 或直接參考<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\">ＭＤＮ介紹</a></p>\n<h3 id=\"補充this使用時機\"><a href=\"#補充this使用時機\" class=\"headerlink\" title=\"補充this使用時機\"></a>補充this使用時機</h3><p>1.methods, computed, created, watch 等 Vue 內的方法都是指向同一個 this也就是 Vue 的實例（instance）<br>2.若使用到處理陣列方法如；filter、forEach、map等等，則需要另外撰寫 <code>vm = this</code> 。若沒有使用到這些陣列處理方法，則可以直接使用this<br>3.data中的資料都<code>不需要另外撰寫this</code>，vue會自動讀取資訊如<br><code>data: &#123; isRotate: false,&#125;</code></p>"},{"title":"Vue computed 屬性介紹","abbrlink":50615246,"date":"2019-09-26T14:48:20.000Z","_content":"\n參考資料：\n[Vue.js Core 30天屠龍記(第5天)](https://ithelp.ithome.com.tw/articles/10218592)\n[官網計算屬性和偵聽器介紹](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8)\n   \n<!-- more -->\n## 前言\n開始前，我們先幫大家複習一下，這幾天介紹的內容（如下圖），若對於指令語法仍有疑問。大家可以自行到官網參考指令介紹喔！[連結提供](https://cn.vuejs.org/v2/api/index.html#%E6%8C%87%E4%BB%A4)\n![](https://i.imgur.com/q51LoQ1.png)\n\n-----\n開始今天主題介紹前，還記得我們在之文章說過`Vue的Mustache語法嗎？`若還不太清楚可以參考這篇文章[Day5 Vue模板語法、V-text、V-html、V-once介紹](https://ithelp.ithome.com.tw/articles/10218592)\n### Mustache語法\n簡述：我們可以在HTML上撰寫兩個大括號，就可以很方便的將`實體內資料`綁定到畫面上。但是 `Mustache語法本質上是用於簡單運算。`\n\n我們若遇到需要較為複雜的邏輯運算時候，這時候又全都寫在HTML上，便會造成程式難以閱讀和管理。\n官網範例如下：\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n因此，為了解決複雜的邏輯運算問題，我們需要使用`computed屬性`來幫我們解決問題！\n\n### Computed\n用途：主要用來處理複雜邏輯運算。如：資料計算\n寫法：`{ [key: string]: Function | { get: Function, set: Function } }`\n寫法範例如下：\n```javascript\ncomputed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n```\n特性：\n1.computed 底下宣告的方法必須是function，且會`return`一個值。\n2.computed沒有參數可以帶，預設為一個唯獨屬性（預設僅有getter）\n\n範例：\n[練習連結](https://jsbin.com/xeselayajo/3/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <p> Original message: \"{{ message }}\"</p>\n    <p> Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        message: 'Hello chunwen!'\n      },\n      computed: {\n        // a computed getter\n        reversedMessage: function () {\n          // `this` points to the vm instance\n          return this.message.split('').reverse().join('')\n        }\n      }\n    });\n```\n\n### Computed屬性：getter(讀取)、setter(寫入)\n上面特性有提到，`computed`屬性中預設為`getter(讀取)`，但如果我們今天想要針對Computed運算出來的結果進行更動的話，該怎麼處理呢？\n我們先來看原始範例（沒有setter）：\n[練習連結](https://codepen.io/chunwen/pen/WNeWxPO?editors=1011)\nHTML部分\n```html\n<div id=\"app\">\n    <div>firstName: <input v-model=\"firstName\" type=\"text\"></div>\n    <div>lastName: <input v-model=\"lastName\" type=\"text\"></div>\n    <div>fullName: <input type=\"text\" v-model=\"fullName\"></div>\n</div>\n```\nJS部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU'\n      },\n      computed:{\n        fullName(){\n          return this.firstName +' '+ this.lastName;\n        }\n      },\n});\n```\n說明：你可以試著更動`fullName`欄位，這時你會發現`firstName`跟`lastName`這兩個欄位值並不會更動，這時候你可能會好奇我們不是用v-model綁定實體內資料了嗎？為何畫面資料沒有進行更動呢？\n並且跳出下面圖片錯誤\n![](https://i.imgur.com/0oBItbW.png)\n> 原因：就是因為Computed預設為一個唯獨屬性（僅有getter）\n\n如果我們想要針對Computed運算出來的結果進行更動的話，我們可以將上面範例加入`setter屬性`，改寫範例如下：\n[連結](https://codepen.io/chunwen/pen/ExYJgPJ?editors=1011)\nHTML部分\n```html\n<div id=\"app\">\n    <div>firstName: <input v-model=\"firstName\" type=\"text\"></div>\n    <div>lastName: <input v-model=\"lastName\" type=\"text\"></div>\n    <div>fullName: <input type=\"text\" v-model=\"fullName\"></div>\n</div>\n```\nJS部分\n```javascript\n   computed:{\n        fullName:{\n        //getter\n        get(){\n          return this.firstName +' '+ this.lastName;\n        },\n        //setter\n        set(val){\n          console.log(val)  //觀察更新數值\n          var name = val.split(' '); //將數值切分成兩部分\n          this.firstName=name[0];\n          this.lastName=name[1];          \n        }\n        }\n      },\n```\n這時我們Computed出來的資料就可以進行變動摟～","source":"_posts/2019-09-26-Vue computed 屬性介紹.md","raw":"---\ntitle: Vue computed 屬性介紹\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 50615246\ndate: 2019-09-26 22:48:20\n---\n\n參考資料：\n[Vue.js Core 30天屠龍記(第5天)](https://ithelp.ithome.com.tw/articles/10218592)\n[官網計算屬性和偵聽器介紹](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8)\n   \n<!-- more -->\n## 前言\n開始前，我們先幫大家複習一下，這幾天介紹的內容（如下圖），若對於指令語法仍有疑問。大家可以自行到官網參考指令介紹喔！[連結提供](https://cn.vuejs.org/v2/api/index.html#%E6%8C%87%E4%BB%A4)\n![](https://i.imgur.com/q51LoQ1.png)\n\n-----\n開始今天主題介紹前，還記得我們在之文章說過`Vue的Mustache語法嗎？`若還不太清楚可以參考這篇文章[Day5 Vue模板語法、V-text、V-html、V-once介紹](https://ithelp.ithome.com.tw/articles/10218592)\n### Mustache語法\n簡述：我們可以在HTML上撰寫兩個大括號，就可以很方便的將`實體內資料`綁定到畫面上。但是 `Mustache語法本質上是用於簡單運算。`\n\n我們若遇到需要較為複雜的邏輯運算時候，這時候又全都寫在HTML上，便會造成程式難以閱讀和管理。\n官網範例如下：\n```html\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n因此，為了解決複雜的邏輯運算問題，我們需要使用`computed屬性`來幫我們解決問題！\n\n### Computed\n用途：主要用來處理複雜邏輯運算。如：資料計算\n寫法：`{ [key: string]: Function | { get: Function, set: Function } }`\n寫法範例如下：\n```javascript\ncomputed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n```\n特性：\n1.computed 底下宣告的方法必須是function，且會`return`一個值。\n2.computed沒有參數可以帶，預設為一個唯獨屬性（預設僅有getter）\n\n範例：\n[練習連結](https://jsbin.com/xeselayajo/3/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <p> Original message: \"{{ message }}\"</p>\n    <p> Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        message: 'Hello chunwen!'\n      },\n      computed: {\n        // a computed getter\n        reversedMessage: function () {\n          // `this` points to the vm instance\n          return this.message.split('').reverse().join('')\n        }\n      }\n    });\n```\n\n### Computed屬性：getter(讀取)、setter(寫入)\n上面特性有提到，`computed`屬性中預設為`getter(讀取)`，但如果我們今天想要針對Computed運算出來的結果進行更動的話，該怎麼處理呢？\n我們先來看原始範例（沒有setter）：\n[練習連結](https://codepen.io/chunwen/pen/WNeWxPO?editors=1011)\nHTML部分\n```html\n<div id=\"app\">\n    <div>firstName: <input v-model=\"firstName\" type=\"text\"></div>\n    <div>lastName: <input v-model=\"lastName\" type=\"text\"></div>\n    <div>fullName: <input type=\"text\" v-model=\"fullName\"></div>\n</div>\n```\nJS部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU'\n      },\n      computed:{\n        fullName(){\n          return this.firstName +' '+ this.lastName;\n        }\n      },\n});\n```\n說明：你可以試著更動`fullName`欄位，這時你會發現`firstName`跟`lastName`這兩個欄位值並不會更動，這時候你可能會好奇我們不是用v-model綁定實體內資料了嗎？為何畫面資料沒有進行更動呢？\n並且跳出下面圖片錯誤\n![](https://i.imgur.com/0oBItbW.png)\n> 原因：就是因為Computed預設為一個唯獨屬性（僅有getter）\n\n如果我們想要針對Computed運算出來的結果進行更動的話，我們可以將上面範例加入`setter屬性`，改寫範例如下：\n[連結](https://codepen.io/chunwen/pen/ExYJgPJ?editors=1011)\nHTML部分\n```html\n<div id=\"app\">\n    <div>firstName: <input v-model=\"firstName\" type=\"text\"></div>\n    <div>lastName: <input v-model=\"lastName\" type=\"text\"></div>\n    <div>fullName: <input type=\"text\" v-model=\"fullName\"></div>\n</div>\n```\nJS部分\n```javascript\n   computed:{\n        fullName:{\n        //getter\n        get(){\n          return this.firstName +' '+ this.lastName;\n        },\n        //setter\n        set(val){\n          console.log(val)  //觀察更新數值\n          var name = val.split(' '); //將數值切分成兩部分\n          this.firstName=name[0];\n          this.lastName=name[1];          \n        }\n        }\n      },\n```\n這時我們Computed出來的資料就可以進行變動摟～","slug":"2019-09-26-Vue computed 屬性介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2n0020zqzi9cr12v38","content":"<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10218592\">Vue.js Core 30天屠龍記(第5天)</a><br><a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\">官網計算屬性和偵聽器介紹</a></p>\n<span id=\"more\"></span>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>開始前，我們先幫大家複習一下，這幾天介紹的內容（如下圖），若對於指令語法仍有疑問。大家可以自行到官網參考指令介紹喔！<a href=\"https://cn.vuejs.org/v2/api/index.html#%E6%8C%87%E4%BB%A4\">連結提供</a><br><img src=\"https://i.imgur.com/q51LoQ1.png\" alt=\"\"></p>\n<hr>\n<p>開始今天主題介紹前，還記得我們在之文章說過<code>Vue的Mustache語法嗎？</code>若還不太清楚可以參考這篇文章<a href=\"https://ithelp.ithome.com.tw/articles/10218592\">Day5 Vue模板語法、V-text、V-html、V-once介紹</a></p>\n<h3 id=\"Mustache語法\"><a href=\"#Mustache語法\" class=\"headerlink\" title=\"Mustache語法\"></a>Mustache語法</h3><p>簡述：我們可以在HTML上撰寫兩個大括號，就可以很方便的將<code>實體內資料</code>綁定到畫面上。但是 <code>Mustache語法本質上是用於簡單運算。</code></p>\n<p>我們若遇到需要較為複雜的邏輯運算時候，這時候又全都寫在HTML上，便會造成程式難以閱讀和管理。<br>官網範例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，為了解決複雜的邏輯運算問題，我們需要使用<code>computed屬性</code>來幫我們解決問題！</p>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>用途：主要用來處理複雜邏輯運算。如：資料計算<br>寫法：<code>&#123; [key: string]: Function | &#123; get: Function, set: Function &#125; &#125;</code><br>寫法範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>特性：<br>1.computed 底下宣告的方法必須是function，且會<code>return</code>一個值。<br>2.computed沒有參數可以帶，預設為一個唯獨屬性（預設僅有getter）</p>\n<p>範例：<br><a href=\"https://jsbin.com/xeselayajo/3/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Hello chunwen!&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a computed getter</span></span><br><span class=\"line\">        reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// `this` points to the vm instance</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Computed屬性：getter-讀取-、setter-寫入\"><a href=\"#Computed屬性：getter-讀取-、setter-寫入\" class=\"headerlink\" title=\"Computed屬性：getter(讀取)、setter(寫入)\"></a>Computed屬性：getter(讀取)、setter(寫入)</h3><p>上面特性有提到，<code>computed</code>屬性中預設為<code>getter(讀取)</code>，但如果我們今天想要針對Computed運算出來的結果進行更動的話，該怎麼處理呢？<br>我們先來看原始範例（沒有setter）：<br><a href=\"https://codepen.io/chunwen/pen/WNeWxPO?editors=1011\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>firstName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>lastName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>fullName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;fullName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">fullName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName +<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>說明：你可以試著更動<code>fullName</code>欄位，這時你會發現<code>firstName</code>跟<code>lastName</code>這兩個欄位值並不會更動，這時候你可能會好奇我們不是用v-model綁定實體內資料了嗎？為何畫面資料沒有進行更動呢？<br>並且跳出下面圖片錯誤<br><img src=\"https://i.imgur.com/0oBItbW.png\" alt=\"\"></p>\n<blockquote>\n<p>原因：就是因為Computed預設為一個唯獨屬性（僅有getter）</p>\n</blockquote>\n<p>如果我們想要針對Computed運算出來的結果進行更動的話，我們可以將上面範例加入<code>setter屬性</code>，改寫範例如下：<br><a href=\"https://codepen.io/chunwen/pen/ExYJgPJ?editors=1011\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>firstName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>lastName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>fullName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;fullName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">     fullName:&#123;</span><br><span class=\"line\">     <span class=\"comment\">//getter</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName +<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"comment\">//setter</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//觀察更新數值</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> name = val.split(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">//將數值切分成兩部分</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.firstName=name[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.lastName=name[<span class=\"number\">1</span>];          </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>這時我們Computed出來的資料就可以進行變動摟～</p>\n","site":{"data":{}},"length":2944,"excerpt":"<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10218592\">Vue.js Core 30天屠龍記(第5天)</a><br><a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8\">官網計算屬性和偵聽器介紹</a></p>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>開始前，我們先幫大家複習一下，這幾天介紹的內容（如下圖），若對於指令語法仍有疑問。大家可以自行到官網參考指令介紹喔！<a href=\"https://cn.vuejs.org/v2/api/index.html#%E6%8C%87%E4%BB%A4\">連結提供</a><br><img src=\"https://i.imgur.com/q51LoQ1.png\" alt=\"\"></p>\n<hr>\n<p>開始今天主題介紹前，還記得我們在之文章說過<code>Vue的Mustache語法嗎？</code>若還不太清楚可以參考這篇文章<a href=\"https://ithelp.ithome.com.tw/articles/10218592\">Day5 Vue模板語法、V-text、V-html、V-once介紹</a></p>\n<h3 id=\"Mustache語法\"><a href=\"#Mustache語法\" class=\"headerlink\" title=\"Mustache語法\"></a>Mustache語法</h3><p>簡述：我們可以在HTML上撰寫兩個大括號，就可以很方便的將<code>實體內資料</code>綁定到畫面上。但是 <code>Mustache語法本質上是用於簡單運算。</code></p>\n<p>我們若遇到需要較為複雜的邏輯運算時候，這時候又全都寫在HTML上，便會造成程式難以閱讀和管理。<br>官網範例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;example&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，為了解決複雜的邏輯運算問題，我們需要使用<code>computed屬性</code>來幫我們解決問題！</p>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a>Computed</h3><p>用途：主要用來處理複雜邏輯運算。如：資料計算<br>寫法：<code>&#123; [key: string]: Function | &#123; get: Function, set: Function &#125; &#125;</code><br>寫法範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>特性：<br>1.computed 底下宣告的方法必須是function，且會<code>return</code>一個值。<br>2.computed沒有參數可以帶，預設為一個唯獨屬性（預設僅有getter）</p>\n<p>範例：<br><a href=\"https://jsbin.com/xeselayajo/3/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;Hello chunwen!&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a computed getter</span></span><br><span class=\"line\">        reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// `this` points to the vm instance</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Computed屬性：getter-讀取-、setter-寫入\"><a href=\"#Computed屬性：getter-讀取-、setter-寫入\" class=\"headerlink\" title=\"Computed屬性：getter(讀取)、setter(寫入)\"></a>Computed屬性：getter(讀取)、setter(寫入)</h3><p>上面特性有提到，<code>computed</code>屬性中預設為<code>getter(讀取)</code>，但如果我們今天想要針對Computed運算出來的結果進行更動的話，該怎麼處理呢？<br>我們先來看原始範例（沒有setter）：<br><a href=\"https://codepen.io/chunwen/pen/WNeWxPO?editors=1011\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>firstName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>lastName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>fullName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;fullName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">fullName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName +<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>說明：你可以試著更動<code>fullName</code>欄位，這時你會發現<code>firstName</code>跟<code>lastName</code>這兩個欄位值並不會更動，這時候你可能會好奇我們不是用v-model綁定實體內資料了嗎？為何畫面資料沒有進行更動呢？<br>並且跳出下面圖片錯誤<br><img src=\"https://i.imgur.com/0oBItbW.png\" alt=\"\"></p>\n<blockquote>\n<p>原因：就是因為Computed預設為一個唯獨屬性（僅有getter）</p>\n</blockquote>\n<p>如果我們想要針對Computed運算出來的結果進行更動的話，我們可以將上面範例加入<code>setter屬性</code>，改寫範例如下：<br><a href=\"https://codepen.io/chunwen/pen/ExYJgPJ?editors=1011\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>firstName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>lastName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>fullName: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;fullName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JS部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">     fullName:&#123;</span><br><span class=\"line\">     <span class=\"comment\">//getter</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName +<span class=\"string\">&#x27; &#x27;</span>+ <span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"comment\">//setter</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(val)  <span class=\"comment\">//觀察更新數值</span></span><br><span class=\"line\">       <span class=\"keyword\">var</span> name = val.split(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">//將數值切分成兩部分</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.firstName=name[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.lastName=name[<span class=\"number\">1</span>];          </span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n<p>這時我們Computed出來的資料就可以進行變動摟～</p>"},{"title":"Vue watch介紹","abbrlink":4076647581,"date":"2019-09-27T14:36:32.000Z","_content":"\n參考資料\n[官網-計算屬性和偵聽器](https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7)\n[Summer-Vue.js: Watch](https://cythilya.github.io/2017/04/15/vue-watch/)\n[用範例理解 Vue.js #8：Watch vs Computed](https://ithelp.ithome.com.tw/articles/10192032)\n[Day12 vue.js - watch監聽屬性](https://ithelp.ithome.com.tw/articles/10215159)\n[Vue.js 09 - Watch](https://ithelp.ithome.com.tw/articles/10187420)\n\n<!-- more -->\n-----\n### Watch\n用途：主要是用來監聽實體內`特定的變數`產生變化時，就會執行某個動作。\n白話文：突然看到[Ralph](https://ithelp.ithome.com.tw/articles/10187420)在他大大的文章提到watch概念蠻好懂的，就引用過來\n> 我們希望變數改變時，也有人叫對應的處理器起床做事，這就是 Watch 的用途。\n\n寫法：`{ [key: string]: string | Function | Object | Array }`\n型別可以是陣列、物件、字串、函式  \n[官網資料](https://cn.vuejs.org/v2/api/#watch)\n\n#### 範例\n[連結](https://codepen.io/chunwen/pen/BaBEYGe?editors=1010)\nHTML部分\n```html\n  <div id=\"app\">\n    {{ fullName }}\n    <br>\n    <input type=\"text\" v-model=\"firstName\">\n    <br>\n    <input type=\"text\" v-model=\"lastName\">\n  </div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n        // 我們需要手動設定初始值\n        fullName: 'chunwen YU'\n      },\n      watch: {\n        // 參數可以自行命名（更新資料,原始資料）\n        firstName: function (newValue,rawValue) {\n          // console.log('資料:',newVal,rawValue)\n          this.fullName = `${newValue} ${this.lastName}`\n          console.log(this.fullName)\n        },\n        lastName: function (newValue) {\n          this.fullName = `${this.firstName} ${newValue}`\n        },\n      },\n    });\n```\n![圖片](https://ithelp.ithome.com.tw/upload/images/20190927/20114645EE9GrU4NLM.png)\n\n#### 範例2\n[練習連結](https://jsbin.com/siyucek/3/edit?html,js,output/)\n說明：引用[Summer部落格](https://cythilya.github.io/2017/04/15/vue-watch/)例子，當userName更動後，就會觸發check這個method\n```javascript\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    userName: '',\n    errMsg: ''\n  },\n  watch: {\n    //當userName更動後，就會觸發check這個method\n    userName: function(value) {\n      if(this.check(value)) {\n        this.errMsg = '使用者名稱開頭不可為數字。'\n      } else {\n        this.errMsg = '合法的使用者名稱。';\n      }\n    }\n  },\n  methods: {\n    check: function(name) {\n      return /^[0-9]/.test(name);\n    }\n  }\n});\n\n```\n圖示\n![](https://ithelp.ithome.com.tw/upload/images/20191003/20114645CsAe1rhJxr.png)\n\n### vm.$watch 與 immediate屬性\n上面範例中，如果我們要顯示`fullName`這個欄位值時，我們必須`先在實體內先給定一個初始值`。如此，才能在畫面一開始就看到`fullName`。\n\n但是，如果我們的`fullName`不設定初始值，並且希望一開始就可以顯示出`fullName`的話，我們可以在watch裡的firstName裡將immediate 設為 true，`讓監聽值在初始和值被改變時觸發 callback handler。`\n\n[練習連結](https://codepen.io/chunwen/pen/XWrQOvR)\nJavaScript部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n        // 將手動設定初始值拿掉\n        fullName: ''\n      },\n      watch: {\n      firstName:{\n      immediate: true,\n      handler(newVal,oldValue){\n        console.log(newVal)//chunwen\n        this.fullName=`${newVal} ${this.lastName}`\n      },\n    },\n        lastName: function (newValue) {\n          this.fullName = `${this.firstName} ${newValue}`\n        },\n      },\n    });\n```\n\n### deep屬性\nVue Watch預設不做深層檢查，當你需要監看的資料不在同一層時，我們可以將`deep屬性更改為true`。\n缺點：只要user中的資料變動，就會進行更動，如此一來非常耗能。\n[練習連結](https://codepen.io/chunwen/pen/aboxMwG)\nHTML部分\n```html\n <div id=\"app\">\n  {{ user.fullName }}\n  <br>\n  <input type=\"text\" v-model=\"user.firstName\">\n  <br>\n  <input type=\"text\" v-model=\"user.lastName\">\n</div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n  el: \"#app\",\n  data: {\n    user: {\n      firstName: \"chunwen\",\n      lastName: \"YU\",\n      fullName: \"chunwen YU\"\n    }\n  },\n  watch: {\n    user: {\n      handler(newVal, oldVal) {\n        console.log(\"user內的資料改變了\");\n      },\n      immediate: true,\n      deep: true\n    }\n  }\n});\n```","source":"_posts/2019-09-26-Vue watch介紹.md","raw":"---\ntitle: Vue watch介紹\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 4076647581\ndate: 2019-09-27 22:36:32\n---\n\n參考資料\n[官網-計算屬性和偵聽器](https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7)\n[Summer-Vue.js: Watch](https://cythilya.github.io/2017/04/15/vue-watch/)\n[用範例理解 Vue.js #8：Watch vs Computed](https://ithelp.ithome.com.tw/articles/10192032)\n[Day12 vue.js - watch監聽屬性](https://ithelp.ithome.com.tw/articles/10215159)\n[Vue.js 09 - Watch](https://ithelp.ithome.com.tw/articles/10187420)\n\n<!-- more -->\n-----\n### Watch\n用途：主要是用來監聽實體內`特定的變數`產生變化時，就會執行某個動作。\n白話文：突然看到[Ralph](https://ithelp.ithome.com.tw/articles/10187420)在他大大的文章提到watch概念蠻好懂的，就引用過來\n> 我們希望變數改變時，也有人叫對應的處理器起床做事，這就是 Watch 的用途。\n\n寫法：`{ [key: string]: string | Function | Object | Array }`\n型別可以是陣列、物件、字串、函式  \n[官網資料](https://cn.vuejs.org/v2/api/#watch)\n\n#### 範例\n[連結](https://codepen.io/chunwen/pen/BaBEYGe?editors=1010)\nHTML部分\n```html\n  <div id=\"app\">\n    {{ fullName }}\n    <br>\n    <input type=\"text\" v-model=\"firstName\">\n    <br>\n    <input type=\"text\" v-model=\"lastName\">\n  </div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n        // 我們需要手動設定初始值\n        fullName: 'chunwen YU'\n      },\n      watch: {\n        // 參數可以自行命名（更新資料,原始資料）\n        firstName: function (newValue,rawValue) {\n          // console.log('資料:',newVal,rawValue)\n          this.fullName = `${newValue} ${this.lastName}`\n          console.log(this.fullName)\n        },\n        lastName: function (newValue) {\n          this.fullName = `${this.firstName} ${newValue}`\n        },\n      },\n    });\n```\n![圖片](https://ithelp.ithome.com.tw/upload/images/20190927/20114645EE9GrU4NLM.png)\n\n#### 範例2\n[練習連結](https://jsbin.com/siyucek/3/edit?html,js,output/)\n說明：引用[Summer部落格](https://cythilya.github.io/2017/04/15/vue-watch/)例子，當userName更動後，就會觸發check這個method\n```javascript\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    userName: '',\n    errMsg: ''\n  },\n  watch: {\n    //當userName更動後，就會觸發check這個method\n    userName: function(value) {\n      if(this.check(value)) {\n        this.errMsg = '使用者名稱開頭不可為數字。'\n      } else {\n        this.errMsg = '合法的使用者名稱。';\n      }\n    }\n  },\n  methods: {\n    check: function(name) {\n      return /^[0-9]/.test(name);\n    }\n  }\n});\n\n```\n圖示\n![](https://ithelp.ithome.com.tw/upload/images/20191003/20114645CsAe1rhJxr.png)\n\n### vm.$watch 與 immediate屬性\n上面範例中，如果我們要顯示`fullName`這個欄位值時，我們必須`先在實體內先給定一個初始值`。如此，才能在畫面一開始就看到`fullName`。\n\n但是，如果我們的`fullName`不設定初始值，並且希望一開始就可以顯示出`fullName`的話，我們可以在watch裡的firstName裡將immediate 設為 true，`讓監聽值在初始和值被改變時觸發 callback handler。`\n\n[練習連結](https://codepen.io/chunwen/pen/XWrQOvR)\nJavaScript部分\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n        // 將手動設定初始值拿掉\n        fullName: ''\n      },\n      watch: {\n      firstName:{\n      immediate: true,\n      handler(newVal,oldValue){\n        console.log(newVal)//chunwen\n        this.fullName=`${newVal} ${this.lastName}`\n      },\n    },\n        lastName: function (newValue) {\n          this.fullName = `${this.firstName} ${newValue}`\n        },\n      },\n    });\n```\n\n### deep屬性\nVue Watch預設不做深層檢查，當你需要監看的資料不在同一層時，我們可以將`deep屬性更改為true`。\n缺點：只要user中的資料變動，就會進行更動，如此一來非常耗能。\n[練習連結](https://codepen.io/chunwen/pen/aboxMwG)\nHTML部分\n```html\n <div id=\"app\">\n  {{ user.fullName }}\n  <br>\n  <input type=\"text\" v-model=\"user.firstName\">\n  <br>\n  <input type=\"text\" v-model=\"user.lastName\">\n</div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n  el: \"#app\",\n  data: {\n    user: {\n      firstName: \"chunwen\",\n      lastName: \"YU\",\n      fullName: \"chunwen YU\"\n    }\n  },\n  watch: {\n    user: {\n      handler(newVal, oldVal) {\n        console.log(\"user內的資料改變了\");\n      },\n      immediate: true,\n      deep: true\n    }\n  }\n});\n```","slug":"2019-09-26-Vue watch介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2o0023zqziekskfnd9","content":"<p>參考資料<br><a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7\">官網-計算屬性和偵聽器</a><br><a href=\"https://cythilya.github.io/2017/04/15/vue-watch/\">Summer-Vue.js: Watch</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10192032\">用範例理解 Vue.js #8：Watch vs Computed</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10215159\">Day12 vue.js - watch監聽屬性</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10187420\">Vue.js 09 - Watch</a></p>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"Watch\"><a href=\"#Watch\" class=\"headerlink\" title=\"Watch\"></a>Watch</h3><p>用途：主要是用來監聽實體內<code>特定的變數</code>產生變化時，就會執行某個動作。<br>白話文：突然看到<a href=\"https://ithelp.ithome.com.tw/articles/10187420\">Ralph</a>在他大大的文章提到watch概念蠻好懂的，就引用過來</p>\n<blockquote>\n<p>我們希望變數改變時，也有人叫對應的處理器起床做事，這就是 Watch 的用途。</p>\n</blockquote>\n<p>寫法：<code>&#123; [key: string]: string | Function | Object | Array &#125;</code><br>型別可以是陣列、物件、字串、函式<br><a href=\"https://cn.vuejs.org/v2/api/#watch\">官網資料</a></p>\n<h4 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h4><p><a href=\"https://codepen.io/chunwen/pen/BaBEYGe?editors=1010\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; fullName &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 我們需要手動設定初始值</span></span><br><span class=\"line\">        fullName: <span class=\"string\">&#x27;chunwen YU&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 參數可以自行命名（更新資料,原始資料）</span></span><br><span class=\"line\">        firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue,rawValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log(&#x27;資料:&#x27;,newVal,rawValue)</span></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;newValue&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.fullName)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;newValue&#125;</span>`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20190927/20114645EE9GrU4NLM.png\" alt=\"圖片\"></p>\n<h4 id=\"範例2\"><a href=\"#範例2\" class=\"headerlink\" title=\"範例2\"></a>範例2</h4><p><a href=\"https://jsbin.com/siyucek/3/edit?html,js,output/\">練習連結</a><br>說明：引用<a href=\"https://cythilya.github.io/2017/04/15/vue-watch/\">Summer部落格</a>例子，當userName更動後，就會觸發check這個method</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    userName: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    errMsg: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//當userName更動後，就會觸發check這個method</span></span><br><span class=\"line\">    userName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.check(value)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.errMsg = <span class=\"string\">&#x27;使用者名稱開頭不可為數字。&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.errMsg = <span class=\"string\">&#x27;合法的使用者名稱。&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    check: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/^[0-9]/</span>.test(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>圖示<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191003/20114645CsAe1rhJxr.png\" alt=\"\"></p>\n<h3 id=\"vm-watch-與-immediate屬性\"><a href=\"#vm-watch-與-immediate屬性\" class=\"headerlink\" title=\"vm.$watch 與 immediate屬性\"></a>vm.$watch 與 immediate屬性</h3><p>上面範例中，如果我們要顯示<code>fullName</code>這個欄位值時，我們必須<code>先在實體內先給定一個初始值</code>。如此，才能在畫面一開始就看到<code>fullName</code>。</p>\n<p>但是，如果我們的<code>fullName</code>不設定初始值，並且希望一開始就可以顯示出<code>fullName</code>的話，我們可以在watch裡的firstName裡將immediate 設為 true，<code>讓監聽值在初始和值被改變時觸發 callback handler。</code></p>\n<p><a href=\"https://codepen.io/chunwen/pen/XWrQOvR\">練習連結</a><br>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 將手動設定初始值拿掉</span></span><br><span class=\"line\">        fullName: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">      firstName:&#123;</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal,oldValue</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(newVal)<span class=\"comment\">//chunwen</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fullName=<span class=\"string\">`<span class=\"subst\">$&#123;newVal&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;newValue&#125;</span>`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep屬性\"><a href=\"#deep屬性\" class=\"headerlink\" title=\"deep屬性\"></a>deep屬性</h3><p>Vue Watch預設不做深層檢查，當你需要監看的資料不在同一層時，我們可以將<code>deep屬性更改為true</code>。<br>缺點：只要user中的資料變動，就會進行更動，如此一來非常耗能。<br><a href=\"https://codepen.io/chunwen/pen/aboxMwG\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; user.fullName &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;user.firstName&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;user.lastName&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">      firstName: <span class=\"string\">&quot;chunwen&quot;</span>,</span><br><span class=\"line\">      lastName: <span class=\"string\">&quot;YU&quot;</span>,</span><br><span class=\"line\">      fullName: <span class=\"string\">&quot;chunwen YU&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal, oldVal</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;user內的資料改變了&quot;</span>);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2914,"excerpt":"<p>參考資料<br><a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7\">官網-計算屬性和偵聽器</a><br><a href=\"https://cythilya.github.io/2017/04/15/vue-watch/\">Summer-Vue.js: Watch</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10192032\">用範例理解 Vue.js #8：Watch vs Computed</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10215159\">Day12 vue.js - watch監聽屬性</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10187420\">Vue.js 09 - Watch</a></p>","more":"<hr>\n<h3 id=\"Watch\"><a href=\"#Watch\" class=\"headerlink\" title=\"Watch\"></a>Watch</h3><p>用途：主要是用來監聽實體內<code>特定的變數</code>產生變化時，就會執行某個動作。<br>白話文：突然看到<a href=\"https://ithelp.ithome.com.tw/articles/10187420\">Ralph</a>在他大大的文章提到watch概念蠻好懂的，就引用過來</p>\n<blockquote>\n<p>我們希望變數改變時，也有人叫對應的處理器起床做事，這就是 Watch 的用途。</p>\n</blockquote>\n<p>寫法：<code>&#123; [key: string]: string | Function | Object | Array &#125;</code><br>型別可以是陣列、物件、字串、函式<br><a href=\"https://cn.vuejs.org/v2/api/#watch\">官網資料</a></p>\n<h4 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h4><p><a href=\"https://codepen.io/chunwen/pen/BaBEYGe?editors=1010\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; fullName &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 我們需要手動設定初始值</span></span><br><span class=\"line\">        fullName: <span class=\"string\">&#x27;chunwen YU&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 參數可以自行命名（更新資料,原始資料）</span></span><br><span class=\"line\">        firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue,rawValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log(&#x27;資料:&#x27;,newVal,rawValue)</span></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;newValue&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.fullName)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;newValue&#125;</span>`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20190927/20114645EE9GrU4NLM.png\" alt=\"圖片\"></p>\n<h4 id=\"範例2\"><a href=\"#範例2\" class=\"headerlink\" title=\"範例2\"></a>範例2</h4><p><a href=\"https://jsbin.com/siyucek/3/edit?html,js,output/\">練習連結</a><br>說明：引用<a href=\"https://cythilya.github.io/2017/04/15/vue-watch/\">Summer部落格</a>例子，當userName更動後，就會觸發check這個method</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    userName: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    errMsg: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//當userName更動後，就會觸發check這個method</span></span><br><span class=\"line\">    userName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.check(value)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.errMsg = <span class=\"string\">&#x27;使用者名稱開頭不可為數字。&#x27;</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.errMsg = <span class=\"string\">&#x27;合法的使用者名稱。&#x27;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    check: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"regexp\">/^[0-9]/</span>.test(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>圖示<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191003/20114645CsAe1rhJxr.png\" alt=\"\"></p>\n<h3 id=\"vm-watch-與-immediate屬性\"><a href=\"#vm-watch-與-immediate屬性\" class=\"headerlink\" title=\"vm.$watch 與 immediate屬性\"></a>vm.$watch 與 immediate屬性</h3><p>上面範例中，如果我們要顯示<code>fullName</code>這個欄位值時，我們必須<code>先在實體內先給定一個初始值</code>。如此，才能在畫面一開始就看到<code>fullName</code>。</p>\n<p>但是，如果我們的<code>fullName</code>不設定初始值，並且希望一開始就可以顯示出<code>fullName</code>的話，我們可以在watch裡的firstName裡將immediate 設為 true，<code>讓監聽值在初始和值被改變時觸發 callback handler。</code></p>\n<p><a href=\"https://codepen.io/chunwen/pen/XWrQOvR\">練習連結</a><br>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 將手動設定初始值拿掉</span></span><br><span class=\"line\">        fullName: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">      firstName:&#123;</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal,oldValue</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(newVal)<span class=\"comment\">//chunwen</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fullName=<span class=\"string\">`<span class=\"subst\">$&#123;newVal&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;newValue&#125;</span>`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"deep屬性\"><a href=\"#deep屬性\" class=\"headerlink\" title=\"deep屬性\"></a>deep屬性</h3><p>Vue Watch預設不做深層檢查，當你需要監看的資料不在同一層時，我們可以將<code>deep屬性更改為true</code>。<br>缺點：只要user中的資料變動，就會進行更動，如此一來非常耗能。<br><a href=\"https://codepen.io/chunwen/pen/aboxMwG\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; user.fullName &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;user.firstName&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;user.lastName&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">      firstName: <span class=\"string\">&quot;chunwen&quot;</span>,</span><br><span class=\"line\">      lastName: <span class=\"string\">&quot;YU&quot;</span>,</span><br><span class=\"line\">      fullName: <span class=\"string\">&quot;chunwen YU&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">handler</span>(<span class=\"params\">newVal, oldVal</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;user內的資料改變了&quot;</span>);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      immediate: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      deep: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Vue computed VS watch VS method","abbrlink":473648596,"date":"2019-09-28T02:22:04.000Z","_content":"參考資料\n1.[用範例理解 Vue.js #6：Computed vs Methods](https://ithelp.ithome.com.tw/articles/10191808)\n2.[計算屬性緩存vs 方法](https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95)\n<!-- more -->\n-----\n### 第一部分：computed VS watch\nOK，我們首先簡單複習一下，這兩者的特性。\nComputed:適合用來處理複雜邏輯運算。\nWatch:會去監聽特定變數，當變數產生變動時，就會執行某個動作。\n範例：\nHTML部分\n```html\n    <div id=\"app\">\n    {{ fullName }}\n    <br>\n    <input type=\"text\" v-model=\"firstName\">\n    <br>\n    <input type=\"text\" v-model=\"lastName\">\n  </div>\n```\nJavaScript寫法一(使用Watch)\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n        // 我們需要手動設定初始值\n        fullName: 'chunwen YU'\n      },\n      watch: {\n        // 參數可以自行命名（更新資料,原始資料）\n        firstName: function (newValue,rawValue) {\n          // console.log('資料:',newVal,rawValue)\n          this.fullName = `${newValue} ${this.lastName}`\n          console.log(this.fullName)\n        },\n        lastName: function (newValue) {\n          this.fullName = `${this.firstName} ${newValue}`\n        },\n      },\n    });\n```\nJavaScript寫法二(使用Computed)\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n      },\n      computed:{\n        fullName(){\n           return `${this.firstName} ${this.lastName}`\n        }\n      }\n    });\n```\n#### 小總結\n1.我們可以發現使用Computed寫法時，並不需要在`data預先定義好fullName的資料初始值`\n2.相對watch而言，computed寫法更為簡便\n#### 使用時機\n1.`watch`適合用來觀察資料變動\n2.如果你的某個變數是依賴其他變數⽽來（如範例：fullName會觀察firstName與LastName），這時候就適合使用`computed`\n\n\n-----\n\n\n### 第二部分 computed VS methods()差異\n開始前，簡單複習一下methods()特性\n會與`v-on`一起使用：主要目的：用來定義內部資料使用的函式方法\n範例： [練習連結](https://jsbin.com/sajemotici/1/edit?html,js,console,output)\nHTML部分\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <div>reversedMessage: {{ reversedMessage }}</div>\n    <div>reversedMessage: {{ reversedMessage }}</div>\n    <div>reversedMessage: {{ reversedMessage }}</div>\n   \n    <hr>\n    <div>reversedMessage_method(): {{ reversedMessage_method() }}</div>\n    <div>reversedMessage_method(): {{ reversedMessage_method() }}</div>\n    <div>reversedMessage_method(): {{ reversedMessage_method() }}</div>\n  </div>\n```\nJavaScript部分\n```javascript\n var vm = new Vue({\n      el: '#app',\n      data: {\n        message: 'Hello 5xRuby!'\n      },\n      methods: {\n        reversedMessage_method:function() {\n          console.log('methods');\n          return this.message.split('').reverse().join('');\n        }\n      },\n      computed: {\n        reversedMessage: function () {\n          console.log('computed');\n          return this.message.split('').reverse().join('');\n        }\n      }\n    });\n```\n執行結果如下\n![](https://ithelp.ithome.com.tw/upload/images/20190928/20114645QxxRA0Yrjt.png)\n#### 小結論\n我們從圖片中觀看這兩者運行結果，的確一樣。但是，我們打開console.log後，就可以發現只要資料一進行跟動methods()就會執行一次，但computed卻不會。`這也就是為何我們要HTML要寫三次的原因`~~(Kuro老師說重要的事情要講三次XD)~~\n\n> 1.computed會將data中的資料進行cache緩存，當資料變動時候再一起更動\n> 2.Method則會在data改變時候，直接進行更動。缺點：需要耗費較高效能\n\n### 總結：methods、computed、watch使用時機\n1.methods: 這是需要主動觸發，且可以多次重複觸發\n2.Computed: 當資料需要複雜運算時\n3.Watch: 監控特定資料變化的 function 就放這裡\n\n","source":"_posts/2019-09-28-computed VS watch VS method.md","raw":"---\ntitle: Vue computed VS watch VS method\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 473648596\ndate: 2019-09-28 10:22:04\n---\n參考資料\n1.[用範例理解 Vue.js #6：Computed vs Methods](https://ithelp.ithome.com.tw/articles/10191808)\n2.[計算屬性緩存vs 方法](https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95)\n<!-- more -->\n-----\n### 第一部分：computed VS watch\nOK，我們首先簡單複習一下，這兩者的特性。\nComputed:適合用來處理複雜邏輯運算。\nWatch:會去監聽特定變數，當變數產生變動時，就會執行某個動作。\n範例：\nHTML部分\n```html\n    <div id=\"app\">\n    {{ fullName }}\n    <br>\n    <input type=\"text\" v-model=\"firstName\">\n    <br>\n    <input type=\"text\" v-model=\"lastName\">\n  </div>\n```\nJavaScript寫法一(使用Watch)\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n        // 我們需要手動設定初始值\n        fullName: 'chunwen YU'\n      },\n      watch: {\n        // 參數可以自行命名（更新資料,原始資料）\n        firstName: function (newValue,rawValue) {\n          // console.log('資料:',newVal,rawValue)\n          this.fullName = `${newValue} ${this.lastName}`\n          console.log(this.fullName)\n        },\n        lastName: function (newValue) {\n          this.fullName = `${this.firstName} ${newValue}`\n        },\n      },\n    });\n```\nJavaScript寫法二(使用Computed)\n```javascript\nvar vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'chunwen',\n        lastName: 'YU',\n      },\n      computed:{\n        fullName(){\n           return `${this.firstName} ${this.lastName}`\n        }\n      }\n    });\n```\n#### 小總結\n1.我們可以發現使用Computed寫法時，並不需要在`data預先定義好fullName的資料初始值`\n2.相對watch而言，computed寫法更為簡便\n#### 使用時機\n1.`watch`適合用來觀察資料變動\n2.如果你的某個變數是依賴其他變數⽽來（如範例：fullName會觀察firstName與LastName），這時候就適合使用`computed`\n\n\n-----\n\n\n### 第二部分 computed VS methods()差異\n開始前，簡單複習一下methods()特性\n會與`v-on`一起使用：主要目的：用來定義內部資料使用的函式方法\n範例： [練習連結](https://jsbin.com/sajemotici/1/edit?html,js,console,output)\nHTML部分\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <div>reversedMessage: {{ reversedMessage }}</div>\n    <div>reversedMessage: {{ reversedMessage }}</div>\n    <div>reversedMessage: {{ reversedMessage }}</div>\n   \n    <hr>\n    <div>reversedMessage_method(): {{ reversedMessage_method() }}</div>\n    <div>reversedMessage_method(): {{ reversedMessage_method() }}</div>\n    <div>reversedMessage_method(): {{ reversedMessage_method() }}</div>\n  </div>\n```\nJavaScript部分\n```javascript\n var vm = new Vue({\n      el: '#app',\n      data: {\n        message: 'Hello 5xRuby!'\n      },\n      methods: {\n        reversedMessage_method:function() {\n          console.log('methods');\n          return this.message.split('').reverse().join('');\n        }\n      },\n      computed: {\n        reversedMessage: function () {\n          console.log('computed');\n          return this.message.split('').reverse().join('');\n        }\n      }\n    });\n```\n執行結果如下\n![](https://ithelp.ithome.com.tw/upload/images/20190928/20114645QxxRA0Yrjt.png)\n#### 小結論\n我們從圖片中觀看這兩者運行結果，的確一樣。但是，我們打開console.log後，就可以發現只要資料一進行跟動methods()就會執行一次，但computed卻不會。`這也就是為何我們要HTML要寫三次的原因`~~(Kuro老師說重要的事情要講三次XD)~~\n\n> 1.computed會將data中的資料進行cache緩存，當資料變動時候再一起更動\n> 2.Method則會在data改變時候，直接進行更動。缺點：需要耗費較高效能\n\n### 總結：methods、computed、watch使用時機\n1.methods: 這是需要主動觸發，且可以多次重複觸發\n2.Computed: 當資料需要複雜運算時\n3.Watch: 監控特定資料變化的 function 就放這裡\n\n","slug":"2019-09-28-computed VS watch VS method","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2p0027zqzif31r7682","content":"<p>參考資料<br>1.<a href=\"https://ithelp.ithome.com.tw/articles/10191808\">用範例理解 Vue.js #6：Computed vs Methods</a><br>2.<a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95\">計算屬性緩存vs 方法</a></p>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"第一部分：computed-VS-watch\"><a href=\"#第一部分：computed-VS-watch\" class=\"headerlink\" title=\"第一部分：computed VS watch\"></a>第一部分：computed VS watch</h3><p>OK，我們首先簡單複習一下，這兩者的特性。<br>Computed:適合用來處理複雜邏輯運算。<br>Watch:會去監聽特定變數，當變數產生變動時，就會執行某個動作。<br>範例：<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; fullName &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript寫法一(使用Watch)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 我們需要手動設定初始值</span></span><br><span class=\"line\">        fullName: <span class=\"string\">&#x27;chunwen YU&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 參數可以自行命名（更新資料,原始資料）</span></span><br><span class=\"line\">        firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue,rawValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log(&#x27;資料:&#x27;,newVal,rawValue)</span></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;newValue&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.fullName)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;newValue&#125;</span>`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>JavaScript寫法二(使用Computed)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">fullName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"小總結\"><a href=\"#小總結\" class=\"headerlink\" title=\"小總結\"></a>小總結</h4><p>1.我們可以發現使用Computed寫法時，並不需要在<code>data預先定義好fullName的資料初始值</code><br>2.相對watch而言，computed寫法更為簡便</p>\n<h4 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h4><p>1.<code>watch</code>適合用來觀察資料變動<br>2.如果你的某個變數是依賴其他變數⽽來（如範例：fullName會觀察firstName與LastName），這時候就適合使用<code>computed</code></p>\n<hr>\n<h3 id=\"第二部分-computed-VS-methods-差異\"><a href=\"#第二部分-computed-VS-methods-差異\" class=\"headerlink\" title=\"第二部分 computed VS methods()差異\"></a>第二部分 computed VS methods()差異</h3><p>開始前，簡單複習一下methods()特性<br>會與<code>v-on</code>一起使用：主要目的：用來定義內部資料使用的函式方法<br>範例： <a href=\"https://jsbin.com/sajemotici/1/edit?html,js,console,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage: &#123;&#123; reversedMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage: &#123;&#123; reversedMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage: &#123;&#123; reversedMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage_method(): &#123;&#123; reversedMessage_method() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage_method(): &#123;&#123; reversedMessage_method() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage_method(): &#123;&#123; reversedMessage_method() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       message: <span class=\"string\">&#x27;Hello 5xRuby!&#x27;</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\">       reversedMessage_method:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;methods&#x27;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     computed: &#123;</span><br><span class=\"line\">       reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;computed&#x27;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>執行結果如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20190928/20114645QxxRA0Yrjt.png\" alt=\"\"></p>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>我們從圖片中觀看這兩者運行結果，的確一樣。但是，我們打開console.log後，就可以發現只要資料一進行跟動methods()就會執行一次，但computed卻不會。<code>這也就是為何我們要HTML要寫三次的原因</code><del>(Kuro老師說重要的事情要講三次XD)</del></p>\n<blockquote>\n<p>1.computed會將data中的資料進行cache緩存，當資料變動時候再一起更動<br>2.Method則會在data改變時候，直接進行更動。缺點：需要耗費較高效能</p>\n</blockquote>\n<h3 id=\"總結：methods、computed、watch使用時機\"><a href=\"#總結：methods、computed、watch使用時機\" class=\"headerlink\" title=\"總結：methods、computed、watch使用時機\"></a>總結：methods、computed、watch使用時機</h3><p>1.methods: 這是需要主動觸發，且可以多次重複觸發<br>2.Computed: 當資料需要複雜運算時<br>3.Watch: 監控特定資料變化的 function 就放這裡</p>\n","site":{"data":{}},"length":2878,"excerpt":"<p>參考資料<br>1.<a href=\"https://ithelp.ithome.com.tw/articles/10191808\">用範例理解 Vue.js #6：Computed vs Methods</a><br>2.<a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95\">計算屬性緩存vs 方法</a></p>","more":"<hr>\n<h3 id=\"第一部分：computed-VS-watch\"><a href=\"#第一部分：computed-VS-watch\" class=\"headerlink\" title=\"第一部分：computed VS watch\"></a>第一部分：computed VS watch</h3><p>OK，我們首先簡單複習一下，這兩者的特性。<br>Computed:適合用來處理複雜邏輯運算。<br>Watch:會去監聽特定變數，當變數產生變動時，就會執行某個動作。<br>範例：<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; fullName &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript寫法一(使用Watch)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 我們需要手動設定初始值</span></span><br><span class=\"line\">        fullName: <span class=\"string\">&#x27;chunwen YU&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      watch: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 參數可以自行命名（更新資料,原始資料）</span></span><br><span class=\"line\">        firstName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue,rawValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// console.log(&#x27;資料:&#x27;,newVal,rawValue)</span></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;newValue&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.fullName)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        lastName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.fullName = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;newValue&#125;</span>`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>JavaScript寫法二(使用Computed)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;chunwen&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;YU&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">fullName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.firstName&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.lastName&#125;</span>`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"小總結\"><a href=\"#小總結\" class=\"headerlink\" title=\"小總結\"></a>小總結</h4><p>1.我們可以發現使用Computed寫法時，並不需要在<code>data預先定義好fullName的資料初始值</code><br>2.相對watch而言，computed寫法更為簡便</p>\n<h4 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h4><p>1.<code>watch</code>適合用來觀察資料變動<br>2.如果你的某個變數是依賴其他變數⽽來（如範例：fullName會觀察firstName與LastName），這時候就適合使用<code>computed</code></p>\n<hr>\n<h3 id=\"第二部分-computed-VS-methods-差異\"><a href=\"#第二部分-computed-VS-methods-差異\" class=\"headerlink\" title=\"第二部分 computed VS methods()差異\"></a>第二部分 computed VS methods()差異</h3><p>開始前，簡單複習一下methods()特性<br>會與<code>v-on</code>一起使用：主要目的：用來定義內部資料使用的函式方法<br>範例： <a href=\"https://jsbin.com/sajemotici/1/edit?html,js,console,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage: &#123;&#123; reversedMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage: &#123;&#123; reversedMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage: &#123;&#123; reversedMessage &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage_method(): &#123;&#123; reversedMessage_method() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage_method(): &#123;&#123; reversedMessage_method() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>reversedMessage_method(): &#123;&#123; reversedMessage_method() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       message: <span class=\"string\">&#x27;Hello 5xRuby!&#x27;</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     methods: &#123;</span><br><span class=\"line\">       reversedMessage_method:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;methods&#x27;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     computed: &#123;</span><br><span class=\"line\">       reversedMessage: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;computed&#x27;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.message.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>執行結果如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20190928/20114645QxxRA0Yrjt.png\" alt=\"\"></p>\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>我們從圖片中觀看這兩者運行結果，的確一樣。但是，我們打開console.log後，就可以發現只要資料一進行跟動methods()就會執行一次，但computed卻不會。<code>這也就是為何我們要HTML要寫三次的原因</code><del>(Kuro老師說重要的事情要講三次XD)</del></p>\n<blockquote>\n<p>1.computed會將data中的資料進行cache緩存，當資料變動時候再一起更動<br>2.Method則會在data改變時候，直接進行更動。缺點：需要耗費較高效能</p>\n</blockquote>\n<h3 id=\"總結：methods、computed、watch使用時機\"><a href=\"#總結：methods、computed、watch使用時機\" class=\"headerlink\" title=\"總結：methods、computed、watch使用時機\"></a>總結：methods、computed、watch使用時機</h3><p>1.methods: 這是需要主動觸發，且可以多次重複觸發<br>2.Computed: 當資料需要複雜運算時<br>3.Watch: 監控特定資料變化的 function 就放這裡</p>"},{"title":"Vue filter介紹","abbrlink":3725962230,"date":"2019-09-29T03:46:42.000Z","_content":"參考資料:\n- [官網介紹](https://cn.vuejs.org/v2/guide/filters.html)\n- [Summer-Vue.js: Filter 過濾器](https://cythilya.github.io/2017/05/23/vue-filter/)\n- [Vue[25]-過濾器Filter](https://ithelp.ithome.com.tw/articles/10208812)\n- [用範例理解 Vue.js #7：Filters vs Computed](https://ithelp.ithome.com.tw/articles/10191948)\n<!-- more -->\n-----\n\n### Filter介紹\n目的：主要用在處理格式化文字（如：千分號：`$1,000`、英文大小寫轉換等狀況）\n綁定方式：使用雙大括號Mustache語法或是`V-bind表達式`（2.10版本後開始支持）\n示範：\n```html\n1.Mustache語法\n{{message | captialize}}\n\n2.v-bind\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n特性：\n1.使用`|`，pipe符號可以連結不同filter(數量不限)\n2.由左到右執行(順序將影響結果) \nEX: \n```javascript\n{{ message | captialize | dollarSign }}\n```\n註冊方式：分為區域註冊、全域註冊\n\n### 區域註冊\n[範例連結](https://jsfiddle.net/chunwen/40dj5w6k/12/)\nHTML部分\n```html\n<div id=\"app\">\n  <p>{{ price | currency | filterDollarSign }}</p>\n</div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n\tel: '#app',\n\tdata: {\n  \tprice: 199999\n  },\n  //轉為千分號\n  filters:{\n    currency(price){\n      return price.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n      /* return price.toLocaleString('en-US');  寫法二：轉為千分號*/ \n    },\n    //添加$字號\n    filterDollarSign(price){\n       return `$ ${price}`\n    }\n  }\n})\n```\n說明：\n區域註冊撰寫注意：filter`s`\n限制：僅存在Vue Instance中\n[轉為千分位公式](https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-currency-string-in-javascript)\n參數說明![](https://ithelp.ithome.com.tw/upload/images/20190929/20114645RO0kGI3OYm.png)\n\n\n-----\n\n\n### 全域註冊\n[範例連結](https://jsfiddle.net/chunwen/543dcz9j/12/)\nHTML部分\n```html\n<div id=\"app\">\n  <p>{{ price | currency | filterDollarSign }}</p>\n</div>\n```\nJavaScript部分\n```javascript\nVue.filter('currency',function(value){\n    return value.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n});\n\nVue.filter('filterDollarSign',function(value){\n    return `$ ${value}`\n});\n\nvar vm = new Vue({\n\tel: '#app',\n\tdata: {\n  \tprice: 199999\n  }\n})\n```\n\n### filter可以帶入參數\n[範例連結](https://jsfiddle.net/chunwen/e086j7vk/6/)\n因為filter是JS函式，所以可以帶入參數喔！\nHTML部分\n```html\n<div id=\"app\">\n  <p>{{ price | currency | filterDollarSign（priceStr）}}</p>\n</div>\n```\nJavaScript部分\n```javascript\nVue.filter('currency',function(val){\n    return val.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n});\n\nVue.filter('filterDollarSign',function(value,arg1){\n    return `${arg1} $ ${value}`\n});\n\nvar vm = new Vue({\n\tel: '#app',\n\tdata: {\n  \tprice: 199999,\n    priceStr:'this price is'\n  }\n})\n```\n說明：\nfilterDollarSign中`value`對應的是`price | currency`回傳的結果，`arg1`則對應`priceStr:'this price is'`這組字串\n\n### Filter、methods、computed差異\n1.Vue filter 與 methods 的最大差異在於 filter無法取得實體內的狀態。\n2.Filter適用於文字格式處理等簡單的狀況，而複雜的資料處理則適合使用 Computed。\n\n-----","source":"_posts/2019-09-29-filter介紹.md","raw":"---\ntitle: Vue filter介紹\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 3725962230\ndate: 2019-09-29 11:46:42\n---\n參考資料:\n- [官網介紹](https://cn.vuejs.org/v2/guide/filters.html)\n- [Summer-Vue.js: Filter 過濾器](https://cythilya.github.io/2017/05/23/vue-filter/)\n- [Vue[25]-過濾器Filter](https://ithelp.ithome.com.tw/articles/10208812)\n- [用範例理解 Vue.js #7：Filters vs Computed](https://ithelp.ithome.com.tw/articles/10191948)\n<!-- more -->\n-----\n\n### Filter介紹\n目的：主要用在處理格式化文字（如：千分號：`$1,000`、英文大小寫轉換等狀況）\n綁定方式：使用雙大括號Mustache語法或是`V-bind表達式`（2.10版本後開始支持）\n示範：\n```html\n1.Mustache語法\n{{message | captialize}}\n\n2.v-bind\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n特性：\n1.使用`|`，pipe符號可以連結不同filter(數量不限)\n2.由左到右執行(順序將影響結果) \nEX: \n```javascript\n{{ message | captialize | dollarSign }}\n```\n註冊方式：分為區域註冊、全域註冊\n\n### 區域註冊\n[範例連結](https://jsfiddle.net/chunwen/40dj5w6k/12/)\nHTML部分\n```html\n<div id=\"app\">\n  <p>{{ price | currency | filterDollarSign }}</p>\n</div>\n```\nJavaScript部分\n```javascript\nvar vm = new Vue({\n\tel: '#app',\n\tdata: {\n  \tprice: 199999\n  },\n  //轉為千分號\n  filters:{\n    currency(price){\n      return price.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n      /* return price.toLocaleString('en-US');  寫法二：轉為千分號*/ \n    },\n    //添加$字號\n    filterDollarSign(price){\n       return `$ ${price}`\n    }\n  }\n})\n```\n說明：\n區域註冊撰寫注意：filter`s`\n限制：僅存在Vue Instance中\n[轉為千分位公式](https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-currency-string-in-javascript)\n參數說明![](https://ithelp.ithome.com.tw/upload/images/20190929/20114645RO0kGI3OYm.png)\n\n\n-----\n\n\n### 全域註冊\n[範例連結](https://jsfiddle.net/chunwen/543dcz9j/12/)\nHTML部分\n```html\n<div id=\"app\">\n  <p>{{ price | currency | filterDollarSign }}</p>\n</div>\n```\nJavaScript部分\n```javascript\nVue.filter('currency',function(value){\n    return value.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n});\n\nVue.filter('filterDollarSign',function(value){\n    return `$ ${value}`\n});\n\nvar vm = new Vue({\n\tel: '#app',\n\tdata: {\n  \tprice: 199999\n  }\n})\n```\n\n### filter可以帶入參數\n[範例連結](https://jsfiddle.net/chunwen/e086j7vk/6/)\n因為filter是JS函式，所以可以帶入參數喔！\nHTML部分\n```html\n<div id=\"app\">\n  <p>{{ price | currency | filterDollarSign（priceStr）}}</p>\n</div>\n```\nJavaScript部分\n```javascript\nVue.filter('currency',function(val){\n    return val.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,')\n});\n\nVue.filter('filterDollarSign',function(value,arg1){\n    return `${arg1} $ ${value}`\n});\n\nvar vm = new Vue({\n\tel: '#app',\n\tdata: {\n  \tprice: 199999,\n    priceStr:'this price is'\n  }\n})\n```\n說明：\nfilterDollarSign中`value`對應的是`price | currency`回傳的結果，`arg1`則對應`priceStr:'this price is'`這組字串\n\n### Filter、methods、computed差異\n1.Vue filter 與 methods 的最大差異在於 filter無法取得實體內的狀態。\n2.Filter適用於文字格式處理等簡單的狀況，而複雜的資料處理則適合使用 Computed。\n\n-----","slug":"2019-09-29-filter介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2q002azqzi4a9694wb","content":"<p>參考資料:</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/filters.html\">官網介紹</a></li>\n<li><a href=\"https://cythilya.github.io/2017/05/23/vue-filter/\">Summer-Vue.js: Filter 過濾器</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208812\">Vue[25]-過濾器Filter</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10191948\">用範例理解 Vue.js #7：Filters vs Computed</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"Filter介紹\"><a href=\"#Filter介紹\" class=\"headerlink\" title=\"Filter介紹\"></a>Filter介紹</h3><p>目的：主要用在處理格式化文字（如：千分號：<code>$1,000</code>、英文大小寫轉換等狀況）<br>綁定方式：使用雙大括號Mustache語法或是<code>V-bind表達式</code>（2.10版本後開始支持）<br>示範：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Mustache語法</span><br><span class=\"line\">&#123;&#123;message | captialize&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2.v-bind</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;rawId | formatId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>特性：<br>1.使用<code>|</code>，pipe符號可以連結不同filter(數量不限)<br>2.由左到右執行(順序將影響結果)<br>EX: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; message | captialize | dollarSign &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>註冊方式：分為區域註冊、全域註冊</p>\n<h3 id=\"區域註冊\"><a href=\"#區域註冊\" class=\"headerlink\" title=\"區域註冊\"></a>區域註冊</h3><p><a href=\"https://jsfiddle.net/chunwen/40dj5w6k/12/\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; price | currency | filterDollarSign &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">  \tprice: <span class=\"number\">199999</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//轉為千分號</span></span><br><span class=\"line\">  filters:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">currency</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> price.toFixed(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/\\d(?=(\\d&#123;3&#125;)+\\.)/g</span>, <span class=\"string\">&#x27;$&amp;,&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">/* return price.toLocaleString(&#x27;en-US&#x27;);  寫法二：轉為千分號*/</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//添加$字號</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">filterDollarSign</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">`$ <span class=\"subst\">$&#123;price&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>說明：<br>區域註冊撰寫注意：filter<code>s</code><br>限制：僅存在Vue Instance中<br><a href=\"https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-currency-string-in-javascript\">轉為千分位公式</a><br>參數說明<img src=\"https://ithelp.ithome.com.tw/upload/images/20190929/20114645RO0kGI3OYm.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"全域註冊\"><a href=\"#全域註冊\" class=\"headerlink\" title=\"全域註冊\"></a>全域註冊</h3><p><a href=\"https://jsfiddle.net/chunwen/543dcz9j/12/\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; price | currency | filterDollarSign &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;currency&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.toFixed(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/\\d(?=(\\d&#123;3&#125;)+\\.)/g</span>, <span class=\"string\">&#x27;$&amp;,&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;filterDollarSign&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`$ <span class=\"subst\">$&#123;value&#125;</span>`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">  \tprice: <span class=\"number\">199999</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"filter可以帶入參數\"><a href=\"#filter可以帶入參數\" class=\"headerlink\" title=\"filter可以帶入參數\"></a>filter可以帶入參數</h3><p><a href=\"https://jsfiddle.net/chunwen/e086j7vk/6/\">範例連結</a><br>因為filter是JS函式，所以可以帶入參數喔！<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; price | currency | filterDollarSign（priceStr）&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;currency&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val.toFixed(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/\\d(?=(\\d&#123;3&#125;)+\\.)/g</span>, <span class=\"string\">&#x27;$&amp;,&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;filterDollarSign&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,arg1</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;arg1&#125;</span> $ <span class=\"subst\">$&#123;value&#125;</span>`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">  \tprice: <span class=\"number\">199999</span>,</span><br><span class=\"line\">    priceStr:<span class=\"string\">&#x27;this price is&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>說明：<br>filterDollarSign中<code>value</code>對應的是<code>price | currency</code>回傳的結果，<code>arg1</code>則對應<code>priceStr:&#39;this price is&#39;</code>這組字串</p>\n<h3 id=\"Filter、methods、computed差異\"><a href=\"#Filter、methods、computed差異\" class=\"headerlink\" title=\"Filter、methods、computed差異\"></a>Filter、methods、computed差異</h3><p>1.Vue filter 與 methods 的最大差異在於 filter無法取得實體內的狀態。<br>2.Filter適用於文字格式處理等簡單的狀況，而複雜的資料處理則適合使用 Computed。</p>\n<hr>\n","site":{"data":{}},"length":2232,"excerpt":"<p>參考資料:</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/filters.html\">官網介紹</a></li>\n<li><a href=\"https://cythilya.github.io/2017/05/23/vue-filter/\">Summer-Vue.js: Filter 過濾器</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208812\">Vue[25]-過濾器Filter</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10191948\">用範例理解 Vue.js #7：Filters vs Computed</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"Filter介紹\"><a href=\"#Filter介紹\" class=\"headerlink\" title=\"Filter介紹\"></a>Filter介紹</h3><p>目的：主要用在處理格式化文字（如：千分號：<code>$1,000</code>、英文大小寫轉換等狀況）<br>綁定方式：使用雙大括號Mustache語法或是<code>V-bind表達式</code>（2.10版本後開始支持）<br>示範：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.Mustache語法</span><br><span class=\"line\">&#123;&#123;message | captialize&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2.v-bind</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;rawId | formatId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>特性：<br>1.使用<code>|</code>，pipe符號可以連結不同filter(數量不限)<br>2.由左到右執行(順序將影響結果)<br>EX: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; message | captialize | dollarSign &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>註冊方式：分為區域註冊、全域註冊</p>\n<h3 id=\"區域註冊\"><a href=\"#區域註冊\" class=\"headerlink\" title=\"區域註冊\"></a>區域註冊</h3><p><a href=\"https://jsfiddle.net/chunwen/40dj5w6k/12/\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; price | currency | filterDollarSign &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">  \tprice: <span class=\"number\">199999</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//轉為千分號</span></span><br><span class=\"line\">  filters:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">currency</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> price.toFixed(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/\\d(?=(\\d&#123;3&#125;)+\\.)/g</span>, <span class=\"string\">&#x27;$&amp;,&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">/* return price.toLocaleString(&#x27;en-US&#x27;);  寫法二：轉為千分號*/</span> </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//添加$字號</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">filterDollarSign</span>(<span class=\"params\">price</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"string\">`$ <span class=\"subst\">$&#123;price&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>說明：<br>區域註冊撰寫注意：filter<code>s</code><br>限制：僅存在Vue Instance中<br><a href=\"https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-currency-string-in-javascript\">轉為千分位公式</a><br>參數說明<img src=\"https://ithelp.ithome.com.tw/upload/images/20190929/20114645RO0kGI3OYm.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"全域註冊\"><a href=\"#全域註冊\" class=\"headerlink\" title=\"全域註冊\"></a>全域註冊</h3><p><a href=\"https://jsfiddle.net/chunwen/543dcz9j/12/\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; price | currency | filterDollarSign &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;currency&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.toFixed(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/\\d(?=(\\d&#123;3&#125;)+\\.)/g</span>, <span class=\"string\">&#x27;$&amp;,&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;filterDollarSign&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`$ <span class=\"subst\">$&#123;value&#125;</span>`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">  \tprice: <span class=\"number\">199999</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"filter可以帶入參數\"><a href=\"#filter可以帶入參數\" class=\"headerlink\" title=\"filter可以帶入參數\"></a>filter可以帶入參數</h3><p><a href=\"https://jsfiddle.net/chunwen/e086j7vk/6/\">範例連結</a><br>因為filter是JS函式，所以可以帶入參數喔！<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; price | currency | filterDollarSign（priceStr）&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;currency&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val.toFixed(<span class=\"number\">2</span>).replace(<span class=\"regexp\">/\\d(?=(\\d&#123;3&#125;)+\\.)/g</span>, <span class=\"string\">&#x27;$&amp;,&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.filter(<span class=\"string\">&#x27;filterDollarSign&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,arg1</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;arg1&#125;</span> $ <span class=\"subst\">$&#123;value&#125;</span>`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\tdata: &#123;</span><br><span class=\"line\">  \tprice: <span class=\"number\">199999</span>,</span><br><span class=\"line\">    priceStr:<span class=\"string\">&#x27;this price is&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>說明：<br>filterDollarSign中<code>value</code>對應的是<code>price | currency</code>回傳的結果，<code>arg1</code>則對應<code>priceStr:&#39;this price is&#39;</code>這組字串</p>\n<h3 id=\"Filter、methods、computed差異\"><a href=\"#Filter、methods、computed差異\" class=\"headerlink\" title=\"Filter、methods、computed差異\"></a>Filter、methods、computed差異</h3><p>1.Vue filter 與 methods 的最大差異在於 filter無法取得實體內的狀態。<br>2.Filter適用於文字格式處理等簡單的狀況，而複雜的資料處理則適合使用 Computed。</p>\n<hr>"},{"title":"Vue 出一個貨幣轉換器","abbrlink":3718471902,"date":"2019-09-30T16:34:54.000Z","_content":"\n參考資料\n- [VueJS 元件 (Component) 之間資料溝通傳遞的方式](https://kuro.tw/posts/2018/08/22/VueJS-%E5%85%83%E4%BB%B6-Component-%E4%B9%8B%E9%96%93%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E%E7%9A%84%E6%96%B9%E5%BC%8F/)\n<!-- more -->\n-----\n### 練習一\n說明：今天我們要做一個美元匯率兌換器，假設 `1美元 = 31.0530075 台幣`\n\n[練習連結](https://jsbin.com/xodoyobefu/3/edit?html,js,output)\n我們先使用methods方法來做練習\nHTML部分\n```html\n <div id=\"app\">\n    <p>1 美元 = 31.0530075 台幣</p>\n    <div>美元 <input type=\"text\" v-model=\"usd\" @input=\"usdtotwd\"></div>\n    <div >新台幣 <input type=\"text\" v-model=\"twd\" @input=\"twdtousd\"></div>\n  </div>\n```\nJavaScript部分\n```javascript\n   const vm = new Vue({\n      el: '#app',\n      data: {\n        twd: 31.05,\n        usd: 1\n      }, \n      methods:{\n        usdtotwd(){\n          this.twd = this.usd * 31.0530075\n        },\n        twdtousd(){\n          this.usd = this.twd / 31.0530075\n        }\n      }\n    });\n```\n示意圖\n![](https://ithelp.ithome.com.tw/upload/images/20190930/20114645bdvgIVL9II.png)\n\n### 練習二\n我們今天想要做出一個將台幣、港幣、美金這三種幣別兌換的匯率轉換器。\n\n如果我們使用上述methods方法，變成要寫`usdtotwd`、`usdtohk`、`twdtousd`、`twdtohk`、 `hktotwd` 、`hktousd`共六種方法，如此一來便會造成程式碼非常冗長。\n\n這時，我們就可以善用`computed`來幫助我們解決問題！因為總金額數目是不變的，因此我們只要以一種貨幣當作基準值，就能輕鬆寫出不同貨幣的轉換。\n\n[練習連結](https://jsbin.com/caqenazaba/edit?html,js,output)\n```html\n  <div id=\"app\">\n    <p>1 美元 = 31.0530075 台幣</p>\n    <p>1 美元 ＝ 7.83914083 港幣</p>\n    <div>美元 <input type=\"text\" v-model=\"usd\"></div>\n    <div>新台幣 <input type=\"text\" v-model=\"twd\"></div>\n    <div>港幣 <input type=\"text\" v-model=\"hk\"></div>\n  </div>\n```\nJavaScript部分\n```javascript\n       const vm = new Vue({\n      el: '#app',\n      data: {\n      // twd: 31.05,\n      // hk:7.83,\n       usd: 0,\n      }, \n      computed:{\n        twd:{\n          //初始值\n          get(){\n            return this.usd * 31.05\n          },\n          //更動後的值\n          set(val){\n            this.usd =val/31.05\n          }\n        },\n        hk:{\n          get(){\n            return this.usd *7.83\n          },\n          set(val){\n            this.usd =val/7.83\n          }\n        }\n      }\n    });\n```\n示意圖\n![](https://ithelp.ithome.com.tw/upload/images/20190930/20114645oT5izEH539.png)\n\n> 備註：這題解法概念其實就是`SSOT - Single Source of Truth概念`，我們會在之後Vuex單元提到。有興趣的人可以先看一下參考資料喔！\n","source":"_posts/2019-09-30-練習做一個貨幣轉換器.md","raw":"---\ntitle: Vue 出一個貨幣轉換器\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 3718471902\ndate: 2019-10-01 00:34:54\n---\n\n參考資料\n- [VueJS 元件 (Component) 之間資料溝通傳遞的方式](https://kuro.tw/posts/2018/08/22/VueJS-%E5%85%83%E4%BB%B6-Component-%E4%B9%8B%E9%96%93%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E%E7%9A%84%E6%96%B9%E5%BC%8F/)\n<!-- more -->\n-----\n### 練習一\n說明：今天我們要做一個美元匯率兌換器，假設 `1美元 = 31.0530075 台幣`\n\n[練習連結](https://jsbin.com/xodoyobefu/3/edit?html,js,output)\n我們先使用methods方法來做練習\nHTML部分\n```html\n <div id=\"app\">\n    <p>1 美元 = 31.0530075 台幣</p>\n    <div>美元 <input type=\"text\" v-model=\"usd\" @input=\"usdtotwd\"></div>\n    <div >新台幣 <input type=\"text\" v-model=\"twd\" @input=\"twdtousd\"></div>\n  </div>\n```\nJavaScript部分\n```javascript\n   const vm = new Vue({\n      el: '#app',\n      data: {\n        twd: 31.05,\n        usd: 1\n      }, \n      methods:{\n        usdtotwd(){\n          this.twd = this.usd * 31.0530075\n        },\n        twdtousd(){\n          this.usd = this.twd / 31.0530075\n        }\n      }\n    });\n```\n示意圖\n![](https://ithelp.ithome.com.tw/upload/images/20190930/20114645bdvgIVL9II.png)\n\n### 練習二\n我們今天想要做出一個將台幣、港幣、美金這三種幣別兌換的匯率轉換器。\n\n如果我們使用上述methods方法，變成要寫`usdtotwd`、`usdtohk`、`twdtousd`、`twdtohk`、 `hktotwd` 、`hktousd`共六種方法，如此一來便會造成程式碼非常冗長。\n\n這時，我們就可以善用`computed`來幫助我們解決問題！因為總金額數目是不變的，因此我們只要以一種貨幣當作基準值，就能輕鬆寫出不同貨幣的轉換。\n\n[練習連結](https://jsbin.com/caqenazaba/edit?html,js,output)\n```html\n  <div id=\"app\">\n    <p>1 美元 = 31.0530075 台幣</p>\n    <p>1 美元 ＝ 7.83914083 港幣</p>\n    <div>美元 <input type=\"text\" v-model=\"usd\"></div>\n    <div>新台幣 <input type=\"text\" v-model=\"twd\"></div>\n    <div>港幣 <input type=\"text\" v-model=\"hk\"></div>\n  </div>\n```\nJavaScript部分\n```javascript\n       const vm = new Vue({\n      el: '#app',\n      data: {\n      // twd: 31.05,\n      // hk:7.83,\n       usd: 0,\n      }, \n      computed:{\n        twd:{\n          //初始值\n          get(){\n            return this.usd * 31.05\n          },\n          //更動後的值\n          set(val){\n            this.usd =val/31.05\n          }\n        },\n        hk:{\n          get(){\n            return this.usd *7.83\n          },\n          set(val){\n            this.usd =val/7.83\n          }\n        }\n      }\n    });\n```\n示意圖\n![](https://ithelp.ithome.com.tw/upload/images/20190930/20114645oT5izEH539.png)\n\n> 備註：這題解法概念其實就是`SSOT - Single Source of Truth概念`，我們會在之後Vuex單元提到。有興趣的人可以先看一下參考資料喔！\n","slug":"2019-09-30-練習做一個貨幣轉換器","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2r002ezqzi3wy2haxm","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://kuro.tw/posts/2018/08/22/VueJS-%E5%85%83%E4%BB%B6-Component-%E4%B9%8B%E9%96%93%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E%E7%9A%84%E6%96%B9%E5%BC%8F/\">VueJS 元件 (Component) 之間資料溝通傳遞的方式</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"練習一\"><a href=\"#練習一\" class=\"headerlink\" title=\"練習一\"></a>練習一</h3><p>說明：今天我們要做一個美元匯率兌換器，假設 <code>1美元 = 31.0530075 台幣</code></p>\n<p><a href=\"https://jsbin.com/xodoyobefu/3/edit?html,js,output\">練習連結</a><br>我們先使用methods方法來做練習<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1 美元 = 31.0530075 台幣<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>美元 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;usd&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;usdtotwd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span>新台幣 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;twd&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;twdtousd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     twd: <span class=\"number\">31.05</span>,</span><br><span class=\"line\">     usd: <span class=\"number\">1</span></span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   methods:&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">usdtotwd</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.twd = <span class=\"built_in\">this</span>.usd * <span class=\"number\">31.0530075</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">twdtousd</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.usd = <span class=\"built_in\">this</span>.twd / <span class=\"number\">31.0530075</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>示意圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20190930/20114645bdvgIVL9II.png\" alt=\"\"></p>\n<h3 id=\"練習二\"><a href=\"#練習二\" class=\"headerlink\" title=\"練習二\"></a>練習二</h3><p>我們今天想要做出一個將台幣、港幣、美金這三種幣別兌換的匯率轉換器。</p>\n<p>如果我們使用上述methods方法，變成要寫<code>usdtotwd</code>、<code>usdtohk</code>、<code>twdtousd</code>、<code>twdtohk</code>、 <code>hktotwd</code> 、<code>hktousd</code>共六種方法，如此一來便會造成程式碼非常冗長。</p>\n<p>這時，我們就可以善用<code>computed</code>來幫助我們解決問題！因為總金額數目是不變的，因此我們只要以一種貨幣當作基準值，就能輕鬆寫出不同貨幣的轉換。</p>\n<p><a href=\"https://jsbin.com/caqenazaba/edit?html,js,output\">練習連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1 美元 = 31.0530075 台幣<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1 美元 ＝ 7.83914083 港幣<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>美元 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;usd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>新台幣 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;twd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>港幣 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;hk&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// twd: 31.05,</span></span><br><span class=\"line\">  <span class=\"comment\">// hk:7.83,</span></span><br><span class=\"line\">   usd: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  computed:&#123;</span><br><span class=\"line\">    twd:&#123;</span><br><span class=\"line\">      <span class=\"comment\">//初始值</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.usd * <span class=\"number\">31.05</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//更動後的值</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.usd =val/<span class=\"number\">31.05</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hk:&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.usd *<span class=\"number\">7.83</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.usd =val/<span class=\"number\">7.83</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>示意圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20190930/20114645oT5izEH539.png\" alt=\"\"></p>\n<blockquote>\n<p>備註：這題解法概念其實就是<code>SSOT - Single Source of Truth概念</code>，我們會在之後Vuex單元提到。有興趣的人可以先看一下參考資料喔！</p>\n</blockquote>\n","site":{"data":{}},"length":1652,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://kuro.tw/posts/2018/08/22/VueJS-%E5%85%83%E4%BB%B6-Component-%E4%B9%8B%E9%96%93%E8%B3%87%E6%96%99%E5%82%B3%E9%81%9E%E7%9A%84%E6%96%B9%E5%BC%8F/\">VueJS 元件 (Component) 之間資料溝通傳遞的方式</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"練習一\"><a href=\"#練習一\" class=\"headerlink\" title=\"練習一\"></a>練習一</h3><p>說明：今天我們要做一個美元匯率兌換器，假設 <code>1美元 = 31.0530075 台幣</code></p>\n<p><a href=\"https://jsbin.com/xodoyobefu/3/edit?html,js,output\">練習連結</a><br>我們先使用methods方法來做練習<br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1 美元 = 31.0530075 台幣<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>美元 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;usd&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;usdtotwd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span>新台幣 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;twd&quot;</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;twdtousd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     twd: <span class=\"number\">31.05</span>,</span><br><span class=\"line\">     usd: <span class=\"number\">1</span></span><br><span class=\"line\">   &#125;, </span><br><span class=\"line\">   methods:&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">usdtotwd</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.twd = <span class=\"built_in\">this</span>.usd * <span class=\"number\">31.0530075</span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">twdtousd</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.usd = <span class=\"built_in\">this</span>.twd / <span class=\"number\">31.0530075</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>示意圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20190930/20114645bdvgIVL9II.png\" alt=\"\"></p>\n<h3 id=\"練習二\"><a href=\"#練習二\" class=\"headerlink\" title=\"練習二\"></a>練習二</h3><p>我們今天想要做出一個將台幣、港幣、美金這三種幣別兌換的匯率轉換器。</p>\n<p>如果我們使用上述methods方法，變成要寫<code>usdtotwd</code>、<code>usdtohk</code>、<code>twdtousd</code>、<code>twdtohk</code>、 <code>hktotwd</code> 、<code>hktousd</code>共六種方法，如此一來便會造成程式碼非常冗長。</p>\n<p>這時，我們就可以善用<code>computed</code>來幫助我們解決問題！因為總金額數目是不變的，因此我們只要以一種貨幣當作基準值，就能輕鬆寫出不同貨幣的轉換。</p>\n<p><a href=\"https://jsbin.com/caqenazaba/edit?html,js,output\">練習連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1 美元 = 31.0530075 台幣<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>1 美元 ＝ 7.83914083 港幣<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>美元 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;usd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>新台幣 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;twd&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>港幣 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;hk&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// twd: 31.05,</span></span><br><span class=\"line\">  <span class=\"comment\">// hk:7.83,</span></span><br><span class=\"line\">   usd: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  computed:&#123;</span><br><span class=\"line\">    twd:&#123;</span><br><span class=\"line\">      <span class=\"comment\">//初始值</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.usd * <span class=\"number\">31.05</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//更動後的值</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.usd =val/<span class=\"number\">31.05</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    hk:&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.usd *<span class=\"number\">7.83</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.usd =val/<span class=\"number\">7.83</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>示意圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20190930/20114645oT5izEH539.png\" alt=\"\"></p>\n<blockquote>\n<p>備註：這題解法概念其實就是<code>SSOT - Single Source of Truth概念</code>，我們會在之後Vuex單元提到。有興趣的人可以先看一下參考資料喔！</p>\n</blockquote>"},{"title":"Vue Component(元件) 介紹、建立方式、特性","abbrlink":485547154,"date":"2019-10-01T14:21:01.000Z","_content":"參考資料\n- [Vue.js: 元件 Components 簡介 - 註冊與使用](https://cythilya.github.io/2017/05/11/vue-component-intro/)\n- [Vue.官方文件](https://cn.vuejs.org/v2/guide/components.html)\n- [Day14 vue.js - 組件(Components)介紹及建立](https://ithelp.ithome.com.tw/articles/10216499)\n- [Vue.js Core 30天屠龍記(第22天): 組件註冊](https://ithelp.ithome.com.tw/articles/10208306)\n<!-- more -->\n-----\n\n\n## Component（元件）\n### 何謂Component?\n引用Kuro老師和Summer部落格內容整理如下：\n> 每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始`（圖片灰底部分）`，再一個個將元件 (Components) 搭建上去而來的。而元件提供`HTML DOM元素的擴充性`這讓我們可以將`程式碼封裝起來並且方便重複使用。`如下圖\n\n![](https://ithelp.ithome.com.tw/upload/images/20191001/20114645O78QEhrJLG.png)\n圖片來源：六角學院\n補充：上面提到的HTML DOM元素的擴充性是什麼意思呢?\n簡單來說，就是我們可以將很多組HTML，包裝在一個元件內\n```javascript\nnew Vue({\n      el: '#app',\n      components: {\n        // register註冊\n        'my-component': {\n          template: `\n          <div>  //最上層只能有一個tag\n            <div>A custom component of Vue!</div>\n            <hr>\n            <div>A custom component of Vue!</div>\n          </div>`\n        }\n      }\n    });\n```\n\n### 區域註冊\n寫法如下： [練習連結](https://jsbin.com/rofafuw/2/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <first-component></first-component>\n</div>\n```\nJavaScript部分\n```javascript\n // create a root instance\n    new Vue({\n      el: '#app',\n      components: {      //component`s`，有s喔\n        // register\n        'first-component': {\n          template: `\n          <div>  //最上層只能有一個tag，Vue單節點特性\n            <div>A custom component of Vue!</div>\n            <hr>\n            <div>A custom component of Vue!</div>\n          </div>`\n        }\n      }\n    });\n```\n\n### 全域註冊\n- 寫法介紹：撰寫時有兩個參數，分別為「組件名稱」及「選項物件」，在下方範例中「組件名稱」為 `first-component` ，「選項物件」則為其後的內容。\n- 缺點：不管有沒有使用到這個元件，其元件就一定會載入，拖慢網頁載入時間。\n- 寫法如下： [練習連結](https://jsbin.com/yirodeb/1/edit?html,js,output)\n```html\n<div id=\"app\">\n    <first-component></first-component>\n</div>\n```\nJavaScript部分\n```javascript\n Vue.component('first-component',{\n    template: `\n     <div>  \n     <div>A custom component of Vue!</div>\n     <hr>\n     <div>A custom component of Vue!</div>\n     </div>`\n })\n // create a root instance\n    new Vue({\n      el: '#app',\n    });\n```\n\n### X-template\n當今天我們template內容較為冗長時，我們可以透過`script標籤`加上`type=\"text/x-template\"` 並`指定一個id`來使用。將封裝內容獨立出來。\n寫法如下：\n```javascript\n  <script type=\"text/x-template\" id=\"my-component\">\n    <div class=\"component\">\n    A custom component of Vue!\n    </div>\n  </script>\n\n  <script>\n    // register\n    Vue.component('my-component', {\n      template: '#my-component',\n    });\n    // create a root instance\n    new Vue({\n      el: '#app',\n    });\n```\n\n#### 小結論\n`區域註冊`與`全域註冊`最大差別就是\n1. 區域註冊，僅能在綁定的實體內使用。如上方例子：綁定\"#app\"。這時，如果同一個頁面有另外一個實體\"#app2\"，這邊的元件就不能被掛載到實體\"#app2\"中。\n2. 全域註冊，則可以提供多組實體使用\n3. 由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時`限定全⼩寫` (可加入破折號 - ) 的標籤名稱方便辨識\n\n### Component特性\n一、元件資料都是獨立的\n1.透過props向內部組件傳遞數據\n2.透過emit event觸發事件將資料往外送\n![](https://ithelp.ithome.com.tw/upload/images/20191001/20114645TF0FuGyXdk.png)\n圖片來源：六角學院\n\n二、data必須是一個函數\n寫法如下：\n```javascript\nVue.component(\"button-counter\", {\n  data: function() {\n    return {\n      count: 0\n    };\n  }\n});\n```\n備註：為何元件內資料必須為函數呢？\n主要原因就是在ES6以前，function是切分變數最小單位，而在Vue元件中，為了避免元件與元件資料污染，因此Vue強制規定子元件`data屬性`必須是函式，確保每個元件資料都是獨立的。\n\n#### 複習一下\n下面寫法是全域註冊還是區域註冊？\n```javascript\nvar CustomBlock = Vue.component('custom-block', {\n      template: `<div class=\"block\">B</div>`,\n    });>\n```\n答案是`全域註冊喔`，別搞錯摟～\n","source":"_posts/2019-10-01-元件介紹、建立方式、特性.md","raw":"---\ntitle: Vue Component(元件) 介紹、建立方式、特性\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 485547154\ndate: 2019-10-01 22:21:01\n---\n參考資料\n- [Vue.js: 元件 Components 簡介 - 註冊與使用](https://cythilya.github.io/2017/05/11/vue-component-intro/)\n- [Vue.官方文件](https://cn.vuejs.org/v2/guide/components.html)\n- [Day14 vue.js - 組件(Components)介紹及建立](https://ithelp.ithome.com.tw/articles/10216499)\n- [Vue.js Core 30天屠龍記(第22天): 組件註冊](https://ithelp.ithome.com.tw/articles/10208306)\n<!-- more -->\n-----\n\n\n## Component（元件）\n### 何謂Component?\n引用Kuro老師和Summer部落格內容整理如下：\n> 每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始`（圖片灰底部分）`，再一個個將元件 (Components) 搭建上去而來的。而元件提供`HTML DOM元素的擴充性`這讓我們可以將`程式碼封裝起來並且方便重複使用。`如下圖\n\n![](https://ithelp.ithome.com.tw/upload/images/20191001/20114645O78QEhrJLG.png)\n圖片來源：六角學院\n補充：上面提到的HTML DOM元素的擴充性是什麼意思呢?\n簡單來說，就是我們可以將很多組HTML，包裝在一個元件內\n```javascript\nnew Vue({\n      el: '#app',\n      components: {\n        // register註冊\n        'my-component': {\n          template: `\n          <div>  //最上層只能有一個tag\n            <div>A custom component of Vue!</div>\n            <hr>\n            <div>A custom component of Vue!</div>\n          </div>`\n        }\n      }\n    });\n```\n\n### 區域註冊\n寫法如下： [練習連結](https://jsbin.com/rofafuw/2/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <first-component></first-component>\n</div>\n```\nJavaScript部分\n```javascript\n // create a root instance\n    new Vue({\n      el: '#app',\n      components: {      //component`s`，有s喔\n        // register\n        'first-component': {\n          template: `\n          <div>  //最上層只能有一個tag，Vue單節點特性\n            <div>A custom component of Vue!</div>\n            <hr>\n            <div>A custom component of Vue!</div>\n          </div>`\n        }\n      }\n    });\n```\n\n### 全域註冊\n- 寫法介紹：撰寫時有兩個參數，分別為「組件名稱」及「選項物件」，在下方範例中「組件名稱」為 `first-component` ，「選項物件」則為其後的內容。\n- 缺點：不管有沒有使用到這個元件，其元件就一定會載入，拖慢網頁載入時間。\n- 寫法如下： [練習連結](https://jsbin.com/yirodeb/1/edit?html,js,output)\n```html\n<div id=\"app\">\n    <first-component></first-component>\n</div>\n```\nJavaScript部分\n```javascript\n Vue.component('first-component',{\n    template: `\n     <div>  \n     <div>A custom component of Vue!</div>\n     <hr>\n     <div>A custom component of Vue!</div>\n     </div>`\n })\n // create a root instance\n    new Vue({\n      el: '#app',\n    });\n```\n\n### X-template\n當今天我們template內容較為冗長時，我們可以透過`script標籤`加上`type=\"text/x-template\"` 並`指定一個id`來使用。將封裝內容獨立出來。\n寫法如下：\n```javascript\n  <script type=\"text/x-template\" id=\"my-component\">\n    <div class=\"component\">\n    A custom component of Vue!\n    </div>\n  </script>\n\n  <script>\n    // register\n    Vue.component('my-component', {\n      template: '#my-component',\n    });\n    // create a root instance\n    new Vue({\n      el: '#app',\n    });\n```\n\n#### 小結論\n`區域註冊`與`全域註冊`最大差別就是\n1. 區域註冊，僅能在綁定的實體內使用。如上方例子：綁定\"#app\"。這時，如果同一個頁面有另外一個實體\"#app2\"，這邊的元件就不能被掛載到實體\"#app2\"中。\n2. 全域註冊，則可以提供多組實體使用\n3. 由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時`限定全⼩寫` (可加入破折號 - ) 的標籤名稱方便辨識\n\n### Component特性\n一、元件資料都是獨立的\n1.透過props向內部組件傳遞數據\n2.透過emit event觸發事件將資料往外送\n![](https://ithelp.ithome.com.tw/upload/images/20191001/20114645TF0FuGyXdk.png)\n圖片來源：六角學院\n\n二、data必須是一個函數\n寫法如下：\n```javascript\nVue.component(\"button-counter\", {\n  data: function() {\n    return {\n      count: 0\n    };\n  }\n});\n```\n備註：為何元件內資料必須為函數呢？\n主要原因就是在ES6以前，function是切分變數最小單位，而在Vue元件中，為了避免元件與元件資料污染，因此Vue強制規定子元件`data屬性`必須是函式，確保每個元件資料都是獨立的。\n\n#### 複習一下\n下面寫法是全域註冊還是區域註冊？\n```javascript\nvar CustomBlock = Vue.component('custom-block', {\n      template: `<div class=\"block\">B</div>`,\n    });>\n```\n答案是`全域註冊喔`，別搞錯摟～\n","slug":"2019-10-01-元件介紹、建立方式、特性","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2t002hzqzi8xltfxtx","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://cythilya.github.io/2017/05/11/vue-component-intro/\">Vue.js: 元件 Components 簡介 - 註冊與使用</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html\">Vue.官方文件</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10216499\">Day14 vue.js - 組件(Components)介紹及建立</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208306\">Vue.js Core 30天屠龍記(第22天): 組件註冊</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h2 id=\"Component（元件）\"><a href=\"#Component（元件）\" class=\"headerlink\" title=\"Component（元件）\"></a>Component（元件）</h2><h3 id=\"何謂Component\"><a href=\"#何謂Component\" class=\"headerlink\" title=\"何謂Component?\"></a>何謂Component?</h3><p>引用Kuro老師和Summer部落格內容整理如下：</p>\n<blockquote>\n<p>每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始<code>（圖片灰底部分）</code>，再一個個將元件 (Components) 搭建上去而來的。而元件提供<code>HTML DOM元素的擴充性</code>這讓我們可以將<code>程式碼封裝起來並且方便重複使用。</code>如下圖</p>\n</blockquote>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191001/20114645O78QEhrJLG.png\" alt=\"\"><br>圖片來源：六角學院<br>補充：上面提到的HTML DOM元素的擴充性是什麼意思呢?<br>簡單來說，就是我們可以將很多組HTML，包裝在一個元件內</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// register註冊</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;my-component&#x27;</span>: &#123;</span><br><span class=\"line\">          template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div&gt;  //最上層只能有一個tag</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;hr&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"區域註冊\"><a href=\"#區域註冊\" class=\"headerlink\" title=\"區域註冊\"></a>區域註冊</h3><p>寫法如下： <a href=\"https://jsbin.com/rofafuw/2/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">first-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">first-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create a root instance</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     components: &#123;      <span class=\"comment\">//component`s`，有s喔</span></span><br><span class=\"line\">       <span class=\"comment\">// register</span></span><br><span class=\"line\">       <span class=\"string\">&#x27;first-component&#x27;</span>: &#123;</span><br><span class=\"line\">         template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">         &lt;div&gt;  //最上層只能有一個tag，Vue單節點特性</span></span><br><span class=\"line\"><span class=\"string\">           &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">           &lt;hr&gt;</span></span><br><span class=\"line\"><span class=\"string\">           &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">         &lt;/div&gt;`</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全域註冊\"><a href=\"#全域註冊\" class=\"headerlink\" title=\"全域註冊\"></a>全域註冊</h3><ul>\n<li>寫法介紹：撰寫時有兩個參數，分別為「組件名稱」及「選項物件」，在下方範例中「組件名稱」為 <code>first-component</code> ，「選項物件」則為其後的內容。</li>\n<li>缺點：不管有沒有使用到這個元件，其元件就一定會載入，拖慢網頁載入時間。</li>\n<li>寫法如下： <a href=\"https://jsbin.com/yirodeb/1/edit?html,js,output\">練習連結</a><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">first-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">first-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\nJavaScript部分<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;first-component&#x27;</span>,&#123;</span><br><span class=\"line\">   template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;  </span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;hr&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// create a root instance</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"X-template\"><a href=\"#X-template\" class=\"headerlink\" title=\"X-template\"></a>X-template</h3><p>當今天我們template內容較為冗長時，我們可以透過<code>script標籤</code>加上<code>type=&quot;text/x-template&quot;</code> 並<code>指定一個id</code>來使用。將封裝內容獨立出來。<br>寫法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/x-template&quot;</span> id=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;component&quot;</span>&gt;</span><br><span class=\"line\">  A custom component <span class=\"keyword\">of</span> Vue!</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// register</span></span><br><span class=\"line\">  Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;#my-component&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// create a root instance</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p><code>區域註冊</code>與<code>全域註冊</code>最大差別就是</p>\n<ol>\n<li>區域註冊，僅能在綁定的實體內使用。如上方例子：綁定”#app”。這時，如果同一個頁面有另外一個實體”#app2”，這邊的元件就不能被掛載到實體”#app2”中。</li>\n<li>全域註冊，則可以提供多組實體使用</li>\n<li>由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時<code>限定全⼩寫</code> (可加入破折號 - ) 的標籤名稱方便辨識</li>\n</ol>\n<h3 id=\"Component特性\"><a href=\"#Component特性\" class=\"headerlink\" title=\"Component特性\"></a>Component特性</h3><p>一、元件資料都是獨立的<br>1.透過props向內部組件傳遞數據<br>2.透過emit event觸發事件將資料往外送<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191001/20114645TF0FuGyXdk.png\" alt=\"\"><br>圖片來源：六角學院</p>\n<p>二、data必須是一個函數<br>寫法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;button-counter&quot;</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>備註：為何元件內資料必須為函數呢？<br>主要原因就是在ES6以前，function是切分變數最小單位，而在Vue元件中，為了避免元件與元件資料污染，因此Vue強制規定子元件<code>data屬性</code>必須是函式，確保每個元件資料都是獨立的。</p>\n<h4 id=\"複習一下\"><a href=\"#複習一下\" class=\"headerlink\" title=\"複習一下\"></a>複習一下</h4><p>下面寫法是全域註冊還是區域註冊？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CustomBlock = Vue.component(<span class=\"string\">&#x27;custom-block&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">`&lt;div class=&quot;block&quot;&gt;B&lt;/div&gt;`</span>,</span><br><span class=\"line\">    &#125;);&gt;</span><br></pre></td></tr></table></figure>\n<p>答案是<code>全域註冊喔</code>，別搞錯摟～</p>\n","site":{"data":{}},"length":2679,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://cythilya.github.io/2017/05/11/vue-component-intro/\">Vue.js: 元件 Components 簡介 - 註冊與使用</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html\">Vue.官方文件</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10216499\">Day14 vue.js - 組件(Components)介紹及建立</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208306\">Vue.js Core 30天屠龍記(第22天): 組件註冊</a>","more":"</li>\n</ul>\n<hr>\n<h2 id=\"Component（元件）\"><a href=\"#Component（元件）\" class=\"headerlink\" title=\"Component（元件）\"></a>Component（元件）</h2><h3 id=\"何謂Component\"><a href=\"#何謂Component\" class=\"headerlink\" title=\"何謂Component?\"></a>何謂Component?</h3><p>引用Kuro老師和Summer部落格內容整理如下：</p>\n<blockquote>\n<p>每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始<code>（圖片灰底部分）</code>，再一個個將元件 (Components) 搭建上去而來的。而元件提供<code>HTML DOM元素的擴充性</code>這讓我們可以將<code>程式碼封裝起來並且方便重複使用。</code>如下圖</p>\n</blockquote>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191001/20114645O78QEhrJLG.png\" alt=\"\"><br>圖片來源：六角學院<br>補充：上面提到的HTML DOM元素的擴充性是什麼意思呢?<br>簡單來說，就是我們可以將很多組HTML，包裝在一個元件內</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      components: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// register註冊</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;my-component&#x27;</span>: &#123;</span><br><span class=\"line\">          template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div&gt;  //最上層只能有一個tag</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;hr&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;`</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"區域註冊\"><a href=\"#區域註冊\" class=\"headerlink\" title=\"區域註冊\"></a>區域註冊</h3><p>寫法如下： <a href=\"https://jsbin.com/rofafuw/2/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">first-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">first-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create a root instance</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     components: &#123;      <span class=\"comment\">//component`s`，有s喔</span></span><br><span class=\"line\">       <span class=\"comment\">// register</span></span><br><span class=\"line\">       <span class=\"string\">&#x27;first-component&#x27;</span>: &#123;</span><br><span class=\"line\">         template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">         &lt;div&gt;  //最上層只能有一個tag，Vue單節點特性</span></span><br><span class=\"line\"><span class=\"string\">           &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">           &lt;hr&gt;</span></span><br><span class=\"line\"><span class=\"string\">           &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">         &lt;/div&gt;`</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全域註冊\"><a href=\"#全域註冊\" class=\"headerlink\" title=\"全域註冊\"></a>全域註冊</h3><ul>\n<li>寫法介紹：撰寫時有兩個參數，分別為「組件名稱」及「選項物件」，在下方範例中「組件名稱」為 <code>first-component</code> ，「選項物件」則為其後的內容。</li>\n<li>缺點：不管有沒有使用到這個元件，其元件就一定會載入，拖慢網頁載入時間。</li>\n<li>寫法如下： <a href=\"https://jsbin.com/yirodeb/1/edit?html,js,output\">練習連結</a><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">first-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">first-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\nJavaScript部分<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;first-component&#x27;</span>,&#123;</span><br><span class=\"line\">   template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;  </span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;hr&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;A custom component of Vue!&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// create a root instance</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"X-template\"><a href=\"#X-template\" class=\"headerlink\" title=\"X-template\"></a>X-template</h3><p>當今天我們template內容較為冗長時，我們可以透過<code>script標籤</code>加上<code>type=&quot;text/x-template&quot;</code> 並<code>指定一個id</code>來使用。將封裝內容獨立出來。<br>寫法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/x-template&quot;</span> id=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;component&quot;</span>&gt;</span><br><span class=\"line\">  A custom component <span class=\"keyword\">of</span> Vue!</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// register</span></span><br><span class=\"line\">  Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;#my-component&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// create a root instance</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p><code>區域註冊</code>與<code>全域註冊</code>最大差別就是</p>\n<ol>\n<li>區域註冊，僅能在綁定的實體內使用。如上方例子：綁定”#app”。這時，如果同一個頁面有另外一個實體”#app2”，這邊的元件就不能被掛載到實體”#app2”中。</li>\n<li>全域註冊，則可以提供多組實體使用</li>\n<li>由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時<code>限定全⼩寫</code> (可加入破折號 - ) 的標籤名稱方便辨識</li>\n</ol>\n<h3 id=\"Component特性\"><a href=\"#Component特性\" class=\"headerlink\" title=\"Component特性\"></a>Component特性</h3><p>一、元件資料都是獨立的<br>1.透過props向內部組件傳遞數據<br>2.透過emit event觸發事件將資料往外送<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191001/20114645TF0FuGyXdk.png\" alt=\"\"><br>圖片來源：六角學院</p>\n<p>二、data必須是一個函數<br>寫法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;button-counter&quot;</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>備註：為何元件內資料必須為函數呢？<br>主要原因就是在ES6以前，function是切分變數最小單位，而在Vue元件中，為了避免元件與元件資料污染，因此Vue強制規定子元件<code>data屬性</code>必須是函式，確保每個元件資料都是獨立的。</p>\n<h4 id=\"複習一下\"><a href=\"#複習一下\" class=\"headerlink\" title=\"複習一下\"></a>複習一下</h4><p>下面寫法是全域註冊還是區域註冊？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CustomBlock = Vue.component(<span class=\"string\">&#x27;custom-block&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">`&lt;div class=&quot;block&quot;&gt;B&lt;/div&gt;`</span>,</span><br><span class=\"line\">    &#125;);&gt;</span><br></pre></td></tr></table></figure>\n<p>答案是<code>全域註冊喔</code>，別搞錯摟～</p>"},{"title":"Vue Component(元件) props、emit介紹","abbrlink":1526401699,"date":"2019-10-02T13:06:00.000Z","_content":"參考資料\n- [Vue.js Core 30天屠龍記(第23天): props 屬性](https://ithelp.ithome.com.tw/articles/10208500)\n- [官網監聽子組件事件](https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6)\n<!-- more -->\n-----\n### 元件溝通方式\n元件與元件之間的溝通方式主要有下面幾種\n1.props in, emit out\n2.event bus\n3.$parent、$children\n4.Vuex\n\n我們今天主要會專注在`props`、`emit`這一種最常用的方式做介紹，而其餘內容將在日後慢慢介紹。\n\n### props介紹與使用\n- 用途：父層元件若要將內容傳遞進去子層元件就需要用到`props`這個屬性。\n- 寫法：`v-bind:props-in=\"msg\"`，其中，`props-in`是自定義屬性、`msg`則會去實體內尋找\n命名注意：HTML 屬性需要使用 kebab-case ，全小寫並使用分隔符號( - )來設定 \n如：`props-in`  [參考資料](https://ithelp.ithome.com.tw/articles/10208500)\n- 為何需要props屬性？\n還記得，我們昨天有提到元件內的data必須是function型式，確保每個子元件資料的獨立性嗎？正因為這樣，我們也不能透過父元件直接修改子元件內容，因此父元件才需要用到`props`這個屬性，來將外層資料傳遞進去子元件中。\n\n-----\n\n範例：[練習連結](https://jsbin.com/hacuvam/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <h1>{{msg}}</h1>  //取得實體內資料：Msg of Parent!\n    <hr>\n    <my-component v-bind:parent-msg=\"msg\"></my-component>  \n    //透過自定義屬性：`parent-msg`，將實體內資料：Msg of Parent!傳入元件中\n</div>\n```\nJavaScript部分\n```html\n //x-template\n <script type=\"text/x-template\" id=\"my-component\">\n    <div class=\"component\">\n      <div> ParentMsg: {{ parentMsg }} </div>   \n      <div> ChildMsg: {{ msg }} </div>      \n    </div>\n  </script>\n```\nJavaScript部分\n```javascript\n //global register\n Vue.component('my-component', {\n      props: [\"parentMsg\"],\n      template: '#my-component',\n      data: function () {\n        return {\n          msg: 'Msg of Child!'\n        }\n      }\n    });\n\n    // Vue instance\n    new Vue({\n      el: '#app',\n      data: {\n        msg: 'Msg of Parent!'\n      }\n    });\n```\n圖解：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645VUYYWBJtdi.png)\n畫面如下\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645kiYLRY5ttS.png)\n\n-----\n\n### 利用props傳入靜態屬性、動態屬性\n- 靜態傳入寫法：不需要加入v-bind  \n寫法：`props-in=\"靜態傳入\"`，會傳入純文字  (註：props-in是自定義名稱)\n- 動態傳入寫法：需要加入 v-bind  \n寫法：`v-bind:props-in=\"動態傳入\"` 或是 `:props-in=\"動態傳入\"`（註：冒號不能省略)\n範例： [練習連結](https://jsbin.com/vaxoder/1/edit?html,js,output)\n```html\n<div id=\"app\">\n    <hr>\n    <my-component parent-msg=\"靜態傳入\"></my-component>\n    <my-component :parent-msg=\"msg\"></my-component>\n  </div>\n  <script type=\"text/x-template\" id=\"my-component\">\n    <div class=\"component\">\n      <div> ParentMsg: {{ parentMsg }} </div>       \n    </div>\n  </script>\n```\n圖片如下：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645jpkjTWn5Rp.png)\n\n\n-----\n### emit介紹\n- 目的：當我們今天子元件內容要將資料傳遞到父元件時，就需要使用`emit`這個屬性。\n- 備註：會需要使用emit來觸發外層事件，其實是`props單向資料流關係`，關於這個特性，會在明天介紹props使用注意上再來介紹喔！\n\n範例：[練習連結](https://jsbin.com/huliyem/2/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <p>Parent: {{ message }}<input v-model=\"message\"></p>\n    <hr>\n    <p>\n  Child:\n  <my-component :parent-message=\"message\" @update=\"selfUpdate\"></my-component>\n    </p>\n  </div>\n```\n說明：我們在`my-component`上，自定義一個update事件，當子元件update事件觸發時，則會同時觸發父元件`selfUpdate`事件\nJavaScript部分\n```javascript\n   Vue.component('my-component', {\n      template: `<div>\n                  {{ parentMessage }}\n                  <input v-model=\"message\">\n                  <button @click=\"updateText\">Update</button>\n                </div>`,\n      props: {\n        parentMessage: String //字串型別\n      },\n      data() {\n        return {\n          message: this.parentMessage\n        }\n      },\n      methods: {\n        updateText() {\n                      //事件名稱 value\n          this.$emit('update', this.message); //this.message是指子層的噢！\n        }\n      }\n    });\n\n    new Vue({\n      el: '#app',\n      data: {\n        message: 'hello'\n      },\n      methods: {\n        selfUpdate(val) {\n          this.message = val;\n        }\n      }\n    });\n```\n圖解說明：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645rekb6vUcF9.png)\n\n### 結論\n這就是我們常講的`props in, emit out`的由來\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645maXrfGHfDH.png)\n","source":"_posts/2019-10-02-props、emit介紹.md","raw":"---\ntitle: Vue Component(元件) props、emit介紹\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 1526401699\ndate: 2019-10-02 21:06:00\n---\n參考資料\n- [Vue.js Core 30天屠龍記(第23天): props 屬性](https://ithelp.ithome.com.tw/articles/10208500)\n- [官網監聽子組件事件](https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6)\n<!-- more -->\n-----\n### 元件溝通方式\n元件與元件之間的溝通方式主要有下面幾種\n1.props in, emit out\n2.event bus\n3.$parent、$children\n4.Vuex\n\n我們今天主要會專注在`props`、`emit`這一種最常用的方式做介紹，而其餘內容將在日後慢慢介紹。\n\n### props介紹與使用\n- 用途：父層元件若要將內容傳遞進去子層元件就需要用到`props`這個屬性。\n- 寫法：`v-bind:props-in=\"msg\"`，其中，`props-in`是自定義屬性、`msg`則會去實體內尋找\n命名注意：HTML 屬性需要使用 kebab-case ，全小寫並使用分隔符號( - )來設定 \n如：`props-in`  [參考資料](https://ithelp.ithome.com.tw/articles/10208500)\n- 為何需要props屬性？\n還記得，我們昨天有提到元件內的data必須是function型式，確保每個子元件資料的獨立性嗎？正因為這樣，我們也不能透過父元件直接修改子元件內容，因此父元件才需要用到`props`這個屬性，來將外層資料傳遞進去子元件中。\n\n-----\n\n範例：[練習連結](https://jsbin.com/hacuvam/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <h1>{{msg}}</h1>  //取得實體內資料：Msg of Parent!\n    <hr>\n    <my-component v-bind:parent-msg=\"msg\"></my-component>  \n    //透過自定義屬性：`parent-msg`，將實體內資料：Msg of Parent!傳入元件中\n</div>\n```\nJavaScript部分\n```html\n //x-template\n <script type=\"text/x-template\" id=\"my-component\">\n    <div class=\"component\">\n      <div> ParentMsg: {{ parentMsg }} </div>   \n      <div> ChildMsg: {{ msg }} </div>      \n    </div>\n  </script>\n```\nJavaScript部分\n```javascript\n //global register\n Vue.component('my-component', {\n      props: [\"parentMsg\"],\n      template: '#my-component',\n      data: function () {\n        return {\n          msg: 'Msg of Child!'\n        }\n      }\n    });\n\n    // Vue instance\n    new Vue({\n      el: '#app',\n      data: {\n        msg: 'Msg of Parent!'\n      }\n    });\n```\n圖解：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645VUYYWBJtdi.png)\n畫面如下\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645kiYLRY5ttS.png)\n\n-----\n\n### 利用props傳入靜態屬性、動態屬性\n- 靜態傳入寫法：不需要加入v-bind  \n寫法：`props-in=\"靜態傳入\"`，會傳入純文字  (註：props-in是自定義名稱)\n- 動態傳入寫法：需要加入 v-bind  \n寫法：`v-bind:props-in=\"動態傳入\"` 或是 `:props-in=\"動態傳入\"`（註：冒號不能省略)\n範例： [練習連結](https://jsbin.com/vaxoder/1/edit?html,js,output)\n```html\n<div id=\"app\">\n    <hr>\n    <my-component parent-msg=\"靜態傳入\"></my-component>\n    <my-component :parent-msg=\"msg\"></my-component>\n  </div>\n  <script type=\"text/x-template\" id=\"my-component\">\n    <div class=\"component\">\n      <div> ParentMsg: {{ parentMsg }} </div>       \n    </div>\n  </script>\n```\n圖片如下：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645jpkjTWn5Rp.png)\n\n\n-----\n### emit介紹\n- 目的：當我們今天子元件內容要將資料傳遞到父元件時，就需要使用`emit`這個屬性。\n- 備註：會需要使用emit來觸發外層事件，其實是`props單向資料流關係`，關於這個特性，會在明天介紹props使用注意上再來介紹喔！\n\n範例：[練習連結](https://jsbin.com/huliyem/2/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <p>Parent: {{ message }}<input v-model=\"message\"></p>\n    <hr>\n    <p>\n  Child:\n  <my-component :parent-message=\"message\" @update=\"selfUpdate\"></my-component>\n    </p>\n  </div>\n```\n說明：我們在`my-component`上，自定義一個update事件，當子元件update事件觸發時，則會同時觸發父元件`selfUpdate`事件\nJavaScript部分\n```javascript\n   Vue.component('my-component', {\n      template: `<div>\n                  {{ parentMessage }}\n                  <input v-model=\"message\">\n                  <button @click=\"updateText\">Update</button>\n                </div>`,\n      props: {\n        parentMessage: String //字串型別\n      },\n      data() {\n        return {\n          message: this.parentMessage\n        }\n      },\n      methods: {\n        updateText() {\n                      //事件名稱 value\n          this.$emit('update', this.message); //this.message是指子層的噢！\n        }\n      }\n    });\n\n    new Vue({\n      el: '#app',\n      data: {\n        message: 'hello'\n      },\n      methods: {\n        selfUpdate(val) {\n          this.message = val;\n        }\n      }\n    });\n```\n圖解說明：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645rekb6vUcF9.png)\n\n### 結論\n這就是我們常講的`props in, emit out`的由來\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645maXrfGHfDH.png)\n","slug":"2019-10-02-props、emit介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2u002lzqzi9zy69e7e","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208500\">Vue.js Core 30天屠龍記(第23天): props 屬性</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6\">官網監聽子組件事件</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"元件溝通方式\"><a href=\"#元件溝通方式\" class=\"headerlink\" title=\"元件溝通方式\"></a>元件溝通方式</h3><p>元件與元件之間的溝通方式主要有下面幾種<br>1.props in, emit out<br>2.event bus<br>3.$parent、$children<br>4.Vuex</p>\n<p>我們今天主要會專注在<code>props</code>、<code>emit</code>這一種最常用的方式做介紹，而其餘內容將在日後慢慢介紹。</p>\n<h3 id=\"props介紹與使用\"><a href=\"#props介紹與使用\" class=\"headerlink\" title=\"props介紹與使用\"></a>props介紹與使用</h3><ul>\n<li>用途：父層元件若要將內容傳遞進去子層元件就需要用到<code>props</code>這個屬性。</li>\n<li>寫法：<code>v-bind:props-in=&quot;msg&quot;</code>，其中，<code>props-in</code>是自定義屬性、<code>msg</code>則會去實體內尋找<br>命名注意：HTML 屬性需要使用 kebab-case ，全小寫並使用分隔符號( - )來設定<br>如：<code>props-in</code>  <a href=\"https://ithelp.ithome.com.tw/articles/10208500\">參考資料</a></li>\n<li>為何需要props屬性？<br>還記得，我們昨天有提到元件內的data必須是function型式，確保每個子元件資料的獨立性嗎？正因為這樣，我們也不能透過父元件直接修改子元件內容，因此父元件才需要用到<code>props</code>這個屬性，來將外層資料傳遞進去子元件中。</li>\n</ul>\n<hr>\n<p>範例：<a href=\"https://jsbin.com/hacuvam/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  //取得實體內資料：Msg of Parent!</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span>  </span><br><span class=\"line\">    //透過自定義屬性：`parent-msg`，將實體內資料：Msg of Parent!傳入元件中</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//x-template</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/x-template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">     <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> ParentMsg: </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">parentMsg</span> &#125;&#125;</span><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">     <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> ChildMsg: </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">msg</span> &#125;&#125;</span><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>      </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//global register</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">     props: [<span class=\"string\">&quot;parentMsg&quot;</span>],</span><br><span class=\"line\">     template: <span class=\"string\">&#x27;#my-component&#x27;</span>,</span><br><span class=\"line\">     data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         msg: <span class=\"string\">&#x27;Msg of Child!&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Vue instance</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       msg: <span class=\"string\">&#x27;Msg of Parent!&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>圖解：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645VUYYWBJtdi.png\" alt=\"\"><br>畫面如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645kiYLRY5ttS.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"利用props傳入靜態屬性、動態屬性\"><a href=\"#利用props傳入靜態屬性、動態屬性\" class=\"headerlink\" title=\"利用props傳入靜態屬性、動態屬性\"></a>利用props傳入靜態屬性、動態屬性</h3><ul>\n<li>靜態傳入寫法：不需要加入v-bind<br>寫法：<code>props-in=&quot;靜態傳入&quot;</code>，會傳入純文字  (註：props-in是自定義名稱)</li>\n<li>動態傳入寫法：需要加入 v-bind<br>寫法：<code>v-bind:props-in=&quot;動態傳入&quot;</code> 或是 <code>:props-in=&quot;動態傳入&quot;</code>（註：冒號不能省略)<br>範例： <a href=\"https://jsbin.com/vaxoder/1/edit?html,js,output\">練習連結</a><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">parent-msg</span>=<span class=\"string\">&quot;靜態傳入&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/x-template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> ParentMsg: </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">parentMsg</span> &#125;&#125;</span><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>       </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n圖片如下：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645jpkjTWn5Rp.png\" alt=\"\"></li>\n</ul>\n<hr>\n<h3 id=\"emit介紹\"><a href=\"#emit介紹\" class=\"headerlink\" title=\"emit介紹\"></a>emit介紹</h3><ul>\n<li>目的：當我們今天子元件內容要將資料傳遞到父元件時，就需要使用<code>emit</code>這個屬性。</li>\n<li>備註：會需要使用emit來觸發外層事件，其實是<code>props單向資料流關係</code>，關於這個特性，會在明天介紹props使用注意上再來介紹喔！</li>\n</ul>\n<p>範例：<a href=\"https://jsbin.com/huliyem/2/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Parent: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  Child:</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message</span>=<span class=\"string\">&quot;message&quot;</span> @<span class=\"attr\">update</span>=<span class=\"string\">&quot;selfUpdate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：我們在<code>my-component</code>上，自定義一個update事件，當子元件update事件觸發時，則會同時觸發父元件<code>selfUpdate</code>事件<br>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">   template: <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &#123;&#123; parentMessage &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;input v-model=&quot;message&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;button @click=&quot;updateText&quot;&gt;Update&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">             &lt;/div&gt;`</span>,</span><br><span class=\"line\">   props: &#123;</span><br><span class=\"line\">     parentMessage: <span class=\"built_in\">String</span> <span class=\"comment\">//字串型別</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       message: <span class=\"built_in\">this</span>.parentMessage</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">updateText</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//事件名稱 value</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update&#x27;</span>, <span class=\"built_in\">this</span>.message); <span class=\"comment\">//this.message是指子層的噢！</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">selfUpdate</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.message = val;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>圖解說明：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645rekb6vUcF9.png\" alt=\"\"></p>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>這就是我們常講的<code>props in, emit out</code>的由來<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645maXrfGHfDH.png\" alt=\"\"></p>\n","site":{"data":{}},"length":3140,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208500\">Vue.js Core 30天屠龍記(第23天): props 屬性</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6\">官網監聽子組件事件</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"元件溝通方式\"><a href=\"#元件溝通方式\" class=\"headerlink\" title=\"元件溝通方式\"></a>元件溝通方式</h3><p>元件與元件之間的溝通方式主要有下面幾種<br>1.props in, emit out<br>2.event bus<br>3.$parent、$children<br>4.Vuex</p>\n<p>我們今天主要會專注在<code>props</code>、<code>emit</code>這一種最常用的方式做介紹，而其餘內容將在日後慢慢介紹。</p>\n<h3 id=\"props介紹與使用\"><a href=\"#props介紹與使用\" class=\"headerlink\" title=\"props介紹與使用\"></a>props介紹與使用</h3><ul>\n<li>用途：父層元件若要將內容傳遞進去子層元件就需要用到<code>props</code>這個屬性。</li>\n<li>寫法：<code>v-bind:props-in=&quot;msg&quot;</code>，其中，<code>props-in</code>是自定義屬性、<code>msg</code>則會去實體內尋找<br>命名注意：HTML 屬性需要使用 kebab-case ，全小寫並使用分隔符號( - )來設定<br>如：<code>props-in</code>  <a href=\"https://ithelp.ithome.com.tw/articles/10208500\">參考資料</a></li>\n<li>為何需要props屬性？<br>還記得，我們昨天有提到元件內的data必須是function型式，確保每個子元件資料的獨立性嗎？正因為這樣，我們也不能透過父元件直接修改子元件內容，因此父元件才需要用到<code>props</code>這個屬性，來將外層資料傳遞進去子元件中。</li>\n</ul>\n<hr>\n<p>範例：<a href=\"https://jsbin.com/hacuvam/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>  //取得實體內資料：Msg of Parent!</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-bind:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span>  </span><br><span class=\"line\">    //透過自定義屬性：`parent-msg`，將實體內資料：Msg of Parent!傳入元件中</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//x-template</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/x-template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">   &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">     <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> ParentMsg: </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">parentMsg</span> &#125;&#125;</span><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">     <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> ChildMsg: </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">msg</span> &#125;&#125;</span><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>      </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//global register</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">     props: [<span class=\"string\">&quot;parentMsg&quot;</span>],</span><br><span class=\"line\">     template: <span class=\"string\">&#x27;#my-component&#x27;</span>,</span><br><span class=\"line\">     data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">         msg: <span class=\"string\">&#x27;Msg of Child!&#x27;</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Vue instance</span></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">     el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">     data: &#123;</span><br><span class=\"line\">       msg: <span class=\"string\">&#x27;Msg of Parent!&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>圖解：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645VUYYWBJtdi.png\" alt=\"\"><br>畫面如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645kiYLRY5ttS.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"利用props傳入靜態屬性、動態屬性\"><a href=\"#利用props傳入靜態屬性、動態屬性\" class=\"headerlink\" title=\"利用props傳入靜態屬性、動態屬性\"></a>利用props傳入靜態屬性、動態屬性</h3><ul>\n<li>靜態傳入寫法：不需要加入v-bind<br>寫法：<code>props-in=&quot;靜態傳入&quot;</code>，會傳入純文字  (註：props-in是自定義名稱)</li>\n<li>動態傳入寫法：需要加入 v-bind<br>寫法：<code>v-bind:props-in=&quot;動態傳入&quot;</code> 或是 <code>:props-in=&quot;動態傳入&quot;</code>（註：冒號不能省略)<br>範例： <a href=\"https://jsbin.com/vaxoder/1/edit?html,js,output\">練習連結</a><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">parent-msg</span>=<span class=\"string\">&quot;靜態傳入&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/x-template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;component&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> ParentMsg: </span><span class=\"template-variable\">&#123;&#123; <span class=\"name\">parentMsg</span> &#125;&#125;</span><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>       </span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n圖片如下：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645jpkjTWn5Rp.png\" alt=\"\"></li>\n</ul>\n<hr>\n<h3 id=\"emit介紹\"><a href=\"#emit介紹\" class=\"headerlink\" title=\"emit介紹\"></a>emit介紹</h3><ul>\n<li>目的：當我們今天子元件內容要將資料傳遞到父元件時，就需要使用<code>emit</code>這個屬性。</li>\n<li>備註：會需要使用emit來觸發外層事件，其實是<code>props單向資料流關係</code>，關於這個特性，會在明天介紹props使用注意上再來介紹喔！</li>\n</ul>\n<p>範例：<a href=\"https://jsbin.com/huliyem/2/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Parent: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  Child:</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message</span>=<span class=\"string\">&quot;message&quot;</span> @<span class=\"attr\">update</span>=<span class=\"string\">&quot;selfUpdate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：我們在<code>my-component</code>上，自定義一個update事件，當子元件update事件觸發時，則會同時觸發父元件<code>selfUpdate</code>事件<br>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">   template: <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &#123;&#123; parentMessage &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;input v-model=&quot;message&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;button @click=&quot;updateText&quot;&gt;Update&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">             &lt;/div&gt;`</span>,</span><br><span class=\"line\">   props: &#123;</span><br><span class=\"line\">     parentMessage: <span class=\"built_in\">String</span> <span class=\"comment\">//字串型別</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       message: <span class=\"built_in\">this</span>.parentMessage</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">updateText</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//事件名稱 value</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update&#x27;</span>, <span class=\"built_in\">this</span>.message); <span class=\"comment\">//this.message是指子層的噢！</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">selfUpdate</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.message = val;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p>圖解說明：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645rekb6vUcF9.png\" alt=\"\"></p>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>這就是我們常講的<code>props in, emit out</code>的由來<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645maXrfGHfDH.png\" alt=\"\"></p>"},{"title":"Vue Component(元件) - props使用注意細項(1)","abbrlink":89165536,"date":"2019-10-03T11:36:26.000Z","_content":"參考資料\n- [Vue.js Core 30天屠龍記(第23天): props 屬性](https://ithelp.ithome.com.tw/articles/10208500)\n- [Day19 vue.js - props(4)](https://ithelp.ithome.com.tw/articles/10219200)\n- [官網深入了解組件](https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81)\n<!-- more -->\n-----\n### props型別介紹\n我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？而這時就需要使用到型別驗證。而常見的型別如下：\n參考資料：[官網類型檢查](https://cn.vuejs.org/v2/guide/components-props.html#%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5)\n```\nString\nNumber\nArray\nObject\nFunction\nBoolean\nDate\nSymbol\n```\n> 提醒：型別字首要大寫 如：`type: Number`\n\n#### 範例：\n完整內容請看[codepen](https://codepen.io/chunwen/pen/OJJLVrO?editors=1010)\n```javascript\nprops: {\n        parentMsg: null, // null 代表不檢查型別\n        propA: Number, // 限定數字(Number要大寫)\n        propB: [String, Number], // 多種條件可用 [ ] 隔開\n        propC: {\n          // 必要欄位，且限定字串型別\n          type: String,\n          required: true\n        },\n        // 带有默認值的數字\n        propD: {\n        type: Number,\n        default: 100\n        },\n        // 自定義驗證函數\n        propF: {\n        validator: function (value) {\n        // 这个值必须匹配下列字符串中的一个\n        return ['success', 'warning', 'danger'].indexOf(value) !== -1\n      }\n    }\n}\n```\n> 提醒：因為props是在`元件實體建立前進行驗證`，所以實體內屬性(如data、computed等)在default或validator函數中是不可用的。（待補充）\n\n> 若型別錯誤，會出現下面畫面\n> 注意：檢查型別驗證是否錯誤，只有`開發版本（development）`上才會出現，`production版本`不會出現\n![https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png](https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png)\n\n\n這邊特別注意：\n1.驗證object時，default必須為一個function 如下\n```javascript\npropE: {\n          // Object 型別，代表可接受的是個物件型別\n          type: Object,\n          default: function () {\n            return {\n              message: 'hello'\n            }\n          }\n        },\n```\n2.這兩種寫法相同喔！都是對型別不做任何驗證\n```javascript\nprops:['parentMsg']\nprops:{\n    parentMsg:null\n}\n```\n\n#### 小結論\n型別驗證有助於我們在開發時候，提前了解哪邊資料錯誤。但實際上，即使資料傳入資料型別錯誤，畫面依舊會將傳入資料顯示在畫面上喔！\n\n-----\n\n\n### 單向資料流\n說明：\n我們知道，Vue在傳遞資料時，是透過Props將資料由外部往內傳遞，而且所有的 props 都使得其父子 props 之間形成了一個`單向下行綁定`：父級prop 的更新會向下流動到子組件中，但是反過來則不行。\n\n後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）\n#### 錯誤範例示範\n[連結](https://codepen.io/chunwen/pen/bGGbpYo?editors=1010)\nHTML部分\n```html\n<div id=\"app\">\n    <p>\n      Child:\n      <my-component :parent-message=\"message\"></my-component>\n    </p>\n  </div>\n```\nJavaScript部分\n```javascript\n    Vue.component('my-component', {\n      template: `<span>\n        <input v-model=\"parentMessage\">  資料來源：父元素\n        </span>`,\n      props: {\n        parentMessage: String\n      },\n    });\n\n    new Vue({\n      el: '#app',\n      data: {\n        message: 'hello'\n      }\n    });\n```\n圖示\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645ssXLEB1h2d.png)\n\n> 如果我們要修正錯誤，該如何解決呢？\n- 只要新宣告一個參數來接受外部修改資料就好～寫法如下\n- 或是在元件中使用computed`get`、`set`\n- 這兩種寫法目的：都是讓資料獨立存在於子層而非父層\n```javascript\nVue.component('photo', {\n            props: ['imgUrl'],\n            template: '#photo',\n            data: function () {\n              return {\n                newUrl: this.imgUrl\n              }\n            }\n          })\n```\n#### 當V-model遇到props \n[codepen示範](https://codepen.io/chunwen/pen/NWKXqbN?editors=1010)\n範例如下：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645DPjBb2SgLz.png)\n透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中`更改４號`是`無法更改1、2、3的資料`\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645rsZw0ZieGz.png)\n","source":"_posts/2019-10-03-props使用注意細項.md","raw":"---\ntitle: Vue Component(元件) - props使用注意細項(1)\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 89165536\ndate: 2019-10-03 19:36:26\n---\n參考資料\n- [Vue.js Core 30天屠龍記(第23天): props 屬性](https://ithelp.ithome.com.tw/articles/10208500)\n- [Day19 vue.js - props(4)](https://ithelp.ithome.com.tw/articles/10219200)\n- [官網深入了解組件](https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81)\n<!-- more -->\n-----\n### props型別介紹\n我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？而這時就需要使用到型別驗證。而常見的型別如下：\n參考資料：[官網類型檢查](https://cn.vuejs.org/v2/guide/components-props.html#%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5)\n```\nString\nNumber\nArray\nObject\nFunction\nBoolean\nDate\nSymbol\n```\n> 提醒：型別字首要大寫 如：`type: Number`\n\n#### 範例：\n完整內容請看[codepen](https://codepen.io/chunwen/pen/OJJLVrO?editors=1010)\n```javascript\nprops: {\n        parentMsg: null, // null 代表不檢查型別\n        propA: Number, // 限定數字(Number要大寫)\n        propB: [String, Number], // 多種條件可用 [ ] 隔開\n        propC: {\n          // 必要欄位，且限定字串型別\n          type: String,\n          required: true\n        },\n        // 带有默認值的數字\n        propD: {\n        type: Number,\n        default: 100\n        },\n        // 自定義驗證函數\n        propF: {\n        validator: function (value) {\n        // 这个值必须匹配下列字符串中的一个\n        return ['success', 'warning', 'danger'].indexOf(value) !== -1\n      }\n    }\n}\n```\n> 提醒：因為props是在`元件實體建立前進行驗證`，所以實體內屬性(如data、computed等)在default或validator函數中是不可用的。（待補充）\n\n> 若型別錯誤，會出現下面畫面\n> 注意：檢查型別驗證是否錯誤，只有`開發版本（development）`上才會出現，`production版本`不會出現\n![https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png](https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png)\n\n\n這邊特別注意：\n1.驗證object時，default必須為一個function 如下\n```javascript\npropE: {\n          // Object 型別，代表可接受的是個物件型別\n          type: Object,\n          default: function () {\n            return {\n              message: 'hello'\n            }\n          }\n        },\n```\n2.這兩種寫法相同喔！都是對型別不做任何驗證\n```javascript\nprops:['parentMsg']\nprops:{\n    parentMsg:null\n}\n```\n\n#### 小結論\n型別驗證有助於我們在開發時候，提前了解哪邊資料錯誤。但實際上，即使資料傳入資料型別錯誤，畫面依舊會將傳入資料顯示在畫面上喔！\n\n-----\n\n\n### 單向資料流\n說明：\n我們知道，Vue在傳遞資料時，是透過Props將資料由外部往內傳遞，而且所有的 props 都使得其父子 props 之間形成了一個`單向下行綁定`：父級prop 的更新會向下流動到子組件中，但是反過來則不行。\n\n後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）\n#### 錯誤範例示範\n[連結](https://codepen.io/chunwen/pen/bGGbpYo?editors=1010)\nHTML部分\n```html\n<div id=\"app\">\n    <p>\n      Child:\n      <my-component :parent-message=\"message\"></my-component>\n    </p>\n  </div>\n```\nJavaScript部分\n```javascript\n    Vue.component('my-component', {\n      template: `<span>\n        <input v-model=\"parentMessage\">  資料來源：父元素\n        </span>`,\n      props: {\n        parentMessage: String\n      },\n    });\n\n    new Vue({\n      el: '#app',\n      data: {\n        message: 'hello'\n      }\n    });\n```\n圖示\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645ssXLEB1h2d.png)\n\n> 如果我們要修正錯誤，該如何解決呢？\n- 只要新宣告一個參數來接受外部修改資料就好～寫法如下\n- 或是在元件中使用computed`get`、`set`\n- 這兩種寫法目的：都是讓資料獨立存在於子層而非父層\n```javascript\nVue.component('photo', {\n            props: ['imgUrl'],\n            template: '#photo',\n            data: function () {\n              return {\n                newUrl: this.imgUrl\n              }\n            }\n          })\n```\n#### 當V-model遇到props \n[codepen示範](https://codepen.io/chunwen/pen/NWKXqbN?editors=1010)\n範例如下：\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645DPjBb2SgLz.png)\n透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中`更改４號`是`無法更改1、2、3的資料`\n![](https://ithelp.ithome.com.tw/upload/images/20191002/20114645rsZw0ZieGz.png)\n","slug":"2019-10-03-props使用注意細項","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2x002ozqzi7or9gbff","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208500\">Vue.js Core 30天屠龍記(第23天): props 屬性</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10219200\">Day19 vue.js - props(4)</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81\">官網深入了解組件</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"props型別介紹\"><a href=\"#props型別介紹\" class=\"headerlink\" title=\"props型別介紹\"></a>props型別介紹</h3><p>我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？而這時就需要使用到型別驗證。而常見的型別如下：<br>參考資料：<a href=\"https://cn.vuejs.org/v2/guide/components-props.html#%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\">官網類型檢查</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String</span><br><span class=\"line\">Number</span><br><span class=\"line\">Array</span><br><span class=\"line\">Object</span><br><span class=\"line\">Function</span><br><span class=\"line\">Boolean</span><br><span class=\"line\">Date</span><br><span class=\"line\">Symbol</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：型別字首要大寫 如：<code>type: Number</code></p>\n</blockquote>\n<h4 id=\"範例：\"><a href=\"#範例：\" class=\"headerlink\" title=\"範例：\"></a>範例：</h4><p>完整內容請看<a href=\"https://codepen.io/chunwen/pen/OJJLVrO?editors=1010\">codepen</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">        parentMsg: <span class=\"literal\">null</span>, <span class=\"comment\">// null 代表不檢查型別</span></span><br><span class=\"line\">        propA: <span class=\"built_in\">Number</span>, <span class=\"comment\">// 限定數字(Number要大寫)</span></span><br><span class=\"line\">        propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>], <span class=\"comment\">// 多種條件可用 [ ] 隔開</span></span><br><span class=\"line\">        propC: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 必要欄位，且限定字串型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 带有默認值的數字</span></span><br><span class=\"line\">        propD: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 自定義驗證函數</span></span><br><span class=\"line\">        propF: &#123;</span><br><span class=\"line\">        validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个值必须匹配下列字符串中的一个</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span>, <span class=\"string\">&#x27;warning&#x27;</span>, <span class=\"string\">&#x27;danger&#x27;</span>].indexOf(value) !== -<span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：因為props是在<code>元件實體建立前進行驗證</code>，所以實體內屬性(如data、computed等)在default或validator函數中是不可用的。（待補充）</p>\n</blockquote>\n<blockquote>\n<p>若型別錯誤，會出現下面畫面<br>注意：檢查型別驗證是否錯誤，只有<code>開發版本（development）</code>上才會出現，<code>production版本</code>不會出現<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png\"></p>\n</blockquote>\n<p>這邊特別注意：<br>1.驗證object時，default必須為一個function 如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">propE: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Object 型別，代表可接受的是個物件型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">          <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">              message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.這兩種寫法相同喔！都是對型別不做任何驗證</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:[<span class=\"string\">&#x27;parentMsg&#x27;</span>]</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">    parentMsg:<span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>型別驗證有助於我們在開發時候，提前了解哪邊資料錯誤。但實際上，即使資料傳入資料型別錯誤，畫面依舊會將傳入資料顯示在畫面上喔！</p>\n<hr>\n<h3 id=\"單向資料流\"><a href=\"#單向資料流\" class=\"headerlink\" title=\"單向資料流\"></a>單向資料流</h3><p>說明：<br>我們知道，Vue在傳遞資料時，是透過Props將資料由外部往內傳遞，而且所有的 props 都使得其父子 props 之間形成了一個<code>單向下行綁定</code>：父級prop 的更新會向下流動到子組件中，但是反過來則不行。</p>\n<p>後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）</p>\n<h4 id=\"錯誤範例示範\"><a href=\"#錯誤範例示範\" class=\"headerlink\" title=\"錯誤範例示範\"></a>錯誤範例示範</h4><p><a href=\"https://codepen.io/chunwen/pen/bGGbpYo?editors=1010\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Child:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input v-model=&quot;parentMessage&quot;&gt;  資料來源：父元素</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;`</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    parentMessage: <span class=\"built_in\">String</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>圖示<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645ssXLEB1h2d.png\" alt=\"\"></p>\n<blockquote>\n<p>如果我們要修正錯誤，該如何解決呢？</p>\n</blockquote>\n<ul>\n<li>只要新宣告一個參數來接受外部修改資料就好～寫法如下</li>\n<li>或是在元件中使用computed<code>get</code>、<code>set</code></li>\n<li>這兩種寫法目的：都是讓資料獨立存在於子層而非父層<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;photo&#x27;</span>, &#123;</span><br><span class=\"line\">            props: [<span class=\"string\">&#x27;imgUrl&#x27;</span>],</span><br><span class=\"line\">            template: <span class=\"string\">&#x27;#photo&#x27;</span>,</span><br><span class=\"line\">            data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                newUrl: <span class=\"built_in\">this</span>.imgUrl</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"當V-model遇到props\"><a href=\"#當V-model遇到props\" class=\"headerlink\" title=\"當V-model遇到props\"></a>當V-model遇到props</h4><a href=\"https://codepen.io/chunwen/pen/NWKXqbN?editors=1010\">codepen示範</a><br>範例如下：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645DPjBb2SgLz.png\" alt=\"\"><br>透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中<code>更改４號</code>是<code>無法更改1、2、3的資料</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645rsZw0ZieGz.png\" alt=\"\"></li>\n</ul>\n","site":{"data":{}},"length":2140,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10208500\">Vue.js Core 30天屠龍記(第23天): props 屬性</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10219200\">Day19 vue.js - props(4)</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81\">官網深入了解組件</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"props型別介紹\"><a href=\"#props型別介紹\" class=\"headerlink\" title=\"props型別介紹\"></a>props型別介紹</h3><p>我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？而這時就需要使用到型別驗證。而常見的型別如下：<br>參考資料：<a href=\"https://cn.vuejs.org/v2/guide/components-props.html#%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\">官網類型檢查</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String</span><br><span class=\"line\">Number</span><br><span class=\"line\">Array</span><br><span class=\"line\">Object</span><br><span class=\"line\">Function</span><br><span class=\"line\">Boolean</span><br><span class=\"line\">Date</span><br><span class=\"line\">Symbol</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：型別字首要大寫 如：<code>type: Number</code></p>\n</blockquote>\n<h4 id=\"範例：\"><a href=\"#範例：\" class=\"headerlink\" title=\"範例：\"></a>範例：</h4><p>完整內容請看<a href=\"https://codepen.io/chunwen/pen/OJJLVrO?editors=1010\">codepen</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">        parentMsg: <span class=\"literal\">null</span>, <span class=\"comment\">// null 代表不檢查型別</span></span><br><span class=\"line\">        propA: <span class=\"built_in\">Number</span>, <span class=\"comment\">// 限定數字(Number要大寫)</span></span><br><span class=\"line\">        propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>], <span class=\"comment\">// 多種條件可用 [ ] 隔開</span></span><br><span class=\"line\">        propC: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 必要欄位，且限定字串型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 带有默認值的數字</span></span><br><span class=\"line\">        propD: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: <span class=\"number\">100</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 自定義驗證函數</span></span><br><span class=\"line\">        propF: &#123;</span><br><span class=\"line\">        validator: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个值必须匹配下列字符串中的一个</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span>, <span class=\"string\">&#x27;warning&#x27;</span>, <span class=\"string\">&#x27;danger&#x27;</span>].indexOf(value) !== -<span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：因為props是在<code>元件實體建立前進行驗證</code>，所以實體內屬性(如data、computed等)在default或validator函數中是不可用的。（待補充）</p>\n</blockquote>\n<blockquote>\n<p>若型別錯誤，會出現下面畫面<br>注意：檢查型別驗證是否錯誤，只有<code>開發版本（development）</code>上才會出現，<code>production版本</code>不會出現<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191003/20114645Z5hC5XyObA.png\"></p>\n</blockquote>\n<p>這邊特別注意：<br>1.驗證object時，default必須為一個function 如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">propE: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Object 型別，代表可接受的是個物件型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">          <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">              message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.這兩種寫法相同喔！都是對型別不做任何驗證</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:[<span class=\"string\">&#x27;parentMsg&#x27;</span>]</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">    parentMsg:<span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h4><p>型別驗證有助於我們在開發時候，提前了解哪邊資料錯誤。但實際上，即使資料傳入資料型別錯誤，畫面依舊會將傳入資料顯示在畫面上喔！</p>\n<hr>\n<h3 id=\"單向資料流\"><a href=\"#單向資料流\" class=\"headerlink\" title=\"單向資料流\"></a>單向資料流</h3><p>說明：<br>我們知道，Vue在傳遞資料時，是透過Props將資料由外部往內傳遞，而且所有的 props 都使得其父子 props 之間形成了一個<code>單向下行綁定</code>：父級prop 的更新會向下流動到子組件中，但是反過來則不行。</p>\n<p>後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）</p>\n<h4 id=\"錯誤範例示範\"><a href=\"#錯誤範例示範\" class=\"headerlink\" title=\"錯誤範例示範\"></a>錯誤範例示範</h4><p><a href=\"https://codepen.io/chunwen/pen/bGGbpYo?editors=1010\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Child:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">  template: <span class=\"string\">`&lt;span&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input v-model=&quot;parentMessage&quot;&gt;  資料來源：父元素</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/span&gt;`</span>,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    parentMessage: <span class=\"built_in\">String</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>圖示<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645ssXLEB1h2d.png\" alt=\"\"></p>\n<blockquote>\n<p>如果我們要修正錯誤，該如何解決呢？</p>\n</blockquote>\n<ul>\n<li>只要新宣告一個參數來接受外部修改資料就好～寫法如下</li>\n<li>或是在元件中使用computed<code>get</code>、<code>set</code></li>\n<li>這兩種寫法目的：都是讓資料獨立存在於子層而非父層<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;photo&#x27;</span>, &#123;</span><br><span class=\"line\">            props: [<span class=\"string\">&#x27;imgUrl&#x27;</span>],</span><br><span class=\"line\">            template: <span class=\"string\">&#x27;#photo&#x27;</span>,</span><br><span class=\"line\">            data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                newUrl: <span class=\"built_in\">this</span>.imgUrl</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"當V-model遇到props\"><a href=\"#當V-model遇到props\" class=\"headerlink\" title=\"當V-model遇到props\"></a>當V-model遇到props</h4><a href=\"https://codepen.io/chunwen/pen/NWKXqbN?editors=1010\">codepen示範</a><br>範例如下：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645DPjBb2SgLz.png\" alt=\"\"><br>透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中<code>更改４號</code>是<code>無法更改1、2、3的資料</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191002/20114645rsZw0ZieGz.png\" alt=\"\"></li>\n</ul>"},{"title":"Vue Component(元件)-props使用注意細項(2)","abbrlink":2774174283,"date":"2019-10-04T11:14:31.000Z","_content":"參考資料\n- [官網深入了解組件](https://cn.vuejs.org/v2/guide/components-props.html#非-Prop-的特性)\n- [How to Specify Where Non-Prop Attributes Should Be Used](https://tahazsh.com/vuebyte-non-prop-attributes)\n- [Vue.js and Non-Prop Attributes](https://www.raymondcamden.com/2018/04/03/til-vuejs-and-non-prop-attributes)\n<!-- more -->\n-----\n\n### 狀況一：讀取遠端資料\n我們今天如果使用AJAX讀取遠端資料時，並透過props將資料傳入子元件時，有可能在畫面上無法正常顯示（如下圖）。而這個原因就是AJAX非同步特性，造成遠端回傳資料尚未載入，而使畫面一片空白。\n![https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png](https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png)\n\n這時，我們該如何解決呢？\n我們可以透過簡單v-if來判斷，當資料完全載入時，在呈現於畫面上就可以瞜。\n#### 寫法如下：\n[範例連結](https://codepen.io/chunwen/pen/NWWKEMo?editors=1010)\n```html\n<div id=\"app\">\n  <div class=\"row\">\n    <div class=\"col-sm-4\">\n      <!-- 這邊主要因為AJAX時間差，造成卡片載入錯誤。我們只要使用v-if成功載入時再渲染就不會跳錯 -->\n      <card :user-data=\"user\" v-if=\"user.gender\"></card>\n    </div>\n  </div>\n</div>\n\n```\n\n-----\n\n### 狀況二：非Prop的特性（Non-Prop Attributes）\n說明：一個非prop 特性是指傳向一個組件，但是該組件並沒有`相對應prop定義的特性。`\n> 我自己的理解如下（如果有錯，再請大家糾正)\n如下範例：假設今天我們在元件上要放置一張圖片，而我們在template中並沒撰寫圖片的`height`、`width`、`alt`屬性，這時Vue允許我們可以直接將這些特性撰寫在HTML上，如此一來這些特性就會被放置在元件實體內。(感覺有點像data-* ，自定義屬性方法)\n\n例子如下：[練習連結](https://codepen.io/chunwen/pen/NWWKMpP?editors=1010)\nHTML部分\n```html\n<div id=\"app\">\n  <h2>Default</h2>\n  <nicolas-cage alt=\"hello\"></nicolas-cage>\n  <p>\n  <h2>H/W</h2>\n  <nicolas-cage width=\"199\" height=\"199\"></nicolas-cage>\n</div>\n```\nJavaScript\n```javascript\nVue.component('nicolas-cage', {\n  template:'<img :src=\"url\" />', //取得computed中url結果\n  data() {\n    return {\n    }\n  },\n  computed:{\n    url:function() {\n      let theUrl = 'https://fakeimg.pl/'+this.width+'/'+this.height;\n      return theUrl;\n    }\n  },\n  props:{\n    height:{\n      default:400,\n    },\n    width:{\n      default:400\n    }\n  }\n});\n\nvar app = new Vue({\n  el: '#app',\n  data() {\n    return {\n    }\n  }\n});\n\n```\n說明：可以注意到元件的template中並沒有用`mustache語法`來綁定外部傳進來資料。\n\n#### 替換/合併已有的特性\n我們上面提到，如果在`元件template上`並沒有相對應props屬性，但我們卻在HTML template上直接撰寫attribute，Vue會讓這些attribute直接寫入元件實體中。\n[範例](https://codepen.io/chunwen/pen/PooYxqO?editors=1010)\n`<bootstrap-date-input>`的模板內容\n```html\n<input type=\"date\" class=\"form-control\">\n```\nHTML上模板\n```html\n<bootstrap-date-input\n  data-date-picker=\"activated\"\n  class=\"date-picker-theme-dark\"\n></bootstrap-date-input>\n```\n最終顯示結果\nform-control，這是在組件的模板內設置好的\ndate-picker-theme-dark，這是從組件的父級傳入的\n![https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png](https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png)\n\n#### 禁用特性繼承\n剛有提到，因為非Prop的特性，即使我們在元件中並沒有使用props來定義型態或接受資料，Vue仍然會把在HTML上撰寫的特性放置於元件實體中。而今天如果我們不想要繼承元件內實體屬性，我們可以這樣做~\n範例如下：\n```javascript\nVue.component('my-component', {\n  inheritAttrs: false,\n  // ...\n})\n```\n而我們也因為可以設定`inheritAttrs: false`和`$attrs`緣故，可以自行決定哪些attribute要放置到哪個元素中。像是下方範例，我們透過`v-bind=\"$attrs\"`，將元件內實體屬性放置在`input`中。\n範例如下：\n```javascript\nVue.component('base-input', {\n  inheritAttrs: false,\n  props: ['label', 'value'],\n  template: `\n    <label>\n      {{ label }}\n      <input\n        v-bind=\"$attrs\"\n        v-bind:value=\"value\"\n        v-on:input=\"$emit('input', $event.target.value)\"\n      >\n    </label>\n  `\n})\n```\n\n\n-----\n\n### 後記\n在撰寫`非Prop的特性（Non-Prop Attributes）`時，因為我是第一次接觸這個特性，撰寫起來有點卡卡的，也不太確定是否理解正確（哈哈）。我其實對於實務上會用在哪些地方，其實我也蠻好奇的，若有前願意分享也歡迎下方留言，那我們就明天見啦～\n\n\n","source":"_posts/2019-10-04-props使用注意細項.md","raw":"---\ntitle: Vue Component(元件)-props使用注意細項(2)\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 2774174283\ndate: 2019-10-04 19:14:31\n---\n參考資料\n- [官網深入了解組件](https://cn.vuejs.org/v2/guide/components-props.html#非-Prop-的特性)\n- [How to Specify Where Non-Prop Attributes Should Be Used](https://tahazsh.com/vuebyte-non-prop-attributes)\n- [Vue.js and Non-Prop Attributes](https://www.raymondcamden.com/2018/04/03/til-vuejs-and-non-prop-attributes)\n<!-- more -->\n-----\n\n### 狀況一：讀取遠端資料\n我們今天如果使用AJAX讀取遠端資料時，並透過props將資料傳入子元件時，有可能在畫面上無法正常顯示（如下圖）。而這個原因就是AJAX非同步特性，造成遠端回傳資料尚未載入，而使畫面一片空白。\n![https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png](https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png)\n\n這時，我們該如何解決呢？\n我們可以透過簡單v-if來判斷，當資料完全載入時，在呈現於畫面上就可以瞜。\n#### 寫法如下：\n[範例連結](https://codepen.io/chunwen/pen/NWWKEMo?editors=1010)\n```html\n<div id=\"app\">\n  <div class=\"row\">\n    <div class=\"col-sm-4\">\n      <!-- 這邊主要因為AJAX時間差，造成卡片載入錯誤。我們只要使用v-if成功載入時再渲染就不會跳錯 -->\n      <card :user-data=\"user\" v-if=\"user.gender\"></card>\n    </div>\n  </div>\n</div>\n\n```\n\n-----\n\n### 狀況二：非Prop的特性（Non-Prop Attributes）\n說明：一個非prop 特性是指傳向一個組件，但是該組件並沒有`相對應prop定義的特性。`\n> 我自己的理解如下（如果有錯，再請大家糾正)\n如下範例：假設今天我們在元件上要放置一張圖片，而我們在template中並沒撰寫圖片的`height`、`width`、`alt`屬性，這時Vue允許我們可以直接將這些特性撰寫在HTML上，如此一來這些特性就會被放置在元件實體內。(感覺有點像data-* ，自定義屬性方法)\n\n例子如下：[練習連結](https://codepen.io/chunwen/pen/NWWKMpP?editors=1010)\nHTML部分\n```html\n<div id=\"app\">\n  <h2>Default</h2>\n  <nicolas-cage alt=\"hello\"></nicolas-cage>\n  <p>\n  <h2>H/W</h2>\n  <nicolas-cage width=\"199\" height=\"199\"></nicolas-cage>\n</div>\n```\nJavaScript\n```javascript\nVue.component('nicolas-cage', {\n  template:'<img :src=\"url\" />', //取得computed中url結果\n  data() {\n    return {\n    }\n  },\n  computed:{\n    url:function() {\n      let theUrl = 'https://fakeimg.pl/'+this.width+'/'+this.height;\n      return theUrl;\n    }\n  },\n  props:{\n    height:{\n      default:400,\n    },\n    width:{\n      default:400\n    }\n  }\n});\n\nvar app = new Vue({\n  el: '#app',\n  data() {\n    return {\n    }\n  }\n});\n\n```\n說明：可以注意到元件的template中並沒有用`mustache語法`來綁定外部傳進來資料。\n\n#### 替換/合併已有的特性\n我們上面提到，如果在`元件template上`並沒有相對應props屬性，但我們卻在HTML template上直接撰寫attribute，Vue會讓這些attribute直接寫入元件實體中。\n[範例](https://codepen.io/chunwen/pen/PooYxqO?editors=1010)\n`<bootstrap-date-input>`的模板內容\n```html\n<input type=\"date\" class=\"form-control\">\n```\nHTML上模板\n```html\n<bootstrap-date-input\n  data-date-picker=\"activated\"\n  class=\"date-picker-theme-dark\"\n></bootstrap-date-input>\n```\n最終顯示結果\nform-control，這是在組件的模板內設置好的\ndate-picker-theme-dark，這是從組件的父級傳入的\n![https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png](https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png)\n\n#### 禁用特性繼承\n剛有提到，因為非Prop的特性，即使我們在元件中並沒有使用props來定義型態或接受資料，Vue仍然會把在HTML上撰寫的特性放置於元件實體中。而今天如果我們不想要繼承元件內實體屬性，我們可以這樣做~\n範例如下：\n```javascript\nVue.component('my-component', {\n  inheritAttrs: false,\n  // ...\n})\n```\n而我們也因為可以設定`inheritAttrs: false`和`$attrs`緣故，可以自行決定哪些attribute要放置到哪個元素中。像是下方範例，我們透過`v-bind=\"$attrs\"`，將元件內實體屬性放置在`input`中。\n範例如下：\n```javascript\nVue.component('base-input', {\n  inheritAttrs: false,\n  props: ['label', 'value'],\n  template: `\n    <label>\n      {{ label }}\n      <input\n        v-bind=\"$attrs\"\n        v-bind:value=\"value\"\n        v-on:input=\"$emit('input', $event.target.value)\"\n      >\n    </label>\n  `\n})\n```\n\n\n-----\n\n### 後記\n在撰寫`非Prop的特性（Non-Prop Attributes）`時，因為我是第一次接觸這個特性，撰寫起來有點卡卡的，也不太確定是否理解正確（哈哈）。我其實對於實務上會用在哪些地方，其實我也蠻好奇的，若有前願意分享也歡迎下方留言，那我們就明天見啦～\n\n\n","slug":"2019-10-04-props使用注意細項","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t2z002szqzi5ezuaxpi","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-props.html#非-Prop-的特性\">官網深入了解組件</a></li>\n<li><a href=\"https://tahazsh.com/vuebyte-non-prop-attributes\">How to Specify Where Non-Prop Attributes Should Be Used</a></li>\n<li><a href=\"https://www.raymondcamden.com/2018/04/03/til-vuejs-and-non-prop-attributes\">Vue.js and Non-Prop Attributes</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"狀況一：讀取遠端資料\"><a href=\"#狀況一：讀取遠端資料\" class=\"headerlink\" title=\"狀況一：讀取遠端資料\"></a>狀況一：讀取遠端資料</h3><p>我們今天如果使用AJAX讀取遠端資料時，並透過props將資料傳入子元件時，有可能在畫面上無法正常顯示（如下圖）。而這個原因就是AJAX非同步特性，造成遠端回傳資料尚未載入，而使畫面一片空白。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png\"></p>\n<p>這時，我們該如何解決呢？<br>我們可以透過簡單v-if來判斷，當資料完全載入時，在呈現於畫面上就可以瞜。</p>\n<h4 id=\"寫法如下：\"><a href=\"#寫法如下：\" class=\"headerlink\" title=\"寫法如下：\"></a>寫法如下：</h4><p><a href=\"https://codepen.io/chunwen/pen/NWWKEMo?editors=1010\">範例連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 這邊主要因為AJAX時間差，造成卡片載入錯誤。我們只要使用v-if成功載入時再渲染就不會跳錯 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">card</span> <span class=\"attr\">:user-data</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;user.gender&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">card</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"狀況二：非Prop的特性（Non-Prop-Attributes）\"><a href=\"#狀況二：非Prop的特性（Non-Prop-Attributes）\" class=\"headerlink\" title=\"狀況二：非Prop的特性（Non-Prop Attributes）\"></a>狀況二：非Prop的特性（Non-Prop Attributes）</h3><p>說明：一個非prop 特性是指傳向一個組件，但是該組件並沒有<code>相對應prop定義的特性。</code></p>\n<blockquote>\n<p>我自己的理解如下（如果有錯，再請大家糾正)<br>如下範例：假設今天我們在元件上要放置一張圖片，而我們在template中並沒撰寫圖片的<code>height</code>、<code>width</code>、<code>alt</code>屬性，這時Vue允許我們可以直接將這些特性撰寫在HTML上，如此一來這些特性就會被放置在元件實體內。(感覺有點像data-* ，自定義屬性方法)</p>\n</blockquote>\n<p>例子如下：<a href=\"https://codepen.io/chunwen/pen/NWWKMpP?editors=1010\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Default<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nicolas-cage</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nicolas-cage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>H/W<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nicolas-cage</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;199&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;199&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nicolas-cage</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;nicolas-cage&#x27;</span>, &#123;</span><br><span class=\"line\">  template:<span class=\"string\">&#x27;&lt;img :src=&quot;url&quot; /&gt;&#x27;</span>, <span class=\"comment\">//取得computed中url結果</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed:&#123;</span><br><span class=\"line\">    url:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> theUrl = <span class=\"string\">&#x27;https://fakeimg.pl/&#x27;</span>+<span class=\"built_in\">this</span>.width+<span class=\"string\">&#x27;/&#x27;</span>+<span class=\"built_in\">this</span>.height;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> theUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props:&#123;</span><br><span class=\"line\">    height:&#123;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:<span class=\"number\">400</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    width:&#123;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:<span class=\"number\">400</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>說明：可以注意到元件的template中並沒有用<code>mustache語法</code>來綁定外部傳進來資料。</p>\n<h4 id=\"替換-合併已有的特性\"><a href=\"#替換-合併已有的特性\" class=\"headerlink\" title=\"替換/合併已有的特性\"></a>替換/合併已有的特性</h4><p>我們上面提到，如果在<code>元件template上</code>並沒有相對應props屬性，但我們卻在HTML template上直接撰寫attribute，Vue會讓這些attribute直接寫入元件實體中。<br><a href=\"https://codepen.io/chunwen/pen/PooYxqO?editors=1010\">範例</a><br><code>&lt;bootstrap-date-input&gt;</code>的模板內容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>HTML上模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bootstrap-date-input</span><br><span class=\"line\">  data-date-picker=&quot;activated&quot;</span><br><span class=\"line\">  class=&quot;date-picker-theme-dark&quot;</span><br><span class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">bootstrap-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最終顯示結果<br>form-control，這是在組件的模板內設置好的<br>date-picker-theme-dark，這是從組件的父級傳入的<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png\"></p>\n<h4 id=\"禁用特性繼承\"><a href=\"#禁用特性繼承\" class=\"headerlink\" title=\"禁用特性繼承\"></a>禁用特性繼承</h4><p>剛有提到，因為非Prop的特性，即使我們在元件中並沒有使用props來定義型態或接受資料，Vue仍然會把在HTML上撰寫的特性放置於元件實體中。而今天如果我們不想要繼承元件內實體屬性，我們可以這樣做~<br>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>而我們也因為可以設定<code>inheritAttrs: false</code>和<code>$attrs</code>緣故，可以自行決定哪些attribute要放置到哪個元素中。像是下方範例，我們透過<code>v-bind=&quot;$attrs&quot;</code>，將元件內實體屬性放置在<code>input</code>中。<br>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;base-input&#x27;</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">&#x27;label&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>],</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;label&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; label &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input</span></span><br><span class=\"line\"><span class=\"string\">        v-bind=&quot;$attrs&quot;</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=&quot;value&quot;</span></span><br><span class=\"line\"><span class=\"string\">        v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class=\"line\"><span class=\"string\">      &gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h3 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h3><p>在撰寫<code>非Prop的特性（Non-Prop Attributes）</code>時，因為我是第一次接觸這個特性，撰寫起來有點卡卡的，也不太確定是否理解正確（哈哈）。我其實對於實務上會用在哪些地方，其實我也蠻好奇的，若有前願意分享也歡迎下方留言，那我們就明天見啦～</p>\n","site":{"data":{}},"length":2787,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-props.html#非-Prop-的特性\">官網深入了解組件</a></li>\n<li><a href=\"https://tahazsh.com/vuebyte-non-prop-attributes\">How to Specify Where Non-Prop Attributes Should Be Used</a></li>\n<li><a href=\"https://www.raymondcamden.com/2018/04/03/til-vuejs-and-non-prop-attributes\">Vue.js and Non-Prop Attributes</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"狀況一：讀取遠端資料\"><a href=\"#狀況一：讀取遠端資料\" class=\"headerlink\" title=\"狀況一：讀取遠端資料\"></a>狀況一：讀取遠端資料</h3><p>我們今天如果使用AJAX讀取遠端資料時，並透過props將資料傳入子元件時，有可能在畫面上無法正常顯示（如下圖）。而這個原因就是AJAX非同步特性，造成遠端回傳資料尚未載入，而使畫面一片空白。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645pD3pABOF0K.png\"></p>\n<p>這時，我們該如何解決呢？<br>我們可以透過簡單v-if來判斷，當資料完全載入時，在呈現於畫面上就可以瞜。</p>\n<h4 id=\"寫法如下：\"><a href=\"#寫法如下：\" class=\"headerlink\" title=\"寫法如下：\"></a>寫法如下：</h4><p><a href=\"https://codepen.io/chunwen/pen/NWWKEMo?editors=1010\">範例連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 這邊主要因為AJAX時間差，造成卡片載入錯誤。我們只要使用v-if成功載入時再渲染就不會跳錯 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">card</span> <span class=\"attr\">:user-data</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;user.gender&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">card</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"狀況二：非Prop的特性（Non-Prop-Attributes）\"><a href=\"#狀況二：非Prop的特性（Non-Prop-Attributes）\" class=\"headerlink\" title=\"狀況二：非Prop的特性（Non-Prop Attributes）\"></a>狀況二：非Prop的特性（Non-Prop Attributes）</h3><p>說明：一個非prop 特性是指傳向一個組件，但是該組件並沒有<code>相對應prop定義的特性。</code></p>\n<blockquote>\n<p>我自己的理解如下（如果有錯，再請大家糾正)<br>如下範例：假設今天我們在元件上要放置一張圖片，而我們在template中並沒撰寫圖片的<code>height</code>、<code>width</code>、<code>alt</code>屬性，這時Vue允許我們可以直接將這些特性撰寫在HTML上，如此一來這些特性就會被放置在元件實體內。(感覺有點像data-* ，自定義屬性方法)</p>\n</blockquote>\n<p>例子如下：<a href=\"https://codepen.io/chunwen/pen/NWWKMpP?editors=1010\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Default<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nicolas-cage</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nicolas-cage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>H/W<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">nicolas-cage</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;199&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;199&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">nicolas-cage</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;nicolas-cage&#x27;</span>, &#123;</span><br><span class=\"line\">  template:<span class=\"string\">&#x27;&lt;img :src=&quot;url&quot; /&gt;&#x27;</span>, <span class=\"comment\">//取得computed中url結果</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed:&#123;</span><br><span class=\"line\">    url:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> theUrl = <span class=\"string\">&#x27;https://fakeimg.pl/&#x27;</span>+<span class=\"built_in\">this</span>.width+<span class=\"string\">&#x27;/&#x27;</span>+<span class=\"built_in\">this</span>.height;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> theUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  props:&#123;</span><br><span class=\"line\">    height:&#123;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:<span class=\"number\">400</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    width:&#123;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:<span class=\"number\">400</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>說明：可以注意到元件的template中並沒有用<code>mustache語法</code>來綁定外部傳進來資料。</p>\n<h4 id=\"替換-合併已有的特性\"><a href=\"#替換-合併已有的特性\" class=\"headerlink\" title=\"替換/合併已有的特性\"></a>替換/合併已有的特性</h4><p>我們上面提到，如果在<code>元件template上</code>並沒有相對應props屬性，但我們卻在HTML template上直接撰寫attribute，Vue會讓這些attribute直接寫入元件實體中。<br><a href=\"https://codepen.io/chunwen/pen/PooYxqO?editors=1010\">範例</a><br><code>&lt;bootstrap-date-input&gt;</code>的模板內容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>HTML上模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bootstrap-date-input</span><br><span class=\"line\">  data-date-picker=&quot;activated&quot;</span><br><span class=\"line\">  class=&quot;date-picker-theme-dark&quot;</span><br><span class=\"line\">&gt;<span class=\"tag\">&lt;/<span class=\"name\">bootstrap-date-input</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最終顯示結果<br>form-control，這是在組件的模板內設置好的<br>date-picker-theme-dark，這是從組件的父級傳入的<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191004/20114645EKBnma38qa.png\"></p>\n<h4 id=\"禁用特性繼承\"><a href=\"#禁用特性繼承\" class=\"headerlink\" title=\"禁用特性繼承\"></a>禁用特性繼承</h4><p>剛有提到，因為非Prop的特性，即使我們在元件中並沒有使用props來定義型態或接受資料，Vue仍然會把在HTML上撰寫的特性放置於元件實體中。而今天如果我們不想要繼承元件內實體屬性，我們可以這樣做~<br>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>而我們也因為可以設定<code>inheritAttrs: false</code>和<code>$attrs</code>緣故，可以自行決定哪些attribute要放置到哪個元素中。像是下方範例，我們透過<code>v-bind=&quot;$attrs&quot;</code>，將元件內實體屬性放置在<code>input</code>中。<br>範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;base-input&#x27;</span>, &#123;</span><br><span class=\"line\">  inheritAttrs: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">&#x27;label&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>],</span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;label&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123; label &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input</span></span><br><span class=\"line\"><span class=\"string\">        v-bind=&quot;$attrs&quot;</span></span><br><span class=\"line\"><span class=\"string\">        v-bind:value=&quot;value&quot;</span></span><br><span class=\"line\"><span class=\"string\">        v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class=\"line\"><span class=\"string\">      &gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/label&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h3 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h3><p>在撰寫<code>非Prop的特性（Non-Prop Attributes）</code>時，因為我是第一次接觸這個特性，撰寫起來有點卡卡的，也不太確定是否理解正確（哈哈）。我其實對於實務上會用在哪些地方，其實我也蠻好奇的，若有前願意分享也歡迎下方留言，那我們就明天見啦～</p>"},{"title":"Vue Component溝通（$parent、$children）","abbrlink":3021072490,"date":"2019-10-05T11:08:42.000Z","_content":"參考資料\n- [Vue元件間通訊6種方式](https://www.itread01.com/content/1558210804.html)\n- 五倍紅寶石實體課程講義\n<!-- more -->\n-----\n\n### $parent功能介紹\n子元件可以透過this.$parent，來存取父層組件。這種方法用起來就是爽XD，不用在子元件中發送$emit事件，來呼叫父元件。\n使用時機：通常使用情境都是在debug上，開發上還是不建議透過子元素來覆寫父層元素。\n> 原因：直接透過子元素來覆寫父層元素，`會造成父元件跟子元件耦合過深重`，日後無法單獨把這個子元件拉出來使用。\n\n#### 範例\n[連結](https://jsbin.com/bijifaf/1/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <my-component  ref=\"comp1\" :parent-msg=\"msg\"></my-component>\n</div>\n```\nJavaScript部分\n```javascript\nVue.component('my-component',{\n  template:`<div>{{parentMsg}}</div>`,\n  props: [\"parentMsg\"],\n  mounted(){\n    console.log(\"$parent\",this.$parent.msg);\n    \n    window.setTimeout(() =>{\n          this.$parent.msg=\"Hello\"\n    },2000)\n  },\n})\n\n\nnew Vue({\n  el:'#app',\n  data:{\n    msg:'Msg of Parent'\n  }\n})\n```\n說明：我們在兩秒過後，把父層msg`Msg of Parent`，更改為`Hello`\n\n\n### $children功能介紹\n父元件可以透過this.$children，來存取子組件（陣列）。至於為何是陣列，我們可以來複習一下這張圖。圖片中可以發現每個子元件都只會有一個父元素，但是父元素就不同摟，他可能會有`0~無限個子元素。`這也就是為何取出來是陣列原因！\n![https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png](https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png)\n\n### ref功能介紹\n為了不讓`v-if`影響子元件顯示順序，我們可以透過幫子組件設定別名ref，來確保組件順序不受影響。\n#### 範例\n[練習連結](https://codepen.io/chunwen/pen/oNNNYWR?editors=1011)\nHTML部分\n```html\n<div id=\"app\">\n    <my-component2 ref=\"comp2\"></my-component2>\n    <my-component3 ref=\"comp3\"></my-component3>\n\n    <hr>\n    <div> {{ msg }}</div>\n  </div>\n\n```\nJavaScript部分\n```javascript\n    new Vue({\n      el: '#app',\n      data: {\n        msg: 'Msg of Parent!'\n      },\n      mounted() {\n        console.log(this.$children[0]) // VueComponent，my-component3\n        console.log('$children2: ', this.$refs.comp2.msg);   //Hi COMP2\n        console.log('$children3: ', this.$refs.comp3.msg);  //Hi COMP3\n      }\n    });\n```\n","source":"_posts/2019-10-05-Vue Component溝通（$parent、$children）.md","raw":"---\ntitle: Vue Component溝通（$parent、$children）\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 3021072490\ndate: 2019-10-05 19:08:42\n---\n參考資料\n- [Vue元件間通訊6種方式](https://www.itread01.com/content/1558210804.html)\n- 五倍紅寶石實體課程講義\n<!-- more -->\n-----\n\n### $parent功能介紹\n子元件可以透過this.$parent，來存取父層組件。這種方法用起來就是爽XD，不用在子元件中發送$emit事件，來呼叫父元件。\n使用時機：通常使用情境都是在debug上，開發上還是不建議透過子元素來覆寫父層元素。\n> 原因：直接透過子元素來覆寫父層元素，`會造成父元件跟子元件耦合過深重`，日後無法單獨把這個子元件拉出來使用。\n\n#### 範例\n[連結](https://jsbin.com/bijifaf/1/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <my-component  ref=\"comp1\" :parent-msg=\"msg\"></my-component>\n</div>\n```\nJavaScript部分\n```javascript\nVue.component('my-component',{\n  template:`<div>{{parentMsg}}</div>`,\n  props: [\"parentMsg\"],\n  mounted(){\n    console.log(\"$parent\",this.$parent.msg);\n    \n    window.setTimeout(() =>{\n          this.$parent.msg=\"Hello\"\n    },2000)\n  },\n})\n\n\nnew Vue({\n  el:'#app',\n  data:{\n    msg:'Msg of Parent'\n  }\n})\n```\n說明：我們在兩秒過後，把父層msg`Msg of Parent`，更改為`Hello`\n\n\n### $children功能介紹\n父元件可以透過this.$children，來存取子組件（陣列）。至於為何是陣列，我們可以來複習一下這張圖。圖片中可以發現每個子元件都只會有一個父元素，但是父元素就不同摟，他可能會有`0~無限個子元素。`這也就是為何取出來是陣列原因！\n![https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png](https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png)\n\n### ref功能介紹\n為了不讓`v-if`影響子元件顯示順序，我們可以透過幫子組件設定別名ref，來確保組件順序不受影響。\n#### 範例\n[練習連結](https://codepen.io/chunwen/pen/oNNNYWR?editors=1011)\nHTML部分\n```html\n<div id=\"app\">\n    <my-component2 ref=\"comp2\"></my-component2>\n    <my-component3 ref=\"comp3\"></my-component3>\n\n    <hr>\n    <div> {{ msg }}</div>\n  </div>\n\n```\nJavaScript部分\n```javascript\n    new Vue({\n      el: '#app',\n      data: {\n        msg: 'Msg of Parent!'\n      },\n      mounted() {\n        console.log(this.$children[0]) // VueComponent，my-component3\n        console.log('$children2: ', this.$refs.comp2.msg);   //Hi COMP2\n        console.log('$children3: ', this.$refs.comp3.msg);  //Hi COMP3\n      }\n    });\n```\n","slug":"2019-10-05-Vue Component溝通（$parent、$children）","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t30002vzqzibrodf65u","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://www.itread01.com/content/1558210804.html\">Vue元件間通訊6種方式</a></li>\n<li>五倍紅寶石實體課程講義<span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"parent功能介紹\"><a href=\"#parent功能介紹\" class=\"headerlink\" title=\"$parent功能介紹\"></a>$parent功能介紹</h3><p>子元件可以透過this.$parent，來存取父層組件。這種方法用起來就是爽XD，不用在子元件中發送$emit事件，來呼叫父元件。<br>使用時機：通常使用情境都是在debug上，開發上還是不建議透過子元素來覆寫父層元素。</p>\n<blockquote>\n<p>原因：直接透過子元素來覆寫父層元素，<code>會造成父元件跟子元件耦合過深重</code>，日後無法單獨把這個子元件拉出來使用。</p>\n</blockquote>\n<h4 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h4><p><a href=\"https://jsbin.com/bijifaf/1/edit?html,js,output\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span>  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp1&quot;</span> <span class=\"attr\">:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"line\">  template:<span class=\"string\">`&lt;div&gt;&#123;&#123;parentMsg&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;parentMsg&quot;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;$parent&quot;</span>,<span class=\"built_in\">this</span>.$parent.msg);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.$parent.msg=<span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    msg:<span class=\"string\">&#x27;Msg of Parent&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>說明：我們在兩秒過後，把父層msg<code>Msg of Parent</code>，更改為<code>Hello</code></p>\n<h3 id=\"children功能介紹\"><a href=\"#children功能介紹\" class=\"headerlink\" title=\"$children功能介紹\"></a>$children功能介紹</h3><p>父元件可以透過this.$children，來存取子組件（陣列）。至於為何是陣列，我們可以來複習一下這張圖。圖片中可以發現每個子元件都只會有一個父元素，但是父元素就不同摟，他可能會有<code>0~無限個子元素。</code>這也就是為何取出來是陣列原因！<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png\"></p>\n<h3 id=\"ref功能介紹\"><a href=\"#ref功能介紹\" class=\"headerlink\" title=\"ref功能介紹\"></a>ref功能介紹</h3><p>為了不讓<code>v-if</code>影響子元件顯示順序，我們可以透過幫子組件設定別名ref，來確保組件順序不受影響。</p>\n<h4 id=\"範例-1\"><a href=\"#範例-1\" class=\"headerlink\" title=\"範例\"></a>範例</h4><p><a href=\"https://codepen.io/chunwen/pen/oNNNYWR?editors=1011\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component2</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component3</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    msg: <span class=\"string\">&#x27;Msg of Parent!&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$children[<span class=\"number\">0</span>]) <span class=\"comment\">// VueComponent，my-component3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children2: &#x27;</span>, <span class=\"built_in\">this</span>.$refs.comp2.msg);   <span class=\"comment\">//Hi COMP2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children3: &#x27;</span>, <span class=\"built_in\">this</span>.$refs.comp3.msg);  <span class=\"comment\">//Hi COMP3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":1558,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://www.itread01.com/content/1558210804.html\">Vue元件間通訊6種方式</a></li>\n<li>五倍紅寶石實體課程講義","more":"</li>\n</ul>\n<hr>\n<h3 id=\"parent功能介紹\"><a href=\"#parent功能介紹\" class=\"headerlink\" title=\"$parent功能介紹\"></a>$parent功能介紹</h3><p>子元件可以透過this.$parent，來存取父層組件。這種方法用起來就是爽XD，不用在子元件中發送$emit事件，來呼叫父元件。<br>使用時機：通常使用情境都是在debug上，開發上還是不建議透過子元素來覆寫父層元素。</p>\n<blockquote>\n<p>原因：直接透過子元素來覆寫父層元素，<code>會造成父元件跟子元件耦合過深重</code>，日後無法單獨把這個子元件拉出來使用。</p>\n</blockquote>\n<h4 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h4><p><a href=\"https://jsbin.com/bijifaf/1/edit?html,js,output\">連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span>  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp1&quot;</span> <span class=\"attr\">:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"line\">  template:<span class=\"string\">`&lt;div&gt;&#123;&#123;parentMsg&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;parentMsg&quot;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;$parent&quot;</span>,<span class=\"built_in\">this</span>.$parent.msg);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.$parent.msg=<span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">    &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    msg:<span class=\"string\">&#x27;Msg of Parent&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>說明：我們在兩秒過後，把父層msg<code>Msg of Parent</code>，更改為<code>Hello</code></p>\n<h3 id=\"children功能介紹\"><a href=\"#children功能介紹\" class=\"headerlink\" title=\"$children功能介紹\"></a>$children功能介紹</h3><p>父元件可以透過this.$children，來存取子組件（陣列）。至於為何是陣列，我們可以來複習一下這張圖。圖片中可以發現每個子元件都只會有一個父元素，但是父元素就不同摟，他可能會有<code>0~無限個子元素。</code>這也就是為何取出來是陣列原因！<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191005/20114645rgdC9oRL7N.png\"></p>\n<h3 id=\"ref功能介紹\"><a href=\"#ref功能介紹\" class=\"headerlink\" title=\"ref功能介紹\"></a>ref功能介紹</h3><p>為了不讓<code>v-if</code>影響子元件顯示順序，我們可以透過幫子組件設定別名ref，來確保組件順序不受影響。</p>\n<h4 id=\"範例-1\"><a href=\"#範例-1\" class=\"headerlink\" title=\"範例\"></a>範例</h4><p><a href=\"https://codepen.io/chunwen/pen/oNNNYWR?editors=1011\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component2</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component3</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;comp3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component3</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    msg: <span class=\"string\">&#x27;Msg of Parent!&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$children[<span class=\"number\">0</span>]) <span class=\"comment\">// VueComponent，my-component3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children2: &#x27;</span>, <span class=\"built_in\">this</span>.$refs.comp2.msg);   <span class=\"comment\">//Hi COMP2</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children3: &#x27;</span>, <span class=\"built_in\">this</span>.$refs.comp3.msg);  <span class=\"comment\">//Hi COMP3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Vue Component(元件)-props.sync 溝通方式","abbrlink":1846504743,"date":"2019-10-06T09:08:12.000Z","_content":"\n參考資料\n- 五倍紅寶石實體課程\n- [[Vue]使用 props.async 同步父子組件之間的傳值](https://medium.com/%E4%B8%80%E5%80%8B%E5%B0%8F%E5%B0%8F%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98/vue-%E4%BD%BF%E7%94%A8-props-async-%E5%90%8C%E6%AD%A5%E7%88%B6%E5%AD%90%E7%B5%84%E5%BB%BA%E4%B9%8B%E9%96%93%E7%9A%84%E5%82%B3%E5%80%BC-f7b1d3007836)\n- [官網自定義修飾子](https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6)\n- [Vue.js Core 30天屠龍記(第26天): 客製事件](https://ithelp.ithome.com.tw/articles/10209183)\n<!-- more -->\n-----\n\n### .sync VS props、emit\n接下來，將透過兩組範例比較，來讓大家知道這兩種元件傳遞的方式差異在哪。\n\n#### props、emit範例\n[範例連結](https://jsbin.com/huliyem/3/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n  <p>Parent: {{ message }}<input v-model=\"message\"></p>\n  <hr>\n  Child:\n  <my-component :parent-message=\"message\" @update=\"selfUpdate\"></my-component>\n    </p>\n  </div>\n```\n寫法說明：我們會在子元件上註冊一個自定義`update事件`，當子元件update事件觸發時，則會同時觸發父元件`selfUpdate事件`\nJavaScript部分\n```javascript\nVue.component('my-component', {\n   template: `<div>\n               {{ parentMessage }}\n               <input v-model=\"message\">\n               <button @click=\"updateText\">Update</button>\n             </div>`,\n   props: {\n     parentMessage: String //字串型別\n   },\n   data() {\n     return {\n       message: this.parentMessage\n     }\n   },\n   methods: {\n     updateText() {\n                   //事件名稱 value\n       this.$emit('update', this.message); //this.message是指子層的噢！\n     }\n   }\n });\n\n new Vue({\n   el: '#app',\n   data: {\n     message: 'hello'\n   },\n   methods: {\n     selfUpdate(val) {\n       this.message = val;\n     }\n   }\n });\n\n```\n畫面如下\n![](https://media.giphy.com/media/Qu7Lk3AqZhPJEotVNH/giphy.gif)\n\n-----\n\n\n#### .sync範例\n[範例連結](https://jsbin.com/wupidon/edit?html,js,console,output)\nHTML部分\n```html\n<div id=\"app\">\n      <p>Parent: {{ message }}<input v-model=\"message\"></p>\n      <hr>\n      Child:\n      <my-component :parent-message.sync=\"message\"></my-component>\n```\n寫法說明：我們可以發現到我們將child元件上的自定義事件移除了，改用`:parent-message.sync=\"message\"綁定`\n\nJavaScript部分\n```javascript\nVue.component('my-component', {\n      template: `<div>\n                  {{ synMsg }}\n                  <input v-model=\"synMsg\">\n                </div>`,\n      props: {\n        parentMessage: String\n      },\n      computed:{\n        synMsg:{\n          get(){\n            return this.parentMessage\n          },\n          set(val){\n            this.$emit('update:parentMessage',val)\n          }\n        }\n      }\n    });\n\n    new Vue({\n      el: '#app',\n      data: {\n        message: 'hello'\n      }\n    });\n\n```\n寫法說明：\n1.原本在子元件中用`methods來觸發事件`，但使用語法糖後改用computed屬性來進行同步\n2.並且把new Vue實體中的methods方法也移除\n\n畫面如下：\n![](https://media.giphy.com/media/RfAUBaqtHDDNT5kmPS/giphy.gif)\n\n### 小結論\nOK，我們介紹完.sync 修飾符的使用方法，我們來聊聊為何會稱`.sync`為語法糖\n\n從.sync範例中，我們依然可以發現父層元件，依舊透過props將父層資料`message`傳遞進來子元件。而在元件中，我們依然透過`this.$emit`來觸發事件，達到外層資料也同步更新的目的。\n\n這其中最大的差別就是在於，父層元件中 `parent-message.sync` 其實是\n```html\nv-bind:parent-message=”message” v-on:update:parentMessage=”parentMessage = $event”\n``` \n的縮寫。\n\n\n","source":"_posts/2019-10-06-Vue Component(元件)-props.sync 溝通方式.md","raw":"---\ntitle: Vue Component(元件)-props.sync 溝通方式\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 1846504743\ndate: 2019-10-06 17:08:12\n---\n\n參考資料\n- 五倍紅寶石實體課程\n- [[Vue]使用 props.async 同步父子組件之間的傳值](https://medium.com/%E4%B8%80%E5%80%8B%E5%B0%8F%E5%B0%8F%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98/vue-%E4%BD%BF%E7%94%A8-props-async-%E5%90%8C%E6%AD%A5%E7%88%B6%E5%AD%90%E7%B5%84%E5%BB%BA%E4%B9%8B%E9%96%93%E7%9A%84%E5%82%B3%E5%80%BC-f7b1d3007836)\n- [官網自定義修飾子](https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6)\n- [Vue.js Core 30天屠龍記(第26天): 客製事件](https://ithelp.ithome.com.tw/articles/10209183)\n<!-- more -->\n-----\n\n### .sync VS props、emit\n接下來，將透過兩組範例比較，來讓大家知道這兩種元件傳遞的方式差異在哪。\n\n#### props、emit範例\n[範例連結](https://jsbin.com/huliyem/3/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n  <p>Parent: {{ message }}<input v-model=\"message\"></p>\n  <hr>\n  Child:\n  <my-component :parent-message=\"message\" @update=\"selfUpdate\"></my-component>\n    </p>\n  </div>\n```\n寫法說明：我們會在子元件上註冊一個自定義`update事件`，當子元件update事件觸發時，則會同時觸發父元件`selfUpdate事件`\nJavaScript部分\n```javascript\nVue.component('my-component', {\n   template: `<div>\n               {{ parentMessage }}\n               <input v-model=\"message\">\n               <button @click=\"updateText\">Update</button>\n             </div>`,\n   props: {\n     parentMessage: String //字串型別\n   },\n   data() {\n     return {\n       message: this.parentMessage\n     }\n   },\n   methods: {\n     updateText() {\n                   //事件名稱 value\n       this.$emit('update', this.message); //this.message是指子層的噢！\n     }\n   }\n });\n\n new Vue({\n   el: '#app',\n   data: {\n     message: 'hello'\n   },\n   methods: {\n     selfUpdate(val) {\n       this.message = val;\n     }\n   }\n });\n\n```\n畫面如下\n![](https://media.giphy.com/media/Qu7Lk3AqZhPJEotVNH/giphy.gif)\n\n-----\n\n\n#### .sync範例\n[範例連結](https://jsbin.com/wupidon/edit?html,js,console,output)\nHTML部分\n```html\n<div id=\"app\">\n      <p>Parent: {{ message }}<input v-model=\"message\"></p>\n      <hr>\n      Child:\n      <my-component :parent-message.sync=\"message\"></my-component>\n```\n寫法說明：我們可以發現到我們將child元件上的自定義事件移除了，改用`:parent-message.sync=\"message\"綁定`\n\nJavaScript部分\n```javascript\nVue.component('my-component', {\n      template: `<div>\n                  {{ synMsg }}\n                  <input v-model=\"synMsg\">\n                </div>`,\n      props: {\n        parentMessage: String\n      },\n      computed:{\n        synMsg:{\n          get(){\n            return this.parentMessage\n          },\n          set(val){\n            this.$emit('update:parentMessage',val)\n          }\n        }\n      }\n    });\n\n    new Vue({\n      el: '#app',\n      data: {\n        message: 'hello'\n      }\n    });\n\n```\n寫法說明：\n1.原本在子元件中用`methods來觸發事件`，但使用語法糖後改用computed屬性來進行同步\n2.並且把new Vue實體中的methods方法也移除\n\n畫面如下：\n![](https://media.giphy.com/media/RfAUBaqtHDDNT5kmPS/giphy.gif)\n\n### 小結論\nOK，我們介紹完.sync 修飾符的使用方法，我們來聊聊為何會稱`.sync`為語法糖\n\n從.sync範例中，我們依然可以發現父層元件，依舊透過props將父層資料`message`傳遞進來子元件。而在元件中，我們依然透過`this.$emit`來觸發事件，達到外層資料也同步更新的目的。\n\n這其中最大的差別就是在於，父層元件中 `parent-message.sync` 其實是\n```html\nv-bind:parent-message=”message” v-on:update:parentMessage=”parentMessage = $event”\n``` \n的縮寫。\n\n\n","slug":"2019-10-06-Vue Component(元件)-props.sync 溝通方式","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t32002yzqzihn5786aj","content":"<p>參考資料</p>\n<ul>\n<li>五倍紅寶石實體課程</li>\n<li><a href=\"https://medium.com/%E4%B8%80%E5%80%8B%E5%B0%8F%E5%B0%8F%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98/vue-%E4%BD%BF%E7%94%A8-props-async-%E5%90%8C%E6%AD%A5%E7%88%B6%E5%AD%90%E7%B5%84%E5%BB%BA%E4%B9%8B%E9%96%93%E7%9A%84%E5%82%B3%E5%80%BC-f7b1d3007836\">[Vue]使用 props.async 同步父子組件之間的傳值</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6\">官網自定義修飾子</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10209183\">Vue.js Core 30天屠龍記(第26天): 客製事件</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"sync-VS-props、emit\"><a href=\"#sync-VS-props、emit\" class=\"headerlink\" title=\".sync VS props、emit\"></a>.sync VS props、emit</h3><p>接下來，將透過兩組範例比較，來讓大家知道這兩種元件傳遞的方式差異在哪。</p>\n<h4 id=\"props、emit範例\"><a href=\"#props、emit範例\" class=\"headerlink\" title=\"props、emit範例\"></a>props、emit範例</h4><p><a href=\"https://jsbin.com/huliyem/3/edit?html,js,output\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Parent: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  Child:</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message</span>=<span class=\"string\">&quot;message&quot;</span> @<span class=\"attr\">update</span>=<span class=\"string\">&quot;selfUpdate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>寫法說明：我們會在子元件上註冊一個自定義<code>update事件</code>，當子元件update事件觸發時，則會同時觸發父元件<code>selfUpdate事件</code><br>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">   template: <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &#123;&#123; parentMessage &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;input v-model=&quot;message&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;button @click=&quot;updateText&quot;&gt;Update&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">             &lt;/div&gt;`</span>,</span><br><span class=\"line\">   props: &#123;</span><br><span class=\"line\">     parentMessage: <span class=\"built_in\">String</span> <span class=\"comment\">//字串型別</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       message: <span class=\"built_in\">this</span>.parentMessage</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">updateText</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//事件名稱 value</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update&#x27;</span>, <span class=\"built_in\">this</span>.message); <span class=\"comment\">//this.message是指子層的噢！</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">selfUpdate</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.message = val;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>畫面如下<br><img src=\"https://media.giphy.com/media/Qu7Lk3AqZhPJEotVNH/giphy.gif\" alt=\"\"></p>\n<hr>\n<h4 id=\"sync範例\"><a href=\"#sync範例\" class=\"headerlink\" title=\".sync範例\"></a>.sync範例</h4><p><a href=\"https://jsbin.com/wupidon/edit?html,js,console,output\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Parent: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">      Child:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message.sync</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>寫法說明：我們可以發現到我們將child元件上的自定義事件移除了，改用<code>:parent-message.sync=&quot;message&quot;綁定</code></p>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                  &#123;&#123; synMsg &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                  &lt;input v-model=&quot;synMsg&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/div&gt;`</span>,</span><br><span class=\"line\">      props: &#123;</span><br><span class=\"line\">        parentMessage: <span class=\"built_in\">String</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed:&#123;</span><br><span class=\"line\">        synMsg:&#123;</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.parentMessage</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update:parentMessage&#x27;</span>,val)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>寫法說明：<br>1.原本在子元件中用<code>methods來觸發事件</code>，但使用語法糖後改用computed屬性來進行同步<br>2.並且把new Vue實體中的methods方法也移除</p>\n<p>畫面如下：<br><img src=\"https://media.giphy.com/media/RfAUBaqtHDDNT5kmPS/giphy.gif\" alt=\"\"></p>\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><p>OK，我們介紹完.sync 修飾符的使用方法，我們來聊聊為何會稱<code>.sync</code>為語法糖</p>\n<p>從.sync範例中，我們依然可以發現父層元件，依舊透過props將父層資料<code>message</code>傳遞進來子元件。而在元件中，我們依然透過<code>this.$emit</code>來觸發事件，達到外層資料也同步更新的目的。</p>\n<p>這其中最大的差別就是在於，父層元件中 <code>parent-message.sync</code> 其實是</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-bind:parent-message=”message” v-on:update:parentMessage=”parentMessage = $event”</span><br></pre></td></tr></table></figure>\n<p>的縮寫。</p>\n","site":{"data":{}},"length":2328,"excerpt":"<p>參考資料</p>\n<ul>\n<li>五倍紅寶石實體課程</li>\n<li><a href=\"https://medium.com/%E4%B8%80%E5%80%8B%E5%B0%8F%E5%B0%8F%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98/vue-%E4%BD%BF%E7%94%A8-props-async-%E5%90%8C%E6%AD%A5%E7%88%B6%E5%AD%90%E7%B5%84%E5%BB%BA%E4%B9%8B%E9%96%93%E7%9A%84%E5%82%B3%E5%80%BC-f7b1d3007836\">[Vue]使用 props.async 同步父子組件之間的傳值</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6\">官網自定義修飾子</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10209183\">Vue.js Core 30天屠龍記(第26天): 客製事件</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"sync-VS-props、emit\"><a href=\"#sync-VS-props、emit\" class=\"headerlink\" title=\".sync VS props、emit\"></a>.sync VS props、emit</h3><p>接下來，將透過兩組範例比較，來讓大家知道這兩種元件傳遞的方式差異在哪。</p>\n<h4 id=\"props、emit範例\"><a href=\"#props、emit範例\" class=\"headerlink\" title=\"props、emit範例\"></a>props、emit範例</h4><p><a href=\"https://jsbin.com/huliyem/3/edit?html,js,output\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Parent: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  Child:</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message</span>=<span class=\"string\">&quot;message&quot;</span> @<span class=\"attr\">update</span>=<span class=\"string\">&quot;selfUpdate&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>寫法說明：我們會在子元件上註冊一個自定義<code>update事件</code>，當子元件update事件觸發時，則會同時觸發父元件<code>selfUpdate事件</code><br>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">   template: <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &#123;&#123; parentMessage &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;input v-model=&quot;message&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">               &lt;button @click=&quot;updateText&quot;&gt;Update&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">             &lt;/div&gt;`</span>,</span><br><span class=\"line\">   props: &#123;</span><br><span class=\"line\">     parentMessage: <span class=\"built_in\">String</span> <span class=\"comment\">//字串型別</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">       message: <span class=\"built_in\">this</span>.parentMessage</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">updateText</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//事件名稱 value</span></span><br><span class=\"line\">       <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update&#x27;</span>, <span class=\"built_in\">this</span>.message); <span class=\"comment\">//this.message是指子層的噢！</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">   data: &#123;</span><br><span class=\"line\">     message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   methods: &#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"title\">selfUpdate</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.message = val;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>畫面如下<br><img src=\"https://media.giphy.com/media/Qu7Lk3AqZhPJEotVNH/giphy.gif\" alt=\"\"></p>\n<hr>\n<h4 id=\"sync範例\"><a href=\"#sync範例\" class=\"headerlink\" title=\".sync範例\"></a>.sync範例</h4><p><a href=\"https://jsbin.com/wupidon/edit?html,js,console,output\">範例連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Parent: &#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">      Child:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">:parent-message.sync</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>寫法說明：我們可以發現到我們將child元件上的自定義事件移除了，改用<code>:parent-message.sync=&quot;message&quot;綁定</code></p>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">                  &#123;&#123; synMsg &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">                  &lt;input v-model=&quot;synMsg&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">                &lt;/div&gt;`</span>,</span><br><span class=\"line\">      props: &#123;</span><br><span class=\"line\">        parentMessage: <span class=\"built_in\">String</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed:&#123;</span><br><span class=\"line\">        synMsg:&#123;</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.parentMessage</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;update:parentMessage&#x27;</span>,val)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>寫法說明：<br>1.原本在子元件中用<code>methods來觸發事件</code>，但使用語法糖後改用computed屬性來進行同步<br>2.並且把new Vue實體中的methods方法也移除</p>\n<p>畫面如下：<br><img src=\"https://media.giphy.com/media/RfAUBaqtHDDNT5kmPS/giphy.gif\" alt=\"\"></p>\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><p>OK，我們介紹完.sync 修飾符的使用方法，我們來聊聊為何會稱<code>.sync</code>為語法糖</p>\n<p>從.sync範例中，我們依然可以發現父層元件，依舊透過props將父層資料<code>message</code>傳遞進來子元件。而在元件中，我們依然透過<code>this.$emit</code>來觸發事件，達到外層資料也同步更新的目的。</p>\n<p>這其中最大的差別就是在於，父層元件中 <code>parent-message.sync</code> 其實是</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-bind:parent-message=”message” v-on:update:parentMessage=”parentMessage = $event”</span><br></pre></td></tr></table></figure>\n<p>的縮寫。</p>"},{"title":"Vue Component(元件)-event bus","abbrlink":2667842738,"date":"2019-10-07T14:42:14.000Z","_content":"參考資料\n- 五倍紅寶石Vue實體課程講義\n- [[Vue] 跟著 Vue 闖蕩前端世界 - 07 組件溝通 event bus](https://dotblogs.com.tw/wasichris/2017/03/05/181549)\n<!-- more -->\n-----\n\n開始前，我們回憶一下，props、emit的傳遞方式如下圖：\n![https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png](https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png)圖片來源：五倍紅寶石\n\n我們可以發現資料與資料間的溝通方式，是`樹狀傳遞`，這代表什麼呢？假設我今天要跟旁邊的component（元件）進行溝通，那我們是不是要先把資料傳到最上層父元素後，再依序傳下來呢？~~光想就覺得好麻煩，這什麼鬼方法~~。\n引用Kuro老師深刻譬喻：\n> 子孫元件要溝通講秘密，卻連上層阿公都知道XD\n\n沒錯，若遇到不是上下階層關係的元件，我們在傳遞資料時候的確相當麻煩，因此這時候就需要老司機來幫助我們解決這個問題摟～\n\n\n-----\n\n\n### 跨層級事件傳遞 event bus\n目的：幫助我們將元件間的溝通方式由樹狀結構，轉變成網狀模式。\n寫法：\nStep1. 新增一個Vue實體`var bus = new Vue() `\nStep2. 透過向bus發送註冊事件（$emit），與訂閱事件($on)來完成`元件與元件的溝通` \n![https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png](https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png)\n圖片來源：五倍紅寶石課程\n範例：[練習連結](https://jsbin.com/yetitoh/1/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <custom-one></custom-one>\n    <hr>\n    <custom-two></custom-two>\n  </div>\n```\nJavaScript部分\n```javascript\nvar bus = new Vue();\n//元件一\nVue.component('custom-one',{\n      template:`<div>\n      <input type=\"text\" v-model=\"msg\">\n      <button @click=\"update\">update</button>\n      </div>`,\n      methods:{\n        update(){\n          bus.$emit('receive',this.msg); //向bus發送receive事件\n        }\n      },\n      data(){\n        return{\n        msg:'',\n        }\n      }\n    })\n    \n    \n//元件二\nVue.component('custom-two',{\n      template:`\n      <div>\n      {{msg}}\n      </div>\n      `,\n      created() {\n        var self= this;\n        bus.$on('receive',function(newMsg){ //向bus訂閱事件\n          console.log(self);\n          self.msg =newMsg\n        })\n      },\n      beforeDestroy() {\n        bus.$off('receive') //記得要手動清除監聽事件，不然Vue不會自動幫我們取消喔\n      },\n      data(){\n        return{\n          msg:''\n        }\n      }\n    })\n\n var app = new Vue({\n      el: '#app'\n    });\n```\n\n### 小結論\n1.使用event bus時，要注意事件名稱的命名。避免造成事件重複訂閱！\n2.監聽完事件後必須`手動清除事件監聽！`**很重要要講三遍**\n3.元件與元件之間若為父子關係，應該使用props、emit方法，避免濫用","source":"_posts/2019-10-07-Vue Component(元件)-event bus.md","raw":"---\ntitle: Vue Component(元件)-event bus\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 2667842738\ndate: 2019-10-07 22:42:14\n---\n參考資料\n- 五倍紅寶石Vue實體課程講義\n- [[Vue] 跟著 Vue 闖蕩前端世界 - 07 組件溝通 event bus](https://dotblogs.com.tw/wasichris/2017/03/05/181549)\n<!-- more -->\n-----\n\n開始前，我們回憶一下，props、emit的傳遞方式如下圖：\n![https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png](https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png)圖片來源：五倍紅寶石\n\n我們可以發現資料與資料間的溝通方式，是`樹狀傳遞`，這代表什麼呢？假設我今天要跟旁邊的component（元件）進行溝通，那我們是不是要先把資料傳到最上層父元素後，再依序傳下來呢？~~光想就覺得好麻煩，這什麼鬼方法~~。\n引用Kuro老師深刻譬喻：\n> 子孫元件要溝通講秘密，卻連上層阿公都知道XD\n\n沒錯，若遇到不是上下階層關係的元件，我們在傳遞資料時候的確相當麻煩，因此這時候就需要老司機來幫助我們解決這個問題摟～\n\n\n-----\n\n\n### 跨層級事件傳遞 event bus\n目的：幫助我們將元件間的溝通方式由樹狀結構，轉變成網狀模式。\n寫法：\nStep1. 新增一個Vue實體`var bus = new Vue() `\nStep2. 透過向bus發送註冊事件（$emit），與訂閱事件($on)來完成`元件與元件的溝通` \n![https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png](https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png)\n圖片來源：五倍紅寶石課程\n範例：[練習連結](https://jsbin.com/yetitoh/1/edit?html,js,output)\nHTML部分\n```html\n<div id=\"app\">\n    <custom-one></custom-one>\n    <hr>\n    <custom-two></custom-two>\n  </div>\n```\nJavaScript部分\n```javascript\nvar bus = new Vue();\n//元件一\nVue.component('custom-one',{\n      template:`<div>\n      <input type=\"text\" v-model=\"msg\">\n      <button @click=\"update\">update</button>\n      </div>`,\n      methods:{\n        update(){\n          bus.$emit('receive',this.msg); //向bus發送receive事件\n        }\n      },\n      data(){\n        return{\n        msg:'',\n        }\n      }\n    })\n    \n    \n//元件二\nVue.component('custom-two',{\n      template:`\n      <div>\n      {{msg}}\n      </div>\n      `,\n      created() {\n        var self= this;\n        bus.$on('receive',function(newMsg){ //向bus訂閱事件\n          console.log(self);\n          self.msg =newMsg\n        })\n      },\n      beforeDestroy() {\n        bus.$off('receive') //記得要手動清除監聽事件，不然Vue不會自動幫我們取消喔\n      },\n      data(){\n        return{\n          msg:''\n        }\n      }\n    })\n\n var app = new Vue({\n      el: '#app'\n    });\n```\n\n### 小結論\n1.使用event bus時，要注意事件名稱的命名。避免造成事件重複訂閱！\n2.監聽完事件後必須`手動清除事件監聽！`**很重要要講三遍**\n3.元件與元件之間若為父子關係，應該使用props、emit方法，避免濫用","slug":"2019-10-07-Vue Component(元件)-event bus","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t350032zqzi6h7wbufi","content":"<p>參考資料</p>\n<ul>\n<li>五倍紅寶石Vue實體課程講義</li>\n<li><a href=\"https://dotblogs.com.tw/wasichris/2017/03/05/181549\">[Vue] 跟著 Vue 闖蕩前端世界 - 07 組件溝通 event bus</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<p>開始前，我們回憶一下，props、emit的傳遞方式如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png\">圖片來源：五倍紅寶石</p>\n<p>我們可以發現資料與資料間的溝通方式，是<code>樹狀傳遞</code>，這代表什麼呢？假設我今天要跟旁邊的component（元件）進行溝通，那我們是不是要先把資料傳到最上層父元素後，再依序傳下來呢？<del>光想就覺得好麻煩，這什麼鬼方法</del>。<br>引用Kuro老師深刻譬喻：</p>\n<blockquote>\n<p>子孫元件要溝通講秘密，卻連上層阿公都知道XD</p>\n</blockquote>\n<p>沒錯，若遇到不是上下階層關係的元件，我們在傳遞資料時候的確相當麻煩，因此這時候就需要老司機來幫助我們解決這個問題摟～</p>\n<hr>\n<h3 id=\"跨層級事件傳遞-event-bus\"><a href=\"#跨層級事件傳遞-event-bus\" class=\"headerlink\" title=\"跨層級事件傳遞 event bus\"></a>跨層級事件傳遞 event bus</h3><p>目的：幫助我們將元件間的溝通方式由樹狀結構，轉變成網狀模式。<br>寫法：<br>Step1. 新增一個Vue實體<code>var bus = new Vue()</code><br>Step2. 透過向bus發送註冊事件（$emit），與訂閱事件($on)來完成<code>元件與元件的溝通</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png\"><br>圖片來源：五倍紅寶石課程<br>範例：<a href=\"https://jsbin.com/yetitoh/1/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">custom-one</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-one</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">custom-two</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-two</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\"><span class=\"comment\">//元件一</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;custom-one&#x27;</span>,&#123;</span><br><span class=\"line\">      template:<span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button @click=&quot;update&quot;&gt;update&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          bus.$emit(<span class=\"string\">&#x27;receive&#x27;</span>,<span class=\"built_in\">this</span>.msg); <span class=\"comment\">//向bus發送receive事件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        msg:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//元件二</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;custom-two&#x27;</span>,&#123;</span><br><span class=\"line\">      template:<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123;msg&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      `</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self= <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        bus.$on(<span class=\"string\">&#x27;receive&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newMsg</span>)</span>&#123; <span class=\"comment\">//向bus訂閱事件</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(self);</span><br><span class=\"line\">          self.msg =newMsg</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">beforeDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        bus.$off(<span class=\"string\">&#x27;receive&#x27;</span>) <span class=\"comment\">//記得要手動清除監聽事件，不然Vue不會自動幫我們取消喔</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">          msg:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><p>1.使用event bus時，要注意事件名稱的命名。避免造成事件重複訂閱！<br>2.監聽完事件後必須<code>手動清除事件監聽！</code><strong>很重要要講三遍</strong><br>3.元件與元件之間若為父子關係，應該使用props、emit方法，避免濫用</p>\n","site":{"data":{}},"length":1576,"excerpt":"<p>參考資料</p>\n<ul>\n<li>五倍紅寶石Vue實體課程講義</li>\n<li><a href=\"https://dotblogs.com.tw/wasichris/2017/03/05/181549\">[Vue] 跟著 Vue 闖蕩前端世界 - 07 組件溝通 event bus</a>","more":"</li>\n</ul>\n<hr>\n<p>開始前，我們回憶一下，props、emit的傳遞方式如下圖：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191007/20114645oids2SPwvH.png\">圖片來源：五倍紅寶石</p>\n<p>我們可以發現資料與資料間的溝通方式，是<code>樹狀傳遞</code>，這代表什麼呢？假設我今天要跟旁邊的component（元件）進行溝通，那我們是不是要先把資料傳到最上層父元素後，再依序傳下來呢？<del>光想就覺得好麻煩，這什麼鬼方法</del>。<br>引用Kuro老師深刻譬喻：</p>\n<blockquote>\n<p>子孫元件要溝通講秘密，卻連上層阿公都知道XD</p>\n</blockquote>\n<p>沒錯，若遇到不是上下階層關係的元件，我們在傳遞資料時候的確相當麻煩，因此這時候就需要老司機來幫助我們解決這個問題摟～</p>\n<hr>\n<h3 id=\"跨層級事件傳遞-event-bus\"><a href=\"#跨層級事件傳遞-event-bus\" class=\"headerlink\" title=\"跨層級事件傳遞 event bus\"></a>跨層級事件傳遞 event bus</h3><p>目的：幫助我們將元件間的溝通方式由樹狀結構，轉變成網狀模式。<br>寫法：<br>Step1. 新增一個Vue實體<code>var bus = new Vue()</code><br>Step2. 透過向bus發送註冊事件（$emit），與訂閱事件($on)來完成<code>元件與元件的溝通</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191007/201146453bzmKDuvpu.png\"><br>圖片來源：五倍紅寶石課程<br>範例：<a href=\"https://jsbin.com/yetitoh/1/edit?html,js,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">custom-one</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-one</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">custom-two</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">custom-two</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bus = <span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\"><span class=\"comment\">//元件一</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;custom-one&#x27;</span>,&#123;</span><br><span class=\"line\">      template:<span class=\"string\">`&lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;button @click=&quot;update&quot;&gt;update&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;`</span>,</span><br><span class=\"line\">      methods:&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          bus.$emit(<span class=\"string\">&#x27;receive&#x27;</span>,<span class=\"built_in\">this</span>.msg); <span class=\"comment\">//向bus發送receive事件</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        msg:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//元件二</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;custom-two&#x27;</span>,&#123;</span><br><span class=\"line\">      template:<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;&#123;msg&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      `</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self= <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        bus.$on(<span class=\"string\">&#x27;receive&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newMsg</span>)</span>&#123; <span class=\"comment\">//向bus訂閱事件</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(self);</span><br><span class=\"line\">          self.msg =newMsg</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">beforeDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        bus.$off(<span class=\"string\">&#x27;receive&#x27;</span>) <span class=\"comment\">//記得要手動清除監聽事件，不然Vue不會自動幫我們取消喔</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">          msg:<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><p>1.使用event bus時，要注意事件名稱的命名。避免造成事件重複訂閱！<br>2.監聽完事件後必須<code>手動清除事件監聽！</code><strong>很重要要講三遍</strong><br>3.元件與元件之間若為父子關係，應該使用props、emit方法，避免濫用</p>"},{"title":"Vue Component(元件) is動態切換元件","abbrlink":3284328793,"date":"2019-10-08T13:41:16.000Z","_content":"參考資料\n- [官網動態組件介紹](https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6)\n- 五倍紅寶石課程資料\n<!-- more -->\n-----\n\n### is動態切換元件介紹\n用途：最常使用在頁籤切換！\n寫法介紹：在元件（component）上，或是HTML標籤上`添加:is屬性`\n寫法如下：\n```javascript\n<component:is=\"currentView\"></component>\n<div :is=\"currentView\"></div>\n```\n> currentView的種類有兩種\n1.已註冊組件的名字\n2.元件中的選項對象（a component’s options object）附上[範例連結](https://jsfiddle.net/chrisvfritz/b2qj69o1/)\n\n> 說明：`is屬性`只要放在HTML標籤上或是component元件上都是可以的，需要特別注意特定標籤如 `<li>` 、`<tr>`、 `<option> `這類有特別限制上層 DOM 元素必須要是哪幾種的，像 <li> 的外層就只能是 <ol> 或 <ul> 等需要小心。[官網連結](https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9)\n\n#### 練習範例：\n[練習連結](https://codepen.io/chunwen/pen/mdbPMOa?editors=1010)\nHTML部分\n```html\n<h2 class=\"mt-3\">使用 is 動態切換組件</h2>\n    <ul class=\"nav nav-pills\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" \n        href=\"#\"\n        :class=\"{'active': current == 'primary-component'}\"   @click.prevent=\"current = 'primary-component'\">藍色元件</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\"\n        href=\"#\"\n        :class=\"{'active': current == 'danger-component'}\"    @click.prevent=\"current = 'danger-component'\">紅色元件</a>\n      </li>\n    </ul>\n    <div class=\"mt-3\">\n      <component :is=\"current\" :data=\"item\"></component>\n    </div>\n\n```\nJavaScript部分\n```javascript\nVue.component(\"primary-component\", {\n  props: [\"data\"],\n  template: \"#primaryComponent\"\n});\nVue.component(\"danger-component\", {\n  props: [\"data\"],\n  template: \"#dangerComponent\"\n});\n\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    item: {\n      header: \"這裡是 header\",\n      title: \"這裡是 title\",\n      text:\n        \"Lorem ipsum dolor sit amet\"\n    },\n    current: \"primary-component\"\n  }\n});\n```\n圖解：\n![https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png](https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png)\n\n### keep-alive與元件\n當我們透過`<component>`加上`:is屬性`來切換元件時，原本元件內的狀態不會保留，如果我們這時候需要保留就要透過 `<keep-alive></keep-alive>`來為元件保留內部狀態。\n[練習連結](https://jsbin.com/nekapeq/1/edit?html,js,console,output)\nHTML部分\n```html\n<div class=\"left\">\n    <button @click=\"currentView = 'channel-1'\">Channel 1</button>\n    <button @click=\"currentView = 'channel-2'\">Channel 2</button>\n    <button @click=\"currentView = 'channel-3'\">Channel 3</button>\n  </div>\n  <div class=\"right\">\n     <keep-alive>\n      <component :is=\"currentView\"></component>\n     </keep-alive>\n  </div>\n\n```\n示意圖：\n![](https://media.giphy.com/media/iDV04Gg8f9PfZzHpMV/giphy.gif)\n\n\n","source":"_posts/2019-10-08-Vue Component(元件)-is動態切換元件.md","raw":"---\ntitle: Vue Component(元件) is動態切換元件\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 3284328793\ndate: 2019-10-08 21:41:16\n---\n參考資料\n- [官網動態組件介紹](https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6)\n- 五倍紅寶石課程資料\n<!-- more -->\n-----\n\n### is動態切換元件介紹\n用途：最常使用在頁籤切換！\n寫法介紹：在元件（component）上，或是HTML標籤上`添加:is屬性`\n寫法如下：\n```javascript\n<component:is=\"currentView\"></component>\n<div :is=\"currentView\"></div>\n```\n> currentView的種類有兩種\n1.已註冊組件的名字\n2.元件中的選項對象（a component’s options object）附上[範例連結](https://jsfiddle.net/chrisvfritz/b2qj69o1/)\n\n> 說明：`is屬性`只要放在HTML標籤上或是component元件上都是可以的，需要特別注意特定標籤如 `<li>` 、`<tr>`、 `<option> `這類有特別限制上層 DOM 元素必須要是哪幾種的，像 <li> 的外層就只能是 <ol> 或 <ul> 等需要小心。[官網連結](https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9)\n\n#### 練習範例：\n[練習連結](https://codepen.io/chunwen/pen/mdbPMOa?editors=1010)\nHTML部分\n```html\n<h2 class=\"mt-3\">使用 is 動態切換組件</h2>\n    <ul class=\"nav nav-pills\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" \n        href=\"#\"\n        :class=\"{'active': current == 'primary-component'}\"   @click.prevent=\"current = 'primary-component'\">藍色元件</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\"\n        href=\"#\"\n        :class=\"{'active': current == 'danger-component'}\"    @click.prevent=\"current = 'danger-component'\">紅色元件</a>\n      </li>\n    </ul>\n    <div class=\"mt-3\">\n      <component :is=\"current\" :data=\"item\"></component>\n    </div>\n\n```\nJavaScript部分\n```javascript\nVue.component(\"primary-component\", {\n  props: [\"data\"],\n  template: \"#primaryComponent\"\n});\nVue.component(\"danger-component\", {\n  props: [\"data\"],\n  template: \"#dangerComponent\"\n});\n\nvar app = new Vue({\n  el: \"#app\",\n  data: {\n    item: {\n      header: \"這裡是 header\",\n      title: \"這裡是 title\",\n      text:\n        \"Lorem ipsum dolor sit amet\"\n    },\n    current: \"primary-component\"\n  }\n});\n```\n圖解：\n![https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png](https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png)\n\n### keep-alive與元件\n當我們透過`<component>`加上`:is屬性`來切換元件時，原本元件內的狀態不會保留，如果我們這時候需要保留就要透過 `<keep-alive></keep-alive>`來為元件保留內部狀態。\n[練習連結](https://jsbin.com/nekapeq/1/edit?html,js,console,output)\nHTML部分\n```html\n<div class=\"left\">\n    <button @click=\"currentView = 'channel-1'\">Channel 1</button>\n    <button @click=\"currentView = 'channel-2'\">Channel 2</button>\n    <button @click=\"currentView = 'channel-3'\">Channel 3</button>\n  </div>\n  <div class=\"right\">\n     <keep-alive>\n      <component :is=\"currentView\"></component>\n     </keep-alive>\n  </div>\n\n```\n示意圖：\n![](https://media.giphy.com/media/iDV04Gg8f9PfZzHpMV/giphy.gif)\n\n\n","slug":"2019-10-08-Vue Component(元件)-is動態切換元件","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t360035zqziccrq136u","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\">官網動態組件介紹</a></li>\n<li>五倍紅寶石課程資料<span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"is動態切換元件介紹\"><a href=\"#is動態切換元件介紹\" class=\"headerlink\" title=\"is動態切換元件介紹\"></a>is動態切換元件介紹</h3><p>用途：最常使用在頁籤切換！<br>寫法介紹：在元件（component）上，或是HTML標籤上<code>添加:is屬性</code><br>寫法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component:is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;div :is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>currentView的種類有兩種<br>1.已註冊組件的名字<br>2.元件中的選項對象（a component’s options object）附上<a href=\"https://jsfiddle.net/chrisvfritz/b2qj69o1/\">範例連結</a></p>\n</blockquote>\n<blockquote>\n<p>說明：<code>is屬性</code>只要放在HTML標籤上或是component元件上都是可以的，需要特別注意特定標籤如 <code>&lt;li&gt;</code> 、<code>&lt;tr&gt;</code>、 <code>&lt;option&gt;</code>這類有特別限制上層 DOM 元素必須要是哪幾種的，像 <li> 的外層就只能是 <ol> 或 <ul> 等需要小心。<a href=\"https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">官網連結</a></p>\n</blockquote>\n<h4 id=\"練習範例：\"><a href=\"#練習範例：\" class=\"headerlink\" title=\"練習範例：\"></a>練習範例：</h4><p><a href=\"https://codepen.io/chunwen/pen/mdbPMOa?editors=1010\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>使用 is 動態切換組件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;active&#x27;: current == &#x27;primary-component&#x27;&#125;&quot;</span>   @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;current = &#x27;primary-component&#x27;&quot;</span>&gt;</span>藍色元件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;active&#x27;: current == &#x27;danger-component&#x27;&#125;&quot;</span>    @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;current = &#x27;danger-component&#x27;&quot;</span>&gt;</span>紅色元件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;current&quot;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;primary-component&quot;</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;data&quot;</span>],</span><br><span class=\"line\">  template: <span class=\"string\">&quot;#primaryComponent&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;danger-component&quot;</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;data&quot;</span>],</span><br><span class=\"line\">  template: <span class=\"string\">&quot;#dangerComponent&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    item: &#123;</span><br><span class=\"line\">      header: <span class=\"string\">&quot;這裡是 header&quot;</span>,</span><br><span class=\"line\">      title: <span class=\"string\">&quot;這裡是 title&quot;</span>,</span><br><span class=\"line\">      text:</span><br><span class=\"line\">        <span class=\"string\">&quot;Lorem ipsum dolor sit amet&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    current: <span class=\"string\">&quot;primary-component&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>圖解：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png\"></p>\n<h3 id=\"keep-alive與元件\"><a href=\"#keep-alive與元件\" class=\"headerlink\" title=\"keep-alive與元件\"></a>keep-alive與元件</h3><p>當我們透過<code>&lt;component&gt;</code>加上<code>:is屬性</code>來切換元件時，原本元件內的狀態不會保留，如果我們這時候需要保留就要透過 <code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>來為元件保留內部狀態。<br><a href=\"https://jsbin.com/nekapeq/1/edit?html,js,console,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;currentView = &#x27;channel-1&#x27;&quot;</span>&gt;</span>Channel 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;currentView = &#x27;channel-2&#x27;&quot;</span>&gt;</span>Channel 2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;currentView = &#x27;channel-3&#x27;&quot;</span>&gt;</span>Channel 3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;currentView&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示意圖：<br><img src=\"https://media.giphy.com/media/iDV04Gg8f9PfZzHpMV/giphy.gif\" alt=\"\"></p>\n","site":{"data":{}},"length":2308,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\">官網動態組件介紹</a></li>\n<li>五倍紅寶石課程資料","more":"</li>\n</ul>\n<hr>\n<h3 id=\"is動態切換元件介紹\"><a href=\"#is動態切換元件介紹\" class=\"headerlink\" title=\"is動態切換元件介紹\"></a>is動態切換元件介紹</h3><p>用途：最常使用在頁籤切換！<br>寫法介紹：在元件（component）上，或是HTML標籤上<code>添加:is屬性</code><br>寫法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component:is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;div :is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>currentView的種類有兩種<br>1.已註冊組件的名字<br>2.元件中的選項對象（a component’s options object）附上<a href=\"https://jsfiddle.net/chrisvfritz/b2qj69o1/\">範例連結</a></p>\n</blockquote>\n<blockquote>\n<p>說明：<code>is屬性</code>只要放在HTML標籤上或是component元件上都是可以的，需要特別注意特定標籤如 <code>&lt;li&gt;</code> 、<code>&lt;tr&gt;</code>、 <code>&lt;option&gt;</code>這類有特別限制上層 DOM 元素必須要是哪幾種的，像 <li> 的外層就只能是 <ol> 或 <ul> 等需要小心。<a href=\"https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">官網連結</a></p>\n</blockquote>\n<h4 id=\"練習範例：\"><a href=\"#練習範例：\" class=\"headerlink\" title=\"練習範例：\"></a>練習範例：</h4><p><a href=\"https://codepen.io/chunwen/pen/mdbPMOa?editors=1010\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span>使用 is 動態切換組件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;active&#x27;: current == &#x27;primary-component&#x27;&#125;&quot;</span>   @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;current = &#x27;primary-component&#x27;&quot;</span>&gt;</span>藍色元件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-item&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav-link&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;active&#x27;: current == &#x27;danger-component&#x27;&#125;&quot;</span>    @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;current = &#x27;danger-component&#x27;&quot;</span>&gt;</span>紅色元件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-3&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;current&quot;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>JavaScript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;primary-component&quot;</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;data&quot;</span>],</span><br><span class=\"line\">  template: <span class=\"string\">&quot;#primaryComponent&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;danger-component&quot;</span>, &#123;</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;data&quot;</span>],</span><br><span class=\"line\">  template: <span class=\"string\">&quot;#dangerComponent&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    item: &#123;</span><br><span class=\"line\">      header: <span class=\"string\">&quot;這裡是 header&quot;</span>,</span><br><span class=\"line\">      title: <span class=\"string\">&quot;這裡是 title&quot;</span>,</span><br><span class=\"line\">      text:</span><br><span class=\"line\">        <span class=\"string\">&quot;Lorem ipsum dolor sit amet&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    current: <span class=\"string\">&quot;primary-component&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>圖解：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191008/20114645lUXPOkz0vC.png\"></p>\n<h3 id=\"keep-alive與元件\"><a href=\"#keep-alive與元件\" class=\"headerlink\" title=\"keep-alive與元件\"></a>keep-alive與元件</h3><p>當我們透過<code>&lt;component&gt;</code>加上<code>:is屬性</code>來切換元件時，原本元件內的狀態不會保留，如果我們這時候需要保留就要透過 <code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>來為元件保留內部狀態。<br><a href=\"https://jsbin.com/nekapeq/1/edit?html,js,console,output\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;currentView = &#x27;channel-1&#x27;&quot;</span>&gt;</span>Channel 1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;currentView = &#x27;channel-2&#x27;&quot;</span>&gt;</span>Channel 2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;currentView = &#x27;channel-3&#x27;&quot;</span>&gt;</span>Channel 3<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;currentView&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示意圖：<br><img src=\"https://media.giphy.com/media/iDV04Gg8f9PfZzHpMV/giphy.gif\" alt=\"\"></p>"},{"title":"Vue Component(元件)-slot元件插槽","abbrlink":36751447,"date":"2019-10-09T02:18:51.000Z","_content":"\n參考資料\n- 五倍紅寶石課程\n- [官網插槽介紹](https://cn.vuejs.org/v2/guide/components-slots.html)\n<!-- more -->\n-----\n\n### 前言\n在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域\n我們先來看個範例\n[codepen連結](https://codepen.io/chunwen/pen/GRKxWJW?editors=1010)\n```html\n<div id=\"app\">\n<div class=\"parent\">{{msg}}</div>\n<child>{{msg}}</child>\n</div>\n```\n猜猜看，`child`元件中是否會印出父層的`msg：I'mparent`內容？\n答案是不會的！原因是`目前child所處的位置是父層作用域`，當然不會印出子層內容～ \n\n補充：在Vue生命週期中，Vue會在created階段時判斷是否有`template`，如果有vue則會去編譯template內容，也因此，child元件不會顯示I'mparent內容\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png)\n\n圖示結果：\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png)\n\n\n#### 小結論：\n1.父層作用域在父層編譯\n2.子層作用域在子層編譯\n若要突破作用域編譯問題，就要使用到`slot`\n\n\n-----\n\n\n### Slot簡介\n參考資料：[Summer 夏天Vue.js: Slot](https://cythilya.github.io/2017/10/11/vue-component-slot/)\n突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。\n\nSlot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。\n\n卡斯伯老師在課堂上將slot分為三種：\n1.沒有slot的狀態\n```html\n  <no-slot-component>\n    <p>這是一段沒有插槽使用的狀態</p>\n  </no-slot-component>\n```\n說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～\n\n2.單組slot\n特點：在模板中添加`<slot><slot/>`\nHTML部分\n```html\n  <single-slot-component>\n    <p>使用這段取代原本的 Slot。</p>\n  </single-slot-component>\n```\ntemplate部分\n```html\n<script type=\"text/x-template\" id=\"singleSlotComponent\">\n<div class=\"alert alert-warning\">\n  <h6>我是一個元件</h6>\n  <slot>\n    如果沒有內容，則會顯示此段落。\n  </slot>\n</div>\n</script>\n```\n畫面上，就可以將`<p>使用這段取代原本的 Slot。</p>`呈現在畫面上！如下\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png)\n\n3.多組slot(具名插槽)\n簡單來說，將內容放入指定位置\n寫法：\n1.在html加入`slot`  \n2.在元件模板插入 `name `\n[練習連結](https://codepen.io/chunwen/pen/gOOpLmN?editors=1010#0)\nHTML部分\n```html\n<child>\n      <p>123</p>\n      <h1 class=\"header\" slot=\"header\">這是 HEADER</h1>\n\n      <p>A paragraph for the main content.</p>\n      <p>And another one.</p>\n\n      <p class=\"footer\" slot=\"footer\">這是 FOOTER</p>\n\n</child>\n\n<template id=\"child-template\">\n    <div class=\"container\">\n      <header>\n        <slot name=\"header\">Default Header</slot>\n      </header>\n      <hr>\n\n      <main>\n        <slot>Default Body</slot>\n      </main>\n\n      <hr>\n      <footer>\n        <slot name=\"footer\">Default Footer</slot>\n      </footer>\n    </div>\n  </template>\n```\n> 補充：html結構中若不想顯示標籤如a、header，可以使用`<template>`，這樣就不會顯示標籤摟～\n\n### 練習一下\n猜猜看下面這個範例`child元件`，會印出什麼內容？\n[練習連結](https://codepen.io/chunwen/pen/OJJVRGq?editors=1010#0)\nHTML部分\n```html\n<div id=\"app\">\n<div class=\"parent\">{{ msg }}</div>\n  <child>\n    <div>This \"msg\" is from parent: {{ msg }}</div>\n  </child>\n</div>\n\n<template id=\"child-template\">\n    <div class=\"child\">\n      <div>{{ msg }}</div>\n      <!-- 預設slot文字 -->\n      <slot> Default Slot Content </slot>\n    </div>\n</template>\n```\nJavaSvript部分\n```javascript\n// children component\n    Vue.component('child', {\n      template: '#child-template',\n      data: function () {\n        return {\n          msg: 'I\\'m child.'\n        };\n      }\n    });\n\n    // parent component\n    var parent = new Vue({\n      el: '#app',\n      data: {\n        msg: 'I\\'m parent.'\n      }\n    });\n\n```\n答案是：\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png)\n\n原因：之所以child中的msg會印出`I'm parent`字樣，就是因為child所在區域，還是在父層。因此編譯作用域還是在父層內。\n\n\n#### 後記\n在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope\n","source":"_posts/2019-10-09-slot元件.md","raw":"---\ntitle: Vue Component(元件)-slot元件插槽\ntags:\n  - vue\n  - ironman\n  - component\ncategories:\n  - vue\nabbrlink: 36751447\ndate: 2019-10-09 10:18:51\n---\n\n參考資料\n- 五倍紅寶石課程\n- [官網插槽介紹](https://cn.vuejs.org/v2/guide/components-slots.html)\n<!-- more -->\n-----\n\n### 前言\n在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域\n我們先來看個範例\n[codepen連結](https://codepen.io/chunwen/pen/GRKxWJW?editors=1010)\n```html\n<div id=\"app\">\n<div class=\"parent\">{{msg}}</div>\n<child>{{msg}}</child>\n</div>\n```\n猜猜看，`child`元件中是否會印出父層的`msg：I'mparent`內容？\n答案是不會的！原因是`目前child所處的位置是父層作用域`，當然不會印出子層內容～ \n\n補充：在Vue生命週期中，Vue會在created階段時判斷是否有`template`，如果有vue則會去編譯template內容，也因此，child元件不會顯示I'mparent內容\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png)\n\n圖示結果：\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png)\n\n\n#### 小結論：\n1.父層作用域在父層編譯\n2.子層作用域在子層編譯\n若要突破作用域編譯問題，就要使用到`slot`\n\n\n-----\n\n\n### Slot簡介\n參考資料：[Summer 夏天Vue.js: Slot](https://cythilya.github.io/2017/10/11/vue-component-slot/)\n突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。\n\nSlot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。\n\n卡斯伯老師在課堂上將slot分為三種：\n1.沒有slot的狀態\n```html\n  <no-slot-component>\n    <p>這是一段沒有插槽使用的狀態</p>\n  </no-slot-component>\n```\n說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～\n\n2.單組slot\n特點：在模板中添加`<slot><slot/>`\nHTML部分\n```html\n  <single-slot-component>\n    <p>使用這段取代原本的 Slot。</p>\n  </single-slot-component>\n```\ntemplate部分\n```html\n<script type=\"text/x-template\" id=\"singleSlotComponent\">\n<div class=\"alert alert-warning\">\n  <h6>我是一個元件</h6>\n  <slot>\n    如果沒有內容，則會顯示此段落。\n  </slot>\n</div>\n</script>\n```\n畫面上，就可以將`<p>使用這段取代原本的 Slot。</p>`呈現在畫面上！如下\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png)\n\n3.多組slot(具名插槽)\n簡單來說，將內容放入指定位置\n寫法：\n1.在html加入`slot`  \n2.在元件模板插入 `name `\n[練習連結](https://codepen.io/chunwen/pen/gOOpLmN?editors=1010#0)\nHTML部分\n```html\n<child>\n      <p>123</p>\n      <h1 class=\"header\" slot=\"header\">這是 HEADER</h1>\n\n      <p>A paragraph for the main content.</p>\n      <p>And another one.</p>\n\n      <p class=\"footer\" slot=\"footer\">這是 FOOTER</p>\n\n</child>\n\n<template id=\"child-template\">\n    <div class=\"container\">\n      <header>\n        <slot name=\"header\">Default Header</slot>\n      </header>\n      <hr>\n\n      <main>\n        <slot>Default Body</slot>\n      </main>\n\n      <hr>\n      <footer>\n        <slot name=\"footer\">Default Footer</slot>\n      </footer>\n    </div>\n  </template>\n```\n> 補充：html結構中若不想顯示標籤如a、header，可以使用`<template>`，這樣就不會顯示標籤摟～\n\n### 練習一下\n猜猜看下面這個範例`child元件`，會印出什麼內容？\n[練習連結](https://codepen.io/chunwen/pen/OJJVRGq?editors=1010#0)\nHTML部分\n```html\n<div id=\"app\">\n<div class=\"parent\">{{ msg }}</div>\n  <child>\n    <div>This \"msg\" is from parent: {{ msg }}</div>\n  </child>\n</div>\n\n<template id=\"child-template\">\n    <div class=\"child\">\n      <div>{{ msg }}</div>\n      <!-- 預設slot文字 -->\n      <slot> Default Slot Content </slot>\n    </div>\n</template>\n```\nJavaSvript部分\n```javascript\n// children component\n    Vue.component('child', {\n      template: '#child-template',\n      data: function () {\n        return {\n          msg: 'I\\'m child.'\n        };\n      }\n    });\n\n    // parent component\n    var parent = new Vue({\n      el: '#app',\n      data: {\n        msg: 'I\\'m parent.'\n      }\n    });\n\n```\n答案是：\n![https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png](https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png)\n\n原因：之所以child中的msg會印出`I'm parent`字樣，就是因為child所在區域，還是在父層。因此編譯作用域還是在父層內。\n\n\n#### 後記\n在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope\n","slug":"2019-10-09-slot元件","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t380039zqzigm7aafch","content":"<p>參考資料</p>\n<ul>\n<li>五倍紅寶石課程</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-slots.html\">官網插槽介紹</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域<br>我們先來看個範例<br><a href=\"https://codepen.io/chunwen/pen/GRKxWJW?editors=1010\">codepen連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>猜猜看，<code>child</code>元件中是否會印出父層的<code>msg：I&#39;mparent</code>內容？<br>答案是不會的！原因是<code>目前child所處的位置是父層作用域</code>，當然不會印出子層內容～ </p>\n<p>補充：在Vue生命週期中，Vue會在created階段時判斷是否有<code>template</code>，如果有vue則會去編譯template內容，也因此，child元件不會顯示I’mparent內容<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png\"></p>\n<p>圖示結果：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png\"></p>\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><p>1.父層作用域在父層編譯<br>2.子層作用域在子層編譯<br>若要突破作用域編譯問題，就要使用到<code>slot</code></p>\n<hr>\n<h3 id=\"Slot簡介\"><a href=\"#Slot簡介\" class=\"headerlink\" title=\"Slot簡介\"></a>Slot簡介</h3><p>參考資料：<a href=\"https://cythilya.github.io/2017/10/11/vue-component-slot/\">Summer 夏天Vue.js: Slot</a><br>突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。</p>\n<p>Slot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。</p>\n<p>卡斯伯老師在課堂上將slot分為三種：<br>1.沒有slot的狀態</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">no-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>這是一段沒有插槽使用的狀態<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">no-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～</p>\n<p>2.單組slot<br>特點：在模板中添加<code>&lt;slot&gt;&lt;slot/&gt;</code><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">single-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用這段取代原本的 Slot。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">single-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>template部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/x-template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;singleSlotComponent&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;alert alert-warning&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>我是一個元件<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span></span></span><br><span class=\"line\">    如果沒有內容，則會顯示此段落。</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>畫面上，就可以將<code>&lt;p&gt;使用這段取代原本的 Slot。&lt;/p&gt;</code>呈現在畫面上！如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png\"></p>\n<p>3.多組slot(具名插槽)<br>簡單來說，將內容放入指定位置<br>寫法：<br>1.在html加入<code>slot</code><br>2.在元件模板插入 <code>name</code><br><a href=\"https://codepen.io/chunwen/pen/gOOpLmN?editors=1010#0\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>這是 HEADER<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>這是 FOOTER<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>Default Header<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>Default Body<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>Default Footer<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：html結構中若不想顯示標籤如a、header，可以使用<code>&lt;template&gt;</code>，這樣就不會顯示標籤摟～</p>\n</blockquote>\n<h3 id=\"練習一下\"><a href=\"#練習一下\" class=\"headerlink\" title=\"練習一下\"></a>練習一下</h3><p>猜猜看下面這個範例<code>child元件</code>，會印出什麼內容？<br><a href=\"https://codepen.io/chunwen/pen/OJJVRGq?editors=1010#0\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This &quot;msg&quot; is from parent: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 預設slot文字 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span> Default Slot Content <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaSvript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// children component</span></span><br><span class=\"line\">    Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;#child-template&#x27;</span>,</span><br><span class=\"line\">      data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          msg: <span class=\"string\">&#x27;I\\&#x27;m child.&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// parent component</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: <span class=\"string\">&#x27;I\\&#x27;m parent.&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>答案是：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png\"></p>\n<p>原因：之所以child中的msg會印出<code>I&#39;m parent</code>字樣，就是因為child所在區域，還是在父層。因此編譯作用域還是在父層內。</p>\n<h4 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h4><p>在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope</p>\n","site":{"data":{}},"length":3064,"excerpt":"<p>參考資料</p>\n<ul>\n<li>五倍紅寶石課程</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-slots.html\">官網插槽介紹</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域<br>我們先來看個範例<br><a href=\"https://codepen.io/chunwen/pen/GRKxWJW?editors=1010\">codepen連結</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>猜猜看，<code>child</code>元件中是否會印出父層的<code>msg：I&#39;mparent</code>內容？<br>答案是不會的！原因是<code>目前child所處的位置是父層作用域</code>，當然不會印出子層內容～ </p>\n<p>補充：在Vue生命週期中，Vue會在created階段時判斷是否有<code>template</code>，如果有vue則會去編譯template內容，也因此，child元件不會顯示I’mparent內容<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645YYilPuEj6G.png\"></p>\n<p>圖示結果：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645DNIetTy2Ci.png\"></p>\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><p>1.父層作用域在父層編譯<br>2.子層作用域在子層編譯<br>若要突破作用域編譯問題，就要使用到<code>slot</code></p>\n<hr>\n<h3 id=\"Slot簡介\"><a href=\"#Slot簡介\" class=\"headerlink\" title=\"Slot簡介\"></a>Slot簡介</h3><p>參考資料：<a href=\"https://cythilya.github.io/2017/10/11/vue-component-slot/\">Summer 夏天Vue.js: Slot</a><br>突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。</p>\n<p>Slot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。</p>\n<p>卡斯伯老師在課堂上將slot分為三種：<br>1.沒有slot的狀態</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">no-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>這是一段沒有插槽使用的狀態<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">no-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～</p>\n<p>2.單組slot<br>特點：在模板中添加<code>&lt;slot&gt;&lt;slot/&gt;</code><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">single-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用這段取代原本的 Slot。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">single-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>template部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/x-template&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;singleSlotComponent&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;alert alert-warning&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>我是一個元件<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span></span></span><br><span class=\"line\">    如果沒有內容，則會顯示此段落。</span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>畫面上，就可以將<code>&lt;p&gt;使用這段取代原本的 Slot。&lt;/p&gt;</code>呈現在畫面上！如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645IWKZBTkNyY.png\"></p>\n<p>3.多組slot(具名插槽)<br>簡單來說，將內容放入指定位置<br>寫法：<br>1.在html加入<code>slot</code><br>2.在元件模板插入 <code>name</code><br><a href=\"https://codepen.io/chunwen/pen/gOOpLmN?editors=1010#0\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>這是 HEADER<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>這是 FOOTER<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>Default Header<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>Default Body<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>Default Footer<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：html結構中若不想顯示標籤如a、header，可以使用<code>&lt;template&gt;</code>，這樣就不會顯示標籤摟～</p>\n</blockquote>\n<h3 id=\"練習一下\"><a href=\"#練習一下\" class=\"headerlink\" title=\"練習一下\"></a>練習一下</h3><p>猜猜看下面這個範例<code>child元件</code>，會印出什麼內容？<br><a href=\"https://codepen.io/chunwen/pen/OJJVRGq?editors=1010#0\">練習連結</a><br>HTML部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>This &quot;msg&quot; is from parent: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 預設slot文字 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span> Default Slot Content <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaSvript部分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// children component</span></span><br><span class=\"line\">    Vue.component(<span class=\"string\">&#x27;child&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;#child-template&#x27;</span>,</span><br><span class=\"line\">      data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          msg: <span class=\"string\">&#x27;I\\&#x27;m child.&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// parent component</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">      data: &#123;</span><br><span class=\"line\">        msg: <span class=\"string\">&#x27;I\\&#x27;m parent.&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>答案是：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191009/20114645wwTeKanLW0.png\"></p>\n<p>原因：之所以child中的msg會印出<code>I&#39;m parent</code>字樣，就是因為child所在區域，還是在父層。因此編譯作用域還是在父層內。</p>\n<h4 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h4><p>在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope</p>"},{"title":"Vue CLI2與Webpack介紹","abbrlink":1215381457,"date":"2019-10-13T12:46:35.000Z","_content":"\n參考資料\n- 六角Vue課程\n- [Vue Cli3官網](https://cli.vuejs.org/guide/installation.html)\n- [Kuro’s Blog 初探 Vue-CLI v3.0](https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/)\n<!-- more -->\n-----\n\n### 什麼是Vue CLI?\n基於Webpack所建置得開發工具（白話文：內建webpack），Vue Cli是一個指令\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png)\n\n### 為何要使用Vue Cli?\n1.快速建立 Vue.js 的專案項目環境，並提供開發階段便利的運行環境\n2.便於使用各種第三方套件（BS4、Vue Router）\n3.可以運行Sass、Babel等編譯工具\n4.便於開發SPA\n\n### Webpack簡介\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png)\n說明：\nWebpack會去監控main.js檔案，當內容有更動時就會自動編譯\n而`main.js`就是Webpack進入點，但因為main.js是JS檔，所以無法編譯`.png`、`.vue`、`.sass`檔案，因此需要`loader`工具來協助編譯\n\n既然談到Ｗebpack，我們就來簡單介紹一下他的檔案結構吧！\n\n\n-----\n\n### Webpack腳本結構\n#### .base檔案說明1\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png)\n#### .base檔案說明2\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png)\n補充一下：base64：目的將圖片轉為文字編碼方式，加速畫面載入速度。\n#### config檔案說明\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png)\n#### 環境變數\n主要目的：許多資源在測試機與正式機是不同的，因此可以使用環境變數來切換不同環境。\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png)\n> 補充：`process.env`，從哪來？[同學討論連結](https://www.udemy.com/course/vue-hexschool/learn/lecture/10415930#questions/5480948)\n\n\n\n-----\n\n### Vue CLI2 安裝\n[Vue Cli2參考資料](https://github.com/vuejs/vue-cli/tree/v2#vue-cli--)\n安裝步驟：\n1.`sudo install -g vue-cli`\n\n2.接著，創建專案`vue init webpack my_project`\n例如：`vue init webpack vuewebpack`\n\n3.終端機就會出現下面相關內容（這邊就先按照課堂老師設定）\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png)\n4.接著，會出現下面畫面（依序輸入即可）\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png)\n5.安裝成功畫面\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png)\n###  資料結構說明\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png)\n說明：\nDist資料夾內檔案都必須運行在HTTP server喔！\n\n#### Vue.file 檔案結構\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png)\n圖片來源：五倍紅寶石\nVue檔，會包含三個部分（HTML、Script、Style）\nStyle：\n若沒有CSS就不會有喔，另外加上scoped後，就可以將樣式放在特定元件下不會污染全域\n```css\n<style scoped lang=“scss”>\nh3 {\nmargin:40px00;\n}\n</style>\n```\n\n#### main.js檔案介紹\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png)\n\n\n","source":"_posts/2019-10-10-vueCLI2與Webpack介紹.md","raw":"---\ntitle: Vue CLI2與Webpack介紹\ntags:\n  - vue\n  - ironman\n  - vueCLI\ncategories:\n  - vue\nabbrlink: 1215381457\ndate: 2019-10-13 20:46:35\n---\n\n參考資料\n- 六角Vue課程\n- [Vue Cli3官網](https://cli.vuejs.org/guide/installation.html)\n- [Kuro’s Blog 初探 Vue-CLI v3.0](https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/)\n<!-- more -->\n-----\n\n### 什麼是Vue CLI?\n基於Webpack所建置得開發工具（白話文：內建webpack），Vue Cli是一個指令\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png)\n\n### 為何要使用Vue Cli?\n1.快速建立 Vue.js 的專案項目環境，並提供開發階段便利的運行環境\n2.便於使用各種第三方套件（BS4、Vue Router）\n3.可以運行Sass、Babel等編譯工具\n4.便於開發SPA\n\n### Webpack簡介\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png)\n說明：\nWebpack會去監控main.js檔案，當內容有更動時就會自動編譯\n而`main.js`就是Webpack進入點，但因為main.js是JS檔，所以無法編譯`.png`、`.vue`、`.sass`檔案，因此需要`loader`工具來協助編譯\n\n既然談到Ｗebpack，我們就來簡單介紹一下他的檔案結構吧！\n\n\n-----\n\n### Webpack腳本結構\n#### .base檔案說明1\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png)\n#### .base檔案說明2\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png)\n補充一下：base64：目的將圖片轉為文字編碼方式，加速畫面載入速度。\n#### config檔案說明\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png)\n#### 環境變數\n主要目的：許多資源在測試機與正式機是不同的，因此可以使用環境變數來切換不同環境。\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png)\n> 補充：`process.env`，從哪來？[同學討論連結](https://www.udemy.com/course/vue-hexschool/learn/lecture/10415930#questions/5480948)\n\n\n\n-----\n\n### Vue CLI2 安裝\n[Vue Cli2參考資料](https://github.com/vuejs/vue-cli/tree/v2#vue-cli--)\n安裝步驟：\n1.`sudo install -g vue-cli`\n\n2.接著，創建專案`vue init webpack my_project`\n例如：`vue init webpack vuewebpack`\n\n3.終端機就會出現下面相關內容（這邊就先按照課堂老師設定）\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png)\n4.接著，會出現下面畫面（依序輸入即可）\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png)\n5.安裝成功畫面\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png)\n###  資料結構說明\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png)\n說明：\nDist資料夾內檔案都必須運行在HTTP server喔！\n\n#### Vue.file 檔案結構\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png)\n圖片來源：五倍紅寶石\nVue檔，會包含三個部分（HTML、Script、Style）\nStyle：\n若沒有CSS就不會有喔，另外加上scoped後，就可以將樣式放在特定元件下不會污染全域\n```css\n<style scoped lang=“scss”>\nh3 {\nmargin:40px00;\n}\n</style>\n```\n\n#### main.js檔案介紹\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png)\n\n\n","slug":"2019-10-10-vueCLI2與Webpack介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t39003czqzidefrcvcr","content":"<p>參考資料</p>\n<ul>\n<li>六角Vue課程</li>\n<li><a href=\"https://cli.vuejs.org/guide/installation.html\">Vue Cli3官網</a></li>\n<li><a href=\"https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/\">Kuro’s Blog 初探 Vue-CLI v3.0</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"什麼是Vue-CLI\"><a href=\"#什麼是Vue-CLI\" class=\"headerlink\" title=\"什麼是Vue CLI?\"></a>什麼是Vue CLI?</h3><p>基於Webpack所建置得開發工具（白話文：內建webpack），Vue Cli是一個指令<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png\"></p>\n<h3 id=\"為何要使用Vue-Cli\"><a href=\"#為何要使用Vue-Cli\" class=\"headerlink\" title=\"為何要使用Vue Cli?\"></a>為何要使用Vue Cli?</h3><p>1.快速建立 Vue.js 的專案項目環境，並提供開發階段便利的運行環境<br>2.便於使用各種第三方套件（BS4、Vue Router）<br>3.可以運行Sass、Babel等編譯工具<br>4.便於開發SPA</p>\n<h3 id=\"Webpack簡介\"><a href=\"#Webpack簡介\" class=\"headerlink\" title=\"Webpack簡介\"></a>Webpack簡介</h3><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png\"><br>說明：<br>Webpack會去監控main.js檔案，當內容有更動時就會自動編譯<br>而<code>main.js</code>就是Webpack進入點，但因為main.js是JS檔，所以無法編譯<code>.png</code>、<code>.vue</code>、<code>.sass</code>檔案，因此需要<code>loader</code>工具來協助編譯</p>\n<p>既然談到Ｗebpack，我們就來簡單介紹一下他的檔案結構吧！</p>\n<hr>\n<h3 id=\"Webpack腳本結構\"><a href=\"#Webpack腳本結構\" class=\"headerlink\" title=\"Webpack腳本結構\"></a>Webpack腳本結構</h3><h4 id=\"base檔案說明1\"><a href=\"#base檔案說明1\" class=\"headerlink\" title=\".base檔案說明1\"></a>.base檔案說明1</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png\"></p>\n<h4 id=\"base檔案說明2\"><a href=\"#base檔案說明2\" class=\"headerlink\" title=\".base檔案說明2\"></a>.base檔案說明2</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png\"><br>補充一下：base64：目的將圖片轉為文字編碼方式，加速畫面載入速度。</p>\n<h4 id=\"config檔案說明\"><a href=\"#config檔案說明\" class=\"headerlink\" title=\"config檔案說明\"></a>config檔案說明</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png\"></p>\n<h4 id=\"環境變數\"><a href=\"#環境變數\" class=\"headerlink\" title=\"環境變數\"></a>環境變數</h4><p>主要目的：許多資源在測試機與正式機是不同的，因此可以使用環境變數來切換不同環境。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png\"></p>\n<blockquote>\n<p>補充：<code>process.env</code>，從哪來？<a href=\"https://www.udemy.com/course/vue-hexschool/learn/lecture/10415930#questions/5480948\">同學討論連結</a></p>\n</blockquote>\n<hr>\n<h3 id=\"Vue-CLI2-安裝\"><a href=\"#Vue-CLI2-安裝\" class=\"headerlink\" title=\"Vue CLI2 安裝\"></a>Vue CLI2 安裝</h3><p><a href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\">Vue Cli2參考資料</a><br>安裝步驟：<br>1.<code>sudo install -g vue-cli</code></p>\n<p>2.接著，創建專案<code>vue init webpack my_project</code><br>例如：<code>vue init webpack vuewebpack</code></p>\n<p>3.終端機就會出現下面相關內容（這邊就先按照課堂老師設定）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png\"><br>4.接著，會出現下面畫面（依序輸入即可）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png\"><br>5.安裝成功畫面<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png\"></p>\n<h3 id=\"資料結構說明\"><a href=\"#資料結構說明\" class=\"headerlink\" title=\"資料結構說明\"></a>資料結構說明</h3><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png\"><br>說明：<br>Dist資料夾內檔案都必須運行在HTTP server喔！</p>\n<h4 id=\"Vue-file-檔案結構\"><a href=\"#Vue-file-檔案結構\" class=\"headerlink\" title=\"Vue.file 檔案結構\"></a>Vue.file 檔案結構</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png\"><br>圖片來源：五倍紅寶石<br>Vue檔，會包含三個部分（HTML、Script、Style）<br>Style：<br>若沒有CSS就不會有喔，另外加上scoped後，就可以將樣式放在特定元件下不會污染全域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped lang=“scss”&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">40px</span>00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"main-js檔案介紹\"><a href=\"#main-js檔案介紹\" class=\"headerlink\" title=\"main.js檔案介紹\"></a>main.js檔案介紹</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png\"></p>\n","site":{"data":{}},"length":890,"excerpt":"<p>參考資料</p>\n<ul>\n<li>六角Vue課程</li>\n<li><a href=\"https://cli.vuejs.org/guide/installation.html\">Vue Cli3官網</a></li>\n<li><a href=\"https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/\">Kuro’s Blog 初探 Vue-CLI v3.0</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"什麼是Vue-CLI\"><a href=\"#什麼是Vue-CLI\" class=\"headerlink\" title=\"什麼是Vue CLI?\"></a>什麼是Vue CLI?</h3><p>基於Webpack所建置得開發工具（白話文：內建webpack），Vue Cli是一個指令<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146452cgeLWRbi5.png\"></p>\n<h3 id=\"為何要使用Vue-Cli\"><a href=\"#為何要使用Vue-Cli\" class=\"headerlink\" title=\"為何要使用Vue Cli?\"></a>為何要使用Vue Cli?</h3><p>1.快速建立 Vue.js 的專案項目環境，並提供開發階段便利的運行環境<br>2.便於使用各種第三方套件（BS4、Vue Router）<br>3.可以運行Sass、Babel等編譯工具<br>4.便於開發SPA</p>\n<h3 id=\"Webpack簡介\"><a href=\"#Webpack簡介\" class=\"headerlink\" title=\"Webpack簡介\"></a>Webpack簡介</h3><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ZmbnxU2ZmK.png\"><br>說明：<br>Webpack會去監控main.js檔案，當內容有更動時就會自動編譯<br>而<code>main.js</code>就是Webpack進入點，但因為main.js是JS檔，所以無法編譯<code>.png</code>、<code>.vue</code>、<code>.sass</code>檔案，因此需要<code>loader</code>工具來協助編譯</p>\n<p>既然談到Ｗebpack，我們就來簡單介紹一下他的檔案結構吧！</p>\n<hr>\n<h3 id=\"Webpack腳本結構\"><a href=\"#Webpack腳本結構\" class=\"headerlink\" title=\"Webpack腳本結構\"></a>Webpack腳本結構</h3><h4 id=\"base檔案說明1\"><a href=\"#base檔案說明1\" class=\"headerlink\" title=\".base檔案說明1\"></a>.base檔案說明1</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451pcKqzbMwr.png\"></p>\n<h4 id=\"base檔案說明2\"><a href=\"#base檔案說明2\" class=\"headerlink\" title=\".base檔案說明2\"></a>.base檔案說明2</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dzemdx88X2.png\"><br>補充一下：base64：目的將圖片轉為文字編碼方式，加速畫面載入速度。</p>\n<h4 id=\"config檔案說明\"><a href=\"#config檔案說明\" class=\"headerlink\" title=\"config檔案說明\"></a>config檔案說明</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645k3X7fmXv8Q.png\"></p>\n<h4 id=\"環境變數\"><a href=\"#環境變數\" class=\"headerlink\" title=\"環境變數\"></a>環境變數</h4><p>主要目的：許多資源在測試機與正式機是不同的，因此可以使用環境變數來切換不同環境。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146451bl7UGcEpG.png\"></p>\n<blockquote>\n<p>補充：<code>process.env</code>，從哪來？<a href=\"https://www.udemy.com/course/vue-hexschool/learn/lecture/10415930#questions/5480948\">同學討論連結</a></p>\n</blockquote>\n<hr>\n<h3 id=\"Vue-CLI2-安裝\"><a href=\"#Vue-CLI2-安裝\" class=\"headerlink\" title=\"Vue CLI2 安裝\"></a>Vue CLI2 安裝</h3><p><a href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\">Vue Cli2參考資料</a><br>安裝步驟：<br>1.<code>sudo install -g vue-cli</code></p>\n<p>2.接著，創建專案<code>vue init webpack my_project</code><br>例如：<code>vue init webpack vuewebpack</code></p>\n<p>3.終端機就會出現下面相關內容（這邊就先按照課堂老師設定）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146456z4F93x5X8.png\"><br>4.接著，會出現下面畫面（依序輸入即可）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645f13D6W9LDl.png\"><br>5.安裝成功畫面<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645dT74V1kgjK.png\"></p>\n<h3 id=\"資料結構說明\"><a href=\"#資料結構說明\" class=\"headerlink\" title=\"資料結構說明\"></a>資料結構說明</h3><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645OmEYIVAcaa.png\"><br>說明：<br>Dist資料夾內檔案都必須運行在HTTP server喔！</p>\n<h4 id=\"Vue-file-檔案結構\"><a href=\"#Vue-file-檔案結構\" class=\"headerlink\" title=\"Vue.file 檔案結構\"></a>Vue.file 檔案結構</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645u1kuavW88T.png\"><br>圖片來源：五倍紅寶石<br>Vue檔，會包含三個部分（HTML、Script、Style）<br>Style：<br>若沒有CSS就不會有喔，另外加上scoped後，就可以將樣式放在特定元件下不會污染全域</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style scoped lang=“scss”&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>:<span class=\"number\">40px</span>00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"main-js檔案介紹\"><a href=\"#main-js檔案介紹\" class=\"headerlink\" title=\"main.js檔案介紹\"></a>main.js檔案介紹</h4><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645Iq0EyV0tkp.png\"></p>"},{"title":"Vue CLI3介含(GUI介面介紹)","abbrlink":3198324886,"date":"2019-10-13T12:50:40.000Z","_content":"\n參考資料\n- [初探 Vue-CLI v3.0](https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/)\n- 六角線上課程筆記整理\n<!-- more -->\n-----\n\n### Vue CLI3特色\n1.完整GUI介面（有介面用就是爽）\n2.可以將Ts、SASS等工具用套件方式載入Webpack主體，編譯出來\n3.可以直接編譯`.vue檔案`\n\n### 安裝Vue Cli3\n參考資料：[Vue Cli3官網](https://cli.vuejs.org/guide/installation.html)\nStep1.`sudo npm install -g @vue/cli --unsafe-perm` \n補充說明：\n- Mac 安裝全域工具時 (-g)，建議額外加上 sudo 在前方\n- 改用上面與法主要原因，創建專案時：`vue create hello-world`會發生錯誤\n[參考資料：error during install of vue-cli](https://github.com/vuejs/vue-cli/issues/3402)\n- 安裝Vue CLI 需要 Node.js 8.9以上版本\n\n\n\nStep1.2：\n我們可以透過`vue —V`\n確認版本是否安裝成功。目前安裝的是`Vue ClI v3.11.0`\n\nStep2.創建專案目錄\n`vue create hello-world`\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png)\n接著會跳出\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png)\n再下來會跳出\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png)\n再來會請你選擇Scss版本：\n請選擇`node-sass`\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png)\n終於到最後一頁（內容說明：[參考資料](https://www.jianshu.com/p/fbcad30031c2)）\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png)\n\nStep3.畫面顯示\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png)\n最後測試網頁是否正常：\n輸入`http://localhost:8080/`。畫面呈現如下\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png)\n### 補充：共用Vue Cli2\n參考資料：\n[全局安裝Vue cli3 和繼續使用Vue-cli2.x](https://blog.csdn.net/u012302552/article/details/81703202)\n[Vue Cli2參考資料](https://github.com/vuejs/vue-cli/tree/v2#vue-cli--)\n依照上面步驟，我們已經將Vue CLI3安裝完成，這時候我們如果想要使用過去CLI樣板功能，我們可以使用下面指令：\n1.`sudo install -g @vue/cli-init`\n2.接著，創建專案`vue init webpack my_project`\n例如：`vue init webpack vue-cli2-demo`\n\n#### 問題整理\nＱ：安裝完後，我有個疑問點，就是之後使用指令時候，是否要使用VueCLI3 指令？如：`npm run serve`還是Vue Cl2版本指令`npm run dev`？\n備註：我從終端機看Vue-V 顯示的還是3.11.0版本\nＡ：我們要先知道 Vue 2, 3 分為`全域` 與 `區域`\n全域的是**指令工具**，像是 vue init, vue ui …\n區域的是**執行環境**，ex：dev, serve\n而執行環境的指令在 package.json 內可以找到\n所以這兩者是沒有關聯性，因此可以共用，而vue -v 這是全域的指令工具版本，並非區域的執行環境\n\n### 資料結構說明\n這是安裝完Vue CLI3後，打開Vscode畫面\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png)\n再次提醒：src資料夾中內容都會被編譯！\n最後，我們可以在終端機指令下：\n`npm run build` 將資料夾打包就可以瞜\n\n### Vue GUI介面介紹\n首先，切換到指定資料夾下 輸入`vue ui`指令\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png)\n開啟畫面會長這樣，我們先create一個專案\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png)\n接著建立專案過程就像上面安裝Vue Cli3一樣，我這邊就不多贅述\n完成後，畫面呈現如下圖\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png)\n\n#### 安裝Plugin\n我們這邊以安裝Vue Router為例\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png)\n如何確認是否有成功安裝?\n檔案中會出現`router`字樣\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png)\n\n#### 修改Config\n我們最常調整公開路徑這塊\n像是我們將Vue作業放置GitHub-pages下時，就需要調整路經摟～\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png)\n\n示範：更改後的根目錄\n![https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png](https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png)\n","source":"_posts/2019-10-11-vueCLI3介含.md","raw":"---\ntitle: Vue CLI3介含(GUI介面介紹)\ntags:\n  - vue\n  - ironman\n  - vueCLI\ncategories:\n  - vue\nabbrlink: 3198324886\ndate: 2019-10-13 20:50:40\n---\n\n參考資料\n- [初探 Vue-CLI v3.0](https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/)\n- 六角線上課程筆記整理\n<!-- more -->\n-----\n\n### Vue CLI3特色\n1.完整GUI介面（有介面用就是爽）\n2.可以將Ts、SASS等工具用套件方式載入Webpack主體，編譯出來\n3.可以直接編譯`.vue檔案`\n\n### 安裝Vue Cli3\n參考資料：[Vue Cli3官網](https://cli.vuejs.org/guide/installation.html)\nStep1.`sudo npm install -g @vue/cli --unsafe-perm` \n補充說明：\n- Mac 安裝全域工具時 (-g)，建議額外加上 sudo 在前方\n- 改用上面與法主要原因，創建專案時：`vue create hello-world`會發生錯誤\n[參考資料：error during install of vue-cli](https://github.com/vuejs/vue-cli/issues/3402)\n- 安裝Vue CLI 需要 Node.js 8.9以上版本\n\n\n\nStep1.2：\n我們可以透過`vue —V`\n確認版本是否安裝成功。目前安裝的是`Vue ClI v3.11.0`\n\nStep2.創建專案目錄\n`vue create hello-world`\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png)\n接著會跳出\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png)\n再下來會跳出\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png)\n再來會請你選擇Scss版本：\n請選擇`node-sass`\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png)\n終於到最後一頁（內容說明：[參考資料](https://www.jianshu.com/p/fbcad30031c2)）\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png)\n\nStep3.畫面顯示\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png)\n最後測試網頁是否正常：\n輸入`http://localhost:8080/`。畫面呈現如下\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png)\n### 補充：共用Vue Cli2\n參考資料：\n[全局安裝Vue cli3 和繼續使用Vue-cli2.x](https://blog.csdn.net/u012302552/article/details/81703202)\n[Vue Cli2參考資料](https://github.com/vuejs/vue-cli/tree/v2#vue-cli--)\n依照上面步驟，我們已經將Vue CLI3安裝完成，這時候我們如果想要使用過去CLI樣板功能，我們可以使用下面指令：\n1.`sudo install -g @vue/cli-init`\n2.接著，創建專案`vue init webpack my_project`\n例如：`vue init webpack vue-cli2-demo`\n\n#### 問題整理\nＱ：安裝完後，我有個疑問點，就是之後使用指令時候，是否要使用VueCLI3 指令？如：`npm run serve`還是Vue Cl2版本指令`npm run dev`？\n備註：我從終端機看Vue-V 顯示的還是3.11.0版本\nＡ：我們要先知道 Vue 2, 3 分為`全域` 與 `區域`\n全域的是**指令工具**，像是 vue init, vue ui …\n區域的是**執行環境**，ex：dev, serve\n而執行環境的指令在 package.json 內可以找到\n所以這兩者是沒有關聯性，因此可以共用，而vue -v 這是全域的指令工具版本，並非區域的執行環境\n\n### 資料結構說明\n這是安裝完Vue CLI3後，打開Vscode畫面\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png)\n再次提醒：src資料夾中內容都會被編譯！\n最後，我們可以在終端機指令下：\n`npm run build` 將資料夾打包就可以瞜\n\n### Vue GUI介面介紹\n首先，切換到指定資料夾下 輸入`vue ui`指令\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png)\n開啟畫面會長這樣，我們先create一個專案\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png)\n接著建立專案過程就像上面安裝Vue Cli3一樣，我這邊就不多贅述\n完成後，畫面呈現如下圖\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png)\n\n#### 安裝Plugin\n我們這邊以安裝Vue Router為例\n![https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png](https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png)\n如何確認是否有成功安裝?\n檔案中會出現`router`字樣\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png)\n\n#### 修改Config\n我們最常調整公開路徑這塊\n像是我們將Vue作業放置GitHub-pages下時，就需要調整路經摟～\n![https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png](https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png)\n\n示範：更改後的根目錄\n![https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png](https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png)\n","slug":"2019-10-11-vueCLI3介含","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3a003gzqzi0kq9d5wb","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/\">初探 Vue-CLI v3.0</a></li>\n<li>六角線上課程筆記整理<span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"Vue-CLI3特色\"><a href=\"#Vue-CLI3特色\" class=\"headerlink\" title=\"Vue CLI3特色\"></a>Vue CLI3特色</h3><p>1.完整GUI介面（有介面用就是爽）<br>2.可以將Ts、SASS等工具用套件方式載入Webpack主體，編譯出來<br>3.可以直接編譯<code>.vue檔案</code></p>\n<h3 id=\"安裝Vue-Cli3\"><a href=\"#安裝Vue-Cli3\" class=\"headerlink\" title=\"安裝Vue Cli3\"></a>安裝Vue Cli3</h3><p>參考資料：<a href=\"https://cli.vuejs.org/guide/installation.html\">Vue Cli3官網</a><br>Step1.<code>sudo npm install -g @vue/cli --unsafe-perm</code><br>補充說明：</p>\n<ul>\n<li>Mac 安裝全域工具時 (-g)，建議額外加上 sudo 在前方</li>\n<li>改用上面與法主要原因，創建專案時：<code>vue create hello-world</code>會發生錯誤<br><a href=\"https://github.com/vuejs/vue-cli/issues/3402\">參考資料：error during install of vue-cli</a></li>\n<li>安裝Vue CLI 需要 Node.js 8.9以上版本</li>\n</ul>\n<p>Step1.2：<br>我們可以透過<code>vue —V</code><br>確認版本是否安裝成功。目前安裝的是<code>Vue ClI v3.11.0</code></p>\n<p>Step2.創建專案目錄<br><code>vue create hello-world</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png\"><br>接著會跳出<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png\"><br>再下來會跳出<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png\"><br>再來會請你選擇Scss版本：<br>請選擇<code>node-sass</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png\"><br>終於到最後一頁（內容說明：<a href=\"https://www.jianshu.com/p/fbcad30031c2\">參考資料</a>）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png\"></p>\n<p>Step3.畫面顯示<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png\"><br>最後測試網頁是否正常：<br>輸入<code>http://localhost:8080/</code>。畫面呈現如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png\"></p>\n<h3 id=\"補充：共用Vue-Cli2\"><a href=\"#補充：共用Vue-Cli2\" class=\"headerlink\" title=\"補充：共用Vue Cli2\"></a>補充：共用Vue Cli2</h3><p>參考資料：<br><a href=\"https://blog.csdn.net/u012302552/article/details/81703202\">全局安裝Vue cli3 和繼續使用Vue-cli2.x</a><br><a href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\">Vue Cli2參考資料</a><br>依照上面步驟，我們已經將Vue CLI3安裝完成，這時候我們如果想要使用過去CLI樣板功能，我們可以使用下面指令：<br>1.<code>sudo install -g @vue/cli-init</code><br>2.接著，創建專案<code>vue init webpack my_project</code><br>例如：<code>vue init webpack vue-cli2-demo</code></p>\n<h4 id=\"問題整理\"><a href=\"#問題整理\" class=\"headerlink\" title=\"問題整理\"></a>問題整理</h4><p>Ｑ：安裝完後，我有個疑問點，就是之後使用指令時候，是否要使用VueCLI3 指令？如：<code>npm run serve</code>還是Vue Cl2版本指令<code>npm run dev</code>？<br>備註：我從終端機看Vue-V 顯示的還是3.11.0版本<br>Ａ：我們要先知道 Vue 2, 3 分為<code>全域</code> 與 <code>區域</code><br>全域的是<strong>指令工具</strong>，像是 vue init, vue ui …<br>區域的是<strong>執行環境</strong>，ex：dev, serve<br>而執行環境的指令在 package.json 內可以找到<br>所以這兩者是沒有關聯性，因此可以共用，而vue -v 這是全域的指令工具版本，並非區域的執行環境</p>\n<h3 id=\"資料結構說明\"><a href=\"#資料結構說明\" class=\"headerlink\" title=\"資料結構說明\"></a>資料結構說明</h3><p>這是安裝完Vue CLI3後，打開Vscode畫面<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png\"><br>再次提醒：src資料夾中內容都會被編譯！<br>最後，我們可以在終端機指令下：<br><code>npm run build</code> 將資料夾打包就可以瞜</p>\n<h3 id=\"Vue-GUI介面介紹\"><a href=\"#Vue-GUI介面介紹\" class=\"headerlink\" title=\"Vue GUI介面介紹\"></a>Vue GUI介面介紹</h3><p>首先，切換到指定資料夾下 輸入<code>vue ui</code>指令<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png\"><br>開啟畫面會長這樣，我們先create一個專案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png\"><br>接著建立專案過程就像上面安裝Vue Cli3一樣，我這邊就不多贅述<br>完成後，畫面呈現如下圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png\"></p>\n<h4 id=\"安裝Plugin\"><a href=\"#安裝Plugin\" class=\"headerlink\" title=\"安裝Plugin\"></a>安裝Plugin</h4><p>我們這邊以安裝Vue Router為例<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png\"><br>如何確認是否有成功安裝?<br>檔案中會出現<code>router</code>字樣<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png\"></p>\n<h4 id=\"修改Config\"><a href=\"#修改Config\" class=\"headerlink\" title=\"修改Config\"></a>修改Config</h4><p>我們最常調整公開路徑這塊<br>像是我們將Vue作業放置GitHub-pages下時，就需要調整路經摟～<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png\"></p>\n<p>示範：更改後的根目錄<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png\"></p>\n","site":{"data":{}},"length":1235,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://kuro.tw/posts/2018/07/04/%E5%88%9D%E6%8E%A2-Vue-CLI-3-0/\">初探 Vue-CLI v3.0</a></li>\n<li>六角線上課程筆記整理","more":"</li>\n</ul>\n<hr>\n<h3 id=\"Vue-CLI3特色\"><a href=\"#Vue-CLI3特色\" class=\"headerlink\" title=\"Vue CLI3特色\"></a>Vue CLI3特色</h3><p>1.完整GUI介面（有介面用就是爽）<br>2.可以將Ts、SASS等工具用套件方式載入Webpack主體，編譯出來<br>3.可以直接編譯<code>.vue檔案</code></p>\n<h3 id=\"安裝Vue-Cli3\"><a href=\"#安裝Vue-Cli3\" class=\"headerlink\" title=\"安裝Vue Cli3\"></a>安裝Vue Cli3</h3><p>參考資料：<a href=\"https://cli.vuejs.org/guide/installation.html\">Vue Cli3官網</a><br>Step1.<code>sudo npm install -g @vue/cli --unsafe-perm</code><br>補充說明：</p>\n<ul>\n<li>Mac 安裝全域工具時 (-g)，建議額外加上 sudo 在前方</li>\n<li>改用上面與法主要原因，創建專案時：<code>vue create hello-world</code>會發生錯誤<br><a href=\"https://github.com/vuejs/vue-cli/issues/3402\">參考資料：error during install of vue-cli</a></li>\n<li>安裝Vue CLI 需要 Node.js 8.9以上版本</li>\n</ul>\n<p>Step1.2：<br>我們可以透過<code>vue —V</code><br>確認版本是否安裝成功。目前安裝的是<code>Vue ClI v3.11.0</code></p>\n<p>Step2.創建專案目錄<br><code>vue create hello-world</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645ufOvFwtjdn.png\"><br>接著會跳出<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645MUeWuPgzgJ.png\"><br>再下來會跳出<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645NKFXPYNpaP.png\"><br>再來會請你選擇Scss版本：<br>請選擇<code>node-sass</code><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645fa2tuJAXhU.png\"><br>終於到最後一頁（內容說明：<a href=\"https://www.jianshu.com/p/fbcad30031c2\">參考資料</a>）<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mcZOnUDl7I.png\"></p>\n<p>Step3.畫面顯示<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645E4LY9KshaL.png\"><br>最後測試網頁是否正常：<br>輸入<code>http://localhost:8080/</code>。畫面呈現如下<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645mE1JKFwT0o.png\"></p>\n<h3 id=\"補充：共用Vue-Cli2\"><a href=\"#補充：共用Vue-Cli2\" class=\"headerlink\" title=\"補充：共用Vue Cli2\"></a>補充：共用Vue Cli2</h3><p>參考資料：<br><a href=\"https://blog.csdn.net/u012302552/article/details/81703202\">全局安裝Vue cli3 和繼續使用Vue-cli2.x</a><br><a href=\"https://github.com/vuejs/vue-cli/tree/v2#vue-cli--\">Vue Cli2參考資料</a><br>依照上面步驟，我們已經將Vue CLI3安裝完成，這時候我們如果想要使用過去CLI樣板功能，我們可以使用下面指令：<br>1.<code>sudo install -g @vue/cli-init</code><br>2.接著，創建專案<code>vue init webpack my_project</code><br>例如：<code>vue init webpack vue-cli2-demo</code></p>\n<h4 id=\"問題整理\"><a href=\"#問題整理\" class=\"headerlink\" title=\"問題整理\"></a>問題整理</h4><p>Ｑ：安裝完後，我有個疑問點，就是之後使用指令時候，是否要使用VueCLI3 指令？如：<code>npm run serve</code>還是Vue Cl2版本指令<code>npm run dev</code>？<br>備註：我從終端機看Vue-V 顯示的還是3.11.0版本<br>Ａ：我們要先知道 Vue 2, 3 分為<code>全域</code> 與 <code>區域</code><br>全域的是<strong>指令工具</strong>，像是 vue init, vue ui …<br>區域的是<strong>執行環境</strong>，ex：dev, serve<br>而執行環境的指令在 package.json 內可以找到<br>所以這兩者是沒有關聯性，因此可以共用，而vue -v 這是全域的指令工具版本，並非區域的執行環境</p>\n<h3 id=\"資料結構說明\"><a href=\"#資料結構說明\" class=\"headerlink\" title=\"資料結構說明\"></a>資料結構說明</h3><p>這是安裝完Vue CLI3後，打開Vscode畫面<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645boKyLFPREA.png\"><br>再次提醒：src資料夾中內容都會被編譯！<br>最後，我們可以在終端機指令下：<br><code>npm run build</code> 將資料夾打包就可以瞜</p>\n<h3 id=\"Vue-GUI介面介紹\"><a href=\"#Vue-GUI介面介紹\" class=\"headerlink\" title=\"Vue GUI介面介紹\"></a>Vue GUI介面介紹</h3><p>首先，切換到指定資料夾下 輸入<code>vue ui</code>指令<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645xiOn8z2lfl.png\"><br>開啟畫面會長這樣，我們先create一個專案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645SOomLdj8lw.png\"><br>接著建立專案過程就像上面安裝Vue Cli3一樣，我這邊就不多贅述<br>完成後，畫面呈現如下圖<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645kJRU9aMlP9.png\"></p>\n<h4 id=\"安裝Plugin\"><a href=\"#安裝Plugin\" class=\"headerlink\" title=\"安裝Plugin\"></a>安裝Plugin</h4><p>我們這邊以安裝Vue Router為例<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/20114645DVlBRdg8wd.png\"><br>如何確認是否有成功安裝?<br>檔案中會出現<code>router</code>字樣<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146454qT9cMSTYL.png\"></p>\n<h4 id=\"修改Config\"><a href=\"#修改Config\" class=\"headerlink\" title=\"修改Config\"></a>修改Config</h4><p>我們最常調整公開路徑這塊<br>像是我們將Vue作業放置GitHub-pages下時，就需要調整路經摟～<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/201146455WZ4njbAPM.png\"></p>\n<p>示範：更改後的根目錄<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191010/2011464547O1drHW7G.png\"></p>"},{"title":"Vue-router簡介","abbrlink":3605758617,"date":"2019-10-13T12:57:55.000Z","_content":"\n參考資料：\n- 六角學院Vue.js課程資料\n- [vue-router的兩種模式的區別](https://juejin.im/post/5a61908c6fb9a01c9064f20a)\n- [官方文件](https://router.vuejs.org/zh/installation.html)\n<!-- more -->\n-----\n\n## Vue Router簡介\nVue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png)\n## 安裝方式\n一、方法一\n1.`npm install vue-router` \n不用寫成這樣`npm install vue-router --save` \n因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency \n [連結說明](https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install)\n\n2.接著在終端機中輸入 `npm run serve `\n補充：使用`npm run dev`，會出錯因為`package.json`沒有這行指令\n[vue开发----npm run dev 报错：missing script:dev](https://blog.csdn.net/qq_32107121/article/details/84378217)\n原因：\n`npm run dev`是Vue CLI2指令\n`npm run serve`則是Vue CLI3指令 \n> 兩者不可以混用喔！\n\n3.接著要在router.js啟用`Vue.use(VueRouter)`\n\n二、方法二\n創建新的檔案時( vue create project)，就直接勾選`Vue router`，Vue就會幫我們直接新增`router.js`\n\n以上兩種方式，都可以安裝Vue Router\n\n\n-----\n\n\n\n## 路由配置介紹\n### 組件名詞介紹\n`<router-view></router-view>`         呈現路由配置元件\n`<router-link></router-link>`         路由路徑\n`main.js`           進路點\nVue Components（如：app.vue檔）      分頁內容 \n\n## 路由配置教學\n配置路由會在`router.js`、`main.js`、`app.vue`這三個檔案設定\n* router.js\n主要負責處理路由檔案配置管理。\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png)\n補充：\n1.@是絕對路徑，`src` 目錄的縮寫\n2.export default 是 ES6 的模組匯出概念\n* main.js\nWebpack進入點\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png)\n* app.vue\n在這被拿來當作`首頁使用`，若有其他預設首頁可以自行更換\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png)\n\n### 補充：首頁路徑問題\n1.我們可以把`‘/‘`路徑視為預設載入首頁\n2.假設今天，我們沒有`‘/‘`也沒有`redirect指令`如下，這時候載入畫面就會是空白的喔！這原理就如同建立網頁沒有設 index.html（首頁） 即使輸入網址，網頁也是顯示錯誤\n```javascript\nexport default new Router({\n  routes: [\n    {\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      path: '/admin',\n      name: 'Dashboard',\n      component: Dashboard,\n      children: [\n        {\n          path: 'products',\n          name: 'Products',\n          component: Products,\n          meta: { requiresAuth: true },\n        }\n      ]\n    }\n  ]\n})\n```\n#### 小結論：\n預設首頁要使用`‘/‘`或`redirect指令`，不然網頁會空白\n\n### 巢狀路由\n寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。\n* Page.vue檔案：\n說明：我們會在要配置路由主頁，新增路由配置\n![https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png](https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png)\n* Router.js檔案：\n說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增`children:[ { } ]而已`\n```javascript\n{\n     path:'/page',//對應的虛擬路徑\n     name:'分頁',//元件呈現的名稱\n     component:Page,//對應元件\n     children:[\n{\n     path:'',//如果沒有填入入境，元件child1預設會是主頁\n     name:'child1',\n     component:child\n},\n{\n     path:'child2',\n     name:'child2',\n     component:child2\n]\n},\n```\n### 動態路由\n#### 前置作業：\n1.安裝 Vue-axios [NPM安裝連結](https://www.npmjs.com/package/vue-axios)\n2.安裝 random Api   [連結](https://randomuser.me/documentation)\n#### 使用目的：\n切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 [參考文章](https://www.itread01.com/content/1537269627.html)\n參考文件：[路由對象屬性介紹](https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1)\n寫法拆解如下：\n* Router.js檔案\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png)\n* 分頁：child3.vue\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png)\n* Main.js\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png)\n\n### 同一個頁面載入不同元件\n補充：router-view\n「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」\n白話文：父組件中會包含 router-view` 作為子組件的渲染出口!`\n* index.js\n![https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png](https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png)\n說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將\n上層`”name”`隱藏\n* App.vue\n這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png)\n* Menu.vue 和 page.vue\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png)\n\n#### 問題詢問\n我把檔案做了以下調整\n1.上方App.vue檔中，我移除`<router-view name=“menu”></router-view>`\n2.在上方page.vue中新增 `<router-view name=“menu”></router-view>`\n結果畫面只出現child1分頁內容，為何？\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png)\nA：因為如果我把`<router-view name=“menu”></router-view>`放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。\n如果更改為下面範例：\n```javascript\n{\n  path: '',\n  name: 'child 1',\n  components:{\n    default: child,\n    menu: Menu,\n  },\n},\n```\n畫面就可以成功出現摟\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png)\n\n##### 小結論\nrouter-view\n白話文：父組件中會包含 router-view`作為子組件的渲染出口!`\n參考文章：[跟著 Vue 闖盪前端世界](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png)\n\n\n-----\n\n\n\n### 常用Vue Router 參數設定\n#### Router建構選項\n[參考文件](https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9)\n* mode\n可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）\n* linkActiveClass\n可以將標籤className替換\n```javascript\nexport default new VueRouter({\n    mode:'history',  \n// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。\n// 而是後端切換路由，因此後端路徑也必須重新配置\n    linkActiveClass:'active',  //標籤className替換\n    routes: [\n        {\n            path: '/index',    //對應的虛擬路徑\n            name: 'home',     //元件呈現的名稱\n            component: Home,  //對應元件\n        },\n    ]\n});\n```\n#### 切換路徑方法\n[文件參考](https://router.vuejs.org/zh/guide/essentials/navigation.html)\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png)\n補充說明：\n* 為何官網上寫`router.push(‘/page/child2’)`，而我們這邊卻使用\n`this.$router.push(‘/page/child2’)`呢？\nＡ：原因在於我們在main.js中，有先執行了 vue.use(....)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源\n* 比較：\n`router.push()`  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。 \n`router.replace()`   不會向history添加新記錄","source":"_posts/2019-10-12-Vue-router簡介.md","raw":"---\ntitle: Vue-router簡介\ntags:\n  - vue\n  - ironman\ncategories:\n  - vue\nabbrlink: 3605758617\ndate: 2019-10-13 20:57:55\n---\n\n參考資料：\n- 六角學院Vue.js課程資料\n- [vue-router的兩種模式的區別](https://juejin.im/post/5a61908c6fb9a01c9064f20a)\n- [官方文件](https://router.vuejs.org/zh/installation.html)\n<!-- more -->\n-----\n\n## Vue Router簡介\nVue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png)\n## 安裝方式\n一、方法一\n1.`npm install vue-router` \n不用寫成這樣`npm install vue-router --save` \n因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency \n [連結說明](https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install)\n\n2.接著在終端機中輸入 `npm run serve `\n補充：使用`npm run dev`，會出錯因為`package.json`沒有這行指令\n[vue开发----npm run dev 报错：missing script:dev](https://blog.csdn.net/qq_32107121/article/details/84378217)\n原因：\n`npm run dev`是Vue CLI2指令\n`npm run serve`則是Vue CLI3指令 \n> 兩者不可以混用喔！\n\n3.接著要在router.js啟用`Vue.use(VueRouter)`\n\n二、方法二\n創建新的檔案時( vue create project)，就直接勾選`Vue router`，Vue就會幫我們直接新增`router.js`\n\n以上兩種方式，都可以安裝Vue Router\n\n\n-----\n\n\n\n## 路由配置介紹\n### 組件名詞介紹\n`<router-view></router-view>`         呈現路由配置元件\n`<router-link></router-link>`         路由路徑\n`main.js`           進路點\nVue Components（如：app.vue檔）      分頁內容 \n\n## 路由配置教學\n配置路由會在`router.js`、`main.js`、`app.vue`這三個檔案設定\n* router.js\n主要負責處理路由檔案配置管理。\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png)\n補充：\n1.@是絕對路徑，`src` 目錄的縮寫\n2.export default 是 ES6 的模組匯出概念\n* main.js\nWebpack進入點\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png)\n* app.vue\n在這被拿來當作`首頁使用`，若有其他預設首頁可以自行更換\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png)\n\n### 補充：首頁路徑問題\n1.我們可以把`‘/‘`路徑視為預設載入首頁\n2.假設今天，我們沒有`‘/‘`也沒有`redirect指令`如下，這時候載入畫面就會是空白的喔！這原理就如同建立網頁沒有設 index.html（首頁） 即使輸入網址，網頁也是顯示錯誤\n```javascript\nexport default new Router({\n  routes: [\n    {\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      path: '/admin',\n      name: 'Dashboard',\n      component: Dashboard,\n      children: [\n        {\n          path: 'products',\n          name: 'Products',\n          component: Products,\n          meta: { requiresAuth: true },\n        }\n      ]\n    }\n  ]\n})\n```\n#### 小結論：\n預設首頁要使用`‘/‘`或`redirect指令`，不然網頁會空白\n\n### 巢狀路由\n寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。\n* Page.vue檔案：\n說明：我們會在要配置路由主頁，新增路由配置\n![https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png](https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png)\n* Router.js檔案：\n說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增`children:[ { } ]而已`\n```javascript\n{\n     path:'/page',//對應的虛擬路徑\n     name:'分頁',//元件呈現的名稱\n     component:Page,//對應元件\n     children:[\n{\n     path:'',//如果沒有填入入境，元件child1預設會是主頁\n     name:'child1',\n     component:child\n},\n{\n     path:'child2',\n     name:'child2',\n     component:child2\n]\n},\n```\n### 動態路由\n#### 前置作業：\n1.安裝 Vue-axios [NPM安裝連結](https://www.npmjs.com/package/vue-axios)\n2.安裝 random Api   [連結](https://randomuser.me/documentation)\n#### 使用目的：\n切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 [參考文章](https://www.itread01.com/content/1537269627.html)\n參考文件：[路由對象屬性介紹](https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1)\n寫法拆解如下：\n* Router.js檔案\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png)\n* 分頁：child3.vue\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png)\n* Main.js\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png)\n\n### 同一個頁面載入不同元件\n補充：router-view\n「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」\n白話文：父組件中會包含 router-view` 作為子組件的渲染出口!`\n* index.js\n![https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png](https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png)\n說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將\n上層`”name”`隱藏\n* App.vue\n這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png)\n* Menu.vue 和 page.vue\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png)\n\n#### 問題詢問\n我把檔案做了以下調整\n1.上方App.vue檔中，我移除`<router-view name=“menu”></router-view>`\n2.在上方page.vue中新增 `<router-view name=“menu”></router-view>`\n結果畫面只出現child1分頁內容，為何？\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png)\nA：因為如果我把`<router-view name=“menu”></router-view>`放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。\n如果更改為下面範例：\n```javascript\n{\n  path: '',\n  name: 'child 1',\n  components:{\n    default: child,\n    menu: Menu,\n  },\n},\n```\n畫面就可以成功出現摟\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png)\n\n##### 小結論\nrouter-view\n白話文：父組件中會包含 router-view`作為子組件的渲染出口!`\n參考文章：[跟著 Vue 闖盪前端世界](https://dotblogs.com.tw/wasichris/2017/03/06/235449)\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png)\n\n\n-----\n\n\n\n### 常用Vue Router 參數設定\n#### Router建構選項\n[參考文件](https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9)\n* mode\n可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）\n* linkActiveClass\n可以將標籤className替換\n```javascript\nexport default new VueRouter({\n    mode:'history',  \n// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。\n// 而是後端切換路由，因此後端路徑也必須重新配置\n    linkActiveClass:'active',  //標籤className替換\n    routes: [\n        {\n            path: '/index',    //對應的虛擬路徑\n            name: 'home',     //元件呈現的名稱\n            component: Home,  //對應元件\n        },\n    ]\n});\n```\n#### 切換路徑方法\n[文件參考](https://router.vuejs.org/zh/guide/essentials/navigation.html)\n![https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png](https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png)\n補充說明：\n* 為何官網上寫`router.push(‘/page/child2’)`，而我們這邊卻使用\n`this.$router.push(‘/page/child2’)`呢？\nＡ：原因在於我們在main.js中，有先執行了 vue.use(....)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源\n* 比較：\n`router.push()`  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。 \n`router.replace()`   不會向history添加新記錄","slug":"2019-10-12-Vue-router簡介","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3c003jzqzi62vlhlp0","content":"<p>參考資料：</p>\n<ul>\n<li>六角學院Vue.js課程資料</li>\n<li><a href=\"https://juejin.im/post/5a61908c6fb9a01c9064f20a\">vue-router的兩種模式的區別</a></li>\n<li><a href=\"https://router.vuejs.org/zh/installation.html\">官方文件</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h2 id=\"Vue-Router簡介\"><a href=\"#Vue-Router簡介\" class=\"headerlink\" title=\"Vue Router簡介\"></a>Vue Router簡介</h2><p>Vue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png\"></p>\n<h2 id=\"安裝方式\"><a href=\"#安裝方式\" class=\"headerlink\" title=\"安裝方式\"></a>安裝方式</h2><p>一、方法一<br>1.<code>npm install vue-router</code><br>不用寫成這樣<code>npm install vue-router --save</code><br>因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency<br> <a href=\"https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install\">連結說明</a></p>\n<p>2.接著在終端機中輸入 <code>npm run serve</code><br>補充：使用<code>npm run dev</code>，會出錯因為<code>package.json</code>沒有這行指令<br><a href=\"https://blog.csdn.net/qq_32107121/article/details/84378217\">vue开发—-npm run dev 报错：missing script:dev</a><br>原因：<br><code>npm run dev</code>是Vue CLI2指令<br><code>npm run serve</code>則是Vue CLI3指令 </p>\n<blockquote>\n<p>兩者不可以混用喔！</p>\n</blockquote>\n<p>3.接著要在router.js啟用<code>Vue.use(VueRouter)</code></p>\n<p>二、方法二<br>創建新的檔案時( vue create project)，就直接勾選<code>Vue router</code>，Vue就會幫我們直接新增<code>router.js</code></p>\n<p>以上兩種方式，都可以安裝Vue Router</p>\n<hr>\n<h2 id=\"路由配置介紹\"><a href=\"#路由配置介紹\" class=\"headerlink\" title=\"路由配置介紹\"></a>路由配置介紹</h2><h3 id=\"組件名詞介紹\"><a href=\"#組件名詞介紹\" class=\"headerlink\" title=\"組件名詞介紹\"></a>組件名詞介紹</h3><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code>         呈現路由配置元件<br><code>&lt;router-link&gt;&lt;/router-link&gt;</code>         路由路徑<br><code>main.js</code>           進路點<br>Vue Components（如：app.vue檔）      分頁內容 </p>\n<h2 id=\"路由配置教學\"><a href=\"#路由配置教學\" class=\"headerlink\" title=\"路由配置教學\"></a>路由配置教學</h2><p>配置路由會在<code>router.js</code>、<code>main.js</code>、<code>app.vue</code>這三個檔案設定</p>\n<ul>\n<li>router.js<br>主要負責處理路由檔案配置管理。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png\"><br>補充：</li>\n</ul>\n<p>1.@是絕對路徑，<code>src</code> 目錄的縮寫<br>2.export default 是 ES6 的模組匯出概念</p>\n<ul>\n<li>main.js<br>Webpack進入點<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png\"></li>\n<li>app.vue<br>在這被拿來當作<code>首頁使用</code>，若有其他預設首頁可以自行更換<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png\"></li>\n</ul>\n<h3 id=\"補充：首頁路徑問題\"><a href=\"#補充：首頁路徑問題\" class=\"headerlink\" title=\"補充：首頁路徑問題\"></a>補充：首頁路徑問題</h3><p>1.我們可以把<code>‘/‘</code>路徑視為預設載入首頁<br>2.假設今天，我們沒有<code>‘/‘</code>也沒有<code>redirect指令</code>如下，這時候載入畫面就會是空白的喔！這原理就如同建立網頁沒有設 index.html（首頁） 即使輸入網址，網頁也是顯示錯誤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/login&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;Login&#x27;</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/admin&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;Dashboard&#x27;</span>,</span><br><span class=\"line\">      component: Dashboard,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;products&#x27;</span>,</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;Products&#x27;</span>,</span><br><span class=\"line\">          component: Products,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><p>預設首頁要使用<code>‘/‘</code>或<code>redirect指令</code>，不然網頁會空白</p>\n<h3 id=\"巢狀路由\"><a href=\"#巢狀路由\" class=\"headerlink\" title=\"巢狀路由\"></a>巢狀路由</h3><p>寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。</p>\n<ul>\n<li>Page.vue檔案：<br>說明：我們會在要配置路由主頁，新增路由配置<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png\"></li>\n<li>Router.js檔案：<br>說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增<code>children:[ &#123; &#125; ]而已</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;/page&#x27;</span>,<span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;分頁&#x27;</span>,<span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">     component:Page,<span class=\"comment\">//對應元件</span></span><br><span class=\"line\">     children:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//如果沒有填入入境，元件child1預設會是主頁</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child1&#x27;</span>,</span><br><span class=\"line\">     component:child</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     component:child2</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"動態路由\"><a href=\"#動態路由\" class=\"headerlink\" title=\"動態路由\"></a>動態路由</h3><h4 id=\"前置作業：\"><a href=\"#前置作業：\" class=\"headerlink\" title=\"前置作業：\"></a>前置作業：</h4></li>\n</ul>\n<p>1.安裝 Vue-axios <a href=\"https://www.npmjs.com/package/vue-axios\">NPM安裝連結</a><br>2.安裝 random Api   <a href=\"https://randomuser.me/documentation\">連結</a></p>\n<h4 id=\"使用目的：\"><a href=\"#使用目的：\" class=\"headerlink\" title=\"使用目的：\"></a>使用目的：</h4><p>切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 <a href=\"https://www.itread01.com/content/1537269627.html\">參考文章</a><br>參考文件：<a href=\"https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1\">路由對象屬性介紹</a><br>寫法拆解如下：</p>\n<ul>\n<li>Router.js檔案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png\"></li>\n<li>分頁：child3.vue<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png\"></li>\n<li>Main.js<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png\"></li>\n</ul>\n<h3 id=\"同一個頁面載入不同元件\"><a href=\"#同一個頁面載入不同元件\" class=\"headerlink\" title=\"同一個頁面載入不同元件\"></a>同一個頁面載入不同元件</h3><p>補充：router-view<br>「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code></p>\n<ul>\n<li>index.js<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png\"><br>說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將<br>上層<code>”name”</code>隱藏</li>\n<li>App.vue<br>這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png\"></li>\n<li>Menu.vue 和 page.vue<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png\"></li>\n</ul>\n<h4 id=\"問題詢問\"><a href=\"#問題詢問\" class=\"headerlink\" title=\"問題詢問\"></a>問題詢問</h4><p>我把檔案做了以下調整<br>1.上方App.vue檔中，我移除<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>2.在上方page.vue中新增 <code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>結果畫面只出現child1分頁內容，為何？<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png\"><br>A：因為如果我把<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code>放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。<br>如果更改為下面範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;child 1&#x27;</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: child,</span><br><span class=\"line\">    menu: Menu,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>畫面就可以成功出現摟<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png\"></p>\n<h5 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h5><p>router-view<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code><br>參考文章：<a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">跟著 Vue 闖盪前端世界</a><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png\"></p>\n<hr>\n<h3 id=\"常用Vue-Router-參數設定\"><a href=\"#常用Vue-Router-參數設定\" class=\"headerlink\" title=\"常用Vue Router 參數設定\"></a>常用Vue Router 參數設定</h3><h4 id=\"Router建構選項\"><a href=\"#Router建構選項\" class=\"headerlink\" title=\"Router建構選項\"></a>Router建構選項</h4><p><a href=\"https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9\">參考文件</a></p>\n<ul>\n<li>mode<br>可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）</li>\n<li>linkActiveClass<br>可以將標籤className替換<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    mode:<span class=\"string\">&#x27;history&#x27;</span>,  </span><br><span class=\"line\"><span class=\"comment\">// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。</span></span><br><span class=\"line\"><span class=\"comment\">// 而是後端切換路由，因此後端路徑也必須重新配置</span></span><br><span class=\"line\">    linkActiveClass:<span class=\"string\">&#x27;active&#x27;</span>,  <span class=\"comment\">//標籤className替換</span></span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">&#x27;/index&#x27;</span>,    <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">            name: <span class=\"string\">&#x27;home&#x27;</span>,     <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">            component: Home,  <span class=\"comment\">//對應元件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"切換路徑方法\"><a href=\"#切換路徑方法\" class=\"headerlink\" title=\"切換路徑方法\"></a>切換路徑方法</h4><a href=\"https://router.vuejs.org/zh/guide/essentials/navigation.html\">文件參考</a><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png\"><br>補充說明：</li>\n<li>為何官網上寫<code>router.push(‘/page/child2’)</code>，而我們這邊卻使用<br><code>this.$router.push(‘/page/child2’)</code>呢？<br>Ａ：原因在於我們在main.js中，有先執行了 vue.use(….)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源</li>\n<li>比較：<br><code>router.push()</code>  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。<br><code>router.replace()</code>   不會向history添加新記錄</li>\n</ul>\n","site":{"data":{}},"length":3345,"excerpt":"<p>參考資料：</p>\n<ul>\n<li>六角學院Vue.js課程資料</li>\n<li><a href=\"https://juejin.im/post/5a61908c6fb9a01c9064f20a\">vue-router的兩種模式的區別</a></li>\n<li><a href=\"https://router.vuejs.org/zh/installation.html\">官方文件</a>","more":"</li>\n</ul>\n<hr>\n<h2 id=\"Vue-Router簡介\"><a href=\"#Vue-Router簡介\" class=\"headerlink\" title=\"Vue Router簡介\"></a>Vue Router簡介</h2><p>Vue Router就是由前端模擬的路由，跟過去不同的是，換頁通常會由後端處理。而Vue Router存在就是為了實現SPA（單頁式應用），當我們切換畫面時候就不需要向後端發出請求。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645YbmE2Kc44N.png\"></p>\n<h2 id=\"安裝方式\"><a href=\"#安裝方式\" class=\"headerlink\" title=\"安裝方式\"></a>安裝方式</h2><p>一、方法一<br>1.<code>npm install vue-router</code><br>不用寫成這樣<code>npm install vue-router --save</code><br>因為，Npm5.0.0版本後，安裝的套件會預設自動加入dependency<br> <a href=\"https://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install\">連結說明</a></p>\n<p>2.接著在終端機中輸入 <code>npm run serve</code><br>補充：使用<code>npm run dev</code>，會出錯因為<code>package.json</code>沒有這行指令<br><a href=\"https://blog.csdn.net/qq_32107121/article/details/84378217\">vue开发—-npm run dev 报错：missing script:dev</a><br>原因：<br><code>npm run dev</code>是Vue CLI2指令<br><code>npm run serve</code>則是Vue CLI3指令 </p>\n<blockquote>\n<p>兩者不可以混用喔！</p>\n</blockquote>\n<p>3.接著要在router.js啟用<code>Vue.use(VueRouter)</code></p>\n<p>二、方法二<br>創建新的檔案時( vue create project)，就直接勾選<code>Vue router</code>，Vue就會幫我們直接新增<code>router.js</code></p>\n<p>以上兩種方式，都可以安裝Vue Router</p>\n<hr>\n<h2 id=\"路由配置介紹\"><a href=\"#路由配置介紹\" class=\"headerlink\" title=\"路由配置介紹\"></a>路由配置介紹</h2><h3 id=\"組件名詞介紹\"><a href=\"#組件名詞介紹\" class=\"headerlink\" title=\"組件名詞介紹\"></a>組件名詞介紹</h3><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code>         呈現路由配置元件<br><code>&lt;router-link&gt;&lt;/router-link&gt;</code>         路由路徑<br><code>main.js</code>           進路點<br>Vue Components（如：app.vue檔）      分頁內容 </p>\n<h2 id=\"路由配置教學\"><a href=\"#路由配置教學\" class=\"headerlink\" title=\"路由配置教學\"></a>路由配置教學</h2><p>配置路由會在<code>router.js</code>、<code>main.js</code>、<code>app.vue</code>這三個檔案設定</p>\n<ul>\n<li>router.js<br>主要負責處理路由檔案配置管理。<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645s9G1Y2S8jv.png\"><br>補充：</li>\n</ul>\n<p>1.@是絕對路徑，<code>src</code> 目錄的縮寫<br>2.export default 是 ES6 的模組匯出概念</p>\n<ul>\n<li>main.js<br>Webpack進入點<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XFRZWs5HCz.png\"></li>\n<li>app.vue<br>在這被拿來當作<code>首頁使用</code>，若有其他預設首頁可以自行更換<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645hbPqdR5BJj.png\"></li>\n</ul>\n<h3 id=\"補充：首頁路徑問題\"><a href=\"#補充：首頁路徑問題\" class=\"headerlink\" title=\"補充：首頁路徑問題\"></a>補充：首頁路徑問題</h3><p>1.我們可以把<code>‘/‘</code>路徑視為預設載入首頁<br>2.假設今天，我們沒有<code>‘/‘</code>也沒有<code>redirect指令</code>如下，這時候載入畫面就會是空白的喔！這原理就如同建立網頁沒有設 index.html（首頁） 即使輸入網址，網頁也是顯示錯誤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/login&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;Login&#x27;</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/admin&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;Dashboard&#x27;</span>,</span><br><span class=\"line\">      component: Dashboard,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;products&#x27;</span>,</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;Products&#x27;</span>,</span><br><span class=\"line\">          component: Products,</span><br><span class=\"line\">          meta: &#123; <span class=\"attr\">requiresAuth</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><p>預設首頁要使用<code>‘/‘</code>或<code>redirect指令</code>，不然網頁會空白</p>\n<h3 id=\"巢狀路由\"><a href=\"#巢狀路由\" class=\"headerlink\" title=\"巢狀路由\"></a>巢狀路由</h3><p>寫法其實跟一般路由配置相同，差異點僅在於巢狀路由會新增一個children配置底下分頁路由，以下就由我簡單示範一下。</p>\n<ul>\n<li>Page.vue檔案：<br>說明：我們會在要配置路由主頁，新增路由配置<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146459c5iPJmzZF.png\"></li>\n<li>Router.js檔案：<br>說明：所有路由檔案路徑配置都是在router.js檔案下，新增巢狀僅是在特定頁面下新增<code>children:[ &#123; &#125; ]而已</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;/page&#x27;</span>,<span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;分頁&#x27;</span>,<span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">     component:Page,<span class=\"comment\">//對應元件</span></span><br><span class=\"line\">     children:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//如果沒有填入入境，元件child1預設會是主頁</span></span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child1&#x27;</span>,</span><br><span class=\"line\">     component:child</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     path:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     name:<span class=\"string\">&#x27;child2&#x27;</span>,</span><br><span class=\"line\">     component:child2</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"動態路由\"><a href=\"#動態路由\" class=\"headerlink\" title=\"動態路由\"></a>動態路由</h3><h4 id=\"前置作業：\"><a href=\"#前置作業：\" class=\"headerlink\" title=\"前置作業：\"></a>前置作業：</h4></li>\n</ul>\n<p>1.安裝 Vue-axios <a href=\"https://www.npmjs.com/package/vue-axios\">NPM安裝連結</a><br>2.安裝 random Api   <a href=\"https://randomuser.me/documentation\">連結</a></p>\n<h4 id=\"使用目的：\"><a href=\"#使用目的：\" class=\"headerlink\" title=\"使用目的：\"></a>使用目的：</h4><p>切換不同id時候，置換對應內容。開發時候會由後端提供定義好的id，前端在拿來套用切換即可。應用在後端權限控制上 <a href=\"https://www.itread01.com/content/1537269627.html\">參考文章</a><br>參考文件：<a href=\"https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1\">路由對象屬性介紹</a><br>寫法拆解如下：</p>\n<ul>\n<li>Router.js檔案<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645I33Gjs3n97.png\"></li>\n<li>分頁：child3.vue<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645XK3hRP3Nwo.png\"></li>\n<li>Main.js<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645pELcjeLRBv.png\"></li>\n</ul>\n<h3 id=\"同一個頁面載入不同元件\"><a href=\"#同一個頁面載入不同元件\" class=\"headerlink\" title=\"同一個頁面載入不同元件\"></a>同一個頁面載入不同元件</h3><p>補充：router-view<br>「我們可以透過 vue-router 的設定檔來定義整體網站的路由規則，利用 router-view 來定位子路由組件渲染的出口，並可允許訂定多組具名 router-view 來一次顯示多個子組件於單一子路由中。」<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code></p>\n<ul>\n<li>index.js<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/201146450w3dCkq2mr.png\"><br>說明：補充1，因為child1如果不填寫入徑，會預設上層項目。故，我們要將<br>上層<code>”name”</code>隱藏</li>\n<li>App.vue<br>這邊可以視為首頁，換句話說就是整個 vue 包在最外層的父元件<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645PbFRWfL6VY.png\"></li>\n<li>Menu.vue 和 page.vue<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645RnaqTRzu77.png\"></li>\n</ul>\n<h4 id=\"問題詢問\"><a href=\"#問題詢問\" class=\"headerlink\" title=\"問題詢問\"></a>問題詢問</h4><p>我把檔案做了以下調整<br>1.上方App.vue檔中，我移除<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>2.在上方page.vue中新增 <code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code><br>結果畫面只出現child1分頁內容，為何？<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645OkhNWhAzQ4.png\"><br>A：因為如果我把<code>&lt;router-view name=“menu”&gt;&lt;/router-view&gt;</code>放在page.vue中，我們會把menu變成page 的子組件，因此畫面上不會出現。<br>如果更改為下面範例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  path: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;child 1&#x27;</span>,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: child,</span><br><span class=\"line\">    menu: Menu,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>畫面就可以成功出現摟<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645eAxvgxo5Bw.png\"></p>\n<h5 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h5><p>router-view<br>白話文：父組件中會包含 router-view<code>作為子組件的渲染出口!</code><br>參考文章：<a href=\"https://dotblogs.com.tw/wasichris/2017/03/06/235449\">跟著 Vue 闖盪前端世界</a><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645ccGwYDGlsl.png\"></p>\n<hr>\n<h3 id=\"常用Vue-Router-參數設定\"><a href=\"#常用Vue-Router-參數設定\" class=\"headerlink\" title=\"常用Vue Router 參數設定\"></a>常用Vue Router 參數設定</h3><h4 id=\"Router建構選項\"><a href=\"#Router建構選項\" class=\"headerlink\" title=\"Router建構選項\"></a>Router建構選項</h4><p><a href=\"https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9\">參考文件</a></p>\n<ul>\n<li>mode<br>可以將路由中#移除，但建議還是保留預設狀態即可（原因是因為移除後，就必須和後端配合路由切換）</li>\n<li>linkActiveClass<br>可以將標籤className替換<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    mode:<span class=\"string\">&#x27;history&#x27;</span>,  </span><br><span class=\"line\"><span class=\"comment\">// 可以將路由中#移除，但必須提醒若將#移除就不是前端模擬路由。</span></span><br><span class=\"line\"><span class=\"comment\">// 而是後端切換路由，因此後端路徑也必須重新配置</span></span><br><span class=\"line\">    linkActiveClass:<span class=\"string\">&#x27;active&#x27;</span>,  <span class=\"comment\">//標籤className替換</span></span><br><span class=\"line\">    routes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            path: <span class=\"string\">&#x27;/index&#x27;</span>,    <span class=\"comment\">//對應的虛擬路徑</span></span><br><span class=\"line\">            name: <span class=\"string\">&#x27;home&#x27;</span>,     <span class=\"comment\">//元件呈現的名稱</span></span><br><span class=\"line\">            component: Home,  <span class=\"comment\">//對應元件</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"切換路徑方法\"><a href=\"#切換路徑方法\" class=\"headerlink\" title=\"切換路徑方法\"></a>切換路徑方法</h4><a href=\"https://router.vuejs.org/zh/guide/essentials/navigation.html\">文件參考</a><br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191011/20114645i5HRHGJC26.png\"><br>補充說明：</li>\n<li>為何官網上寫<code>router.push(‘/page/child2’)</code>，而我們這邊卻使用<br><code>this.$router.push(‘/page/child2’)</code>呢？<br>Ａ：原因在於我們在main.js中，有先執行了 vue.use(….)，因此外部資源會被掛載到 vue 內。所以就可以使用 this 來呼叫這些資源</li>\n<li>比較：<br><code>router.push()</code>  會向history添加新記錄，當用戶點擊瀏覽器後退按鈕時，則回到之前的URL。<br><code>router.replace()</code>   不會向history添加新記錄</li>\n</ul>"},{"title":"Vuex簡介","abbrlink":2547589273,"date":"2019-10-13T13:00:45.000Z","_content":"參考資料\n- [Vuex官網教學](https://vuex.vuejs.org/zh/)\n- 五倍紅寶石實體課程\n- [[Vue.js] Vuex 學習筆記 (1) - 基礎介紹](https://ithelp.ithome.com.tw/articles/10190881?sc=iThelpR)\n<!-- more -->\n-----\n\n### 前言\n先前我們介紹到元件與元件之間的溝通方式之ㄧ：`event bus`，可以透過向bus發送事件與訂閱事件來將元件從原本的樹狀傳遞模式調整為網狀模式。[Day21 Component(元件)-event bus](https://ithelp.ithome.com.tw/articles/10225143)\n\n雖然`event bus`將我們元件之間的傳遞模式變得更方便，但同時也衍生一些問題。如：事件命名相同，會造成元件重複訂閱事件，而這些問題我們可以透過我們今天介紹的Vuex，來幫助我們解決這些問題。\n\n開始前，推薦觀看官網[Vuex影片](https://vuex.vuejs.org)介紹，能對Vuex脈絡有基礎的認識！\n\n### Vuex是什麼？\nVuex是一個專為Vue.js應用程序開發的`狀態管理模式`。它採用`集中式存儲`管理應用的所有組件的狀態，並以相應的規則保證狀態以一種可預測的方式發生變化。\n\n### 何謂狀態管理模式?\n在Vue官網提供以下範例\n```javascript\nnew Vue({\n  // state\n  data () {\n    return {\n      count: 0\n    }\n  },\n  // view\n  template: `\n    <div>{{ count }}</div>\n  `,\n  // actions\n  methods: {\n    increment () {\n      this.count++\n    }\n  }\n})\n```\n這個Vue實體主要包含三個部分\n- state: 資料來源\n- view: 以聲明式渲將state渲染到畫面上\n- actions: 使用者在畫面上輸入可以更動state的方法\n\n單向資料流示意圖如下：\n![https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png](https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png)\n\n\n-----\n\n\n上面範例是在我們過去處理單個元件時，Vue就是透過所謂`單向資料流來處理`。但是，假設我們今天遇到多個元件共享同一個狀態時（state），這時我們的元件狀態就會遇到下面兩個問題\n1.不同畫面依賴於同一`state`狀態\n2.來自不同畫面的行為需要變更同一個`state`狀態\n\n而Vuex存在的目的，就是將元件共享的state獨立出來，進行統一管理，解決上面兩個問題！\n\n### Vuex 示意圖\n![https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png](https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png)\n\n![https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png](https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png)圖片來源：五倍紅寶石\n\n### Vuex 核心屬性介紹\n- state: 存放資料的地⽅方，可視為 Vue 的 data 屬性。 \n- getters: 由 state 衍生出來的狀狀態，可視為 Vue的computed 屬性\n- mutations: ⽤來更改 state 的操作的唯一窗口，類似methods的概念，僅能處理同步操作\n- actions: ⽤來呼叫 mutations 的入⼝，處理外部非同步的事件 資料操作也在這裡完成。\n","source":"_posts/2019-10-13-Vuex簡介.md","raw":"---\ntitle: Vuex簡介\ntags:\n  - vue\n  - ironman\n  - vuex\ncategories:\n  - vue\nabbrlink: 2547589273\ndate: 2019-10-13 21:00:45\n---\n參考資料\n- [Vuex官網教學](https://vuex.vuejs.org/zh/)\n- 五倍紅寶石實體課程\n- [[Vue.js] Vuex 學習筆記 (1) - 基礎介紹](https://ithelp.ithome.com.tw/articles/10190881?sc=iThelpR)\n<!-- more -->\n-----\n\n### 前言\n先前我們介紹到元件與元件之間的溝通方式之ㄧ：`event bus`，可以透過向bus發送事件與訂閱事件來將元件從原本的樹狀傳遞模式調整為網狀模式。[Day21 Component(元件)-event bus](https://ithelp.ithome.com.tw/articles/10225143)\n\n雖然`event bus`將我們元件之間的傳遞模式變得更方便，但同時也衍生一些問題。如：事件命名相同，會造成元件重複訂閱事件，而這些問題我們可以透過我們今天介紹的Vuex，來幫助我們解決這些問題。\n\n開始前，推薦觀看官網[Vuex影片](https://vuex.vuejs.org)介紹，能對Vuex脈絡有基礎的認識！\n\n### Vuex是什麼？\nVuex是一個專為Vue.js應用程序開發的`狀態管理模式`。它採用`集中式存儲`管理應用的所有組件的狀態，並以相應的規則保證狀態以一種可預測的方式發生變化。\n\n### 何謂狀態管理模式?\n在Vue官網提供以下範例\n```javascript\nnew Vue({\n  // state\n  data () {\n    return {\n      count: 0\n    }\n  },\n  // view\n  template: `\n    <div>{{ count }}</div>\n  `,\n  // actions\n  methods: {\n    increment () {\n      this.count++\n    }\n  }\n})\n```\n這個Vue實體主要包含三個部分\n- state: 資料來源\n- view: 以聲明式渲將state渲染到畫面上\n- actions: 使用者在畫面上輸入可以更動state的方法\n\n單向資料流示意圖如下：\n![https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png](https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png)\n\n\n-----\n\n\n上面範例是在我們過去處理單個元件時，Vue就是透過所謂`單向資料流來處理`。但是，假設我們今天遇到多個元件共享同一個狀態時（state），這時我們的元件狀態就會遇到下面兩個問題\n1.不同畫面依賴於同一`state`狀態\n2.來自不同畫面的行為需要變更同一個`state`狀態\n\n而Vuex存在的目的，就是將元件共享的state獨立出來，進行統一管理，解決上面兩個問題！\n\n### Vuex 示意圖\n![https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png](https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png)\n\n![https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png](https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png)圖片來源：五倍紅寶石\n\n### Vuex 核心屬性介紹\n- state: 存放資料的地⽅方，可視為 Vue 的 data 屬性。 \n- getters: 由 state 衍生出來的狀狀態，可視為 Vue的computed 屬性\n- mutations: ⽤來更改 state 的操作的唯一窗口，類似methods的概念，僅能處理同步操作\n- actions: ⽤來呼叫 mutations 的入⼝，處理外部非同步的事件 資料操作也在這裡完成。\n","slug":"2019-10-13-Vuex簡介","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3d003nzqzi1ivc8awe","content":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://vuex.vuejs.org/zh/\">Vuex官網教學</a></li>\n<li>五倍紅寶石實體課程</li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10190881?sc=iThelpR\">[Vue.js] Vuex 學習筆記 (1) - 基礎介紹</a><span id=\"more\"></span>\n</li>\n</ul>\n<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>先前我們介紹到元件與元件之間的溝通方式之ㄧ：<code>event bus</code>，可以透過向bus發送事件與訂閱事件來將元件從原本的樹狀傳遞模式調整為網狀模式。<a href=\"https://ithelp.ithome.com.tw/articles/10225143\">Day21 Component(元件)-event bus</a></p>\n<p>雖然<code>event bus</code>將我們元件之間的傳遞模式變得更方便，但同時也衍生一些問題。如：事件命名相同，會造成元件重複訂閱事件，而這些問題我們可以透過我們今天介紹的Vuex，來幫助我們解決這些問題。</p>\n<p>開始前，推薦觀看官網<a href=\"https://vuex.vuejs.org\">Vuex影片</a>介紹，能對Vuex脈絡有基礎的認識！</p>\n<h3 id=\"Vuex是什麼？\"><a href=\"#Vuex是什麼？\" class=\"headerlink\" title=\"Vuex是什麼？\"></a>Vuex是什麼？</h3><p>Vuex是一個專為Vue.js應用程序開發的<code>狀態管理模式</code>。它採用<code>集中式存儲</code>管理應用的所有組件的狀態，並以相應的規則保證狀態以一種可預測的方式發生變化。</p>\n<h3 id=\"何謂狀態管理模式\"><a href=\"#何謂狀態管理模式\" class=\"headerlink\" title=\"何謂狀態管理模式?\"></a>何謂狀態管理模式?</h3><p>在Vue官網提供以下範例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state</span></span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// view</span></span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"comment\">// actions</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    increment () &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>這個Vue實體主要包含三個部分</p>\n<ul>\n<li>state: 資料來源</li>\n<li>view: 以聲明式渲將state渲染到畫面上</li>\n<li>actions: 使用者在畫面上輸入可以更動state的方法</li>\n</ul>\n<p>單向資料流示意圖如下：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png\"></p>\n<hr>\n<p>上面範例是在我們過去處理單個元件時，Vue就是透過所謂<code>單向資料流來處理</code>。但是，假設我們今天遇到多個元件共享同一個狀態時（state），這時我們的元件狀態就會遇到下面兩個問題<br>1.不同畫面依賴於同一<code>state</code>狀態<br>2.來自不同畫面的行為需要變更同一個<code>state</code>狀態</p>\n<p>而Vuex存在的目的，就是將元件共享的state獨立出來，進行統一管理，解決上面兩個問題！</p>\n<h3 id=\"Vuex-示意圖\"><a href=\"#Vuex-示意圖\" class=\"headerlink\" title=\"Vuex 示意圖\"></a>Vuex 示意圖</h3><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png\">圖片來源：五倍紅寶石</p>\n<h3 id=\"Vuex-核心屬性介紹\"><a href=\"#Vuex-核心屬性介紹\" class=\"headerlink\" title=\"Vuex 核心屬性介紹\"></a>Vuex 核心屬性介紹</h3><ul>\n<li>state: 存放資料的地⽅方，可視為 Vue 的 data 屬性。 </li>\n<li>getters: 由 state 衍生出來的狀狀態，可視為 Vue的computed 屬性</li>\n<li>mutations: ⽤來更改 state 的操作的唯一窗口，類似methods的概念，僅能處理同步操作</li>\n<li>actions: ⽤來呼叫 mutations 的入⼝，處理外部非同步的事件 資料操作也在這裡完成。</li>\n</ul>\n","site":{"data":{}},"length":1061,"excerpt":"<p>參考資料</p>\n<ul>\n<li><a href=\"https://vuex.vuejs.org/zh/\">Vuex官網教學</a></li>\n<li>五倍紅寶石實體課程</li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10190881?sc=iThelpR\">[Vue.js] Vuex 學習筆記 (1) - 基礎介紹</a>","more":"</li>\n</ul>\n<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>先前我們介紹到元件與元件之間的溝通方式之ㄧ：<code>event bus</code>，可以透過向bus發送事件與訂閱事件來將元件從原本的樹狀傳遞模式調整為網狀模式。<a href=\"https://ithelp.ithome.com.tw/articles/10225143\">Day21 Component(元件)-event bus</a></p>\n<p>雖然<code>event bus</code>將我們元件之間的傳遞模式變得更方便，但同時也衍生一些問題。如：事件命名相同，會造成元件重複訂閱事件，而這些問題我們可以透過我們今天介紹的Vuex，來幫助我們解決這些問題。</p>\n<p>開始前，推薦觀看官網<a href=\"https://vuex.vuejs.org\">Vuex影片</a>介紹，能對Vuex脈絡有基礎的認識！</p>\n<h3 id=\"Vuex是什麼？\"><a href=\"#Vuex是什麼？\" class=\"headerlink\" title=\"Vuex是什麼？\"></a>Vuex是什麼？</h3><p>Vuex是一個專為Vue.js應用程序開發的<code>狀態管理模式</code>。它採用<code>集中式存儲</code>管理應用的所有組件的狀態，並以相應的規則保證狀態以一種可預測的方式發生變化。</p>\n<h3 id=\"何謂狀態管理模式\"><a href=\"#何謂狀態管理模式\" class=\"headerlink\" title=\"何謂狀態管理模式?\"></a>何謂狀態管理模式?</h3><p>在Vue官網提供以下範例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// state</span></span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// view</span></span><br><span class=\"line\">  template: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"comment\">// actions</span></span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    increment () &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>這個Vue實體主要包含三個部分</p>\n<ul>\n<li>state: 資料來源</li>\n<li>view: 以聲明式渲將state渲染到畫面上</li>\n<li>actions: 使用者在畫面上輸入可以更動state的方法</li>\n</ul>\n<p>單向資料流示意圖如下：<br><img src=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645LiKePR0mrS.png\"></p>\n<hr>\n<p>上面範例是在我們過去處理單個元件時，Vue就是透過所謂<code>單向資料流來處理</code>。但是，假設我們今天遇到多個元件共享同一個狀態時（state），這時我們的元件狀態就會遇到下面兩個問題<br>1.不同畫面依賴於同一<code>state</code>狀態<br>2.來自不同畫面的行為需要變更同一個<code>state</code>狀態</p>\n<p>而Vuex存在的目的，就是將元件共享的state獨立出來，進行統一管理，解決上面兩個問題！</p>\n<h3 id=\"Vuex-示意圖\"><a href=\"#Vuex-示意圖\" class=\"headerlink\" title=\"Vuex 示意圖\"></a>Vuex 示意圖</h3><p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645ejHraJzGec.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20191013/20114645yVo7Cz2aeW.png\">圖片來源：五倍紅寶石</p>\n<h3 id=\"Vuex-核心屬性介紹\"><a href=\"#Vuex-核心屬性介紹\" class=\"headerlink\" title=\"Vuex 核心屬性介紹\"></a>Vuex 核心屬性介紹</h3><ul>\n<li>state: 存放資料的地⽅方，可視為 Vue 的 data 屬性。 </li>\n<li>getters: 由 state 衍生出來的狀狀態，可視為 Vue的computed 屬性</li>\n<li>mutations: ⽤來更改 state 的操作的唯一窗口，類似methods的概念，僅能處理同步操作</li>\n<li>actions: ⽤來呼叫 mutations 的入⼝，處理外部非同步的事件 資料操作也在這裡完成。</li>\n</ul>"},{"title":"Javascript ES6解構賦值介紹","abbrlink":87138112,"date":"2019-10-26T18:41:22.000Z","_content":"前言：\n解構賦值 ( Destructuring Assignment)是一個在 ES6 的新特性，目的用於**提取陣列或物件中的資料**變成獨立變數。\n<!-- more -->\n----\n\n引用 [從ES6開始的JavaScript學習生活](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html) 中的英文說明如下：\n> The Destructuring Assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects using a syntax that `mirrors the construction of array and object literals`\n\n這句後面的 mirrors the construction of array and object literals，代表這個語法的使用方式 - 如同**鏡子**一般，對映出陣列或物件字面的結構。也就是一種樣式(pattern)對映的語法。\n> 引用卡斯伯老師說的白話文：\n  `會將右方的資料往左邊送，然後會一個位置對一個值 (但沒有像鏡子左右顛倒)。`\n\n![images](https://i.imgur.com/qHwxmoy.png)圖片來源：[六角學院卡斯伯老師-鐵人賽：ES6 解構賦值](https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/)\n\n### 陣列解構賦值方法（Array Destructuring）\n過去陣列內的元素在賦值的時候，只能透過直接給值的方式，像是下面這樣：\n```javascript\nlet list = [a, b];\nlet a = list[0];\nlet b = list[1];\nconsole.log(a, b) //a,b\n```\n而在 ES6 世界中，我們可以這樣用，而這就是最基本陣列解構賦值方法\n備註：解構賦值會將右方的資料往左邊送，然後會一個位置對一個值\n```javascript\n第一種\nlet [a, b, c] = [1, 2, 3]\nconsole.log(a, b, c) //1,2,3\n變數 a = 1, b = 2, c = 3\n\n第二種寫法\nlet number = [1, 2, 3];\nlet [andy, chunwen , jay] = number;\nconsole.log(andy, chunwen, jay) //[1, 2, 3]\n```\n接著，我們開始來看不同案例摟～\n```javascript\n情況一：當輸入變數多於所給的值\nlet [a , b, c, d] = [1, 2, 3]\nconsole.log(a, b, c, d) // 1,2,3, undefined\n\n情況二：當輸入變數少於所給的值\nlet [a, , c, d] = [1, 2, 3, 4]\nconsole.log(a, c, d) //1,3,4\n\n情況三：陣列解構中賦予預設值\nlet [a, b, c = 4, d = 'Hi'] = [1, 2, 3];\nconsole.log(a, b, c, d); // 1, 2, 3, \"Hi\"\n說明：因為 c 後面已經有給值，所以輸出結果一樣為３。而 d 在後面沒有給值，就直接帶入了預設值，得到 \"Hi\"。\n\n情況四：字串拆解\nlet str = '我好帥氣喔';\nlet [a, b, c, d] = str;\nconsole.log(a, b, c, d); //我 好 帥 氣 \n\n情況五：交換以下兩個變數\nlet Kaohsiung = '高雄';\nlet Taipei = '台北';\n[Kaohsiung, Taipei]=[Taipei, Kaohsiung];\nconsole.log(Kaohsiung, Taipei) \n//台北 高雄，解構賦值是從右到左\n```\n\n### 物件解構賦值\n首先，必須強調一個觀念。物件的解構賦值強調的是`屬性名稱`，**屬性名稱必須相互對應才能取到值，反之則會無法取值**\n基本方法如下：\n```javascript\n物件解構  // 請取出物件內的兩個值到單一變數上\nlet family = {\n  ming: '小明',\n  jay: '杰倫',\n};\nlet familyAll = { ...family }\nconsole.log(familyAll);    //{ming: \"小明\", jay: \"杰倫\"}\n\nlet obj = {\n  website: \"pjchender\",\n  country: \"Taiwan\"\n}\n\nlet { website, country} = obj;\nconsole.log( website );  // pjchender\nconsole.log( country );  // Taiwan\n```\n而上面寫法其實是縮寫，下面寫法才是完整寫法\n`let { website : website , country : country } = obj;`\n\n物件解構賦值原理如下：\n它會根據前面的屬性名稱來對應要給的值，`但值其實是給冒號（：）後面的變數`，用圖來看像是這樣子：\n![images](https://i.imgur.com/A9P21Qx.png)\n圖片來源：[PJChender 部落格](https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html)\n\n接著，我們了解觀念後再來看一個例子：\n```javascript\nlet GinyuTeam = {\n  Ginyu: '基紐',\n  Jeice: '吉斯',\n  burter: '巴特',\n}\nlet{ Ginyu : andy, Jeice : candy } = GinyuTeam;\nconsole.log( Ginyu , Jeice ); //Ginyu is not defined\nconsole.log( andy , candy );// 基紐 吉斯\n\n```\n說明：我們從這個例子，可以發現只有 `andy, candy` 這兩個變數會回傳正確值。也就是說，在物件解構賦值中，**冒號前是用來對應物件的屬性名稱**，**冒號後才是真正建立的變數名稱和被賦值的對象。**\n\n相對的，當冒號前的屬性名稱對應不到物件中的屬性名稱時，則會出現  undefined。\n```javascript\ntest 和 Ginyu 屬性名並沒有相對應\nlet{test} = {Ginyu: \"基紐\"};\nconsole.log(test);    // undefined\n```\n\n### 物件解構賦值其他例子\n```javascript\n情境一：預設值\n// 第一個會被賦值，第二個會用預設(由右至左賦值)\nlet [ming = '小明', jay = '杰倫'] = ['阿明'] \nconsole.log(ming, jay); //阿明 杰倫\n\nlet { family : ming = '小明' } = {}\nconsole.log( ming ) //小明\n\n\n情境二：物件解構\n// 請取出物件內的兩個值到單一變數上\nlet family = {\n  ming: '小明',\n  jay: '杰倫',\n};\nlet familyAll = { ...family }\nconsole.log(familyAll); //{ ming: \"小明\", jay: \"杰倫\"}\n```\n\n### 結論\n陣列的解構賦值強調的是順序，而物件的解構賦值強調的則是`屬性名稱`，屬性名稱必須相互對應才能夠取得到值\n\n### 參考資料\n-  [從ES6開始的JavaScript學習生活](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html) \n-  [筆記JavaScript ES6 中的陣列解構賦值（array destructuring](https://pjchender.blogspot.com/2017/01/es6-array-destructuring.html) \n-  [筆記 JavaScript ES6 中的物件解構賦值（object destructuring）](https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html)\n-  [鐵人賽：ES6 解構賦值](https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/)\n\n\n","source":"_posts/2019-10-27-JavaScript-解構賦值介紹.md","raw":"---\ntitle: Javascript ES6解構賦值介紹\ntags:\n  - es6\n  - javascript\ncategories:\n  - javascript\nabbrlink: 87138112\ndate: 2019-10-27 02:41:22\n---\n前言：\n解構賦值 ( Destructuring Assignment)是一個在 ES6 的新特性，目的用於**提取陣列或物件中的資料**變成獨立變數。\n<!-- more -->\n----\n\n引用 [從ES6開始的JavaScript學習生活](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html) 中的英文說明如下：\n> The Destructuring Assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects using a syntax that `mirrors the construction of array and object literals`\n\n這句後面的 mirrors the construction of array and object literals，代表這個語法的使用方式 - 如同**鏡子**一般，對映出陣列或物件字面的結構。也就是一種樣式(pattern)對映的語法。\n> 引用卡斯伯老師說的白話文：\n  `會將右方的資料往左邊送，然後會一個位置對一個值 (但沒有像鏡子左右顛倒)。`\n\n![images](https://i.imgur.com/qHwxmoy.png)圖片來源：[六角學院卡斯伯老師-鐵人賽：ES6 解構賦值](https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/)\n\n### 陣列解構賦值方法（Array Destructuring）\n過去陣列內的元素在賦值的時候，只能透過直接給值的方式，像是下面這樣：\n```javascript\nlet list = [a, b];\nlet a = list[0];\nlet b = list[1];\nconsole.log(a, b) //a,b\n```\n而在 ES6 世界中，我們可以這樣用，而這就是最基本陣列解構賦值方法\n備註：解構賦值會將右方的資料往左邊送，然後會一個位置對一個值\n```javascript\n第一種\nlet [a, b, c] = [1, 2, 3]\nconsole.log(a, b, c) //1,2,3\n變數 a = 1, b = 2, c = 3\n\n第二種寫法\nlet number = [1, 2, 3];\nlet [andy, chunwen , jay] = number;\nconsole.log(andy, chunwen, jay) //[1, 2, 3]\n```\n接著，我們開始來看不同案例摟～\n```javascript\n情況一：當輸入變數多於所給的值\nlet [a , b, c, d] = [1, 2, 3]\nconsole.log(a, b, c, d) // 1,2,3, undefined\n\n情況二：當輸入變數少於所給的值\nlet [a, , c, d] = [1, 2, 3, 4]\nconsole.log(a, c, d) //1,3,4\n\n情況三：陣列解構中賦予預設值\nlet [a, b, c = 4, d = 'Hi'] = [1, 2, 3];\nconsole.log(a, b, c, d); // 1, 2, 3, \"Hi\"\n說明：因為 c 後面已經有給值，所以輸出結果一樣為３。而 d 在後面沒有給值，就直接帶入了預設值，得到 \"Hi\"。\n\n情況四：字串拆解\nlet str = '我好帥氣喔';\nlet [a, b, c, d] = str;\nconsole.log(a, b, c, d); //我 好 帥 氣 \n\n情況五：交換以下兩個變數\nlet Kaohsiung = '高雄';\nlet Taipei = '台北';\n[Kaohsiung, Taipei]=[Taipei, Kaohsiung];\nconsole.log(Kaohsiung, Taipei) \n//台北 高雄，解構賦值是從右到左\n```\n\n### 物件解構賦值\n首先，必須強調一個觀念。物件的解構賦值強調的是`屬性名稱`，**屬性名稱必須相互對應才能取到值，反之則會無法取值**\n基本方法如下：\n```javascript\n物件解構  // 請取出物件內的兩個值到單一變數上\nlet family = {\n  ming: '小明',\n  jay: '杰倫',\n};\nlet familyAll = { ...family }\nconsole.log(familyAll);    //{ming: \"小明\", jay: \"杰倫\"}\n\nlet obj = {\n  website: \"pjchender\",\n  country: \"Taiwan\"\n}\n\nlet { website, country} = obj;\nconsole.log( website );  // pjchender\nconsole.log( country );  // Taiwan\n```\n而上面寫法其實是縮寫，下面寫法才是完整寫法\n`let { website : website , country : country } = obj;`\n\n物件解構賦值原理如下：\n它會根據前面的屬性名稱來對應要給的值，`但值其實是給冒號（：）後面的變數`，用圖來看像是這樣子：\n![images](https://i.imgur.com/A9P21Qx.png)\n圖片來源：[PJChender 部落格](https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html)\n\n接著，我們了解觀念後再來看一個例子：\n```javascript\nlet GinyuTeam = {\n  Ginyu: '基紐',\n  Jeice: '吉斯',\n  burter: '巴特',\n}\nlet{ Ginyu : andy, Jeice : candy } = GinyuTeam;\nconsole.log( Ginyu , Jeice ); //Ginyu is not defined\nconsole.log( andy , candy );// 基紐 吉斯\n\n```\n說明：我們從這個例子，可以發現只有 `andy, candy` 這兩個變數會回傳正確值。也就是說，在物件解構賦值中，**冒號前是用來對應物件的屬性名稱**，**冒號後才是真正建立的變數名稱和被賦值的對象。**\n\n相對的，當冒號前的屬性名稱對應不到物件中的屬性名稱時，則會出現  undefined。\n```javascript\ntest 和 Ginyu 屬性名並沒有相對應\nlet{test} = {Ginyu: \"基紐\"};\nconsole.log(test);    // undefined\n```\n\n### 物件解構賦值其他例子\n```javascript\n情境一：預設值\n// 第一個會被賦值，第二個會用預設(由右至左賦值)\nlet [ming = '小明', jay = '杰倫'] = ['阿明'] \nconsole.log(ming, jay); //阿明 杰倫\n\nlet { family : ming = '小明' } = {}\nconsole.log( ming ) //小明\n\n\n情境二：物件解構\n// 請取出物件內的兩個值到單一變數上\nlet family = {\n  ming: '小明',\n  jay: '杰倫',\n};\nlet familyAll = { ...family }\nconsole.log(familyAll); //{ ming: \"小明\", jay: \"杰倫\"}\n```\n\n### 結論\n陣列的解構賦值強調的是順序，而物件的解構賦值強調的則是`屬性名稱`，屬性名稱必須相互對應才能夠取得到值\n\n### 參考資料\n-  [從ES6開始的JavaScript學習生活](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html) \n-  [筆記JavaScript ES6 中的陣列解構賦值（array destructuring](https://pjchender.blogspot.com/2017/01/es6-array-destructuring.html) \n-  [筆記 JavaScript ES6 中的物件解構賦值（object destructuring）](https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html)\n-  [鐵人賽：ES6 解構賦值](https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/)\n\n\n","slug":"2019-10-27-JavaScript-解構賦值介紹","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3e003qzqzi12gkgca2","content":"<p>前言：<br>解構賦值 ( Destructuring Assignment)是一個在 ES6 的新特性，目的用於<strong>提取陣列或物件中的資料</strong>變成獨立變數。</p>\n<span id=\"more\"></span>\n<hr>\n<p>引用 <a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html\">從ES6開始的JavaScript學習生活</a> 中的英文說明如下：</p>\n<blockquote>\n<p>The Destructuring Assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects using a syntax that <code>mirrors the construction of array and object literals</code></p>\n</blockquote>\n<p>這句後面的 mirrors the construction of array and object literals，代表這個語法的使用方式 - 如同<strong>鏡子</strong>一般，對映出陣列或物件字面的結構。也就是一種樣式(pattern)對映的語法。</p>\n<blockquote>\n<p>引用卡斯伯老師說的白話文：<br>  <code>會將右方的資料往左邊送，然後會一個位置對一個值 (但沒有像鏡子左右顛倒)。</code></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/qHwxmoy.png\" alt=\"images\">圖片來源：<a href=\"https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/\">六角學院卡斯伯老師-鐵人賽：ES6 解構賦值</a></p>\n<h3 id=\"陣列解構賦值方法（Array-Destructuring）\"><a href=\"#陣列解構賦值方法（Array-Destructuring）\" class=\"headerlink\" title=\"陣列解構賦值方法（Array Destructuring）\"></a>陣列解構賦值方法（Array Destructuring）</h3><p>過去陣列內的元素在賦值的時候，只能透過直接給值的方式，像是下面這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [a, b];</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = list[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = list[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//a,b</span></span><br></pre></td></tr></table></figure>\n<p>而在 ES6 世界中，我們可以這樣用，而這就是最基本陣列解構賦值方法<br>備註：解構賦值會將右方的資料往左邊送，然後會一個位置對一個值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一種</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\">變數 a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">第二種寫法</span><br><span class=\"line\"><span class=\"keyword\">let</span> number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [andy, chunwen , jay] = number;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(andy, chunwen, jay) <span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>接著，我們開始來看不同案例摟～</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情況一：當輸入變數多於所給的值</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a , b, c, d] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d) <span class=\"comment\">// 1,2,3, undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">情況二：當輸入變數少於所給的值</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, , c, d] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, c, d) <span class=\"comment\">//1,3,4</span></span><br><span class=\"line\"></span><br><span class=\"line\">情況三：陣列解構中賦予預設值</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c = <span class=\"number\">4</span>, d = <span class=\"string\">&#x27;Hi&#x27;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d); <span class=\"comment\">// 1, 2, 3, &quot;Hi&quot;</span></span><br><span class=\"line\">說明：因為 c 後面已經有給值，所以輸出結果一樣為３。而 d 在後面沒有給值，就直接帶入了預設值，得到 <span class=\"string\">&quot;Hi&quot;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">情況四：字串拆解</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;我好帥氣喔&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = str;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d); <span class=\"comment\">//我 好 帥 氣 </span></span><br><span class=\"line\"></span><br><span class=\"line\">情況五：交換以下兩個變數</span><br><span class=\"line\"><span class=\"keyword\">let</span> Kaohsiung = <span class=\"string\">&#x27;高雄&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Taipei = <span class=\"string\">&#x27;台北&#x27;</span>;</span><br><span class=\"line\">[Kaohsiung, Taipei]=[Taipei, Kaohsiung];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Kaohsiung, Taipei) </span><br><span class=\"line\"><span class=\"comment\">//台北 高雄，解構賦值是從右到左</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件解構賦值\"><a href=\"#物件解構賦值\" class=\"headerlink\" title=\"物件解構賦值\"></a>物件解構賦值</h3><p>首先，必須強調一個觀念。物件的解構賦值強調的是<code>屬性名稱</code>，<strong>屬性名稱必須相互對應才能取到值，反之則會無法取值</strong><br>基本方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件解構  <span class=\"comment\">// 請取出物件內的兩個值到單一變數上</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> family = &#123;</span><br><span class=\"line\">  ming: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  jay: <span class=\"string\">&#x27;杰倫&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> familyAll = &#123; ...family &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(familyAll);    <span class=\"comment\">//&#123;ming: &quot;小明&quot;, jay: &quot;杰倫&quot;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  website: <span class=\"string\">&quot;pjchender&quot;</span>,</span><br><span class=\"line\">  country: <span class=\"string\">&quot;Taiwan&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; website, country&#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( website );  <span class=\"comment\">// pjchender</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( country );  <span class=\"comment\">// Taiwan</span></span><br></pre></td></tr></table></figure>\n<p>而上面寫法其實是縮寫，下面寫法才是完整寫法<br><code>let &#123; website : website , country : country &#125; = obj;</code></p>\n<p>物件解構賦值原理如下：<br>它會根據前面的屬性名稱來對應要給的值，<code>但值其實是給冒號（：）後面的變數</code>，用圖來看像是這樣子：<br><img src=\"https://i.imgur.com/A9P21Qx.png\" alt=\"images\"><br>圖片來源：<a href=\"https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html\">PJChender 部落格</a></p>\n<p>接著，我們了解觀念後再來看一個例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> GinyuTeam = &#123;</span><br><span class=\"line\">  Ginyu: <span class=\"string\">&#x27;基紐&#x27;</span>,</span><br><span class=\"line\">  Jeice: <span class=\"string\">&#x27;吉斯&#x27;</span>,</span><br><span class=\"line\">  burter: <span class=\"string\">&#x27;巴特&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span>&#123; <span class=\"attr\">Ginyu</span> : andy, <span class=\"attr\">Jeice</span> : candy &#125; = GinyuTeam;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( Ginyu , Jeice ); <span class=\"comment\">//Ginyu is not defined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( andy , candy );<span class=\"comment\">// 基紐 吉斯</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>說明：我們從這個例子，可以發現只有 <code>andy, candy</code> 這兩個變數會回傳正確值。也就是說，在物件解構賦值中，<strong>冒號前是用來對應物件的屬性名稱</strong>，<strong>冒號後才是真正建立的變數名稱和被賦值的對象。</strong></p>\n<p>相對的，當冒號前的屬性名稱對應不到物件中的屬性名稱時，則會出現  undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test 和 Ginyu 屬性名並沒有相對應</span><br><span class=\"line\"><span class=\"keyword\">let</span>&#123;test&#125; = &#123;<span class=\"attr\">Ginyu</span>: <span class=\"string\">&quot;基紐&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test);    <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件解構賦值其他例子\"><a href=\"#物件解構賦值其他例子\" class=\"headerlink\" title=\"物件解構賦值其他例子\"></a>物件解構賦值其他例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：預設值</span><br><span class=\"line\"><span class=\"comment\">// 第一個會被賦值，第二個會用預設(由右至左賦值)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [ming = <span class=\"string\">&#x27;小明&#x27;</span>, jay = <span class=\"string\">&#x27;杰倫&#x27;</span>] = [<span class=\"string\">&#x27;阿明&#x27;</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ming, jay); <span class=\"comment\">//阿明 杰倫</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">family</span> : ming = <span class=\"string\">&#x27;小明&#x27;</span> &#125; = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( ming ) <span class=\"comment\">//小明</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：物件解構</span><br><span class=\"line\"><span class=\"comment\">// 請取出物件內的兩個值到單一變數上</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> family = &#123;</span><br><span class=\"line\">  ming: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  jay: <span class=\"string\">&#x27;杰倫&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> familyAll = &#123; ...family &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(familyAll); <span class=\"comment\">//&#123; ming: &quot;小明&quot;, jay: &quot;杰倫&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>陣列的解構賦值強調的是順序，而物件的解構賦值強調的則是<code>屬性名稱</code>，屬性名稱必須相互對應才能夠取得到值</p>\n<h3 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h3><ul>\n<li><a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html\">從ES6開始的JavaScript學習生活</a> </li>\n<li><a href=\"https://pjchender.blogspot.com/2017/01/es6-array-destructuring.html\">筆記JavaScript ES6 中的陣列解構賦值（array destructuring</a> </li>\n<li><a href=\"https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html\">筆記 JavaScript ES6 中的物件解構賦值（object destructuring）</a></li>\n<li><a href=\"https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/\">鐵人賽：ES6 解構賦值</a></li>\n</ul>\n","site":{"data":{}},"length":3036,"excerpt":"<p>前言：<br>解構賦值 ( Destructuring Assignment)是一個在 ES6 的新特性，目的用於<strong>提取陣列或物件中的資料</strong>變成獨立變數。</p>","more":"<hr>\n<p>引用 <a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html\">從ES6開始的JavaScript學習生活</a> 中的英文說明如下：</p>\n<blockquote>\n<p>The Destructuring Assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects using a syntax that <code>mirrors the construction of array and object literals</code></p>\n</blockquote>\n<p>這句後面的 mirrors the construction of array and object literals，代表這個語法的使用方式 - 如同<strong>鏡子</strong>一般，對映出陣列或物件字面的結構。也就是一種樣式(pattern)對映的語法。</p>\n<blockquote>\n<p>引用卡斯伯老師說的白話文：<br>  <code>會將右方的資料往左邊送，然後會一個位置對一個值 (但沒有像鏡子左右顛倒)。</code></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/qHwxmoy.png\" alt=\"images\">圖片來源：<a href=\"https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/\">六角學院卡斯伯老師-鐵人賽：ES6 解構賦值</a></p>\n<h3 id=\"陣列解構賦值方法（Array-Destructuring）\"><a href=\"#陣列解構賦值方法（Array-Destructuring）\" class=\"headerlink\" title=\"陣列解構賦值方法（Array Destructuring）\"></a>陣列解構賦值方法（Array Destructuring）</h3><p>過去陣列內的元素在賦值的時候，只能透過直接給值的方式，像是下面這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = [a, b];</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = list[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = list[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">//a,b</span></span><br></pre></td></tr></table></figure>\n<p>而在 ES6 世界中，我們可以這樣用，而這就是最基本陣列解構賦值方法<br>備註：解構賦值會將右方的資料往左邊送，然後會一個位置對一個值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一種</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c) <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\">變數 a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">第二種寫法</span><br><span class=\"line\"><span class=\"keyword\">let</span> number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [andy, chunwen , jay] = number;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(andy, chunwen, jay) <span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>接著，我們開始來看不同案例摟～</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情況一：當輸入變數多於所給的值</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a , b, c, d] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d) <span class=\"comment\">// 1,2,3, undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">情況二：當輸入變數少於所給的值</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, , c, d] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, c, d) <span class=\"comment\">//1,3,4</span></span><br><span class=\"line\"></span><br><span class=\"line\">情況三：陣列解構中賦予預設值</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c = <span class=\"number\">4</span>, d = <span class=\"string\">&#x27;Hi&#x27;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d); <span class=\"comment\">// 1, 2, 3, &quot;Hi&quot;</span></span><br><span class=\"line\">說明：因為 c 後面已經有給值，所以輸出結果一樣為３。而 d 在後面沒有給值，就直接帶入了預設值，得到 <span class=\"string\">&quot;Hi&quot;</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">情況四：字串拆解</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;我好帥氣喔&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = str;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, c, d); <span class=\"comment\">//我 好 帥 氣 </span></span><br><span class=\"line\"></span><br><span class=\"line\">情況五：交換以下兩個變數</span><br><span class=\"line\"><span class=\"keyword\">let</span> Kaohsiung = <span class=\"string\">&#x27;高雄&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Taipei = <span class=\"string\">&#x27;台北&#x27;</span>;</span><br><span class=\"line\">[Kaohsiung, Taipei]=[Taipei, Kaohsiung];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Kaohsiung, Taipei) </span><br><span class=\"line\"><span class=\"comment\">//台北 高雄，解構賦值是從右到左</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件解構賦值\"><a href=\"#物件解構賦值\" class=\"headerlink\" title=\"物件解構賦值\"></a>物件解構賦值</h3><p>首先，必須強調一個觀念。物件的解構賦值強調的是<code>屬性名稱</code>，<strong>屬性名稱必須相互對應才能取到值，反之則會無法取值</strong><br>基本方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">物件解構  <span class=\"comment\">// 請取出物件內的兩個值到單一變數上</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> family = &#123;</span><br><span class=\"line\">  ming: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  jay: <span class=\"string\">&#x27;杰倫&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> familyAll = &#123; ...family &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(familyAll);    <span class=\"comment\">//&#123;ming: &quot;小明&quot;, jay: &quot;杰倫&quot;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  website: <span class=\"string\">&quot;pjchender&quot;</span>,</span><br><span class=\"line\">  country: <span class=\"string\">&quot;Taiwan&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; website, country&#125; = obj;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( website );  <span class=\"comment\">// pjchender</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( country );  <span class=\"comment\">// Taiwan</span></span><br></pre></td></tr></table></figure>\n<p>而上面寫法其實是縮寫，下面寫法才是完整寫法<br><code>let &#123; website : website , country : country &#125; = obj;</code></p>\n<p>物件解構賦值原理如下：<br>它會根據前面的屬性名稱來對應要給的值，<code>但值其實是給冒號（：）後面的變數</code>，用圖來看像是這樣子：<br><img src=\"https://i.imgur.com/A9P21Qx.png\" alt=\"images\"><br>圖片來源：<a href=\"https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html\">PJChender 部落格</a></p>\n<p>接著，我們了解觀念後再來看一個例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> GinyuTeam = &#123;</span><br><span class=\"line\">  Ginyu: <span class=\"string\">&#x27;基紐&#x27;</span>,</span><br><span class=\"line\">  Jeice: <span class=\"string\">&#x27;吉斯&#x27;</span>,</span><br><span class=\"line\">  burter: <span class=\"string\">&#x27;巴特&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span>&#123; <span class=\"attr\">Ginyu</span> : andy, <span class=\"attr\">Jeice</span> : candy &#125; = GinyuTeam;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( Ginyu , Jeice ); <span class=\"comment\">//Ginyu is not defined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( andy , candy );<span class=\"comment\">// 基紐 吉斯</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>說明：我們從這個例子，可以發現只有 <code>andy, candy</code> 這兩個變數會回傳正確值。也就是說，在物件解構賦值中，<strong>冒號前是用來對應物件的屬性名稱</strong>，<strong>冒號後才是真正建立的變數名稱和被賦值的對象。</strong></p>\n<p>相對的，當冒號前的屬性名稱對應不到物件中的屬性名稱時，則會出現  undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test 和 Ginyu 屬性名並沒有相對應</span><br><span class=\"line\"><span class=\"keyword\">let</span>&#123;test&#125; = &#123;<span class=\"attr\">Ginyu</span>: <span class=\"string\">&quot;基紐&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test);    <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件解構賦值其他例子\"><a href=\"#物件解構賦值其他例子\" class=\"headerlink\" title=\"物件解構賦值其他例子\"></a>物件解構賦值其他例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境一：預設值</span><br><span class=\"line\"><span class=\"comment\">// 第一個會被賦值，第二個會用預設(由右至左賦值)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [ming = <span class=\"string\">&#x27;小明&#x27;</span>, jay = <span class=\"string\">&#x27;杰倫&#x27;</span>] = [<span class=\"string\">&#x27;阿明&#x27;</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ming, jay); <span class=\"comment\">//阿明 杰倫</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">family</span> : ming = <span class=\"string\">&#x27;小明&#x27;</span> &#125; = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( ming ) <span class=\"comment\">//小明</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">情境二：物件解構</span><br><span class=\"line\"><span class=\"comment\">// 請取出物件內的兩個值到單一變數上</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> family = &#123;</span><br><span class=\"line\">  ming: <span class=\"string\">&#x27;小明&#x27;</span>,</span><br><span class=\"line\">  jay: <span class=\"string\">&#x27;杰倫&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> familyAll = &#123; ...family &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(familyAll); <span class=\"comment\">//&#123; ming: &quot;小明&quot;, jay: &quot;杰倫&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>陣列的解構賦值強調的是順序，而物件的解構賦值強調的則是<code>屬性名稱</code>，屬性名稱必須相互對應才能夠取得到值</p>\n<h3 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h3><ul>\n<li><a href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/intro.html\">從ES6開始的JavaScript學習生活</a> </li>\n<li><a href=\"https://pjchender.blogspot.com/2017/01/es6-array-destructuring.html\">筆記JavaScript ES6 中的陣列解構賦值（array destructuring</a> </li>\n<li><a href=\"https://pjchender.blogspot.com/2017/01/es6-object-destructuring.html\">筆記 JavaScript ES6 中的物件解構賦值（object destructuring）</a></li>\n<li><a href=\"https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/\">鐵人賽：ES6 解構賦值</a></li>\n</ul>"},{"title":"看鐵人賽文章學UI/UX - 設計原則","abbrlink":4011424401,"date":"2020-09-21T15:34:44.000Z","_content":"前言：\n今天要來介紹網頁設計排版的原則C、R、A、P，和了解Layout排版\n<!-- more -->\n---\n筆記來源：\n[UI / UX 設計白皮書 / Material Design 導讀Day04 Layout 排版](https://ithelp.ithome.com.tw/articles/10233983)\n[Understanding layout](https://material.io/design/layout/understanding-layout.html#)\n\n## 了解排版\n根據Material Design建議，元件與元件之間的距離基本上都是使用\b**8dp**網格對齊\n然而如果元件較小，可以使用**4dp**網格對齊\n```\n這邊可以將dp視為pixel\n```\n\n## Responsive layout \n1. 最容易閱讀的內文長度是每行 40-60 個字母\n2. 360dp 顯示 4 欄，留白16dp\n3. 600dp 顯示 8 欄，留白24dp\n\n\n### Contrast(對比)\n透過字的大小、粗細、顏色強調不同區塊重點。\n> 但同個畫面上不要過度使用，以免焦點遺失\n\n### Repetition (重複)\n強調元件與元件的一置性，視覺上更為一置化。\n> EX: Input框都有提示字元\n\n### Alignment(對齊)\n目的在於引導使用者的視覺動線。\n\n### Proximity(相近)\n如運用間距，可以區分成不同類別。\n\n\n","source":"_posts/2020-09-20-看鐵人賽文章學UI-UX-設計原則.md","raw":"---\ntitle: 看鐵人賽文章學UI/UX - 設計原則\ntags:\n  - UI\n  - UX\ncategories:\n  - Design\nabbrlink: 4011424401\ndate: 2020-09-21 23:34:44\n---\n前言：\n今天要來介紹網頁設計排版的原則C、R、A、P，和了解Layout排版\n<!-- more -->\n---\n筆記來源：\n[UI / UX 設計白皮書 / Material Design 導讀Day04 Layout 排版](https://ithelp.ithome.com.tw/articles/10233983)\n[Understanding layout](https://material.io/design/layout/understanding-layout.html#)\n\n## 了解排版\n根據Material Design建議，元件與元件之間的距離基本上都是使用\b**8dp**網格對齊\n然而如果元件較小，可以使用**4dp**網格對齊\n```\n這邊可以將dp視為pixel\n```\n\n## Responsive layout \n1. 最容易閱讀的內文長度是每行 40-60 個字母\n2. 360dp 顯示 4 欄，留白16dp\n3. 600dp 顯示 8 欄，留白24dp\n\n\n### Contrast(對比)\n透過字的大小、粗細、顏色強調不同區塊重點。\n> 但同個畫面上不要過度使用，以免焦點遺失\n\n### Repetition (重複)\n強調元件與元件的一置性，視覺上更為一置化。\n> EX: Input框都有提示字元\n\n### Alignment(對齊)\n目的在於引導使用者的視覺動線。\n\n### Proximity(相近)\n如運用間距，可以區分成不同類別。\n\n\n","slug":"2020-09-20-看鐵人賽文章學UI-UX-設計原則","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3f003uzqzieaqycrxq","content":"<p>前言：<br>今天要來介紹網頁設計排版的原則C、R、A、P，和了解Layout排版</p>\n<span id=\"more\"></span>\n<hr>\n<p>筆記來源：<br><a href=\"https://ithelp.ithome.com.tw/articles/10233983\">UI / UX 設計白皮書 / Material Design 導讀Day04 Layout 排版</a><br><a href=\"https://material.io/design/layout/understanding-layout.html#\">Understanding layout</a></p>\n<h2 id=\"了解排版\"><a href=\"#了解排版\" class=\"headerlink\" title=\"了解排版\"></a>了解排版</h2><p>根據Material Design建議，元件與元件之間的距離基本上都是使用\b<strong>8dp</strong>網格對齊<br>然而如果元件較小，可以使用<strong>4dp</strong>網格對齊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">這邊可以將dp視為pixel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Responsive-layout\"><a href=\"#Responsive-layout\" class=\"headerlink\" title=\"Responsive layout\"></a>Responsive layout</h2><ol>\n<li>最容易閱讀的內文長度是每行 40-60 個字母</li>\n<li>360dp 顯示 4 欄，留白16dp</li>\n<li>600dp 顯示 8 欄，留白24dp</li>\n</ol>\n<h3 id=\"Contrast-對比\"><a href=\"#Contrast-對比\" class=\"headerlink\" title=\"Contrast(對比)\"></a>Contrast(對比)</h3><p>透過字的大小、粗細、顏色強調不同區塊重點。</p>\n<blockquote>\n<p>但同個畫面上不要過度使用，以免焦點遺失</p>\n</blockquote>\n<h3 id=\"Repetition-重複\"><a href=\"#Repetition-重複\" class=\"headerlink\" title=\"Repetition (重複)\"></a>Repetition (重複)</h3><p>強調元件與元件的一置性，視覺上更為一置化。</p>\n<blockquote>\n<p>EX: Input框都有提示字元</p>\n</blockquote>\n<h3 id=\"Alignment-對齊\"><a href=\"#Alignment-對齊\" class=\"headerlink\" title=\"Alignment(對齊)\"></a>Alignment(對齊)</h3><p>目的在於引導使用者的視覺動線。</p>\n<h3 id=\"Proximity-相近\"><a href=\"#Proximity-相近\" class=\"headerlink\" title=\"Proximity(相近)\"></a>Proximity(相近)</h3><p>如運用間距，可以區分成不同類別。</p>\n","site":{"data":{}},"length":412,"excerpt":"<p>前言：<br>今天要來介紹網頁設計排版的原則C、R、A、P，和了解Layout排版</p>","more":"<hr>\n<p>筆記來源：<br><a href=\"https://ithelp.ithome.com.tw/articles/10233983\">UI / UX 設計白皮書 / Material Design 導讀Day04 Layout 排版</a><br><a href=\"https://material.io/design/layout/understanding-layout.html#\">Understanding layout</a></p>\n<h2 id=\"了解排版\"><a href=\"#了解排版\" class=\"headerlink\" title=\"了解排版\"></a>了解排版</h2><p>根據Material Design建議，元件與元件之間的距離基本上都是使用\b<strong>8dp</strong>網格對齊<br>然而如果元件較小，可以使用<strong>4dp</strong>網格對齊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">這邊可以將dp視為pixel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Responsive-layout\"><a href=\"#Responsive-layout\" class=\"headerlink\" title=\"Responsive layout\"></a>Responsive layout</h2><ol>\n<li>最容易閱讀的內文長度是每行 40-60 個字母</li>\n<li>360dp 顯示 4 欄，留白16dp</li>\n<li>600dp 顯示 8 欄，留白24dp</li>\n</ol>\n<h3 id=\"Contrast-對比\"><a href=\"#Contrast-對比\" class=\"headerlink\" title=\"Contrast(對比)\"></a>Contrast(對比)</h3><p>透過字的大小、粗細、顏色強調不同區塊重點。</p>\n<blockquote>\n<p>但同個畫面上不要過度使用，以免焦點遺失</p>\n</blockquote>\n<h3 id=\"Repetition-重複\"><a href=\"#Repetition-重複\" class=\"headerlink\" title=\"Repetition (重複)\"></a>Repetition (重複)</h3><p>強調元件與元件的一置性，視覺上更為一置化。</p>\n<blockquote>\n<p>EX: Input框都有提示字元</p>\n</blockquote>\n<h3 id=\"Alignment-對齊\"><a href=\"#Alignment-對齊\" class=\"headerlink\" title=\"Alignment(對齊)\"></a>Alignment(對齊)</h3><p>目的在於引導使用者的視覺動線。</p>\n<h3 id=\"Proximity-相近\"><a href=\"#Proximity-相近\" class=\"headerlink\" title=\"Proximity(相近)\"></a>Proximity(相近)</h3><p>如運用間距，可以區分成不同類別。</p>"},{"title":"2020-09-22-看鐵人賽學網頁-Debug篇","abbrlink":1670271006,"date":"2020-09-22T14:54:30.000Z","_content":"筆記來源：\n[[Day 08] Console - Utilities](https://ithelp.ithome.com.tw/articles/10241598)\n[練習網站](https://sh1zuku.csie.io/demo/console-utilities/)\n<!-- more -->\n---\n* 技巧一 `$_`\n會將上一個執行結果儲存\n圖示：\n![執行結果](https://i.imgur.com/zmG9wf1.png)\n\n* `$` 跟  `$$`\n這兩個分別是`document.querySelector` 和 `document.querySelectorAll` 的縮寫\n第二個參數可以放入起始的元素。搭配 $0 就可以先 Inspect 一個元素，再從它開始搜尋。","source":"_posts/2020-09-22-看鐵人賽學網頁-Debug篇.md","raw":"---\ntitle: 2020-09-22-看鐵人賽學網頁-Debug篇\ntags:\n  - Chrome\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 1670271006\ndate: 2020-09-22 22:54:30\n---\n筆記來源：\n[[Day 08] Console - Utilities](https://ithelp.ithome.com.tw/articles/10241598)\n[練習網站](https://sh1zuku.csie.io/demo/console-utilities/)\n<!-- more -->\n---\n* 技巧一 `$_`\n會將上一個執行結果儲存\n圖示：\n![執行結果](https://i.imgur.com/zmG9wf1.png)\n\n* `$` 跟  `$$`\n這兩個分別是`document.querySelector` 和 `document.querySelectorAll` 的縮寫\n第二個參數可以放入起始的元素。搭配 $0 就可以先 Inspect 一個元素，再從它開始搜尋。","slug":"2020-09-22-看鐵人賽學網頁-Debug篇","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3g003yzqzi7hkzbcad","content":"<p>筆記來源：<br><a href=\"https://ithelp.ithome.com.tw/articles/10241598\">[Day 08] Console - Utilities</a><br><a href=\"https://sh1zuku.csie.io/demo/console-utilities/\">練習網站</a></p>\n<span id=\"more\"></span>\n<hr>\n<ul>\n<li><p>技巧一 <code>$_</code><br>會將上一個執行結果儲存<br>圖示：<br><img src=\"https://i.imgur.com/zmG9wf1.png\" alt=\"執行結果\"></p>\n</li>\n<li><p><code>$</code> 跟  <code>$$</code><br>這兩個分別是<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 的縮寫<br>第二個參數可以放入起始的元素。搭配 $0 就可以先 Inspect 一個元素，再從它開始搜尋。</p>\n</li>\n</ul>\n","site":{"data":{}},"length":156,"excerpt":"<p>筆記來源：<br><a href=\"https://ithelp.ithome.com.tw/articles/10241598\">[Day 08] Console - Utilities</a><br><a href=\"https://sh1zuku.csie.io/demo/console-utilities/\">練習網站</a></p>","more":"<hr>\n<ul>\n<li><p>技巧一 <code>$_</code><br>會將上一個執行結果儲存<br>圖示：<br><img src=\"https://i.imgur.com/zmG9wf1.png\" alt=\"執行結果\"></p>\n</li>\n<li><p><code>$</code> 跟  <code>$$</code><br>這兩個分別是<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 的縮寫<br>第二個參數可以放入起始的元素。搭配 $0 就可以先 Inspect 一個元素，再從它開始搜尋。</p>\n</li>\n</ul>"},{"title":"2020-09-23-看鐵人賽學UI/UX-導覽列","abbrlink":2688782870,"date":"2020-09-23T14:23:22.000Z","_content":"前言：\n今天將介紹導覽列設計與搜尋框設計。\n<!-- more -->\n---\n筆記來源：\n[Search 搜索](https://material.io/design/navigation/search.html)\n[導覽列](https://material.io/components/navigation-drawer)\n[導覽列滑動](https://material.io/design/navigation/navigation-transitions.html)\n[分頁](https://material.io/components/tabs#product-architectures)\n---\n### 導覽列 NavBar\n* 設計原則\n![圖示](https://i.imgur.com/oUzUEkS.png)\n\n### 搜尋 Search\n![圖示](https://i.imgur.com/g7JsHyl.png)\n1. 提供模糊查詢功能\n2. 提供文字提示功能\n\n### 分頁 Tab\n* 設計原則\n![圖示](https://i.imgur.com/ZrjIKQV.png)\n\n* 規格設計\n![圖示](https://i.imgur.com/Dw3Xxzr.png)\n\n* 樣式效果\n![圖示](https://i.imgur.com/4K2w1uJ.png)","source":"_posts/2020-09-23-看鐵人賽學UI-UX-導覽列.md","raw":"---\ntitle: 2020-09-23-看鐵人賽學UI/UX-導覽列\ntags:\n  - UI\n  - UX\ncategories:\n  - Design\nabbrlink: 2688782870\ndate: 2020-09-23 22:23:22\n---\n前言：\n今天將介紹導覽列設計與搜尋框設計。\n<!-- more -->\n---\n筆記來源：\n[Search 搜索](https://material.io/design/navigation/search.html)\n[導覽列](https://material.io/components/navigation-drawer)\n[導覽列滑動](https://material.io/design/navigation/navigation-transitions.html)\n[分頁](https://material.io/components/tabs#product-architectures)\n---\n### 導覽列 NavBar\n* 設計原則\n![圖示](https://i.imgur.com/oUzUEkS.png)\n\n### 搜尋 Search\n![圖示](https://i.imgur.com/g7JsHyl.png)\n1. 提供模糊查詢功能\n2. 提供文字提示功能\n\n### 分頁 Tab\n* 設計原則\n![圖示](https://i.imgur.com/ZrjIKQV.png)\n\n* 規格設計\n![圖示](https://i.imgur.com/Dw3Xxzr.png)\n\n* 樣式效果\n![圖示](https://i.imgur.com/4K2w1uJ.png)","slug":"2020-09-23-看鐵人賽學UI-UX-導覽列","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3j0042zqzi21xg80ll","content":"<p>前言：<br>今天將介紹導覽列設計與搜尋框設計。</p>\n<span id=\"more\"></span>\n<hr>\n<p>筆記來源：<br><a href=\"https://material.io/design/navigation/search.html\">Search 搜索</a><br><a href=\"https://material.io/components/navigation-drawer\">導覽列</a><br><a href=\"https://material.io/design/navigation/navigation-transitions.html\">導覽列滑動</a><br><a href=\"https://material.io/components/tabs#product-architectures\">分頁</a></p>\n<hr>\n<h3 id=\"導覽列-NavBar\"><a href=\"#導覽列-NavBar\" class=\"headerlink\" title=\"導覽列 NavBar\"></a>導覽列 NavBar</h3><ul>\n<li>設計原則<br><img src=\"https://i.imgur.com/oUzUEkS.png\" alt=\"圖示\"></li>\n</ul>\n<h3 id=\"搜尋-Search\"><a href=\"#搜尋-Search\" class=\"headerlink\" title=\"搜尋 Search\"></a>搜尋 Search</h3><p><img src=\"https://i.imgur.com/g7JsHyl.png\" alt=\"圖示\"></p>\n<ol>\n<li>提供模糊查詢功能</li>\n<li>提供文字提示功能</li>\n</ol>\n<h3 id=\"分頁-Tab\"><a href=\"#分頁-Tab\" class=\"headerlink\" title=\"分頁 Tab\"></a>分頁 Tab</h3><ul>\n<li><p>設計原則<br><img src=\"https://i.imgur.com/ZrjIKQV.png\" alt=\"圖示\"></p>\n</li>\n<li><p>規格設計<br><img src=\"https://i.imgur.com/Dw3Xxzr.png\" alt=\"圖示\"></p>\n</li>\n<li><p>樣式效果<br><img src=\"https://i.imgur.com/4K2w1uJ.png\" alt=\"圖示\"></p>\n</li>\n</ul>\n","site":{"data":{}},"length":97,"excerpt":"<p>前言：<br>今天將介紹導覽列設計與搜尋框設計。</p>","more":"<hr>\n<p>筆記來源：<br><a href=\"https://material.io/design/navigation/search.html\">Search 搜索</a><br><a href=\"https://material.io/components/navigation-drawer\">導覽列</a><br><a href=\"https://material.io/design/navigation/navigation-transitions.html\">導覽列滑動</a><br><a href=\"https://material.io/components/tabs#product-architectures\">分頁</a></p>\n<hr>\n<h3 id=\"導覽列-NavBar\"><a href=\"#導覽列-NavBar\" class=\"headerlink\" title=\"導覽列 NavBar\"></a>導覽列 NavBar</h3><ul>\n<li>設計原則<br><img src=\"https://i.imgur.com/oUzUEkS.png\" alt=\"圖示\"></li>\n</ul>\n<h3 id=\"搜尋-Search\"><a href=\"#搜尋-Search\" class=\"headerlink\" title=\"搜尋 Search\"></a>搜尋 Search</h3><p><img src=\"https://i.imgur.com/g7JsHyl.png\" alt=\"圖示\"></p>\n<ol>\n<li>提供模糊查詢功能</li>\n<li>提供文字提示功能</li>\n</ol>\n<h3 id=\"分頁-Tab\"><a href=\"#分頁-Tab\" class=\"headerlink\" title=\"分頁 Tab\"></a>分頁 Tab</h3><ul>\n<li><p>設計原則<br><img src=\"https://i.imgur.com/ZrjIKQV.png\" alt=\"圖示\"></p>\n</li>\n<li><p>規格設計<br><img src=\"https://i.imgur.com/Dw3Xxzr.png\" alt=\"圖示\"></p>\n</li>\n<li><p>樣式效果<br><img src=\"https://i.imgur.com/4K2w1uJ.png\" alt=\"圖示\"></p>\n</li>\n</ul>"},{"title":"2020-09-24-看鐵人賽學UI/UX-色彩","abbrlink":4208839988,"date":"2020-09-24T14:57:26.000Z","_content":"今天先介紹色彩系統跟顏色配置。\n<!-- more -->\n---\n參考資料：\n[The color system 色彩系統](https://material.io/design/color/the-color-system.html#color-usage-and-palettes)\n[Applying color to UI 將顏色應用於 UI](https://material.io/design/color/applying-color-to-ui.html#usage)\n[配色網站](https://material.io/resources/color/#!/?view.left=0&view.right=1&primary.color=3F51B5&secondary.color=fce993)\n\n---\n### 色彩系統\n色彩主要設計原則如下：\n1. 讓畫面有階層性\n2. 增加內容易閱讀性\n3. 強調內容\n![圖一](https://i.imgur.com/SevwQLs.png)\n\n* 主要色(Primary Color)\n畫面使用率最高，可以搭配者要色加深或變淺，讓元件產生對比。\n![圖二](https://i.imgur.com/XZQlYHb.png)\n\n\n* 次要色(Secondary Color)\n適合用於互動按鈕、拉霸、開關、文字選取反白顏色、進度條、連結、標題\n![圖三](https://i.imgur.com/HmzpLUE.png)\n\n\n* 輔助色\n可以用於背景、畫面區塊、錯誤提示、文字排版、圖示或是替代顏色\n![圖四](https://i.imgur.com/4RcKwGB.png)\n\n### 應用色彩\n主要設計原則如下：\n1. 讓畫面一至性\n2. 顏色可以獨立\n3. 顏色有目的性\n![圖五](https://i.imgur.com/asVwMCI.png)\n\n\n\n\n","source":"_posts/2020-09-24-看鐵人賽學UI-UX-色彩.md","raw":"---\ntitle: 2020-09-24-看鐵人賽學UI/UX-色彩\ntags:\n  - UI\n  - UX\ncategories:\n  - Design\nabbrlink: 4208839988\ndate: 2020-09-24 22:57:26\n---\n今天先介紹色彩系統跟顏色配置。\n<!-- more -->\n---\n參考資料：\n[The color system 色彩系統](https://material.io/design/color/the-color-system.html#color-usage-and-palettes)\n[Applying color to UI 將顏色應用於 UI](https://material.io/design/color/applying-color-to-ui.html#usage)\n[配色網站](https://material.io/resources/color/#!/?view.left=0&view.right=1&primary.color=3F51B5&secondary.color=fce993)\n\n---\n### 色彩系統\n色彩主要設計原則如下：\n1. 讓畫面有階層性\n2. 增加內容易閱讀性\n3. 強調內容\n![圖一](https://i.imgur.com/SevwQLs.png)\n\n* 主要色(Primary Color)\n畫面使用率最高，可以搭配者要色加深或變淺，讓元件產生對比。\n![圖二](https://i.imgur.com/XZQlYHb.png)\n\n\n* 次要色(Secondary Color)\n適合用於互動按鈕、拉霸、開關、文字選取反白顏色、進度條、連結、標題\n![圖三](https://i.imgur.com/HmzpLUE.png)\n\n\n* 輔助色\n可以用於背景、畫面區塊、錯誤提示、文字排版、圖示或是替代顏色\n![圖四](https://i.imgur.com/4RcKwGB.png)\n\n### 應用色彩\n主要設計原則如下：\n1. 讓畫面一至性\n2. 顏色可以獨立\n3. 顏色有目的性\n![圖五](https://i.imgur.com/asVwMCI.png)\n\n\n\n\n","slug":"2020-09-24-看鐵人賽學UI-UX-色彩","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3k0045zqzier3a5uu4","content":"<p>今天先介紹色彩系統跟顏色配置。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://material.io/design/color/the-color-system.html#color-usage-and-palettes\">The color system 色彩系統</a><br><a href=\"https://material.io/design/color/applying-color-to-ui.html#usage\">Applying color to UI 將顏色應用於 UI</a><br><a href=\"https://material.io/resources/color/#!/?view.left=0&view.right=1&primary.color=3F51B5&secondary.color=fce993\">配色網站</a></p>\n<hr>\n<h3 id=\"色彩系統\"><a href=\"#色彩系統\" class=\"headerlink\" title=\"色彩系統\"></a>色彩系統</h3><p>色彩主要設計原則如下：</p>\n<ol>\n<li>讓畫面有階層性</li>\n<li>增加內容易閱讀性</li>\n<li>強調內容<br><img src=\"https://i.imgur.com/SevwQLs.png\" alt=\"圖一\"></li>\n</ol>\n<ul>\n<li>主要色(Primary Color)<br>畫面使用率最高，可以搭配者要色加深或變淺，讓元件產生對比。<br><img src=\"https://i.imgur.com/XZQlYHb.png\" alt=\"圖二\"></li>\n</ul>\n<ul>\n<li>次要色(Secondary Color)<br>適合用於互動按鈕、拉霸、開關、文字選取反白顏色、進度條、連結、標題<br><img src=\"https://i.imgur.com/HmzpLUE.png\" alt=\"圖三\"></li>\n</ul>\n<ul>\n<li>輔助色<br>可以用於背景、畫面區塊、錯誤提示、文字排版、圖示或是替代顏色<br><img src=\"https://i.imgur.com/4RcKwGB.png\" alt=\"圖四\"></li>\n</ul>\n<h3 id=\"應用色彩\"><a href=\"#應用色彩\" class=\"headerlink\" title=\"應用色彩\"></a>應用色彩</h3><p>主要設計原則如下：</p>\n<ol>\n<li>讓畫面一至性</li>\n<li>顏色可以獨立</li>\n<li>顏色有目的性<br><img src=\"https://i.imgur.com/asVwMCI.png\" alt=\"圖五\"></li>\n</ol>\n","site":{"data":{}},"length":263,"excerpt":"<p>今天先介紹色彩系統跟顏色配置。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://material.io/design/color/the-color-system.html#color-usage-and-palettes\">The color system 色彩系統</a><br><a href=\"https://material.io/design/color/applying-color-to-ui.html#usage\">Applying color to UI 將顏色應用於 UI</a><br><a href=\"https://material.io/resources/color/#!/?view.left=0&view.right=1&primary.color=3F51B5&secondary.color=fce993\">配色網站</a></p>\n<hr>\n<h3 id=\"色彩系統\"><a href=\"#色彩系統\" class=\"headerlink\" title=\"色彩系統\"></a>色彩系統</h3><p>色彩主要設計原則如下：</p>\n<ol>\n<li>讓畫面有階層性</li>\n<li>增加內容易閱讀性</li>\n<li>強調內容<br><img src=\"https://i.imgur.com/SevwQLs.png\" alt=\"圖一\"></li>\n</ol>\n<ul>\n<li>主要色(Primary Color)<br>畫面使用率最高，可以搭配者要色加深或變淺，讓元件產生對比。<br><img src=\"https://i.imgur.com/XZQlYHb.png\" alt=\"圖二\"></li>\n</ul>\n<ul>\n<li>次要色(Secondary Color)<br>適合用於互動按鈕、拉霸、開關、文字選取反白顏色、進度條、連結、標題<br><img src=\"https://i.imgur.com/HmzpLUE.png\" alt=\"圖三\"></li>\n</ul>\n<ul>\n<li>輔助色<br>可以用於背景、畫面區塊、錯誤提示、文字排版、圖示或是替代顏色<br><img src=\"https://i.imgur.com/4RcKwGB.png\" alt=\"圖四\"></li>\n</ul>\n<h3 id=\"應用色彩\"><a href=\"#應用色彩\" class=\"headerlink\" title=\"應用色彩\"></a>應用色彩</h3><p>主要設計原則如下：</p>\n<ol>\n<li>讓畫面一至性</li>\n<li>顏色可以獨立</li>\n<li>顏色有目的性<br><img src=\"https://i.imgur.com/asVwMCI.png\" alt=\"圖五\"></li>\n</ol>"},{"title":"2020-09-25-看鐵人賽學UI/UX-色彩2","abbrlink":133919869,"date":"2020-09-25T14:55:26.000Z","_content":"今天延續昨天介紹的顏色偏，著墨在顏色使用上。\n<!-- more -->\n---\n參考資料：\n[Color usage 顏色使用](https://material.io/design/color/color-usage.html#hierarchy)\n[Color Meaning](https://graf1x.com/color-psychology-emotion-meaning-poster/)\n[UI cheat sheets: buttons](https://uxdesign.cc/ui-cheat-sheets-buttons-7329ed9d6112)\n---\n### 顏色使用\n1. 紅色普遍用在危險、勇氣\n2. 橘色：溫暖\n3. 黃色：年輕、新鮮\n4. 粉紅色：安全感\n5. 藍色：平和\n6. 綠色：寧靜、自然\n7. 紫色：高貴\n8. 灰色：無聊、憂鬱、沮喪\n9. 黑色：自信、悲傷\n\n### 文字清晰度\n- 高強調性的文字不透明度為 87%\n- 中強調性的文字和提示文字不透明度為 60%\n- 輔助文字得不透明度為 60%\n- 停用和關閉的文字不透明度為 38%\n- 在錯誤狀態的文字不透明度為 100%\n","source":"_posts/2020-09-25-看鐵人賽學UI-UX-色彩2.md","raw":"---\ntitle: 2020-09-25-看鐵人賽學UI/UX-色彩2\ntags:\n  - UI\n  - UX\ncategories:\n  - Design\nabbrlink: 133919869\ndate: 2020-09-25 22:55:26\n---\n今天延續昨天介紹的顏色偏，著墨在顏色使用上。\n<!-- more -->\n---\n參考資料：\n[Color usage 顏色使用](https://material.io/design/color/color-usage.html#hierarchy)\n[Color Meaning](https://graf1x.com/color-psychology-emotion-meaning-poster/)\n[UI cheat sheets: buttons](https://uxdesign.cc/ui-cheat-sheets-buttons-7329ed9d6112)\n---\n### 顏色使用\n1. 紅色普遍用在危險、勇氣\n2. 橘色：溫暖\n3. 黃色：年輕、新鮮\n4. 粉紅色：安全感\n5. 藍色：平和\n6. 綠色：寧靜、自然\n7. 紫色：高貴\n8. 灰色：無聊、憂鬱、沮喪\n9. 黑色：自信、悲傷\n\n### 文字清晰度\n- 高強調性的文字不透明度為 87%\n- 中強調性的文字和提示文字不透明度為 60%\n- 輔助文字得不透明度為 60%\n- 停用和關閉的文字不透明度為 38%\n- 在錯誤狀態的文字不透明度為 100%\n","slug":"2020-09-25-看鐵人賽學UI-UX-色彩2","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3m004azqziat668hwi","content":"<p>今天延續昨天介紹的顏色偏，著墨在顏色使用上。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://material.io/design/color/color-usage.html#hierarchy\">Color usage 顏色使用</a><br><a href=\"https://graf1x.com/color-psychology-emotion-meaning-poster/\">Color Meaning</a><br><a href=\"https://uxdesign.cc/ui-cheat-sheets-buttons-7329ed9d6112\">UI cheat sheets: buttons</a></p>\n<hr>\n<h3 id=\"顏色使用\"><a href=\"#顏色使用\" class=\"headerlink\" title=\"顏色使用\"></a>顏色使用</h3><ol>\n<li>紅色普遍用在危險、勇氣</li>\n<li>橘色：溫暖</li>\n<li>黃色：年輕、新鮮</li>\n<li>粉紅色：安全感</li>\n<li>藍色：平和</li>\n<li>綠色：寧靜、自然</li>\n<li>紫色：高貴</li>\n<li>灰色：無聊、憂鬱、沮喪</li>\n<li>黑色：自信、悲傷</li>\n</ol>\n<h3 id=\"文字清晰度\"><a href=\"#文字清晰度\" class=\"headerlink\" title=\"文字清晰度\"></a>文字清晰度</h3><ul>\n<li>高強調性的文字不透明度為 87%</li>\n<li>中強調性的文字和提示文字不透明度為 60%</li>\n<li>輔助文字得不透明度為 60%</li>\n<li>停用和關閉的文字不透明度為 38%</li>\n<li>在錯誤狀態的文字不透明度為 100%</li>\n</ul>\n","site":{"data":{}},"length":232,"excerpt":"<p>今天延續昨天介紹的顏色偏，著墨在顏色使用上。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://material.io/design/color/color-usage.html#hierarchy\">Color usage 顏色使用</a><br><a href=\"https://graf1x.com/color-psychology-emotion-meaning-poster/\">Color Meaning</a><br><a href=\"https://uxdesign.cc/ui-cheat-sheets-buttons-7329ed9d6112\">UI cheat sheets: buttons</a></p>\n<hr>\n<h3 id=\"顏色使用\"><a href=\"#顏色使用\" class=\"headerlink\" title=\"顏色使用\"></a>顏色使用</h3><ol>\n<li>紅色普遍用在危險、勇氣</li>\n<li>橘色：溫暖</li>\n<li>黃色：年輕、新鮮</li>\n<li>粉紅色：安全感</li>\n<li>藍色：平和</li>\n<li>綠色：寧靜、自然</li>\n<li>紫色：高貴</li>\n<li>灰色：無聊、憂鬱、沮喪</li>\n<li>黑色：自信、悲傷</li>\n</ol>\n<h3 id=\"文字清晰度\"><a href=\"#文字清晰度\" class=\"headerlink\" title=\"文字清晰度\"></a>文字清晰度</h3><ul>\n<li>高強調性的文字不透明度為 87%</li>\n<li>中強調性的文字和提示文字不透明度為 60%</li>\n<li>輔助文字得不透明度為 60%</li>\n<li>停用和關閉的文字不透明度為 38%</li>\n<li>在錯誤狀態的文字不透明度為 100%</li>\n</ul>"},{"title":"2020-09-27-看鐵人賽學UI/UX-文字排版","abbrlink":2048726292,"date":"2020-09-27T13:09:02.000Z","_content":"今天要來介紹文字。\n<!-- more -->\n---\n參考資料：\n[The type system](https://material.io/design/typography/the-type-system.html#type-scale)\n[Understanding typography](https://material.io/design/typography/understanding-typography.html#type-properties)\n\n---\n![示意圖](https://i.imgur.com/imBOK0X.png)\n### 文字系統\n* 標題\n從H1～H6，可以挑選比較特特殊字體，來吸引使用者注意。(字體大小96px~20px)\n\n* 副標題\n字體大小必須小於標題，而且使用襯線或無襯線字體必較合適。(字體大小16px~14px)\n\n* 內文\n一樣建議用襯線或無襯線字體必較合適。(字體大小16px~14px)\n\n* 附註\n文字最小(字體大小12px~10px)\n\n### 文字排版\n> 行高必須為4的倍數\n* 可讀性\n大寫英文字母間距比較寬，理想一段文字為40～60個字\n* 文字行高\n![示意圖](https://i.imgur.com/rxj6dBF.png)\n\n* 段落間距\n段落間距應保持在字體大小的 0.75 倍至 1.25 倍之間。例如: 字體大小20sp，行高30dp，段落間距28dp。\n![示意圖](https://i.imgur.com/u0zC7lX.png)\n","source":"_posts/2020-09-27-看鐵人賽學UI-UX-文字排版.md","raw":"---\ntitle: 2020-09-27-看鐵人賽學UI/UX-文字排版\ntags:\n  - UI\n  - UX\ncategories:\n  - Design\nabbrlink: 2048726292\ndate: 2020-09-27 21:09:02\n---\n今天要來介紹文字。\n<!-- more -->\n---\n參考資料：\n[The type system](https://material.io/design/typography/the-type-system.html#type-scale)\n[Understanding typography](https://material.io/design/typography/understanding-typography.html#type-properties)\n\n---\n![示意圖](https://i.imgur.com/imBOK0X.png)\n### 文字系統\n* 標題\n從H1～H6，可以挑選比較特特殊字體，來吸引使用者注意。(字體大小96px~20px)\n\n* 副標題\n字體大小必須小於標題，而且使用襯線或無襯線字體必較合適。(字體大小16px~14px)\n\n* 內文\n一樣建議用襯線或無襯線字體必較合適。(字體大小16px~14px)\n\n* 附註\n文字最小(字體大小12px~10px)\n\n### 文字排版\n> 行高必須為4的倍數\n* 可讀性\n大寫英文字母間距比較寬，理想一段文字為40～60個字\n* 文字行高\n![示意圖](https://i.imgur.com/rxj6dBF.png)\n\n* 段落間距\n段落間距應保持在字體大小的 0.75 倍至 1.25 倍之間。例如: 字體大小20sp，行高30dp，段落間距28dp。\n![示意圖](https://i.imgur.com/u0zC7lX.png)\n","slug":"2020-09-27-看鐵人賽學UI-UX-文字排版","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3m004dzqzia5ys0xez","content":"<p>今天要來介紹文字。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://material.io/design/typography/the-type-system.html#type-scale\">The type system</a><br><a href=\"https://material.io/design/typography/understanding-typography.html#type-properties\">Understanding typography</a></p>\n<hr>\n<p><img src=\"https://i.imgur.com/imBOK0X.png\" alt=\"示意圖\"></p>\n<h3 id=\"文字系統\"><a href=\"#文字系統\" class=\"headerlink\" title=\"文字系統\"></a>文字系統</h3><ul>\n<li><p>標題<br>從H1～H6，可以挑選比較特特殊字體，來吸引使用者注意。(字體大小96px~20px)</p>\n</li>\n<li><p>副標題<br>字體大小必須小於標題，而且使用襯線或無襯線字體必較合適。(字體大小16px~14px)</p>\n</li>\n<li><p>內文<br>一樣建議用襯線或無襯線字體必較合適。(字體大小16px~14px)</p>\n</li>\n<li><p>附註<br>文字最小(字體大小12px~10px)</p>\n</li>\n</ul>\n<h3 id=\"文字排版\"><a href=\"#文字排版\" class=\"headerlink\" title=\"文字排版\"></a>文字排版</h3><blockquote>\n<p>行高必須為4的倍數</p>\n</blockquote>\n<ul>\n<li><p>可讀性<br>大寫英文字母間距比較寬，理想一段文字為40～60個字</p>\n</li>\n<li><p>文字行高<br><img src=\"https://i.imgur.com/rxj6dBF.png\" alt=\"示意圖\"></p>\n</li>\n<li><p>段落間距<br>段落間距應保持在字體大小的 0.75 倍至 1.25 倍之間。例如: 字體大小20sp，行高30dp，段落間距28dp。<br><img src=\"https://i.imgur.com/u0zC7lX.png\" alt=\"示意圖\"></p>\n</li>\n</ul>\n","site":{"data":{}},"length":306,"excerpt":"<p>今天要來介紹文字。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://material.io/design/typography/the-type-system.html#type-scale\">The type system</a><br><a href=\"https://material.io/design/typography/understanding-typography.html#type-properties\">Understanding typography</a></p>\n<hr>\n<p><img src=\"https://i.imgur.com/imBOK0X.png\" alt=\"示意圖\"></p>\n<h3 id=\"文字系統\"><a href=\"#文字系統\" class=\"headerlink\" title=\"文字系統\"></a>文字系統</h3><ul>\n<li><p>標題<br>從H1～H6，可以挑選比較特特殊字體，來吸引使用者注意。(字體大小96px~20px)</p>\n</li>\n<li><p>副標題<br>字體大小必須小於標題，而且使用襯線或無襯線字體必較合適。(字體大小16px~14px)</p>\n</li>\n<li><p>內文<br>一樣建議用襯線或無襯線字體必較合適。(字體大小16px~14px)</p>\n</li>\n<li><p>附註<br>文字最小(字體大小12px~10px)</p>\n</li>\n</ul>\n<h3 id=\"文字排版\"><a href=\"#文字排版\" class=\"headerlink\" title=\"文字排版\"></a>文字排版</h3><blockquote>\n<p>行高必須為4的倍數</p>\n</blockquote>\n<ul>\n<li><p>可讀性<br>大寫英文字母間距比較寬，理想一段文字為40～60個字</p>\n</li>\n<li><p>文字行高<br><img src=\"https://i.imgur.com/rxj6dBF.png\" alt=\"示意圖\"></p>\n</li>\n<li><p>段落間距<br>段落間距應保持在字體大小的 0.75 倍至 1.25 倍之間。例如: 字體大小20sp，行高30dp，段落間距28dp。<br><img src=\"https://i.imgur.com/u0zC7lX.png\" alt=\"示意圖\"></p>\n</li>\n</ul>"},{"title":"2020-09-28-看鐵人賽學Debug-Network篇","abbrlink":3096729793,"date":"2020-09-28T15:20:02.000Z","_content":"今天學習認識Chrome面板中的ＮetWork,文章內容整理自[[Day 15] Network - Overview & Settings](https://ithelp.ithome.com.tw/articles/10245891)\n<!-- more -->\n---\n參考資料：\n[[Day 15] Network - Overview & Settings](https://ithelp.ithome.com.tw/articles/10245891)\n---\n### 整理筆記如下\n1. 預設Network Log會按照執行順序排列\n2. Preserve log用來保留`Network Log紀錄`,可以避免在畫面跳轉時清掉`Network Log紀錄`\n3. Disable cache 用來模擬第一次使用者登入\n4. Throttling 可以用來模擬低網速環境問題\n5. Import/Export HAR file 用來分析網頁效能問題\n因為下載檔案為.har格式，所以可以直接用這個網站開啟[HAR Analyzar](https://toolbox.googleapps.com/apps/har_analyzer/)\n\n","source":"_posts/2020-09-28-看鐵人賽學Debug-Network篇.md","raw":"---\ntitle: 2020-09-28-看鐵人賽學Debug-Network篇\ntags:\n  - chrome\n  - debug\ncategories:\n  - web\nabbrlink: 3096729793\ndate: 2020-09-28 23:20:02\n---\n今天學習認識Chrome面板中的ＮetWork,文章內容整理自[[Day 15] Network - Overview & Settings](https://ithelp.ithome.com.tw/articles/10245891)\n<!-- more -->\n---\n參考資料：\n[[Day 15] Network - Overview & Settings](https://ithelp.ithome.com.tw/articles/10245891)\n---\n### 整理筆記如下\n1. 預設Network Log會按照執行順序排列\n2. Preserve log用來保留`Network Log紀錄`,可以避免在畫面跳轉時清掉`Network Log紀錄`\n3. Disable cache 用來模擬第一次使用者登入\n4. Throttling 可以用來模擬低網速環境問題\n5. Import/Export HAR file 用來分析網頁效能問題\n因為下載檔案為.har格式，所以可以直接用這個網站開啟[HAR Analyzar](https://toolbox.googleapps.com/apps/har_analyzer/)\n\n","slug":"2020-09-28-看鐵人賽學Debug-Network篇","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3o004izqzicfzv2kvr","content":"<p>今天學習認識Chrome面板中的ＮetWork,文章內容整理自<a href=\"https://ithelp.ithome.com.tw/articles/10245891\">[Day 15] Network - Overview &amp; Settings</a></p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10245891\">[Day 15] Network - Overview &amp; Settings</a></p>\n<hr>\n<h3 id=\"整理筆記如下\"><a href=\"#整理筆記如下\" class=\"headerlink\" title=\"整理筆記如下\"></a>整理筆記如下</h3><ol>\n<li>預設Network Log會按照執行順序排列</li>\n<li>Preserve log用來保留<code>Network Log紀錄</code>,可以避免在畫面跳轉時清掉<code>Network Log紀錄</code></li>\n<li>Disable cache 用來模擬第一次使用者登入</li>\n<li>Throttling 可以用來模擬低網速環境問題</li>\n<li>Import/Export HAR file 用來分析網頁效能問題<br>因為下載檔案為.har格式，所以可以直接用這個網站開啟<a href=\"https://toolbox.googleapps.com/apps/har_analyzer/\">HAR Analyzar</a></li>\n</ol>\n","site":{"data":{}},"length":302,"excerpt":"<p>今天學習認識Chrome面板中的ＮetWork,文章內容整理自<a href=\"https://ithelp.ithome.com.tw/articles/10245891\">[Day 15] Network - Overview &amp; Settings</a></p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10245891\">[Day 15] Network - Overview &amp; Settings</a></p>\n<hr>\n<h3 id=\"整理筆記如下\"><a href=\"#整理筆記如下\" class=\"headerlink\" title=\"整理筆記如下\"></a>整理筆記如下</h3><ol>\n<li>預設Network Log會按照執行順序排列</li>\n<li>Preserve log用來保留<code>Network Log紀錄</code>,可以避免在畫面跳轉時清掉<code>Network Log紀錄</code></li>\n<li>Disable cache 用來模擬第一次使用者登入</li>\n<li>Throttling 可以用來模擬低網速環境問題</li>\n<li>Import/Export HAR file 用來分析網頁效能問題<br>因為下載檔案為.har格式，所以可以直接用這個網站開啟<a href=\"https://toolbox.googleapps.com/apps/har_analyzer/\">HAR Analyzar</a></li>\n</ol>"},{"title":"2020-09-29-看鐵人賽學Debug-Breakpoint篇","abbrlink":2715429133,"date":"2020-09-29T14:35:49.000Z","_content":"今天紀錄Debug-Breakpoint篇，內容整理自[[Day 12] Sources - Breakpoints](https://ithelp.ithome.com.tw/articles/10244199)\n\n<!-- more -->\n---\n參考資料：\n[[Day 12] Sources - Breakpoints](https://ithelp.ithome.com.tw/articles/10244199)\n---\n### Source斷點\n> 右鍵點擊行號可以看到其他標記\n* `Add logpoint` – 如同插入一個 console.log\n* `Add conditional breakpoint` – 可以加入條件，執行結果不如預期時才中斷\n*  `Never pause here` – 可用來跳過 debugger\n\n1. `logpoint`,可以直接在Source上修改程式且重整夜還是會保留。\n\n### DOM斷點\n> 直接右鍵點擊可以看到三種斷點\n* Subtree modifications – 該節點內的發生變化，如子節點的新增或刪除\n* Attribute modifications – 節點本身的 attribute 有新增、刪除、修改\n* Node removal – 該節點被移除，同時 DOM 斷點也會消失。\n\n### EventListener \n綁定事件如:Mouseleave、keydown。操作方法可以參考資料來源。\n\n### Exception\n出現錯誤時暫停。\n目的：能在錯誤出現的當下，檢查是否有不預期的錯誤發生。\n\n","source":"_posts/2020-09-29-看鐵人賽學Debug-Breakpoint篇.md","raw":"---\ntitle: 2020-09-29-看鐵人賽學Debug-Breakpoint篇\ntags:\n  - chrome\n  - debug\ncategories:\n  - web\nabbrlink: 2715429133\ndate: 2020-09-29 22:35:49\n---\n今天紀錄Debug-Breakpoint篇，內容整理自[[Day 12] Sources - Breakpoints](https://ithelp.ithome.com.tw/articles/10244199)\n\n<!-- more -->\n---\n參考資料：\n[[Day 12] Sources - Breakpoints](https://ithelp.ithome.com.tw/articles/10244199)\n---\n### Source斷點\n> 右鍵點擊行號可以看到其他標記\n* `Add logpoint` – 如同插入一個 console.log\n* `Add conditional breakpoint` – 可以加入條件，執行結果不如預期時才中斷\n*  `Never pause here` – 可用來跳過 debugger\n\n1. `logpoint`,可以直接在Source上修改程式且重整夜還是會保留。\n\n### DOM斷點\n> 直接右鍵點擊可以看到三種斷點\n* Subtree modifications – 該節點內的發生變化，如子節點的新增或刪除\n* Attribute modifications – 節點本身的 attribute 有新增、刪除、修改\n* Node removal – 該節點被移除，同時 DOM 斷點也會消失。\n\n### EventListener \n綁定事件如:Mouseleave、keydown。操作方法可以參考資料來源。\n\n### Exception\n出現錯誤時暫停。\n目的：能在錯誤出現的當下，檢查是否有不預期的錯誤發生。\n\n","slug":"2020-09-29-看鐵人賽學Debug-Breakpoint篇","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3p004lzqzi22185h65","content":"<p>今天紀錄Debug-Breakpoint篇，內容整理自<a href=\"https://ithelp.ithome.com.tw/articles/10244199\">[Day 12] Sources - Breakpoints</a></p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10244199\">[Day 12] Sources - Breakpoints</a></p>\n<hr>\n<h3 id=\"Source斷點\"><a href=\"#Source斷點\" class=\"headerlink\" title=\"Source斷點\"></a>Source斷點</h3><blockquote>\n<p>右鍵點擊行號可以看到其他標記</p>\n</blockquote>\n<ul>\n<li><code>Add logpoint</code> – 如同插入一個 console.log</li>\n<li><code>Add conditional breakpoint</code> – 可以加入條件，執行結果不如預期時才中斷</li>\n<li><code>Never pause here</code> – 可用來跳過 debugger</li>\n</ul>\n<ol>\n<li><code>logpoint</code>,可以直接在Source上修改程式且重整夜還是會保留。</li>\n</ol>\n<h3 id=\"DOM斷點\"><a href=\"#DOM斷點\" class=\"headerlink\" title=\"DOM斷點\"></a>DOM斷點</h3><blockquote>\n<p>直接右鍵點擊可以看到三種斷點</p>\n</blockquote>\n<ul>\n<li>Subtree modifications – 該節點內的發生變化，如子節點的新增或刪除</li>\n<li>Attribute modifications – 節點本身的 attribute 有新增、刪除、修改</li>\n<li>Node removal – 該節點被移除，同時 DOM 斷點也會消失。</li>\n</ul>\n<h3 id=\"EventListener\"><a href=\"#EventListener\" class=\"headerlink\" title=\"EventListener\"></a>EventListener</h3><p>綁定事件如:Mouseleave、keydown。操作方法可以參考資料來源。</p>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><p>出現錯誤時暫停。<br>目的：能在錯誤出現的當下，檢查是否有不預期的錯誤發生。</p>\n","site":{"data":{}},"length":474,"excerpt":"<p>今天紀錄Debug-Breakpoint篇，內容整理自<a href=\"https://ithelp.ithome.com.tw/articles/10244199\">[Day 12] Sources - Breakpoints</a></p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10244199\">[Day 12] Sources - Breakpoints</a></p>\n<hr>\n<h3 id=\"Source斷點\"><a href=\"#Source斷點\" class=\"headerlink\" title=\"Source斷點\"></a>Source斷點</h3><blockquote>\n<p>右鍵點擊行號可以看到其他標記</p>\n</blockquote>\n<ul>\n<li><code>Add logpoint</code> – 如同插入一個 console.log</li>\n<li><code>Add conditional breakpoint</code> – 可以加入條件，執行結果不如預期時才中斷</li>\n<li><code>Never pause here</code> – 可用來跳過 debugger</li>\n</ul>\n<ol>\n<li><code>logpoint</code>,可以直接在Source上修改程式且重整夜還是會保留。</li>\n</ol>\n<h3 id=\"DOM斷點\"><a href=\"#DOM斷點\" class=\"headerlink\" title=\"DOM斷點\"></a>DOM斷點</h3><blockquote>\n<p>直接右鍵點擊可以看到三種斷點</p>\n</blockquote>\n<ul>\n<li>Subtree modifications – 該節點內的發生變化，如子節點的新增或刪除</li>\n<li>Attribute modifications – 節點本身的 attribute 有新增、刪除、修改</li>\n<li>Node removal – 該節點被移除，同時 DOM 斷點也會消失。</li>\n</ul>\n<h3 id=\"EventListener\"><a href=\"#EventListener\" class=\"headerlink\" title=\"EventListener\"></a>EventListener</h3><p>綁定事件如:Mouseleave、keydown。操作方法可以參考資料來源。</p>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><p>出現錯誤時暫停。<br>目的：能在錯誤出現的當下，檢查是否有不預期的錯誤發生。</p>"},{"title":"2020-09-30-看鐵人賽學Debug-Network-Filter篇","abbrlink":2885820487,"date":"2020-09-30T13:22:27.000Z","_content":"今天筆記內容整理自[[Day 16] Network - Filter & Search Requests](https://ithelp.ithome.com.tw/articles/10246590)\n<!-- more -->\n---\n參考資料：\n[[Day 16] Network - Filter & Search Requests](https://ithelp.ithome.com.tw/articles/10246590)\n---\n### Filter\nFilter可以幫助我們過濾過多的request，快速找到需要的請求！\n\n#### By Properties\n![圖示](https://i.imgur.com/o57rt8L.png)\n非常強大！最前方加`-`，就是剔除意思！\n> 常見條件如下\n* domain\n* is\n* larger-than\n* method\n* status-code\n* Cookie系列 如 `set-cookie-domain`\n\n\n\n","source":"_posts/2020-09-30-看鐵人賽學Debug-Network-Filter篇.md","raw":"---\ntitle: 2020-09-30-看鐵人賽學Debug-Network-Filter篇\ntags:\n  - chrome\n  - debug\ncategories:\n  - web\nabbrlink: 2885820487\ndate: 2020-09-30 21:22:27\n---\n今天筆記內容整理自[[Day 16] Network - Filter & Search Requests](https://ithelp.ithome.com.tw/articles/10246590)\n<!-- more -->\n---\n參考資料：\n[[Day 16] Network - Filter & Search Requests](https://ithelp.ithome.com.tw/articles/10246590)\n---\n### Filter\nFilter可以幫助我們過濾過多的request，快速找到需要的請求！\n\n#### By Properties\n![圖示](https://i.imgur.com/o57rt8L.png)\n非常強大！最前方加`-`，就是剔除意思！\n> 常見條件如下\n* domain\n* is\n* larger-than\n* method\n* status-code\n* Cookie系列 如 `set-cookie-domain`\n\n\n\n","slug":"2020-09-30-看鐵人賽學Debug-Network-Filter篇","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3r004pzqzi1189hhua","content":"<p>今天筆記內容整理自<a href=\"https://ithelp.ithome.com.tw/articles/10246590\">[Day 16] Network - Filter &amp; Search Requests</a></p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10246590\">[Day 16] Network - Filter &amp; Search Requests</a></p>\n<hr>\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter可以幫助我們過濾過多的request，快速找到需要的請求！</p>\n<h4 id=\"By-Properties\"><a href=\"#By-Properties\" class=\"headerlink\" title=\"By Properties\"></a>By Properties</h4><p><img src=\"https://i.imgur.com/o57rt8L.png\" alt=\"圖示\"><br>非常強大！最前方加<code>-</code>，就是剔除意思！</p>\n<blockquote>\n<p>常見條件如下</p>\n</blockquote>\n<ul>\n<li>domain</li>\n<li>is</li>\n<li>larger-than</li>\n<li>method</li>\n<li>status-code</li>\n<li>Cookie系列 如 <code>set-cookie-domain</code></li>\n</ul>\n","site":{"data":{}},"length":233,"excerpt":"<p>今天筆記內容整理自<a href=\"https://ithelp.ithome.com.tw/articles/10246590\">[Day 16] Network - Filter &amp; Search Requests</a></p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10246590\">[Day 16] Network - Filter &amp; Search Requests</a></p>\n<hr>\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>Filter可以幫助我們過濾過多的request，快速找到需要的請求！</p>\n<h4 id=\"By-Properties\"><a href=\"#By-Properties\" class=\"headerlink\" title=\"By Properties\"></a>By Properties</h4><p><img src=\"https://i.imgur.com/o57rt8L.png\" alt=\"圖示\"><br>非常強大！最前方加<code>-</code>，就是剔除意思！</p>\n<blockquote>\n<p>常見條件如下</p>\n</blockquote>\n<ul>\n<li>domain</li>\n<li>is</li>\n<li>larger-than</li>\n<li>method</li>\n<li>status-code</li>\n<li>Cookie系列 如 <code>set-cookie-domain</code></li>\n</ul>"},{"title":"2020-10-03-看鐵人賽學AJAX-四種常用HTTP請求方法介紹","abbrlink":3740234544,"date":"2020-10-03T13:23:37.000Z","_content":"本篇文章將介紹AJAX-四種常用HTTP請求方法介紹。\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[AJAX 完整解說系列：基礎觀念](https://ithelp.ithome.com.tw/articles/10246826)\n[AJAX 完整解說系列：新增、更新、刪除(POST、PATCH、DELETE)](https://ithelp.ithome.com.tw/articles/10247342)\n---\n前言：\nAJAX技術幫助我們可以不用重新整理網頁，就能發送Request給後端完成資料非同步請求的目的。\n而`AJAX`通常會需要用到下列幾個部分：前端網頁、後端(伺服器)、資料庫。\n\n常見請求方法：\n* GET(不會更動資料庫，僅會回傳前端網頁請求)\n* POST(通常用來新增資料到資料庫，常用於新增、登入等功能)\n* PATCH(用來部分更新資料)\n* PUT(用來完整更新)\n* DELETE(刪除資料)\n\n> 測試API：[jsonplaceholder](https://jsonplaceholder.typicode.com/guide/)\n\n\n\n","source":"_posts/2020-10-03-看鐵人賽學AJAX-四種常用HTTP請求方法.md","raw":"---\ntitle: 2020-10-03-看鐵人賽學AJAX-四種常用HTTP請求方法介紹\ntags:\n  - AJAX\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 3740234544\ndate: 2020-10-03 21:23:37\n---\n本篇文章將介紹AJAX-四種常用HTTP請求方法介紹。\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[AJAX 完整解說系列：基礎觀念](https://ithelp.ithome.com.tw/articles/10246826)\n[AJAX 完整解說系列：新增、更新、刪除(POST、PATCH、DELETE)](https://ithelp.ithome.com.tw/articles/10247342)\n---\n前言：\nAJAX技術幫助我們可以不用重新整理網頁，就能發送Request給後端完成資料非同步請求的目的。\n而`AJAX`通常會需要用到下列幾個部分：前端網頁、後端(伺服器)、資料庫。\n\n常見請求方法：\n* GET(不會更動資料庫，僅會回傳前端網頁請求)\n* POST(通常用來新增資料到資料庫，常用於新增、登入等功能)\n* PATCH(用來部分更新資料)\n* PUT(用來完整更新)\n* DELETE(刪除資料)\n\n> 測試API：[jsonplaceholder](https://jsonplaceholder.typicode.com/guide/)\n\n\n\n","slug":"2020-10-03-看鐵人賽學AJAX-四種常用HTTP請求方法","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3s004rzqzi99xq6ky7","content":"<p>本篇文章將介紹AJAX-四種常用HTTP請求方法介紹。</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10246826\">AJAX 完整解說系列：基礎觀念</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10247342\">AJAX 完整解說系列：新增、更新、刪除(POST、PATCH、DELETE)</a></p>\n<hr>\n<p>前言：<br>AJAX技術幫助我們可以不用重新整理網頁，就能發送Request給後端完成資料非同步請求的目的。<br>而<code>AJAX</code>通常會需要用到下列幾個部分：前端網頁、後端(伺服器)、資料庫。</p>\n<p>常見請求方法：</p>\n<ul>\n<li>GET(不會更動資料庫，僅會回傳前端網頁請求)</li>\n<li>POST(通常用來新增資料到資料庫，常用於新增、登入等功能)</li>\n<li>PATCH(用來部分更新資料)</li>\n<li>PUT(用來完整更新)</li>\n<li>DELETE(刪除資料)</li>\n</ul>\n<blockquote>\n<p>測試API：<a href=\"https://jsonplaceholder.typicode.com/guide/\">jsonplaceholder</a></p>\n</blockquote>\n","site":{"data":{}},"length":351,"excerpt":"<p>本篇文章將介紹AJAX-四種常用HTTP請求方法介紹。</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10246826\">AJAX 完整解說系列：基礎觀念</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10247342\">AJAX 完整解說系列：新增、更新、刪除(POST、PATCH、DELETE)</a></p>\n<hr>\n<p>前言：<br>AJAX技術幫助我們可以不用重新整理網頁，就能發送Request給後端完成資料非同步請求的目的。<br>而<code>AJAX</code>通常會需要用到下列幾個部分：前端網頁、後端(伺服器)、資料庫。</p>\n<p>常見請求方法：</p>\n<ul>\n<li>GET(不會更動資料庫，僅會回傳前端網頁請求)</li>\n<li>POST(通常用來新增資料到資料庫，常用於新增、登入等功能)</li>\n<li>PATCH(用來部分更新資料)</li>\n<li>PUT(用來完整更新)</li>\n<li>DELETE(刪除資料)</li>\n</ul>\n<blockquote>\n<p>測試API：<a href=\"https://jsonplaceholder.typicode.com/guide/\">jsonplaceholder</a></p>\n</blockquote>"},{"title":"2020-10-04-看鐵人賽學AJAX-用Chrome Dev觀察Network運作流程","abbrlink":1235948296,"date":"2020-10-04T03:45:32.000Z","_content":"今天我們將透過Chrome開發者工具來了解非同步請求背後發生什麼事。就讓我們看下去吧！\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[AJAX 完整解說系列：使用 Chrome Devtools 檢視請求及回應](https://ithelp.ithome.com.tw/articles/10247837)\n[API來源](https://jsonplaceholder.typicode.com)\n[transferred-over-network-size](https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size)\n---\n前言：\n首先，打開[連結](https://cdpn.io/chunwen/debug/XWdvMao/ZoMBazDPyvOk)，再把開發者工具打開後畫面如下：\n![圖示](https://i.imgur.com/BUkuVht.png)\n\n> 題外話：\n我們可以看到本次請求，下方顯示`Transfer network`是321B，而`Resource`卻只有83B。\n看到時滿臉疑問，傳輸時檔案不是會被壓縮大小嗎？怎麼會比原始資料大呢？因此，找了[文章](https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size)才發現\n原來：\n1. `Transfer network` 計算大小是以整個請求(包含 url, request headers, request body, response headers and response body)大小加總計算\n2. `Resource`只會計算接受到的`Response body`中的`Content-length`\n\n接下來點選XHR連結後，我們可以看到下面幾項類別。\n![圖示](https://i.imgur.com/rnI6q59.png)\n1. Headers: 請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。\n2. Preview, Response：兩者資訊相同，只是Preview比較好閱讀而已。\n3. Timing：本次請求至回應所耗費的時間。\n4. Cookie：本次請求、回應相關的 Cookie 內容。\n\n### Headers\n請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。\n\n#### General\n請求的描述內容，如 Request URL、Request Method 、 Status Code\n\n#### Response Headers\n回應表頭，由伺服器回傳至瀏覽器端的表頭\n* access-control-***: 跨網域資源，包含是否允許跨網域存取、驗證等資訊。\n* content-encoding: 後端回應的壓縮檔案方式如: br，代表 Brotli 壓縮格式，常見於壓縮文字檔。\n* content-type: 後端回傳的資料格式，現在多為 `application/json; charset=utf-8`\n* set-cookie:後端寫入瀏覽器端的 cookie資訊。\n\n#### Request Headers\n請求表頭，請求的內容必須符合後端伺服器接受格式。如傳送資料格式、方法等。\n> 簡單來說就是必須照 API 文件進行\n* method: 請求方法如：POST、 GET 、 PATCH\n* accept: 提供給後端了解前端所能接受的資料類型\n* user-agent: 提供給後端發出請求的瀏覽器資訊。如行動版或桌機版\n* authorization: 驗證資訊。如後台新增產品時就可以夾帶此資訊。\n* accept-encoding: 告訴後端伺服器能接受的壓縮格式如：gzip, deflate, br\n\n#### Request Payload、Query String Parameter\n當請求時需要帶入更多資源，如上傳資料、取得特定索引時，就會利用到 Request Payload、Query String Parameters。\n\n### Timing\n![圖示](https://i.imgur.com/hgTBDR8.png)\n網頁開啟後，前端網頁發送請求到瀏覽器接受後端回應資料時間。\n* Connection Start: \n  1. 伺服器尚未接受到請求，因此影響這段時間為`網路服務`、`電信商`\n* Request/Response: \n  1. Waiting (TTFB): 伺服器接收到第一個字節直到伺服器產生回應的時間，這段取決於`伺服器的距離`、`處理效能`等等。\n  2. Content Download: 資源下載的所花費時間，取決於用戶、伺服器兩者的頻寬、距離等因素。\n","source":"_posts/2020-10-04-看鐵人賽學AJAX-用Chrome-Dev觀察Network運作流程.md","raw":"---\ntitle: 2020-10-04-看鐵人賽學AJAX-用Chrome Dev觀察Network運作流程\ntags:\n  - AJAX\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 1235948296\ndate: 2020-10-04 11:45:32\n---\n今天我們將透過Chrome開發者工具來了解非同步請求背後發生什麼事。就讓我們看下去吧！\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[AJAX 完整解說系列：使用 Chrome Devtools 檢視請求及回應](https://ithelp.ithome.com.tw/articles/10247837)\n[API來源](https://jsonplaceholder.typicode.com)\n[transferred-over-network-size](https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size)\n---\n前言：\n首先，打開[連結](https://cdpn.io/chunwen/debug/XWdvMao/ZoMBazDPyvOk)，再把開發者工具打開後畫面如下：\n![圖示](https://i.imgur.com/BUkuVht.png)\n\n> 題外話：\n我們可以看到本次請求，下方顯示`Transfer network`是321B，而`Resource`卻只有83B。\n看到時滿臉疑問，傳輸時檔案不是會被壓縮大小嗎？怎麼會比原始資料大呢？因此，找了[文章](https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size)才發現\n原來：\n1. `Transfer network` 計算大小是以整個請求(包含 url, request headers, request body, response headers and response body)大小加總計算\n2. `Resource`只會計算接受到的`Response body`中的`Content-length`\n\n接下來點選XHR連結後，我們可以看到下面幾項類別。\n![圖示](https://i.imgur.com/rnI6q59.png)\n1. Headers: 請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。\n2. Preview, Response：兩者資訊相同，只是Preview比較好閱讀而已。\n3. Timing：本次請求至回應所耗費的時間。\n4. Cookie：本次請求、回應相關的 Cookie 內容。\n\n### Headers\n請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。\n\n#### General\n請求的描述內容，如 Request URL、Request Method 、 Status Code\n\n#### Response Headers\n回應表頭，由伺服器回傳至瀏覽器端的表頭\n* access-control-***: 跨網域資源，包含是否允許跨網域存取、驗證等資訊。\n* content-encoding: 後端回應的壓縮檔案方式如: br，代表 Brotli 壓縮格式，常見於壓縮文字檔。\n* content-type: 後端回傳的資料格式，現在多為 `application/json; charset=utf-8`\n* set-cookie:後端寫入瀏覽器端的 cookie資訊。\n\n#### Request Headers\n請求表頭，請求的內容必須符合後端伺服器接受格式。如傳送資料格式、方法等。\n> 簡單來說就是必須照 API 文件進行\n* method: 請求方法如：POST、 GET 、 PATCH\n* accept: 提供給後端了解前端所能接受的資料類型\n* user-agent: 提供給後端發出請求的瀏覽器資訊。如行動版或桌機版\n* authorization: 驗證資訊。如後台新增產品時就可以夾帶此資訊。\n* accept-encoding: 告訴後端伺服器能接受的壓縮格式如：gzip, deflate, br\n\n#### Request Payload、Query String Parameter\n當請求時需要帶入更多資源，如上傳資料、取得特定索引時，就會利用到 Request Payload、Query String Parameters。\n\n### Timing\n![圖示](https://i.imgur.com/hgTBDR8.png)\n網頁開啟後，前端網頁發送請求到瀏覽器接受後端回應資料時間。\n* Connection Start: \n  1. 伺服器尚未接受到請求，因此影響這段時間為`網路服務`、`電信商`\n* Request/Response: \n  1. Waiting (TTFB): 伺服器接收到第一個字節直到伺服器產生回應的時間，這段取決於`伺服器的距離`、`處理效能`等等。\n  2. Content Download: 資源下載的所花費時間，取決於用戶、伺服器兩者的頻寬、距離等因素。\n","slug":"2020-10-04-看鐵人賽學AJAX-用Chrome-Dev觀察Network運作流程","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3t004uzqzi1lo03em1","content":"<p>今天我們將透過Chrome開發者工具來了解非同步請求背後發生什麼事。就讓我們看下去吧！</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10247837\">AJAX 完整解說系列：使用 Chrome Devtools 檢視請求及回應</a><br><a href=\"https://jsonplaceholder.typicode.com\">API來源</a><br><a href=\"https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size\">transferred-over-network-size</a></p>\n<hr>\n<p>前言：<br>首先，打開<a href=\"https://cdpn.io/chunwen/debug/XWdvMao/ZoMBazDPyvOk\">連結</a>，再把開發者工具打開後畫面如下：<br><img src=\"https://i.imgur.com/BUkuVht.png\" alt=\"圖示\"></p>\n<blockquote>\n<p>題外話：<br>我們可以看到本次請求，下方顯示<code>Transfer network</code>是321B，而<code>Resource</code>卻只有83B。<br>看到時滿臉疑問，傳輸時檔案不是會被壓縮大小嗎？怎麼會比原始資料大呢？因此，找了<a href=\"https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size\">文章</a>才發現<br>原來：</p>\n</blockquote>\n<ol>\n<li><code>Transfer network</code> 計算大小是以整個請求(包含 url, request headers, request body, response headers and response body)大小加總計算</li>\n<li><code>Resource</code>只會計算接受到的<code>Response body</code>中的<code>Content-length</code></li>\n</ol>\n<p>接下來點選XHR連結後，我們可以看到下面幾項類別。<br><img src=\"https://i.imgur.com/rnI6q59.png\" alt=\"圖示\"></p>\n<ol>\n<li>Headers: 請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。</li>\n<li>Preview, Response：兩者資訊相同，只是Preview比較好閱讀而已。</li>\n<li>Timing：本次請求至回應所耗費的時間。</li>\n<li>Cookie：本次請求、回應相關的 Cookie 內容。</li>\n</ol>\n<h3 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h3><p>請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。</p>\n<h4 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h4><p>請求的描述內容，如 Request URL、Request Method 、 Status Code</p>\n<h4 id=\"Response-Headers\"><a href=\"#Response-Headers\" class=\"headerlink\" title=\"Response Headers\"></a>Response Headers</h4><p>回應表頭，由伺服器回傳至瀏覽器端的表頭</p>\n<ul>\n<li>access-control-***: 跨網域資源，包含是否允許跨網域存取、驗證等資訊。</li>\n<li>content-encoding: 後端回應的壓縮檔案方式如: br，代表 Brotli 壓縮格式，常見於壓縮文字檔。</li>\n<li>content-type: 後端回傳的資料格式，現在多為 <code>application/json; charset=utf-8</code></li>\n<li>set-cookie:後端寫入瀏覽器端的 cookie資訊。</li>\n</ul>\n<h4 id=\"Request-Headers\"><a href=\"#Request-Headers\" class=\"headerlink\" title=\"Request Headers\"></a>Request Headers</h4><p>請求表頭，請求的內容必須符合後端伺服器接受格式。如傳送資料格式、方法等。</p>\n<blockquote>\n<p>簡單來說就是必須照 API 文件進行</p>\n</blockquote>\n<ul>\n<li>method: 請求方法如：POST、 GET 、 PATCH</li>\n<li>accept: 提供給後端了解前端所能接受的資料類型</li>\n<li>user-agent: 提供給後端發出請求的瀏覽器資訊。如行動版或桌機版</li>\n<li>authorization: 驗證資訊。如後台新增產品時就可以夾帶此資訊。</li>\n<li>accept-encoding: 告訴後端伺服器能接受的壓縮格式如：gzip, deflate, br</li>\n</ul>\n<h4 id=\"Request-Payload、Query-String-Parameter\"><a href=\"#Request-Payload、Query-String-Parameter\" class=\"headerlink\" title=\"Request Payload、Query String Parameter\"></a>Request Payload、Query String Parameter</h4><p>當請求時需要帶入更多資源，如上傳資料、取得特定索引時，就會利用到 Request Payload、Query String Parameters。</p>\n<h3 id=\"Timing\"><a href=\"#Timing\" class=\"headerlink\" title=\"Timing\"></a>Timing</h3><p><img src=\"https://i.imgur.com/hgTBDR8.png\" alt=\"圖示\"><br>網頁開啟後，前端網頁發送請求到瀏覽器接受後端回應資料時間。</p>\n<ul>\n<li>Connection Start: <ol>\n<li>伺服器尚未接受到請求，因此影響這段時間為<code>網路服務</code>、<code>電信商</code></li>\n</ol>\n</li>\n<li>Request/Response: <ol>\n<li>Waiting (TTFB): 伺服器接收到第一個字節直到伺服器產生回應的時間，這段取決於<code>伺服器的距離</code>、<code>處理效能</code>等等。</li>\n<li>Content Download: 資源下載的所花費時間，取決於用戶、伺服器兩者的頻寬、距離等因素。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"length":1464,"excerpt":"<p>今天我們將透過Chrome開發者工具來了解非同步請求背後發生什麼事。就讓我們看下去吧！</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10247837\">AJAX 完整解說系列：使用 Chrome Devtools 檢視請求及回應</a><br><a href=\"https://jsonplaceholder.typicode.com\">API來源</a><br><a href=\"https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size\">transferred-over-network-size</a></p>\n<hr>\n<p>前言：<br>首先，打開<a href=\"https://cdpn.io/chunwen/debug/XWdvMao/ZoMBazDPyvOk\">連結</a>，再把開發者工具打開後畫面如下：<br><img src=\"https://i.imgur.com/BUkuVht.png\" alt=\"圖示\"></p>\n<blockquote>\n<p>題外話：<br>我們可以看到本次請求，下方顯示<code>Transfer network</code>是321B，而<code>Resource</code>卻只有83B。<br>看到時滿臉疑問，傳輸時檔案不是會被壓縮大小嗎？怎麼會比原始資料大呢？因此，找了<a href=\"https://stackoverflow.com/questions/62184624/transferred-over-network-size-larger-than-resource-size\">文章</a>才發現<br>原來：</p>\n</blockquote>\n<ol>\n<li><code>Transfer network</code> 計算大小是以整個請求(包含 url, request headers, request body, response headers and response body)大小加總計算</li>\n<li><code>Resource</code>只會計算接受到的<code>Response body</code>中的<code>Content-length</code></li>\n</ol>\n<p>接下來點選XHR連結後，我們可以看到下面幾項類別。<br><img src=\"https://i.imgur.com/rnI6q59.png\" alt=\"圖示\"></p>\n<ol>\n<li>Headers: 請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。</li>\n<li>Preview, Response：兩者資訊相同，只是Preview比較好閱讀而已。</li>\n<li>Timing：本次請求至回應所耗費的時間。</li>\n<li>Cookie：本次請求、回應相關的 Cookie 內容。</li>\n</ol>\n<h3 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h3><p>請求及回應的標頭。Headers 所挾帶這些資訊，不管是瀏覽器、伺服器都會有一份。</p>\n<h4 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h4><p>請求的描述內容，如 Request URL、Request Method 、 Status Code</p>\n<h4 id=\"Response-Headers\"><a href=\"#Response-Headers\" class=\"headerlink\" title=\"Response Headers\"></a>Response Headers</h4><p>回應表頭，由伺服器回傳至瀏覽器端的表頭</p>\n<ul>\n<li>access-control-***: 跨網域資源，包含是否允許跨網域存取、驗證等資訊。</li>\n<li>content-encoding: 後端回應的壓縮檔案方式如: br，代表 Brotli 壓縮格式，常見於壓縮文字檔。</li>\n<li>content-type: 後端回傳的資料格式，現在多為 <code>application/json; charset=utf-8</code></li>\n<li>set-cookie:後端寫入瀏覽器端的 cookie資訊。</li>\n</ul>\n<h4 id=\"Request-Headers\"><a href=\"#Request-Headers\" class=\"headerlink\" title=\"Request Headers\"></a>Request Headers</h4><p>請求表頭，請求的內容必須符合後端伺服器接受格式。如傳送資料格式、方法等。</p>\n<blockquote>\n<p>簡單來說就是必須照 API 文件進行</p>\n</blockquote>\n<ul>\n<li>method: 請求方法如：POST、 GET 、 PATCH</li>\n<li>accept: 提供給後端了解前端所能接受的資料類型</li>\n<li>user-agent: 提供給後端發出請求的瀏覽器資訊。如行動版或桌機版</li>\n<li>authorization: 驗證資訊。如後台新增產品時就可以夾帶此資訊。</li>\n<li>accept-encoding: 告訴後端伺服器能接受的壓縮格式如：gzip, deflate, br</li>\n</ul>\n<h4 id=\"Request-Payload、Query-String-Parameter\"><a href=\"#Request-Payload、Query-String-Parameter\" class=\"headerlink\" title=\"Request Payload、Query String Parameter\"></a>Request Payload、Query String Parameter</h4><p>當請求時需要帶入更多資源，如上傳資料、取得特定索引時，就會利用到 Request Payload、Query String Parameters。</p>\n<h3 id=\"Timing\"><a href=\"#Timing\" class=\"headerlink\" title=\"Timing\"></a>Timing</h3><p><img src=\"https://i.imgur.com/hgTBDR8.png\" alt=\"圖示\"><br>網頁開啟後，前端網頁發送請求到瀏覽器接受後端回應資料時間。</p>\n<ul>\n<li>Connection Start: <ol>\n<li>伺服器尚未接受到請求，因此影響這段時間為<code>網路服務</code>、<code>電信商</code></li>\n</ol>\n</li>\n<li>Request/Response: <ol>\n<li>Waiting (TTFB): 伺服器接收到第一個字節直到伺服器產生回應的時間，這段取決於<code>伺服器的距離</code>、<code>處理效能</code>等等。</li>\n<li>Content Download: 資源下載的所花費時間，取決於用戶、伺服器兩者的頻寬、距離等因素。</li>\n</ol>\n</li>\n</ul>"},{"title":"2020-10-05-看鐵人賽學AJAX-HTTP狀態碼除錯","abbrlink":2499877110,"date":"2020-10-05T13:19:09.000Z","_content":"今天透過HTTP狀態碼，幫助我們快速找到Bug。\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[AJAX 完整解說系列：搞懂 HTTP 狀態碼，流程錯誤正確解](https://ithelp.ithome.com.tw/articles/10248342)\n[HTTP 狀態碼 (Status Codes)](https://notfalse.net/48/http-status-codes)\n---\n前言：\n根據卡斯伯老師文章提到，使用AJAX串接前後端資料時，如果發生一些錯誤，我們可以透過Network狀態碼了解錯誤地方。\n而造成AJAX錯誤原因主要有以下幾點\n* 流程與設計不同\n* 資料格式不符合\n* 連線失敗、網路問題\n* 程式碼寫錯\n\n### 狀態碼可以分為下面五類\n* 100 ~ 199：資訊回應\n* 200 ~ 299：成功回應\n* 300 ~ 399：重新導向，轉址的方法\n* 400 ~ 499：用戶端的錯誤\n* 500 ~ 599：伺服器端錯誤\n\n### 常見錯誤狀態碼\n#### 400 ~ 499:用戶端錯誤\n這部份通常可以由前端網頁解決。\n401、403 沒有權限\n404 找不到路徑\n405 方法不被允許\n414 URL過長\n422 請求正確，但可能不符合操作流程\n429 請求次數過多\n\n#### 500 ~ 599:伺服器端錯誤\n500 後端不可預期的錯誤\n\n\n\n\n","source":"_posts/2020-10-05-看鐵人賽學AJAX-HTTP狀態碼除錯.md","raw":"---\ntitle: 2020-10-05-看鐵人賽學AJAX-HTTP狀態碼除錯\ntags:\n  - AJAX\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 2499877110\ndate: 2020-10-05 21:19:09\n---\n今天透過HTTP狀態碼，幫助我們快速找到Bug。\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[AJAX 完整解說系列：搞懂 HTTP 狀態碼，流程錯誤正確解](https://ithelp.ithome.com.tw/articles/10248342)\n[HTTP 狀態碼 (Status Codes)](https://notfalse.net/48/http-status-codes)\n---\n前言：\n根據卡斯伯老師文章提到，使用AJAX串接前後端資料時，如果發生一些錯誤，我們可以透過Network狀態碼了解錯誤地方。\n而造成AJAX錯誤原因主要有以下幾點\n* 流程與設計不同\n* 資料格式不符合\n* 連線失敗、網路問題\n* 程式碼寫錯\n\n### 狀態碼可以分為下面五類\n* 100 ~ 199：資訊回應\n* 200 ~ 299：成功回應\n* 300 ~ 399：重新導向，轉址的方法\n* 400 ~ 499：用戶端的錯誤\n* 500 ~ 599：伺服器端錯誤\n\n### 常見錯誤狀態碼\n#### 400 ~ 499:用戶端錯誤\n這部份通常可以由前端網頁解決。\n401、403 沒有權限\n404 找不到路徑\n405 方法不被允許\n414 URL過長\n422 請求正確，但可能不符合操作流程\n429 請求次數過多\n\n#### 500 ~ 599:伺服器端錯誤\n500 後端不可預期的錯誤\n\n\n\n\n","slug":"2020-10-05-看鐵人賽學AJAX-HTTP狀態碼除錯","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3w004yzqzi92hebgne","content":"<p>今天透過HTTP狀態碼，幫助我們快速找到Bug。</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10248342\">AJAX 完整解說系列：搞懂 HTTP 狀態碼，流程錯誤正確解</a><br><a href=\"https://notfalse.net/48/http-status-codes\">HTTP 狀態碼 (Status Codes)</a></p>\n<hr>\n<p>前言：<br>根據卡斯伯老師文章提到，使用AJAX串接前後端資料時，如果發生一些錯誤，我們可以透過Network狀態碼了解錯誤地方。<br>而造成AJAX錯誤原因主要有以下幾點</p>\n<ul>\n<li>流程與設計不同</li>\n<li>資料格式不符合</li>\n<li>連線失敗、網路問題</li>\n<li>程式碼寫錯</li>\n</ul>\n<h3 id=\"狀態碼可以分為下面五類\"><a href=\"#狀態碼可以分為下面五類\" class=\"headerlink\" title=\"狀態碼可以分為下面五類\"></a>狀態碼可以分為下面五類</h3><ul>\n<li>100 ~ 199：資訊回應</li>\n<li>200 ~ 299：成功回應</li>\n<li>300 ~ 399：重新導向，轉址的方法</li>\n<li>400 ~ 499：用戶端的錯誤</li>\n<li>500 ~ 599：伺服器端錯誤</li>\n</ul>\n<h3 id=\"常見錯誤狀態碼\"><a href=\"#常見錯誤狀態碼\" class=\"headerlink\" title=\"常見錯誤狀態碼\"></a>常見錯誤狀態碼</h3><h4 id=\"400-499-用戶端錯誤\"><a href=\"#400-499-用戶端錯誤\" class=\"headerlink\" title=\"400 ~ 499:用戶端錯誤\"></a>400 ~ 499:用戶端錯誤</h4><p>這部份通常可以由前端網頁解決。<br>401、403 沒有權限<br>404 找不到路徑<br>405 方法不被允許<br>414 URL過長<br>422 請求正確，但可能不符合操作流程<br>429 請求次數過多</p>\n<h4 id=\"500-599-伺服器端錯誤\"><a href=\"#500-599-伺服器端錯誤\" class=\"headerlink\" title=\"500 ~ 599:伺服器端錯誤\"></a>500 ~ 599:伺服器端錯誤</h4><p>500 後端不可預期的錯誤</p>\n","site":{"data":{}},"length":450,"excerpt":"<p>今天透過HTTP狀態碼，幫助我們快速找到Bug。</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10248342\">AJAX 完整解說系列：搞懂 HTTP 狀態碼，流程錯誤正確解</a><br><a href=\"https://notfalse.net/48/http-status-codes\">HTTP 狀態碼 (Status Codes)</a></p>\n<hr>\n<p>前言：<br>根據卡斯伯老師文章提到，使用AJAX串接前後端資料時，如果發生一些錯誤，我們可以透過Network狀態碼了解錯誤地方。<br>而造成AJAX錯誤原因主要有以下幾點</p>\n<ul>\n<li>流程與設計不同</li>\n<li>資料格式不符合</li>\n<li>連線失敗、網路問題</li>\n<li>程式碼寫錯</li>\n</ul>\n<h3 id=\"狀態碼可以分為下面五類\"><a href=\"#狀態碼可以分為下面五類\" class=\"headerlink\" title=\"狀態碼可以分為下面五類\"></a>狀態碼可以分為下面五類</h3><ul>\n<li>100 ~ 199：資訊回應</li>\n<li>200 ~ 299：成功回應</li>\n<li>300 ~ 399：重新導向，轉址的方法</li>\n<li>400 ~ 499：用戶端的錯誤</li>\n<li>500 ~ 599：伺服器端錯誤</li>\n</ul>\n<h3 id=\"常見錯誤狀態碼\"><a href=\"#常見錯誤狀態碼\" class=\"headerlink\" title=\"常見錯誤狀態碼\"></a>常見錯誤狀態碼</h3><h4 id=\"400-499-用戶端錯誤\"><a href=\"#400-499-用戶端錯誤\" class=\"headerlink\" title=\"400 ~ 499:用戶端錯誤\"></a>400 ~ 499:用戶端錯誤</h4><p>這部份通常可以由前端網頁解決。<br>401、403 沒有權限<br>404 找不到路徑<br>405 方法不被允許<br>414 URL過長<br>422 請求正確，但可能不符合操作流程<br>429 請求次數過多</p>\n<h4 id=\"500-599-伺服器端錯誤\"><a href=\"#500-599-伺服器端錯誤\" class=\"headerlink\" title=\"500 ~ 599:伺服器端錯誤\"></a>500 ~ 599:伺服器端錯誤</h4><p>500 後端不可預期的錯誤</p>"},{"title":"2020-10-07-看鐵人賽學除錯-新手常見解決方法","abbrlink":2795520726,"date":"2020-10-07T15:04:28.000Z","_content":"今天紀錄Chrome常見錯誤訊息～\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[JavaScript 開發中常見錯誤解決辦法](https://ithelp.ithome.com.tw/articles/10237693)\n---\n### 錯誤類型：SyntaxError\n這類型別錯誤通常是`語法結構`出錯，可以直接在編輯器上直接除錯較為快速。\n如：`Uncaught SyntaxError: Unexpected identifier`\n\n### 錯誤類型：ReferenceError\n這類型別錯誤通常是`參考`找不到，如套件未正確引入\n如：`Uncaught ReferenceError: $ is not defined`\n\n### 錯誤類型：TypeError\n這類型別錯誤通常是`型別上`的錯誤。\n如:`Uncaught TypeError: Cannot read property 'a' of undefined`\n\n### 錯誤類型 RangeError\n執行函示堆疊過多、過長都會造成這問題發生\n如：無限迴圈！","source":"_posts/2020-10-07-看鐵人賽學除錯-新手常見解決方法.md","raw":"---\ntitle: 2020-10-07-看鐵人賽學除錯-新手常見解決方法\ntags:\n  - Chrome\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 2795520726\ndate: 2020-10-07 23:04:28\n---\n今天紀錄Chrome常見錯誤訊息～\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[JavaScript 開發中常見錯誤解決辦法](https://ithelp.ithome.com.tw/articles/10237693)\n---\n### 錯誤類型：SyntaxError\n這類型別錯誤通常是`語法結構`出錯，可以直接在編輯器上直接除錯較為快速。\n如：`Uncaught SyntaxError: Unexpected identifier`\n\n### 錯誤類型：ReferenceError\n這類型別錯誤通常是`參考`找不到，如套件未正確引入\n如：`Uncaught ReferenceError: $ is not defined`\n\n### 錯誤類型：TypeError\n這類型別錯誤通常是`型別上`的錯誤。\n如:`Uncaught TypeError: Cannot read property 'a' of undefined`\n\n### 錯誤類型 RangeError\n執行函示堆疊過多、過長都會造成這問題發生\n如：無限迴圈！","slug":"2020-10-07-看鐵人賽學除錯-新手常見解決方法","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3y0052zqziczq0bxf9","content":"<p>今天紀錄Chrome常見錯誤訊息～</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10237693\">JavaScript 開發中常見錯誤解決辦法</a></p>\n<hr>\n<h3 id=\"錯誤類型：SyntaxError\"><a href=\"#錯誤類型：SyntaxError\" class=\"headerlink\" title=\"錯誤類型：SyntaxError\"></a>錯誤類型：SyntaxError</h3><p>這類型別錯誤通常是<code>語法結構</code>出錯，可以直接在編輯器上直接除錯較為快速。<br>如：<code>Uncaught SyntaxError: Unexpected identifier</code></p>\n<h3 id=\"錯誤類型：ReferenceError\"><a href=\"#錯誤類型：ReferenceError\" class=\"headerlink\" title=\"錯誤類型：ReferenceError\"></a>錯誤類型：ReferenceError</h3><p>這類型別錯誤通常是<code>參考</code>找不到，如套件未正確引入<br>如：<code>Uncaught ReferenceError: $ is not defined</code></p>\n<h3 id=\"錯誤類型：TypeError\"><a href=\"#錯誤類型：TypeError\" class=\"headerlink\" title=\"錯誤類型：TypeError\"></a>錯誤類型：TypeError</h3><p>這類型別錯誤通常是<code>型別上</code>的錯誤。<br>如:<code>Uncaught TypeError: Cannot read property &#39;a&#39; of undefined</code></p>\n<h3 id=\"錯誤類型-RangeError\"><a href=\"#錯誤類型-RangeError\" class=\"headerlink\" title=\"錯誤類型 RangeError\"></a>錯誤類型 RangeError</h3><p>執行函示堆疊過多、過長都會造成這問題發生<br>如：無限迴圈！</p>\n","site":{"data":{}},"length":406,"excerpt":"<p>今天紀錄Chrome常見錯誤訊息～</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10237693\">JavaScript 開發中常見錯誤解決辦法</a></p>\n<hr>\n<h3 id=\"錯誤類型：SyntaxError\"><a href=\"#錯誤類型：SyntaxError\" class=\"headerlink\" title=\"錯誤類型：SyntaxError\"></a>錯誤類型：SyntaxError</h3><p>這類型別錯誤通常是<code>語法結構</code>出錯，可以直接在編輯器上直接除錯較為快速。<br>如：<code>Uncaught SyntaxError: Unexpected identifier</code></p>\n<h3 id=\"錯誤類型：ReferenceError\"><a href=\"#錯誤類型：ReferenceError\" class=\"headerlink\" title=\"錯誤類型：ReferenceError\"></a>錯誤類型：ReferenceError</h3><p>這類型別錯誤通常是<code>參考</code>找不到，如套件未正確引入<br>如：<code>Uncaught ReferenceError: $ is not defined</code></p>\n<h3 id=\"錯誤類型：TypeError\"><a href=\"#錯誤類型：TypeError\" class=\"headerlink\" title=\"錯誤類型：TypeError\"></a>錯誤類型：TypeError</h3><p>這類型別錯誤通常是<code>型別上</code>的錯誤。<br>如:<code>Uncaught TypeError: Cannot read property &#39;a&#39; of undefined</code></p>\n<h3 id=\"錯誤類型-RangeError\"><a href=\"#錯誤類型-RangeError\" class=\"headerlink\" title=\"錯誤類型 RangeError\"></a>錯誤類型 RangeError</h3><p>執行函示堆疊過多、過長都會造成這問題發生<br>如：無限迴圈！</p>"},{"title":"看鐵人賽學除錯-Promise、Async、Await名詞解釋","abbrlink":581564741,"date":"2020-10-13T14:05:49.000Z","_content":"簡單紀錄一些容易混淆名詞。\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[JavaScript Promise 全介紹](https://wcc723.github.io/development/2020/02/16/all-new-promise/)\n---\n`AJAX`是結合`JavaScript`和`XML`的技術名稱。主要用在網頁和後端API取得資料上。\n\n`Promise` 是一種語法，專門處理非同步行為。\n\n`Async`、`Await`則是基於`Promise`讓非同步語法結構類似於同步語言。","source":"_posts/2020-10-13-看鐵人賽學除錯-Promise名詞解釋.md","raw":"---\ntitle: 看鐵人賽學除錯-Promise、Async、Await名詞解釋\ntags:\n  - AJAX\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 581564741\ndate: 2020-10-13 22:05:49\n---\n簡單紀錄一些容易混淆名詞。\n> 註記：`看鐵人賽文章內容`僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！\n<!-- more -->\n---\n參考資料：\n[JavaScript Promise 全介紹](https://wcc723.github.io/development/2020/02/16/all-new-promise/)\n---\n`AJAX`是結合`JavaScript`和`XML`的技術名稱。主要用在網頁和後端API取得資料上。\n\n`Promise` 是一種語法，專門處理非同步行為。\n\n`Async`、`Await`則是基於`Promise`讓非同步語法結構類似於同步語言。","slug":"2020-10-13-看鐵人賽學除錯-Promise名詞解釋","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t3z0055zqzigj1g4c1d","content":"<p>簡單紀錄一些容易混淆名詞。</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://wcc723.github.io/development/2020/02/16/all-new-promise/\">JavaScript Promise 全介紹</a></p>\n<hr>\n<p><code>AJAX</code>是結合<code>JavaScript</code>和<code>XML</code>的技術名稱。主要用在網頁和後端API取得資料上。</p>\n<p><code>Promise</code> 是一種語法，專門處理非同步行為。</p>\n<p><code>Async</code>、<code>Await</code>則是基於<code>Promise</code>讓非同步語法結構類似於同步語言。</p>\n","site":{"data":{}},"length":204,"excerpt":"<p>簡單紀錄一些容易混淆名詞。</p>\n<blockquote>\n<p>註記：<code>看鐵人賽文章內容</code>僅用於紀錄、整理其他參賽者文章，若文章有不合適之處，可以於文章下方留言區告知，我會移除文章。謝謝！</p>\n</blockquote>","more":"<hr>\n<p>參考資料：<br><a href=\"https://wcc723.github.io/development/2020/02/16/all-new-promise/\">JavaScript Promise 全介紹</a></p>\n<hr>\n<p><code>AJAX</code>是結合<code>JavaScript</code>和<code>XML</code>的技術名稱。主要用在網頁和後端API取得資料上。</p>\n<p><code>Promise</code> 是一種語法，專門處理非同步行為。</p>\n<p><code>Async</code>、<code>Await</code>則是基於<code>Promise</code>讓非同步語法結構類似於同步語言。</p>"},{"title":"2020-10-14-用Visual Studio Code建立C#開發環境","abbrlink":2566354860,"date":"2020-10-14T15:23:52.000Z","_content":"記錄第一次在Vs Code上安裝 `.Net Core`的過程。\n<!-- more -->\n---\n參考資料：\n[利用 Visual Studio Code 建立 C# 專案 :-: C# 專案開發入門的八堂課](https://www.youtube.com/watch?v=Mg_MtwKDgek&feature=youtu.be)\n\n---\n1. 安裝時，可以先到官網看一下需要安裝什麼套件[在 macOS 上安裝 .NET Core](https://docs.microsoft.com/zh-tw/dotnet/core/install/macos)\n2. 由官網得知，`.NET Core` 是由`執行時間`和 `SDK` 所組成\n執行時間是用來執行 .NET Core 應用程式，SDK 是用來建立 .NET Core 應用程式和程式庫。\n3. 下載網址 https://dotnet.microsoft.com/download/dotnet-core/3.1\n4. 安裝完成後可以在終端機執行 \n`dotnet new console`就可以建立專案摟～\n\n### Bug\n- 若遇到dotnet command not found，請先注意指令是否有拼錯。\n\n- 出現It was not possible to find any installed .NET Core SDKs C# 問題\n解決方式：在json.setting中加入\n```javaScript\n{    \n  \"omnisharp.useGlobalMono\": \"never\"\n}\n```\n[連結](https://github.com/OmniSharp/omnisharp-vscode/issues/4134)\n\n\n\n\n","source":"_posts/2020-10-14-用Visual-Studio-Code建立C-開發環境.md","raw":"---\ntitle: 2020-10-14-用Visual Studio Code建立C#開發環境\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 2566354860\ndate: 2020-10-14 23:23:52\n---\n記錄第一次在Vs Code上安裝 `.Net Core`的過程。\n<!-- more -->\n---\n參考資料：\n[利用 Visual Studio Code 建立 C# 專案 :-: C# 專案開發入門的八堂課](https://www.youtube.com/watch?v=Mg_MtwKDgek&feature=youtu.be)\n\n---\n1. 安裝時，可以先到官網看一下需要安裝什麼套件[在 macOS 上安裝 .NET Core](https://docs.microsoft.com/zh-tw/dotnet/core/install/macos)\n2. 由官網得知，`.NET Core` 是由`執行時間`和 `SDK` 所組成\n執行時間是用來執行 .NET Core 應用程式，SDK 是用來建立 .NET Core 應用程式和程式庫。\n3. 下載網址 https://dotnet.microsoft.com/download/dotnet-core/3.1\n4. 安裝完成後可以在終端機執行 \n`dotnet new console`就可以建立專案摟～\n\n### Bug\n- 若遇到dotnet command not found，請先注意指令是否有拼錯。\n\n- 出現It was not possible to find any installed .NET Core SDKs C# 問題\n解決方式：在json.setting中加入\n```javaScript\n{    \n  \"omnisharp.useGlobalMono\": \"never\"\n}\n```\n[連結](https://github.com/OmniSharp/omnisharp-vscode/issues/4134)\n\n\n\n\n","slug":"2020-10-14-用Visual-Studio-Code建立C-開發環境","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t400059zqzi0otvc5wz","content":"<p>記錄第一次在Vs Code上安裝 <code>.Net Core</code>的過程。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=Mg_MtwKDgek&feature=youtu.be\">利用 Visual Studio Code 建立 C# 專案 :-: C# 專案開發入門的八堂課</a></p>\n<hr>\n<ol>\n<li>安裝時，可以先到官網看一下需要安裝什麼套件<a href=\"https://docs.microsoft.com/zh-tw/dotnet/core/install/macos\">在 macOS 上安裝 .NET Core</a></li>\n<li>由官網得知，<code>.NET Core</code> 是由<code>執行時間</code>和 <code>SDK</code> 所組成<br>執行時間是用來執行 .NET Core 應用程式，SDK 是用來建立 .NET Core 應用程式和程式庫。</li>\n<li>下載網址 <a href=\"https://dotnet.microsoft.com/download/dotnet-core/3.1\">https://dotnet.microsoft.com/download/dotnet-core/3.1</a></li>\n<li>安裝完成後可以在終端機執行<br><code>dotnet new console</code>就可以建立專案摟～</li>\n</ol>\n<h3 id=\"Bug\"><a href=\"#Bug\" class=\"headerlink\" title=\"Bug\"></a>Bug</h3><ul>\n<li><p>若遇到dotnet command not found，請先注意指令是否有拼錯。</p>\n</li>\n<li><p>出現It was not possible to find any installed .NET Core SDKs C# 問題<br>解決方式：在json.setting中加入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    </span><br><span class=\"line\">  <span class=\"string\">&quot;omnisharp.useGlobalMono&quot;</span>: <span class=\"string\">&quot;never&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/OmniSharp/omnisharp-vscode/issues/4134\">連結</a></p>\n</li>\n</ul>\n","site":{"data":{}},"length":461,"excerpt":"<p>記錄第一次在Vs Code上安裝 <code>.Net Core</code>的過程。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=Mg_MtwKDgek&feature=youtu.be\">利用 Visual Studio Code 建立 C# 專案 :-: C# 專案開發入門的八堂課</a></p>\n<hr>\n<ol>\n<li>安裝時，可以先到官網看一下需要安裝什麼套件<a href=\"https://docs.microsoft.com/zh-tw/dotnet/core/install/macos\">在 macOS 上安裝 .NET Core</a></li>\n<li>由官網得知，<code>.NET Core</code> 是由<code>執行時間</code>和 <code>SDK</code> 所組成<br>執行時間是用來執行 .NET Core 應用程式，SDK 是用來建立 .NET Core 應用程式和程式庫。</li>\n<li>下載網址 <a href=\"https://dotnet.microsoft.com/download/dotnet-core/3.1\">https://dotnet.microsoft.com/download/dotnet-core/3.1</a></li>\n<li>安裝完成後可以在終端機執行<br><code>dotnet new console</code>就可以建立專案摟～</li>\n</ol>\n<h3 id=\"Bug\"><a href=\"#Bug\" class=\"headerlink\" title=\"Bug\"></a>Bug</h3><ul>\n<li><p>若遇到dotnet command not found，請先注意指令是否有拼錯。</p>\n</li>\n<li><p>出現It was not possible to find any installed .NET Core SDKs C# 問題<br>解決方式：在json.setting中加入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    </span><br><span class=\"line\">  <span class=\"string\">&quot;omnisharp.useGlobalMono&quot;</span>: <span class=\"string\">&quot;never&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/OmniSharp/omnisharp-vscode/issues/4134\">連結</a></p>\n</li>\n</ul>"},{"title":"2020-10-20-.Net 實質型態與參考","abbrlink":4080637490,"_content":"進入第二部分，型別介紹\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第16課-Value 與 Reference Type](https://www.youtube.com/watch?v=bYuoXhDy6zA)\n[Day02-開始自學的偉大航道-C#簡介](https://ithelp.ithome.com.tw/articles/10213175)\n---\nC#中的變數分成實質型態（Value Type）、參考（Reference Type）、Pointer Type 三種。\n### 實質型態跟參考差異\n1. 實質型態就是資料儲存於記憶體本身\b。\n\n#### 實質型態種類：\n整數(可以直接存在電腦記憶體)、浮點數(模擬出來)、布林、字元、列舉、結構\n![圖片](https://i.imgur.com/rZaukQT.png)\n\n2. 參考則是只存記憶體位置。\n參考型別有:類別(物件、字串、自訂類別)、介面型別、陣列、委派型別。\n![圖解](https://i.imgur.com/VDUOG53.png)\n```C#\nstring[] Test = new string[1,2,3]\nTest存的就是記憶體位置[1,2,3]\n```\n\n\n\n\n### 命名方法：\n命名空間、類別、介面、方法、屬性、欄位、列舉建議採用`Pascal`方法命名（就是首字大寫）\n參數則建議使用小駝峰命名方法。\n","source":"_posts/2020-10-20-Net-實質型態與參考.md","raw":"---\ntitle: 2020-10-20-.Net 實質型態與參考\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 4080637490\n---\n進入第二部分，型別介紹\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第16課-Value 與 Reference Type](https://www.youtube.com/watch?v=bYuoXhDy6zA)\n[Day02-開始自學的偉大航道-C#簡介](https://ithelp.ithome.com.tw/articles/10213175)\n---\nC#中的變數分成實質型態（Value Type）、參考（Reference Type）、Pointer Type 三種。\n### 實質型態跟參考差異\n1. 實質型態就是資料儲存於記憶體本身\b。\n\n#### 實質型態種類：\n整數(可以直接存在電腦記憶體)、浮點數(模擬出來)、布林、字元、列舉、結構\n![圖片](https://i.imgur.com/rZaukQT.png)\n\n2. 參考則是只存記憶體位置。\n參考型別有:類別(物件、字串、自訂類別)、介面型別、陣列、委派型別。\n![圖解](https://i.imgur.com/VDUOG53.png)\n```C#\nstring[] Test = new string[1,2,3]\nTest存的就是記憶體位置[1,2,3]\n```\n\n\n\n\n### 命名方法：\n命名空間、類別、介面、方法、屬性、欄位、列舉建議採用`Pascal`方法命名（就是首字大寫）\n參數則建議使用小駝峰命名方法。\n","slug":"2020-10-20-Net-實質型態與參考","published":1,"date":"2020-10-20T14:28:25.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t42005dzqziaf1f1zro","content":"<p>進入第二部分，型別介紹</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=bYuoXhDy6zA\">小山的 C# 教學-第16課-Value 與 Reference Type</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10213175\">Day02-開始自學的偉大航道-C#簡介</a></p>\n<hr>\n<p>C#中的變數分成實質型態（Value Type）、參考（Reference Type）、Pointer Type 三種。</p>\n<h3 id=\"實質型態跟參考差異\"><a href=\"#實質型態跟參考差異\" class=\"headerlink\" title=\"實質型態跟參考差異\"></a>實質型態跟參考差異</h3><ol>\n<li>實質型態就是資料儲存於記憶體本身\b。</li>\n</ol>\n<h4 id=\"實質型態種類：\"><a href=\"#實質型態種類：\" class=\"headerlink\" title=\"實質型態種類：\"></a>實質型態種類：</h4><p>整數(可以直接存在電腦記憶體)、浮點數(模擬出來)、布林、字元、列舉、結構<br><img src=\"https://i.imgur.com/rZaukQT.png\" alt=\"圖片\"></p>\n<ol start=\"2\">\n<li>參考則是只存記憶體位置。<br>參考型別有:類別(物件、字串、自訂類別)、介面型別、陣列、委派型別。<br><img src=\"https://i.imgur.com/VDUOG53.png\" alt=\"圖解\"><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>[] Test = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">Test存的就是記憶體位置[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ol>\n<h3 id=\"命名方法：\"><a href=\"#命名方法：\" class=\"headerlink\" title=\"命名方法：\"></a>命名方法：</h3><p>命名空間、類別、介面、方法、屬性、欄位、列舉建議採用<code>Pascal</code>方法命名（就是首字大寫）<br>參數則建議使用小駝峰命名方法。</p>\n","site":{"data":{}},"length":356,"excerpt":"<p>進入第二部分，型別介紹</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=bYuoXhDy6zA\">小山的 C# 教學-第16課-Value 與 Reference Type</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10213175\">Day02-開始自學的偉大航道-C#簡介</a></p>\n<hr>\n<p>C#中的變數分成實質型態（Value Type）、參考（Reference Type）、Pointer Type 三種。</p>\n<h3 id=\"實質型態跟參考差異\"><a href=\"#實質型態跟參考差異\" class=\"headerlink\" title=\"實質型態跟參考差異\"></a>實質型態跟參考差異</h3><ol>\n<li>實質型態就是資料儲存於記憶體本身\b。</li>\n</ol>\n<h4 id=\"實質型態種類：\"><a href=\"#實質型態種類：\" class=\"headerlink\" title=\"實質型態種類：\"></a>實質型態種類：</h4><p>整數(可以直接存在電腦記憶體)、浮點數(模擬出來)、布林、字元、列舉、結構<br><img src=\"https://i.imgur.com/rZaukQT.png\" alt=\"圖片\"></p>\n<ol start=\"2\">\n<li>參考則是只存記憶體位置。<br>參考型別有:類別(物件、字串、自訂類別)、介面型別、陣列、委派型別。<br><img src=\"https://i.imgur.com/VDUOG53.png\" alt=\"圖解\"><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>[] Test = <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">Test存的就是記憶體位置[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ol>\n<h3 id=\"命名方法：\"><a href=\"#命名方法：\" class=\"headerlink\" title=\"命名方法：\"></a>命名方法：</h3><p>命名空間、類別、介面、方法、屬性、欄位、列舉建議採用<code>Pascal</code>方法命名（就是首字大寫）<br>參數則建議使用小駝峰命名方法。</p>"},{"title":"2020-10-23-.Net 基本型態介紹","abbrlink":4037847477,"_content":"延續上一篇，繼續來了解型態\n<!-- more -->\n---\n參考資料：\n[Day06-C#變數與變數宣告、常數與常數宣告、var、型別轉換](https://ithelp.ithome.com.tw/articles/10213219)\n---\n### C#基本型態\n![圖片](https://i.imgur.com/51ulsFl.png)\n\n- 數字型別初始值為0\n- 布林預設值為false\n\n### 常數宣告\n方式：`const 資料類型 變數名稱 = 內容`\n```C#\nconst float Test = 1.111;\n```\n\n### var\n使用var宣告的變數，會自動判斷資料型別。","source":"_posts/2020-10-23-Net-基本型態介紹、型別轉換.md","raw":"---\ntitle: 2020-10-23-.Net 基本型態介紹\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 4037847477\n---\n延續上一篇，繼續來了解型態\n<!-- more -->\n---\n參考資料：\n[Day06-C#變數與變數宣告、常數與常數宣告、var、型別轉換](https://ithelp.ithome.com.tw/articles/10213219)\n---\n### C#基本型態\n![圖片](https://i.imgur.com/51ulsFl.png)\n\n- 數字型別初始值為0\n- 布林預設值為false\n\n### 常數宣告\n方式：`const 資料類型 變數名稱 = 內容`\n```C#\nconst float Test = 1.111;\n```\n\n### var\n使用var宣告的變數，會自動判斷資料型別。","slug":"2020-10-23-Net-基本型態介紹、型別轉換","published":1,"date":"2020-10-23T14:16:37.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t45005hzqzi721l23sv","content":"<p>延續上一篇，繼續來了解型態</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10213219\">Day06-C#變數與變數宣告、常數與常數宣告、var、型別轉換</a></p>\n<hr>\n<h3 id=\"C-基本型態\"><a href=\"#C-基本型態\" class=\"headerlink\" title=\"C#基本型態\"></a>C#基本型態</h3><p><img src=\"https://i.imgur.com/51ulsFl.png\" alt=\"圖片\"></p>\n<ul>\n<li>數字型別初始值為0</li>\n<li>布林預設值為false</li>\n</ul>\n<h3 id=\"常數宣告\"><a href=\"#常數宣告\" class=\"headerlink\" title=\"常數宣告\"></a>常數宣告</h3><p>方式：<code>const 資料類型 變數名稱 = 內容</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">float</span> Test = <span class=\"number\">1.111</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><p>使用var宣告的變數，會自動判斷資料型別。</p>\n","site":{"data":{}},"length":145,"excerpt":"<p>延續上一篇，繼續來了解型態</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10213219\">Day06-C#變數與變數宣告、常數與常數宣告、var、型別轉換</a></p>\n<hr>\n<h3 id=\"C-基本型態\"><a href=\"#C-基本型態\" class=\"headerlink\" title=\"C#基本型態\"></a>C#基本型態</h3><p><img src=\"https://i.imgur.com/51ulsFl.png\" alt=\"圖片\"></p>\n<ul>\n<li>數字型別初始值為0</li>\n<li>布林預設值為false</li>\n</ul>\n<h3 id=\"常數宣告\"><a href=\"#常數宣告\" class=\"headerlink\" title=\"常數宣告\"></a>常數宣告</h3><p>方式：<code>const 資料類型 變數名稱 = 內容</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">float</span> Test = <span class=\"number\">1.111</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><p>使用var宣告的變數，會自動判斷資料型別。</p>"},{"title":"2020-10-19-.Net Framework簡介","abbrlink":3010872741,"date":"2020-10-19T14:28:41.000Z","_content":"簡介`.Net Framework`\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n`.Net Framework`包含兩大元件，CLR(共通語言執行環境)、和類別庫(Class Library)\n前者是應用程式執行的環境，後者則是提供Using類別\n\n### C#特點\n- `C#`是一個物件導向語言(OOP)，微軟稱他為`Visual C#`\n- 基於`.Net框架`的程式語言。\n- 編譯式語言\n\n### C#運作流程\n1. Source Code\n2. 轉譯(編譯器)\n3. 中繼語言(MSIL) 目的可以跨語言(C#/C++/VB)\n4. CLR           一個虛擬元件，用來運行.Net\n5. 電腦看得懂的語言\n\n### C#跟.Net關係\nC#是一個程式語言， `.NET`則是平台框架\n\n### Asp.net \n基於`.Net Framework`框架中所提供的Web應用程式類別庫，封裝在 `System.Web.dll` 檔案中\n檔名叫 `.cshtml`\n\n### 方案與專案差異\n- 方案檔名是`.sln`\n- 專案檔名是`.csproj`\n\n\n### 命名空間\n相同性質\n\n`[]`：宣告陣列用\n`<>`:使用泛型會使用到\n```C#\nstring[] args\n```\n\n\n","source":"_posts/2020-10-19-Net-Framework簡介.md","raw":"---\ntitle: 2020-10-19-.Net Framework簡介\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 3010872741\ndate: 2020-10-19 22:28:41\n---\n簡介`.Net Framework`\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n`.Net Framework`包含兩大元件，CLR(共通語言執行環境)、和類別庫(Class Library)\n前者是應用程式執行的環境，後者則是提供Using類別\n\n### C#特點\n- `C#`是一個物件導向語言(OOP)，微軟稱他為`Visual C#`\n- 基於`.Net框架`的程式語言。\n- 編譯式語言\n\n### C#運作流程\n1. Source Code\n2. 轉譯(編譯器)\n3. 中繼語言(MSIL) 目的可以跨語言(C#/C++/VB)\n4. CLR           一個虛擬元件，用來運行.Net\n5. 電腦看得懂的語言\n\n### C#跟.Net關係\nC#是一個程式語言， `.NET`則是平台框架\n\n### Asp.net \n基於`.Net Framework`框架中所提供的Web應用程式類別庫，封裝在 `System.Web.dll` 檔案中\n檔名叫 `.cshtml`\n\n### 方案與專案差異\n- 方案檔名是`.sln`\n- 專案檔名是`.csproj`\n\n\n### 命名空間\n相同性質\n\n`[]`：宣告陣列用\n`<>`:使用泛型會使用到\n```C#\nstring[] args\n```\n\n\n","slug":"2020-10-19-Net-Framework簡介","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t46005lzqzihj5chqc7","content":"<p>簡介<code>.Net Framework</code></p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<p><code>.Net Framework</code>包含兩大元件，CLR(共通語言執行環境)、和類別庫(Class Library)<br>前者是應用程式執行的環境，後者則是提供Using類別</p>\n<h3 id=\"C-特點\"><a href=\"#C-特點\" class=\"headerlink\" title=\"C#特點\"></a>C#特點</h3><ul>\n<li><code>C#</code>是一個物件導向語言(OOP)，微軟稱他為<code>Visual C#</code></li>\n<li>基於<code>.Net框架</code>的程式語言。</li>\n<li>編譯式語言</li>\n</ul>\n<h3 id=\"C-運作流程\"><a href=\"#C-運作流程\" class=\"headerlink\" title=\"C#運作流程\"></a>C#運作流程</h3><ol>\n<li>Source Code</li>\n<li>轉譯(編譯器)</li>\n<li>中繼語言(MSIL) 目的可以跨語言(C#/C++/VB)</li>\n<li>CLR           一個虛擬元件，用來運行.Net</li>\n<li>電腦看得懂的語言</li>\n</ol>\n<h3 id=\"C-跟-Net關係\"><a href=\"#C-跟-Net關係\" class=\"headerlink\" title=\"C#跟.Net關係\"></a>C#跟.Net關係</h3><p>C#是一個程式語言， <code>.NET</code>則是平台框架</p>\n<h3 id=\"Asp-net\"><a href=\"#Asp-net\" class=\"headerlink\" title=\"Asp.net\"></a>Asp.net</h3><p>基於<code>.Net Framework</code>框架中所提供的Web應用程式類別庫，封裝在 <code>System.Web.dll</code> 檔案中<br>檔名叫 <code>.cshtml</code></p>\n<h3 id=\"方案與專案差異\"><a href=\"#方案與專案差異\" class=\"headerlink\" title=\"方案與專案差異\"></a>方案與專案差異</h3><ul>\n<li>方案檔名是<code>.sln</code></li>\n<li>專案檔名是<code>.csproj</code></li>\n</ul>\n<h3 id=\"命名空間\"><a href=\"#命名空間\" class=\"headerlink\" title=\"命名空間\"></a>命名空間</h3><p>相同性質</p>\n<p><code>[]</code>：宣告陣列用<br><code>&lt;&gt;</code>:使用泛型會使用到</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>[] args</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"length":422,"excerpt":"<p>簡介<code>.Net Framework</code></p>","more":"<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<p><code>.Net Framework</code>包含兩大元件，CLR(共通語言執行環境)、和類別庫(Class Library)<br>前者是應用程式執行的環境，後者則是提供Using類別</p>\n<h3 id=\"C-特點\"><a href=\"#C-特點\" class=\"headerlink\" title=\"C#特點\"></a>C#特點</h3><ul>\n<li><code>C#</code>是一個物件導向語言(OOP)，微軟稱他為<code>Visual C#</code></li>\n<li>基於<code>.Net框架</code>的程式語言。</li>\n<li>編譯式語言</li>\n</ul>\n<h3 id=\"C-運作流程\"><a href=\"#C-運作流程\" class=\"headerlink\" title=\"C#運作流程\"></a>C#運作流程</h3><ol>\n<li>Source Code</li>\n<li>轉譯(編譯器)</li>\n<li>中繼語言(MSIL) 目的可以跨語言(C#/C++/VB)</li>\n<li>CLR           一個虛擬元件，用來運行.Net</li>\n<li>電腦看得懂的語言</li>\n</ol>\n<h3 id=\"C-跟-Net關係\"><a href=\"#C-跟-Net關係\" class=\"headerlink\" title=\"C#跟.Net關係\"></a>C#跟.Net關係</h3><p>C#是一個程式語言， <code>.NET</code>則是平台框架</p>\n<h3 id=\"Asp-net\"><a href=\"#Asp-net\" class=\"headerlink\" title=\"Asp.net\"></a>Asp.net</h3><p>基於<code>.Net Framework</code>框架中所提供的Web應用程式類別庫，封裝在 <code>System.Web.dll</code> 檔案中<br>檔名叫 <code>.cshtml</code></p>\n<h3 id=\"方案與專案差異\"><a href=\"#方案與專案差異\" class=\"headerlink\" title=\"方案與專案差異\"></a>方案與專案差異</h3><ul>\n<li>方案檔名是<code>.sln</code></li>\n<li>專案檔名是<code>.csproj</code></li>\n</ul>\n<h3 id=\"命名空間\"><a href=\"#命名空間\" class=\"headerlink\" title=\"命名空間\"></a>命名空間</h3><p>相同性質</p>\n<p><code>[]</code>：宣告陣列用<br><code>&lt;&gt;</code>:使用泛型會使用到</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>[] args</span><br></pre></td></tr></table></figure>"},{"title":"2020-10-26-.Net 型別詳細介紹","abbrlink":2400752674,"_content":"今天認識整數型別、浮點數、後製字元、列舉\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n### 整數型別\n1. `short System.16`\n2. `int   System.32`\n3. `long  System.64`\n\n### 浮點數\n1. `float System.Single`     精準7位數\n2. `double   System.Double`  精準14~15位數\n3. `decimal  System.64`      精準28~29位數\n\n#### 後製字元\n我們在宣告像是float、decimal型態時，必須加上後置字元。\n因為編譯器會將實數(含有小數)都視為`double`處理\n正確示範：\n```C#\nfloat a = 1.2222222f\ndecimal b =1.11111111111111111111111111111M\n```\n> 參考資料：[C# 變數型別 : int, float, double, decimal](https://dotblogs.com.tw/yuis_notes/2019/08/02/170430)\n\n### 列舉\n寫法\n```C#\n     //變數名稱  //型態(只能為這四種：byte short int long)\nenum Location:int\n{\n  east =1 ,\n  north =2,\n}\n\n```","source":"_posts/2020-10-26-Net-型別詳細介紹.md","raw":"---\ntitle: 2020-10-26-.Net 型別詳細介紹\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 2400752674\n---\n今天認識整數型別、浮點數、後製字元、列舉\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n### 整數型別\n1. `short System.16`\n2. `int   System.32`\n3. `long  System.64`\n\n### 浮點數\n1. `float System.Single`     精準7位數\n2. `double   System.Double`  精準14~15位數\n3. `decimal  System.64`      精準28~29位數\n\n#### 後製字元\n我們在宣告像是float、decimal型態時，必須加上後置字元。\n因為編譯器會將實數(含有小數)都視為`double`處理\n正確示範：\n```C#\nfloat a = 1.2222222f\ndecimal b =1.11111111111111111111111111111M\n```\n> 參考資料：[C# 變數型別 : int, float, double, decimal](https://dotblogs.com.tw/yuis_notes/2019/08/02/170430)\n\n### 列舉\n寫法\n```C#\n     //變數名稱  //型態(只能為這四種：byte short int long)\nenum Location:int\n{\n  east =1 ,\n  north =2,\n}\n\n```","slug":"2020-10-26-Net-型別詳細介紹","published":1,"date":"2020-10-26T14:56:09.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t47005ozqziasdnape5","content":"<p>今天認識整數型別、浮點數、後製字元、列舉</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<h3 id=\"整數型別\"><a href=\"#整數型別\" class=\"headerlink\" title=\"整數型別\"></a>整數型別</h3><ol>\n<li><code>short System.16</code></li>\n<li><code>int   System.32</code></li>\n<li><code>long  System.64</code></li>\n</ol>\n<h3 id=\"浮點數\"><a href=\"#浮點數\" class=\"headerlink\" title=\"浮點數\"></a>浮點數</h3><ol>\n<li><code>float System.Single</code>     精準7位數</li>\n<li><code>double   System.Double</code>  精準14~15位數</li>\n<li><code>decimal  System.64</code>      精準28~29位數</li>\n</ol>\n<h4 id=\"後製字元\"><a href=\"#後製字元\" class=\"headerlink\" title=\"後製字元\"></a>後製字元</h4><p>我們在宣告像是float、decimal型態時，必須加上後置字元。<br>因為編譯器會將實數(含有小數)都視為<code>double</code>處理<br>正確示範：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> a = <span class=\"number\">1.2222222f</span></span><br><span class=\"line\"><span class=\"built_in\">decimal</span> b =<span class=\"number\">1.11111111111111111111111111111</span>M</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>參考資料：<a href=\"https://dotblogs.com.tw/yuis_notes/2019/08/02/170430\">C# 變數型別 : int, float, double, decimal</a></p>\n</blockquote>\n<h3 id=\"列舉\"><a href=\"#列舉\" class=\"headerlink\" title=\"列舉\"></a>列舉</h3><p>寫法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">//變數名稱  //型態(只能為這四種：byte short int long)</span></span><br><span class=\"line\"><span class=\"built_in\">enum</span> Location:<span class=\"built_in\">int</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  east =<span class=\"number\">1</span> ,</span><br><span class=\"line\">  north =<span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":421,"excerpt":"<p>今天認識整數型別、浮點數、後製字元、列舉</p>","more":"<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<h3 id=\"整數型別\"><a href=\"#整數型別\" class=\"headerlink\" title=\"整數型別\"></a>整數型別</h3><ol>\n<li><code>short System.16</code></li>\n<li><code>int   System.32</code></li>\n<li><code>long  System.64</code></li>\n</ol>\n<h3 id=\"浮點數\"><a href=\"#浮點數\" class=\"headerlink\" title=\"浮點數\"></a>浮點數</h3><ol>\n<li><code>float System.Single</code>     精準7位數</li>\n<li><code>double   System.Double</code>  精準14~15位數</li>\n<li><code>decimal  System.64</code>      精準28~29位數</li>\n</ol>\n<h4 id=\"後製字元\"><a href=\"#後製字元\" class=\"headerlink\" title=\"後製字元\"></a>後製字元</h4><p>我們在宣告像是float、decimal型態時，必須加上後置字元。<br>因為編譯器會將實數(含有小數)都視為<code>double</code>處理<br>正確示範：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">float</span> a = <span class=\"number\">1.2222222f</span></span><br><span class=\"line\"><span class=\"built_in\">decimal</span> b =<span class=\"number\">1.11111111111111111111111111111</span>M</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>參考資料：<a href=\"https://dotblogs.com.tw/yuis_notes/2019/08/02/170430\">C# 變數型別 : int, float, double, decimal</a></p>\n</blockquote>\n<h3 id=\"列舉\"><a href=\"#列舉\" class=\"headerlink\" title=\"列舉\"></a>列舉</h3><p>寫法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">//變數名稱  //型態(只能為這四種：byte short int long)</span></span><br><span class=\"line\"><span class=\"built_in\">enum</span> Location:<span class=\"built_in\">int</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  east =<span class=\"number\">1</span> ,</span><br><span class=\"line\">  north =<span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"2020-10-27-.Net 主控台介紹","abbrlink":3840182822,"_content":"今天介紹主控台\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n[Console 的變數以及取代用法](https://chenyowei.pixnet.net/blog/post/40290739)\n---\n### 讀取資料\n- `Console.ReadLine()`\n用來讀取使用者輸入的字串如下範例：\n```C#\nstring name  = Console.ReadLine();\nConsole.WriteLine($\"Good Day! {name}\");\n```\n\n### 輸出資料\n1. Console.Write(String)     輸出字元不換行\n2. Console.WriteLine(String) 輸出字元自動換行\n\n### 格式化輸出\n例如：\n```C#\n{0:C} 將數字轉為金額的字串\nint a = 123456;\nConsole.WriteLine(\"{0:C}\",a); //$123,456.00\n\nint y = 10;\nConsole.WriteLine(\"印出字串變數y={0}\", y); //要印第二個參數 必須加入取代{0}\n//結果：印出字串變數y=10\n```\n","source":"_posts/2020-10-27-Net-主控台介紹.md","raw":"---\ntitle: 2020-10-27-.Net 主控台介紹\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 3840182822\n---\n今天介紹主控台\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n[Console 的變數以及取代用法](https://chenyowei.pixnet.net/blog/post/40290739)\n---\n### 讀取資料\n- `Console.ReadLine()`\n用來讀取使用者輸入的字串如下範例：\n```C#\nstring name  = Console.ReadLine();\nConsole.WriteLine($\"Good Day! {name}\");\n```\n\n### 輸出資料\n1. Console.Write(String)     輸出字元不換行\n2. Console.WriteLine(String) 輸出字元自動換行\n\n### 格式化輸出\n例如：\n```C#\n{0:C} 將數字轉為金額的字串\nint a = 123456;\nConsole.WriteLine(\"{0:C}\",a); //$123,456.00\n\nint y = 10;\nConsole.WriteLine(\"印出字串變數y={0}\", y); //要印第二個參數 必須加入取代{0}\n//結果：印出字串變數y=10\n```\n","slug":"2020-10-27-Net-主控台介紹","published":1,"date":"2020-10-27T13:31:20.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t48005tzqzi7t2bfbq7","content":"<p>今天介紹主控台</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計<br><a href=\"https://chenyowei.pixnet.net/blog/post/40290739\">Console 的變數以及取代用法</a></p>\n<hr>\n<h3 id=\"讀取資料\"><a href=\"#讀取資料\" class=\"headerlink\" title=\"讀取資料\"></a>讀取資料</h3><ul>\n<li><code>Console.ReadLine()</code><br>用來讀取使用者輸入的字串如下範例：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> name  = Console.ReadLine();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Good Day! <span class=\"subst\">&#123;name&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"輸出資料\"><a href=\"#輸出資料\" class=\"headerlink\" title=\"輸出資料\"></a>輸出資料</h3><ol>\n<li>Console.Write(String)     輸出字元不換行</li>\n<li>Console.WriteLine(String) 輸出字元自動換行</li>\n</ol>\n<h3 id=\"格式化輸出\"><a href=\"#格式化輸出\" class=\"headerlink\" title=\"格式化輸出\"></a>格式化輸出</h3><p>例如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"number\">0</span>:C&#125; 將數字轉為金額的字串</span><br><span class=\"line\"><span class=\"built_in\">int</span> a = <span class=\"number\">123456</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;&#123;0:C&#125;&quot;</span>,a); <span class=\"comment\">//$123,456.00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;印出字串變數y=&#123;0&#125;&quot;</span>, y); <span class=\"comment\">//要印第二個參數 必須加入取代&#123;0&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//結果：印出字串變數y=10</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":462,"excerpt":"<p>今天介紹主控台</p>","more":"<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計<br><a href=\"https://chenyowei.pixnet.net/blog/post/40290739\">Console 的變數以及取代用法</a></p>\n<hr>\n<h3 id=\"讀取資料\"><a href=\"#讀取資料\" class=\"headerlink\" title=\"讀取資料\"></a>讀取資料</h3><ul>\n<li><code>Console.ReadLine()</code><br>用來讀取使用者輸入的字串如下範例：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> name  = Console.ReadLine();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;Good Day! <span class=\"subst\">&#123;name&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"輸出資料\"><a href=\"#輸出資料\" class=\"headerlink\" title=\"輸出資料\"></a>輸出資料</h3><ol>\n<li>Console.Write(String)     輸出字元不換行</li>\n<li>Console.WriteLine(String) 輸出字元自動換行</li>\n</ol>\n<h3 id=\"格式化輸出\"><a href=\"#格式化輸出\" class=\"headerlink\" title=\"格式化輸出\"></a>格式化輸出</h3><p>例如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"number\">0</span>:C&#125; 將數字轉為金額的字串</span><br><span class=\"line\"><span class=\"built_in\">int</span> a = <span class=\"number\">123456</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;&#123;0:C&#125;&quot;</span>,a); <span class=\"comment\">//$123,456.00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> y = <span class=\"number\">10</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">&quot;印出字串變數y=&#123;0&#125;&quot;</span>, y); <span class=\"comment\">//要印第二個參數 必須加入取代&#123;0&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//結果：印出字串變數y=10</span></span><br></pre></td></tr></table></figure>"},{"title":"2020-10-28-.Net 型別轉換","abbrlink":1880635678,"_content":"今天來認識型別轉換！\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n### 隱含型別轉換\n指的是程式在執行過程，會自動轉成另一種資料型別。\n![示意圖](https://i.imgur.com/Cz6lmeg.png)\n\n### 明確型別轉換\n1. 使用轉換運算子()\n```C#\n變數 ＝ (short)Int64\n\n```\n2. 利用Parse\nParse(字串);\nParse can only covert string to number\n```C#\nstring d = \"111\";\nConsole.WriteLine(double.Parse(d).GetType());\n```\n\n3. Convert\n如：Convert.toDecimal(string);\n","source":"_posts/2020-10-28-Net-型別轉換.md","raw":"---\ntitle: 2020-10-28-.Net 型別轉換\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 1880635678\n---\n今天來認識型別轉換！\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n### 隱含型別轉換\n指的是程式在執行過程，會自動轉成另一種資料型別。\n![示意圖](https://i.imgur.com/Cz6lmeg.png)\n\n### 明確型別轉換\n1. 使用轉換運算子()\n```C#\n變數 ＝ (short)Int64\n\n```\n2. 利用Parse\nParse(字串);\nParse can only covert string to number\n```C#\nstring d = \"111\";\nConsole.WriteLine(double.Parse(d).GetType());\n```\n\n3. Convert\n如：Convert.toDecimal(string);\n","slug":"2020-10-28-Net-型別轉換","published":1,"date":"2020-10-27T14:06:16.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t49005wzqzi42oiaj0o","content":"<p>今天來認識型別轉換！</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<h3 id=\"隱含型別轉換\"><a href=\"#隱含型別轉換\" class=\"headerlink\" title=\"隱含型別轉換\"></a>隱含型別轉換</h3><p>指的是程式在執行過程，會自動轉成另一種資料型別。<br><img src=\"https://i.imgur.com/Cz6lmeg.png\" alt=\"示意圖\"></p>\n<h3 id=\"明確型別轉換\"><a href=\"#明確型別轉換\" class=\"headerlink\" title=\"明確型別轉換\"></a>明確型別轉換</h3><ol>\n<li><p>使用轉換運算子()</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">變數 ＝ (<span class=\"built_in\">short</span>)Int64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>利用Parse<br>Parse(字串);<br>Parse can only covert string to number</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> d = <span class=\"string\">&quot;111&quot;</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"built_in\">double</span>.Parse(d).GetType());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Convert<br>如：Convert.toDecimal(string);</p>\n</li>\n</ol>\n","site":{"data":{}},"length":253,"excerpt":"<p>今天來認識型別轉換！</p>","more":"<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<h3 id=\"隱含型別轉換\"><a href=\"#隱含型別轉換\" class=\"headerlink\" title=\"隱含型別轉換\"></a>隱含型別轉換</h3><p>指的是程式在執行過程，會自動轉成另一種資料型別。<br><img src=\"https://i.imgur.com/Cz6lmeg.png\" alt=\"示意圖\"></p>\n<h3 id=\"明確型別轉換\"><a href=\"#明確型別轉換\" class=\"headerlink\" title=\"明確型別轉換\"></a>明確型別轉換</h3><ol>\n<li><p>使用轉換運算子()</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">變數 ＝ (<span class=\"built_in\">short</span>)Int64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>利用Parse<br>Parse(字串);<br>Parse can only covert string to number</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> d = <span class=\"string\">&quot;111&quot;</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"built_in\">double</span>.Parse(d).GetType());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Convert<br>如：Convert.toDecimal(string);</p>\n</li>\n</ol>"},{"title":"2020-11-02-流程判斷","abbrlink":3612700585,"_content":"<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n### While\n```C#\nwhile(條件)\n{\n  執行條件為true;\n}\n```\n\n### do/While迴圈\n```C#\ndo{\n  程式敘述\n}while(條件運算);\n```","source":"_posts/2020-11-02-流程判斷.md","raw":"---\ntitle: 2020-11-02-流程判斷\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 3612700585\n---\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n---\n### While\n```C#\nwhile(條件)\n{\n  執行條件為true;\n}\n```\n\n### do/While迴圈\n```C#\ndo{\n  程式敘述\n}while(條件運算);\n```","slug":"2020-11-02-流程判斷","published":1,"date":"2020-11-02T14:50:29.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4a0061zqzi5hro06v4","content":"<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<h3 id=\"While\"><a href=\"#While\" class=\"headerlink\" title=\"While\"></a>While</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(條件)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  執行條件為<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"do-While迴圈\"><a href=\"#do-While迴圈\" class=\"headerlink\" title=\"do/While迴圈\"></a>do/While迴圈</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">  程式敘述</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(條件運算);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":109,"excerpt":"","more":"<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計</p>\n<hr>\n<h3 id=\"While\"><a href=\"#While\" class=\"headerlink\" title=\"While\"></a>While</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(條件)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  執行條件為<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"do-While迴圈\"><a href=\"#do-While迴圈\" class=\"headerlink\" title=\"do/While迴圈\"></a>do/While迴圈</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">  程式敘述</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(條件運算);</span><br></pre></td></tr></table></figure>"},{"title":"2020-11-03-六角C#筆記","abbrlink":1767391550,"_content":"紀錄六角直播內容\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n[C# @符號(小老鼠)的用處](https://blog.xuite.net/david670919/twblog/499762471)\n[T006_20201105_六角學院_C#的Type和Operator](https://ithandyguytutorial.blogspot.com/2020/10/t00620201105ctypeoperator.html?fbclid=IwAR0ml9ZZlyUCMexi5jt1EbU1vRxI0Yip_qQz5jYQfCda_FQSlUkc3gsz5Fo)\n---\n\n1. 跳脫字元 `\\`\n```C#\nstring a = \"\\\"AAA\\\"\"; //\"AAA\"\nstring path = \"D:\\\\AA\\\\B\"; // D:\\AA\\B\nstring path1 = @\"C\\Logo\\index.html\"; // C\\Logo\\index.html\n```\n\n2.`Null` 型別\n```C#\nbool? c = null;\nint? a = null;\n```\n任何型別後面加入\b`?`,可以為null\n","source":"_posts/2020-11-03-六角C-筆記.md","raw":"---\ntitle: 2020-11-03-六角C#筆記\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 1767391550\n---\n紀錄六角直播內容\n<!-- more -->\n---\n參考資料：\n從零開始學Visual C#2015程式設計\n[C# @符號(小老鼠)的用處](https://blog.xuite.net/david670919/twblog/499762471)\n[T006_20201105_六角學院_C#的Type和Operator](https://ithandyguytutorial.blogspot.com/2020/10/t00620201105ctypeoperator.html?fbclid=IwAR0ml9ZZlyUCMexi5jt1EbU1vRxI0Yip_qQz5jYQfCda_FQSlUkc3gsz5Fo)\n---\n\n1. 跳脫字元 `\\`\n```C#\nstring a = \"\\\"AAA\\\"\"; //\"AAA\"\nstring path = \"D:\\\\AA\\\\B\"; // D:\\AA\\B\nstring path1 = @\"C\\Logo\\index.html\"; // C\\Logo\\index.html\n```\n\n2.`Null` 型別\n```C#\nbool? c = null;\nint? a = null;\n```\n任何型別後面加入\b`?`,可以為null\n","slug":"2020-11-03-六角C-筆記","published":1,"date":"2020-11-03T12:15:05.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4b0064zqzih7ip9afn","content":"<p>紀錄六角直播內容</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計<br><a href=\"https://blog.xuite.net/david670919/twblog/499762471\">C# @符號(小老鼠)的用處</a><br><a href=\"https://ithandyguytutorial.blogspot.com/2020/10/t00620201105ctypeoperator.html?fbclid=IwAR0ml9ZZlyUCMexi5jt1EbU1vRxI0Yip_qQz5jYQfCda_FQSlUkc3gsz5Fo\">T006_20201105_六角學院_C#的Type和Operator</a></p>\n<hr>\n<ol>\n<li>跳脫字元 <code>\\</code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;\\&quot;AAA\\&quot;&quot;</span>; <span class=\"comment\">//&quot;AAA&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> path = <span class=\"string\">&quot;D:\\\\AA\\\\B&quot;</span>; <span class=\"comment\">// D:\\AA\\B</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> path1 = <span class=\"string\">@&quot;C\\Logo\\index.html&quot;</span>; <span class=\"comment\">// C\\Logo\\index.html</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>2.<code>Null</code> 型別</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span>? c = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span>? a = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>任何型別後面加入\b<code>?</code>,可以為null</p>\n","site":{"data":{}},"length":300,"excerpt":"<p>紀錄六角直播內容</p>","more":"<hr>\n<p>參考資料：<br>從零開始學Visual C#2015程式設計<br><a href=\"https://blog.xuite.net/david670919/twblog/499762471\">C# @符號(小老鼠)的用處</a><br><a href=\"https://ithandyguytutorial.blogspot.com/2020/10/t00620201105ctypeoperator.html?fbclid=IwAR0ml9ZZlyUCMexi5jt1EbU1vRxI0Yip_qQz5jYQfCda_FQSlUkc3gsz5Fo\">T006_20201105_六角學院_C#的Type和Operator</a></p>\n<hr>\n<ol>\n<li>跳脫字元 <code>\\</code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> a = <span class=\"string\">&quot;\\&quot;AAA\\&quot;&quot;</span>; <span class=\"comment\">//&quot;AAA&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> path = <span class=\"string\">&quot;D:\\\\AA\\\\B&quot;</span>; <span class=\"comment\">// D:\\AA\\B</span></span><br><span class=\"line\"><span class=\"built_in\">string</span> path1 = <span class=\"string\">@&quot;C\\Logo\\index.html&quot;</span>; <span class=\"comment\">// C\\Logo\\index.html</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>2.<code>Null</code> 型別</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span>? c = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span>? a = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>任何型別後面加入\b<code>?</code>,可以為null</p>"},{"title":"2020-11-09-物件導向1","abbrlink":3558058750,"_content":"今天來重新學一次物件導向概念。\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n[物件導向(Object Oriented Programming)概念](https://medium.com/@totoroLiu/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-object-oriented-programming-%E6%A6%82%E5%BF%B5-5f205d437fd6)\n[小山的 C# 教學-第1課-C# 是甚麼？](https://www.youtube.com/watch?v=GDnI1_JyfwA&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=2)\n---\n## 何謂物件導向\n簡單來說就是透過物件與物件之間的互動，來完成功能就是物件導向。\n而組成物件導向，最基礎的兩個元素就是`Class`、`Object`。\n\n建立物件\n```C#\nclass Cat\n{\n    int age;\n    string name;\n}\n\nCat myCat;               //產生一個Cat類別，名稱叫myCat，概念如int X\nmyCat = new myCat();     //賦予myCat一個記憶體空間\n\n或\n\nCat myCat = new Cat(); //上述兩步驟縮寫法\n```\n\n### 物件導向特性\n1. 封裝性\n2. 繼承\n3. 多型\n\n### public protected private 三者差異\n這三者差異主要在`存取範圍上`\n- public 就是未限制存取\n- protected 就是同一個 class 繼承也可以使用\n```C#\nclass car\n{\n   protected int x = 111;\n}\n\nclass B: car\n{\n  var a = new A();\n  var b = new B();\n  b.x =11; //OK\n  a.x =33; //Error CS1540，因為沒有繼承！\n}\n```\n- private 最嚴格，只有相同類別下才能使用\n```C#\nclass car\n{\n   private int x = 111;\n}\n\nclass B: car\n{\n  var a = new A();\n  b.x =11; //indirectly accessed due to its protection level\n  \n}\n```\n\n### Class\n1. Class 就像一個藍圖，底下可以放方法、Field、屬性、建構函式 等\n```C#\n public class Car\n    {\n        //Field\n        //補充小知識：我們通常變數前面加下底面表全域，存取權限通常設定 private\n        private ＿string Title {get;set;}\n        private bool Answer {get;set;}\n\n        //Method方法\n        //必須回傳string字串\n        public string Run()\n        {\n          return \"Success\";\n        }\n\n        //Constructor 建構子\n        //只要創建Car物件時，就必須帶入這些參數\n        public Car(string type,string registration)\n        {\n          _type = type;\n          _registration = registration;\n        }\n    }\n```\n2.\n```C#\n        private bool _Answer { get; set; }\n        //下面兩組 Method 組合起來就是上面簡寫\n        public string GetAnswer()\n        {\n            return _Answer;\n        }\n        public void  SetAnswer(bool A)\n        {\n            _Answer = A;\n        }\n```","source":"_posts/2020-11-09-物件導向1.md","raw":"---\ntitle: 2020-11-09-物件導向1\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 3558058750\n---\n今天來重新學一次物件導向概念。\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n[物件導向(Object Oriented Programming)概念](https://medium.com/@totoroLiu/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-object-oriented-programming-%E6%A6%82%E5%BF%B5-5f205d437fd6)\n[小山的 C# 教學-第1課-C# 是甚麼？](https://www.youtube.com/watch?v=GDnI1_JyfwA&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=2)\n---\n## 何謂物件導向\n簡單來說就是透過物件與物件之間的互動，來完成功能就是物件導向。\n而組成物件導向，最基礎的兩個元素就是`Class`、`Object`。\n\n建立物件\n```C#\nclass Cat\n{\n    int age;\n    string name;\n}\n\nCat myCat;               //產生一個Cat類別，名稱叫myCat，概念如int X\nmyCat = new myCat();     //賦予myCat一個記憶體空間\n\n或\n\nCat myCat = new Cat(); //上述兩步驟縮寫法\n```\n\n### 物件導向特性\n1. 封裝性\n2. 繼承\n3. 多型\n\n### public protected private 三者差異\n這三者差異主要在`存取範圍上`\n- public 就是未限制存取\n- protected 就是同一個 class 繼承也可以使用\n```C#\nclass car\n{\n   protected int x = 111;\n}\n\nclass B: car\n{\n  var a = new A();\n  var b = new B();\n  b.x =11; //OK\n  a.x =33; //Error CS1540，因為沒有繼承！\n}\n```\n- private 最嚴格，只有相同類別下才能使用\n```C#\nclass car\n{\n   private int x = 111;\n}\n\nclass B: car\n{\n  var a = new A();\n  b.x =11; //indirectly accessed due to its protection level\n  \n}\n```\n\n### Class\n1. Class 就像一個藍圖，底下可以放方法、Field、屬性、建構函式 等\n```C#\n public class Car\n    {\n        //Field\n        //補充小知識：我們通常變數前面加下底面表全域，存取權限通常設定 private\n        private ＿string Title {get;set;}\n        private bool Answer {get;set;}\n\n        //Method方法\n        //必須回傳string字串\n        public string Run()\n        {\n          return \"Success\";\n        }\n\n        //Constructor 建構子\n        //只要創建Car物件時，就必須帶入這些參數\n        public Car(string type,string registration)\n        {\n          _type = type;\n          _registration = registration;\n        }\n    }\n```\n2.\n```C#\n        private bool _Answer { get; set; }\n        //下面兩組 Method 組合起來就是上面簡寫\n        public string GetAnswer()\n        {\n            return _Answer;\n        }\n        public void  SetAnswer(bool A)\n        {\n            _Answer = A;\n        }\n```","slug":"2020-11-09-物件導向1","published":1,"date":"2020-11-09T14:06:14.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4c0068zqzih60g9g71","content":"<p>今天來重新學一次物件導向概念。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a><br><a href=\"https://medium.com/@totoroLiu/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-object-oriented-programming-%E6%A6%82%E5%BF%B5-5f205d437fd6\">物件導向(Object Oriented Programming)概念</a><br><a href=\"https://www.youtube.com/watch?v=GDnI1_JyfwA&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=2\">小山的 C# 教學-第1課-C# 是甚麼？</a></p>\n<hr>\n<h2 id=\"何謂物件導向\"><a href=\"#何謂物件導向\" class=\"headerlink\" title=\"何謂物件導向\"></a>何謂物件導向</h2><p>簡單來說就是透過物件與物件之間的互動，來完成功能就是物件導向。<br>而組成物件導向，最基礎的兩個元素就是<code>Class</code>、<code>Object</code>。</p>\n<p>建立物件</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cat myCat;               <span class=\"comment\">//產生一個Cat類別，名稱叫myCat，概念如int X</span></span><br><span class=\"line\">myCat = <span class=\"keyword\">new</span> myCat();     <span class=\"comment\">//賦予myCat一個記憶體空間</span></span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">Cat myCat = <span class=\"keyword\">new</span> Cat(); <span class=\"comment\">//上述兩步驟縮寫法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件導向特性\"><a href=\"#物件導向特性\" class=\"headerlink\" title=\"物件導向特性\"></a>物件導向特性</h3><ol>\n<li>封裝性</li>\n<li>繼承</li>\n<li>多型</li>\n</ol>\n<h3 id=\"public-protected-private-三者差異\"><a href=\"#public-protected-private-三者差異\" class=\"headerlink\" title=\"public protected private 三者差異\"></a>public protected private 三者差異</h3><p>這三者差異主要在<code>存取範圍上</code></p>\n<ul>\n<li>public 就是未限制存取</li>\n<li>protected 就是同一個 class 繼承也可以使用<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> x = <span class=\"number\">111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>: <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">  b.x =<span class=\"number\">11</span>; <span class=\"comment\">//OK</span></span><br><span class=\"line\">  a.x =<span class=\"number\">33</span>; <span class=\"comment\">//Error CS1540，因為沒有繼承！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>private 最嚴格，只有相同類別下才能使用<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> x = <span class=\"number\">111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>: <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">  b.x =<span class=\"number\">11</span>; <span class=\"comment\">//indirectly accessed due to its protection level</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><ol>\n<li>Class 就像一個藍圖，底下可以放方法、Field、屬性、建構函式 等<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">//Field</span></span><br><span class=\"line\">       <span class=\"comment\">//補充小知識：我們通常變數前面加下底面表全域，存取權限通常設定 private</span></span><br><span class=\"line\">       <span class=\"keyword\">private</span> ＿<span class=\"built_in\">string</span> Title &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> Answer &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//Method方法</span></span><br><span class=\"line\">       <span class=\"comment\">//必須回傳string字串</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Run</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">&quot;Success&quot;</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//Constructor 建構子</span></span><br><span class=\"line\">       <span class=\"comment\">//只要創建Car物件時，就必須帶入這些參數</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span>(<span class=\"params\"><span class=\"built_in\">string</span> type,<span class=\"built_in\">string</span> registration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">         _type = type;</span><br><span class=\"line\">         _registration = registration;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _Answer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//下面兩組 Method 組合起來就是上面簡寫</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetAnswer</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _Answer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">SetAnswer</span>(<span class=\"params\"><span class=\"built_in\">bool</span> A</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _Answer = A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1294,"excerpt":"<p>今天來重新學一次物件導向概念。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a><br><a href=\"https://medium.com/@totoroLiu/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91-object-oriented-programming-%E6%A6%82%E5%BF%B5-5f205d437fd6\">物件導向(Object Oriented Programming)概念</a><br><a href=\"https://www.youtube.com/watch?v=GDnI1_JyfwA&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=2\">小山的 C# 教學-第1課-C# 是甚麼？</a></p>\n<hr>\n<h2 id=\"何謂物件導向\"><a href=\"#何謂物件導向\" class=\"headerlink\" title=\"何謂物件導向\"></a>何謂物件導向</h2><p>簡單來說就是透過物件與物件之間的互動，來完成功能就是物件導向。<br>而組成物件導向，最基礎的兩個元素就是<code>Class</code>、<code>Object</code>。</p>\n<p>建立物件</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> age;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cat myCat;               <span class=\"comment\">//產生一個Cat類別，名稱叫myCat，概念如int X</span></span><br><span class=\"line\">myCat = <span class=\"keyword\">new</span> myCat();     <span class=\"comment\">//賦予myCat一個記憶體空間</span></span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">Cat myCat = <span class=\"keyword\">new</span> Cat(); <span class=\"comment\">//上述兩步驟縮寫法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件導向特性\"><a href=\"#物件導向特性\" class=\"headerlink\" title=\"物件導向特性\"></a>物件導向特性</h3><ol>\n<li>封裝性</li>\n<li>繼承</li>\n<li>多型</li>\n</ol>\n<h3 id=\"public-protected-private-三者差異\"><a href=\"#public-protected-private-三者差異\" class=\"headerlink\" title=\"public protected private 三者差異\"></a>public protected private 三者差異</h3><p>這三者差異主要在<code>存取範圍上</code></p>\n<ul>\n<li>public 就是未限制存取</li>\n<li>protected 就是同一個 class 繼承也可以使用<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> x = <span class=\"number\">111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>: <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">  b.x =<span class=\"number\">11</span>; <span class=\"comment\">//OK</span></span><br><span class=\"line\">  a.x =<span class=\"number\">33</span>; <span class=\"comment\">//Error CS1540，因為沒有繼承！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>private 最嚴格，只有相同類別下才能使用<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> x = <span class=\"number\">111</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>: <span class=\"title\">car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">  b.x =<span class=\"number\">11</span>; <span class=\"comment\">//indirectly accessed due to its protection level</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><ol>\n<li>Class 就像一個藍圖，底下可以放方法、Field、屬性、建構函式 等<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">//Field</span></span><br><span class=\"line\">       <span class=\"comment\">//補充小知識：我們通常變數前面加下底面表全域，存取權限通常設定 private</span></span><br><span class=\"line\">       <span class=\"keyword\">private</span> ＿<span class=\"built_in\">string</span> Title &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> Answer &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//Method方法</span></span><br><span class=\"line\">       <span class=\"comment\">//必須回傳string字串</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Run</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"string\">&quot;Success&quot;</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//Constructor 建構子</span></span><br><span class=\"line\">       <span class=\"comment\">//只要創建Car物件時，就必須帶入這些參數</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span>(<span class=\"params\"><span class=\"built_in\">string</span> type,<span class=\"built_in\">string</span> registration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">         _type = type;</span><br><span class=\"line\">         _registration = registration;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _Answer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"comment\">//下面兩組 Method 組合起來就是上面簡寫</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetAnswer</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _Answer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">SetAnswer</span>(<span class=\"params\"><span class=\"built_in\">bool</span> A</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _Answer = A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"2020-11-12-物件導向3","abbrlink":1250032829,"_content":"延續物件導向認識\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n---\n### Property\n```C#\n\npublic class Demo\n{\n  //Property 是一種特別的method\n   private double Count {get;set;}\n\n   private string _year;\n\n   public string Year\n  {\n      get { return _year; }\n      // this is the keyword, means current object\n      set { this._year = value; }\n  }\n}\n\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            Demo A = new Demo();\n            //可以直接這樣賦予變數 A 值原因就是，我們使用Property method，直接給予變數 A值\n            //取代 上面的 get 和 set 方法\n            A.Count = 2.111\n            Console.WriteLine();\n            \n        }\n    }\n```\n\n### override\n使用 override 修飾詞才能夠擴充或修改繼承方法\n```C#\n  private string _make;\n        //覆蓋\n  public override string ToString()\n  {\n      //$表示變數、＠表字串\n      return $\"Car Make:{_make}\"\n  }\n\n```\n另外，繼承父層的 subClass的方法，父層必須使用 virtual ， subClass 才能覆蓋\n```C#\npublic class Parent\n{\n   public virtual string Moving()\n   {\n     return \"1\";\n   }\n}\n\npublic class Child:Parent\n{\n   public override string Moving()\n   {\n     return \"1\";\n   }\n\n}\n```","source":"_posts/2020-11-12-物件導向3.md","raw":"---\ntitle: 2020-11-12-物件導向3\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 1250032829\n---\n延續物件導向認識\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n---\n### Property\n```C#\n\npublic class Demo\n{\n  //Property 是一種特別的method\n   private double Count {get;set;}\n\n   private string _year;\n\n   public string Year\n  {\n      get { return _year; }\n      // this is the keyword, means current object\n      set { this._year = value; }\n  }\n}\n\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            Demo A = new Demo();\n            //可以直接這樣賦予變數 A 值原因就是，我們使用Property method，直接給予變數 A值\n            //取代 上面的 get 和 set 方法\n            A.Count = 2.111\n            Console.WriteLine();\n            \n        }\n    }\n```\n\n### override\n使用 override 修飾詞才能夠擴充或修改繼承方法\n```C#\n  private string _make;\n        //覆蓋\n  public override string ToString()\n  {\n      //$表示變數、＠表字串\n      return $\"Car Make:{_make}\"\n  }\n\n```\n另外，繼承父層的 subClass的方法，父層必須使用 virtual ， subClass 才能覆蓋\n```C#\npublic class Parent\n{\n   public virtual string Moving()\n   {\n     return \"1\";\n   }\n}\n\npublic class Child:Parent\n{\n   public override string Moving()\n   {\n     return \"1\";\n   }\n\n}\n```","slug":"2020-11-12-物件導向3","published":1,"date":"2020-11-12T13:29:10.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4d006bzqzi63bd0gjn","content":"<p>延續物件導向認識</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"Property\"><a href=\"#Property\" class=\"headerlink\" title=\"Property\"></a>Property</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//Property 是一種特別的method</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">double</span> Count &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _year;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Year</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _year; &#125;</span><br><span class=\"line\">      <span class=\"comment\">// this is the keyword, means current object</span></span><br><span class=\"line\">      <span class=\"keyword\">set</span> &#123; <span class=\"keyword\">this</span>._year = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Demo A = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">            <span class=\"comment\">//可以直接這樣賦予變數 A 值原因就是，我們使用Property method，直接給予變數 A值</span></span><br><span class=\"line\">            <span class=\"comment\">//取代 上面的 get 和 set 方法</span></span><br><span class=\"line\">            A.Count = <span class=\"number\">2.111</span></span><br><span class=\"line\">            Console.WriteLine();</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"override\"><a href=\"#override\" class=\"headerlink\" title=\"override\"></a>override</h3><p>使用 override 修飾詞才能夠擴充或修改繼承方法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _make;</span><br><span class=\"line\">      <span class=\"comment\">//覆蓋</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$表示變數、＠表字串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">$&quot;Car Make:<span class=\"subst\">&#123;_make&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>另外，繼承父層的 subClass的方法，父層必須使用 virtual ， subClass 才能覆蓋</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> <span class=\"title\">Moving</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Child</span>:<span class=\"title\">Parent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Moving</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":905,"excerpt":"<p>延續物件導向認識</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"Property\"><a href=\"#Property\" class=\"headerlink\" title=\"Property\"></a>Property</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//Property 是一種特別的method</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">double</span> Count &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _year;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Year</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _year; &#125;</span><br><span class=\"line\">      <span class=\"comment\">// this is the keyword, means current object</span></span><br><span class=\"line\">      <span class=\"keyword\">set</span> &#123; <span class=\"keyword\">this</span>._year = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Demo A = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">            <span class=\"comment\">//可以直接這樣賦予變數 A 值原因就是，我們使用Property method，直接給予變數 A值</span></span><br><span class=\"line\">            <span class=\"comment\">//取代 上面的 get 和 set 方法</span></span><br><span class=\"line\">            A.Count = <span class=\"number\">2.111</span></span><br><span class=\"line\">            Console.WriteLine();</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"override\"><a href=\"#override\" class=\"headerlink\" title=\"override\"></a>override</h3><p>使用 override 修飾詞才能夠擴充或修改繼承方法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _make;</span><br><span class=\"line\">      <span class=\"comment\">//覆蓋</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//$表示變數、＠表字串</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">$&quot;Car Make:<span class=\"subst\">&#123;_make&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>另外，繼承父層的 subClass的方法，父層必須使用 virtual ， subClass 才能覆蓋</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> <span class=\"title\">Moving</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Child</span>:<span class=\"title\">Parent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Moving</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2020-11-10-物件導向2","abbrlink":2499837370,"_content":"延續昨天筆記內容\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n---\n### Interface、Class、Sub-Class\n- Interface 都是`I`開頭\n- Interface 不能包含 `Field` 如下範例\n\n```C#\npublic class IDemo\n{\n  string model; //這樣寫法是錯的，不能包含Field\n  string model { get; set; } //這樣才對\n\n}\n\n\n//複習記憶筆記(Class)\npublic class Demo\n{\n  //Field 有點像ColumnName欄位\n   private string _Test = \"111\";\n\n  //Property 是一種特別的method to replace get and set\n   public double Count {get;set;}\n\n}\n\n```\n\n- Class 可參考昨天筆記\n- SubClass 繼承父層\n\n\n\n\n","source":"_posts/2020-11-10-物件導向2.md","raw":"---\ntitle: 2020-11-10-物件導向2\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 2499837370\n---\n延續昨天筆記內容\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n---\n### Interface、Class、Sub-Class\n- Interface 都是`I`開頭\n- Interface 不能包含 `Field` 如下範例\n\n```C#\npublic class IDemo\n{\n  string model; //這樣寫法是錯的，不能包含Field\n  string model { get; set; } //這樣才對\n\n}\n\n\n//複習記憶筆記(Class)\npublic class Demo\n{\n  //Field 有點像ColumnName欄位\n   private string _Test = \"111\";\n\n  //Property 是一種特別的method to replace get and set\n   public double Count {get;set;}\n\n}\n\n```\n\n- Class 可參考昨天筆記\n- SubClass 繼承父層\n\n\n\n\n","slug":"2020-11-10-物件導向2","published":1,"date":"2020-11-10T12:34:03.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4f006fzqzicmh63otz","content":"<p>延續昨天筆記內容</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"Interface、Class、Sub-Class\"><a href=\"#Interface、Class、Sub-Class\" class=\"headerlink\" title=\"Interface、Class、Sub-Class\"></a>Interface、Class、Sub-Class</h3><ul>\n<li>Interface 都是<code>I</code>開頭</li>\n<li>Interface 不能包含 <code>Field</code> 如下範例</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> model; <span class=\"comment\">//這樣寫法是錯的，不能包含Field</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">//這樣才對</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//複習記憶筆記(Class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//Field 有點像ColumnName欄位</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _Test = <span class=\"string\">&quot;111&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Property 是一種特別的method to replace get and set</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Count &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Class 可參考昨天筆記</li>\n<li>SubClass 繼承父層</li>\n</ul>\n","site":{"data":{}},"length":417,"excerpt":"<p>延續昨天筆記內容</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"Interface、Class、Sub-Class\"><a href=\"#Interface、Class、Sub-Class\" class=\"headerlink\" title=\"Interface、Class、Sub-Class\"></a>Interface、Class、Sub-Class</h3><ul>\n<li>Interface 都是<code>I</code>開頭</li>\n<li>Interface 不能包含 <code>Field</code> 如下範例</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> model; <span class=\"comment\">//這樣寫法是錯的，不能包含Field</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">//這樣才對</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//複習記憶筆記(Class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//Field 有點像ColumnName欄位</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _Test = <span class=\"string\">&quot;111&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Property 是一種特別的method to replace get and set</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Count &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Class 可參考昨天筆記</li>\n<li>SubClass 繼承父層</li>\n</ul>"},{"title":"2020-11-13-物件導向4","abbrlink":1830728438,"_content":"今天來認識繼承的範例\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n\n---\n### 範例\n今天來介紹一個繼承的範例\n```C#\n\npublic class Car\n{\n  //Field，我們習慣將變數前面加＿ 表全域變數\n  private string _type;\n  private string _registration;\n  private string _year;\n\n  //constructor\n  public Car(string type, string registration, string year)\n  {\n    _type = type;\n    _registration = registration;\n    _year = year;\n  }\n\n}\n\npublic class Toyota: Car\n{\n  //constructor                                    //實作上層Car的Constructor\n  public Toyota(string registration, string year): base(\"001\",\"Reg1\",\"1998\")\n  {\n\n  }\n            //new出一個物件\n  Car Car = new Car();\n  //型別轉換\n  (Car)Toyota.method();\n}\n```","source":"_posts/2020-11-13-物件導向4.md","raw":"---\ntitle: 2020-11-13-物件導向4\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 1830728438\n---\n今天來認識繼承的範例\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n\n---\n### 範例\n今天來介紹一個繼承的範例\n```C#\n\npublic class Car\n{\n  //Field，我們習慣將變數前面加＿ 表全域變數\n  private string _type;\n  private string _registration;\n  private string _year;\n\n  //constructor\n  public Car(string type, string registration, string year)\n  {\n    _type = type;\n    _registration = registration;\n    _year = year;\n  }\n\n}\n\npublic class Toyota: Car\n{\n  //constructor                                    //實作上層Car的Constructor\n  public Toyota(string registration, string year): base(\"001\",\"Reg1\",\"1998\")\n  {\n\n  }\n            //new出一個物件\n  Car Car = new Car();\n  //型別轉換\n  (Car)Toyota.method();\n}\n```","slug":"2020-11-13-物件導向4","published":1,"date":"2020-11-13T15:02:04.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4g006izqzihatk6upb","content":"<p>今天來認識繼承的範例</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>今天來介紹一個繼承的範例</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//Field，我們習慣將變數前面加＿ 表全域變數</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _type;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _registration;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _year;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//constructor</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span>(<span class=\"params\"><span class=\"built_in\">string</span> type, <span class=\"built_in\">string</span> registration, <span class=\"built_in\">string</span> year</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">    _type = type;</span><br><span class=\"line\">    _registration = registration;</span><br><span class=\"line\">    _year = year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Toyota</span>: <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//constructor                                    //實作上層Car的Constructor</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Toyota</span>(<span class=\"params\"><span class=\"built_in\">string</span> registration, <span class=\"built_in\">string</span> year</span>): <span class=\"title\">base</span>(<span class=\"params\"><span class=\"string\">&quot;001&quot;</span>,<span class=\"string\">&quot;Reg1&quot;</span>,<span class=\"string\">&quot;1998&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">            <span class=\"comment\">//new出一個物件</span></span><br><span class=\"line\">  Car Car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">  <span class=\"comment\">//型別轉換</span></span><br><span class=\"line\">  (Car)Toyota.method();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":569,"excerpt":"<p>今天來認識繼承的範例</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><p>今天來介紹一個繼承的範例</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//Field，我們習慣將變數前面加＿ 表全域變數</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _type;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _registration;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _year;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//constructor</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span>(<span class=\"params\"><span class=\"built_in\">string</span> type, <span class=\"built_in\">string</span> registration, <span class=\"built_in\">string</span> year</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">    _type = type;</span><br><span class=\"line\">    _registration = registration;</span><br><span class=\"line\">    _year = year;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Toyota</span>: <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//constructor                                    //實作上層Car的Constructor</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Toyota</span>(<span class=\"params\"><span class=\"built_in\">string</span> registration, <span class=\"built_in\">string</span> year</span>): <span class=\"title\">base</span>(<span class=\"params\"><span class=\"string\">&quot;001&quot;</span>,<span class=\"string\">&quot;Reg1&quot;</span>,<span class=\"string\">&quot;1998&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">            <span class=\"comment\">//new出一個物件</span></span><br><span class=\"line\">  Car Car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">  <span class=\"comment\">//型別轉換</span></span><br><span class=\"line\">  (Car)Toyota.method();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2020-11-15-物件導向5","abbrlink":954422930,"_content":"今天來認識 `Interface`\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n---\n### Interface 特點簡介\n像一個產品說明書，定義商品有什麼功能，但不能說這些功能實際如何運作！\n1. `I`開頭\n2. 不能包含  `Field`\n3. 方法不能包含 `Body`\n```C#\npublic interface IVehicle\n{\n  string Moving();\n\n  //不能包含 `Body` 下面寫法是錯誤示範\n  //string Stop\n  //{\n  //  return \"\";\n  //}\n}\n\n```\n4. 一個 Class 可以實作多個 `Interface`，但只能繼承一個 `Class`，而且順序不能換。`Class`要寫前面。\n```C#\npublic class ClassA : ClassB, InterfaceA, InterfaceB\n```\n\n### 小結論\nObjected-oriented 物件導向關係\n![示意圖](https://i.imgur.com/VmBtPMn.png)\n圖片來源：[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n\n\n\n\n","source":"_posts/2020-11-15-物件導向5.md","raw":"---\ntitle: 2020-11-15-物件導向5\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 954422930\n---\n今天來認識 `Interface`\n<!-- more -->\n---\n參考資料：\n[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n---\n### Interface 特點簡介\n像一個產品說明書，定義商品有什麼功能，但不能說這些功能實際如何運作！\n1. `I`開頭\n2. 不能包含  `Field`\n3. 方法不能包含 `Body`\n```C#\npublic interface IVehicle\n{\n  string Moving();\n\n  //不能包含 `Body` 下面寫法是錯誤示範\n  //string Stop\n  //{\n  //  return \"\";\n  //}\n}\n\n```\n4. 一個 Class 可以實作多個 `Interface`，但只能繼承一個 `Class`，而且順序不能換。`Class`要寫前面。\n```C#\npublic class ClassA : ClassB, InterfaceA, InterfaceB\n```\n\n### 小結論\nObjected-oriented 物件導向關係\n![示意圖](https://i.imgur.com/VmBtPMn.png)\n圖片來源：[ITHandyGuy Tutorial](https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html)\n\n\n\n\n","slug":"2020-11-15-物件導向5","published":1,"date":"2020-11-15T02:31:34.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4h006mzqzia2u97g0z","content":"<p>今天來認識 <code>Interface</code></p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"Interface-特點簡介\"><a href=\"#Interface-特點簡介\" class=\"headerlink\" title=\"Interface 特點簡介\"></a>Interface 特點簡介</h3><p>像一個產品說明書，定義商品有什麼功能，但不能說這些功能實際如何運作！</p>\n<ol>\n<li><code>I</code>開頭</li>\n<li>不能包含  <code>Field</code></li>\n<li>方法不能包含 <code>Body</code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">Moving</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//不能包含 `Body` 下面寫法是錯誤示範</span></span><br><span class=\"line\">  <span class=\"comment\">//string Stop</span></span><br><span class=\"line\">  <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//  return &quot;&quot;;</span></span><br><span class=\"line\">  <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>一個 Class 可以實作多個 <code>Interface</code>，但只能繼承一個 <code>Class</code>，而且順序不能換。<code>Class</code>要寫前面。<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ClassA</span> : <span class=\"title\">ClassB</span>, <span class=\"title\">InterfaceA</span>, <span class=\"title\">InterfaceB</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><p>Objected-oriented 物件導向關係<br><img src=\"https://i.imgur.com/VmBtPMn.png\" alt=\"示意圖\"><br>圖片來源：<a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n","site":{"data":{}},"length":389,"excerpt":"<p>今天來認識 <code>Interface</code></p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>\n<hr>\n<h3 id=\"Interface-特點簡介\"><a href=\"#Interface-特點簡介\" class=\"headerlink\" title=\"Interface 特點簡介\"></a>Interface 特點簡介</h3><p>像一個產品說明書，定義商品有什麼功能，但不能說這些功能實際如何運作！</p>\n<ol>\n<li><code>I</code>開頭</li>\n<li>不能包含  <code>Field</code></li>\n<li>方法不能包含 <code>Body</code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">Moving</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//不能包含 `Body` 下面寫法是錯誤示範</span></span><br><span class=\"line\">  <span class=\"comment\">//string Stop</span></span><br><span class=\"line\">  <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//  return &quot;&quot;;</span></span><br><span class=\"line\">  <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>一個 Class 可以實作多個 <code>Interface</code>，但只能繼承一個 <code>Class</code>，而且順序不能換。<code>Class</code>要寫前面。<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ClassA</span> : <span class=\"title\">ClassB</span>, <span class=\"title\">InterfaceA</span>, <span class=\"title\">InterfaceB</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><p>Objected-oriented 物件導向關係<br><img src=\"https://i.imgur.com/VmBtPMn.png\" alt=\"示意圖\"><br>圖片來源：<a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t002csharpoo.html\">ITHandyGuy Tutorial</a></p>"},{"title":"2020-11-16-Methods介紹","abbrlink":2350352441,"_content":"認識 Method 方法\n<!-- more -->\n---\n參考資料：\n[T003_Methods_Static_namespace](https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html)\n---\n### Method 寫法\n```C#\nAccessLevel ReturnType methodName(Parameters)\n{\n  MethodBody\n}\n```\n\nMethod 參數共三種\n1. pass by value\n2. pass by reference\n```C#\npublic static void RefKeyword(ref int paramter)\n{\n  paramter = 100;\n}\n```\n\n3.Out keyword\n> 允許return 超過一個value\n\n\n\n\n\n\n\n","source":"_posts/2020-11-16-Methods介紹.md","raw":"---\ntitle: 2020-11-16-Methods介紹\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 2350352441\n---\n認識 Method 方法\n<!-- more -->\n---\n參考資料：\n[T003_Methods_Static_namespace](https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html)\n---\n### Method 寫法\n```C#\nAccessLevel ReturnType methodName(Parameters)\n{\n  MethodBody\n}\n```\n\nMethod 參數共三種\n1. pass by value\n2. pass by reference\n```C#\npublic static void RefKeyword(ref int paramter)\n{\n  paramter = 100;\n}\n```\n\n3.Out keyword\n> 允許return 超過一個value\n\n\n\n\n\n\n\n","slug":"2020-11-16-Methods介紹","published":1,"date":"2020-11-16T15:04:34.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4j006pzqzi88ec03da","content":"<p>認識 Method 方法</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html\">T003_Methods_Static_namespace</a></p>\n<hr>\n<h3 id=\"Method-寫法\"><a href=\"#Method-寫法\" class=\"headerlink\" title=\"Method 寫法\"></a>Method 寫法</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AccessLevel ReturnType <span class=\"title\">methodName</span>(<span class=\"params\">Parameters</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  MethodBody</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Method 參數共三種</p>\n<ol>\n<li>pass by value</li>\n<li>pass by reference<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RefKeyword</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"built_in\">int</span> paramter</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  paramter = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>3.Out keyword</p>\n<blockquote>\n<p>允許return 超過一個value</p>\n</blockquote>\n","site":{"data":{}},"length":258,"excerpt":"<p>認識 Method 方法</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html\">T003_Methods_Static_namespace</a></p>\n<hr>\n<h3 id=\"Method-寫法\"><a href=\"#Method-寫法\" class=\"headerlink\" title=\"Method 寫法\"></a>Method 寫法</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">AccessLevel ReturnType <span class=\"title\">methodName</span>(<span class=\"params\">Parameters</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  MethodBody</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Method 參數共三種</p>\n<ol>\n<li>pass by value</li>\n<li>pass by reference<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RefKeyword</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"built_in\">int</span> paramter</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  paramter = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>3.Out keyword</p>\n<blockquote>\n<p>允許return 超過一個value</p>\n</blockquote>"},{"title":"2020-11-24-NameSpace介紹","abbrlink":3814092706,"_content":"今天認識NameSpace\n<!-- more -->\n---\n參考資料：\n[T003_Methods_Static_namespace](https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html)\n---\n### NameSpace\n可以包含 NameSpace 、 Class 、 InterFace 、 enum\n\n```C#\nusing System;\nusing AA = androidWebApi.Test //使用 NameSpace 別名\nnamespace androidWebApi.Controllers\n{\n   public class uploadController : ApiController\n    {\n\n    }\n}\n\n```","source":"_posts/2020-11-24-NameSpace介紹.md","raw":"---\ntitle: 2020-11-24-NameSpace介紹\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 3814092706\n---\n今天認識NameSpace\n<!-- more -->\n---\n參考資料：\n[T003_Methods_Static_namespace](https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html)\n---\n### NameSpace\n可以包含 NameSpace 、 Class 、 InterFace 、 enum\n\n```C#\nusing System;\nusing AA = androidWebApi.Test //使用 NameSpace 別名\nnamespace androidWebApi.Controllers\n{\n   public class uploadController : ApiController\n    {\n\n    }\n}\n\n```","slug":"2020-11-24-NameSpace介紹","published":1,"date":"2020-11-24T15:26:43.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4k006tzqzicpf8ezsy","content":"<p>今天認識NameSpace</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html\">T003_Methods_Static_namespace</a></p>\n<hr>\n<h3 id=\"NameSpace\"><a href=\"#NameSpace\" class=\"headerlink\" title=\"NameSpace\"></a>NameSpace</h3><p>可以包含 NameSpace 、 Class 、 InterFace 、 enum</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> AA = androidWebApi.Test <span class=\"comment\">//使用 NameSpace 別名</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">androidWebApi.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">uploadController</span> : <span class=\"title\">ApiController</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":253,"excerpt":"<p>今天認識NameSpace</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithandyguytutorial.blogspot.com/2017/11/t003methodsstaticnamespace.html\">T003_Methods_Static_namespace</a></p>\n<hr>\n<h3 id=\"NameSpace\"><a href=\"#NameSpace\" class=\"headerlink\" title=\"NameSpace\"></a>NameSpace</h3><p>可以包含 NameSpace 、 Class 、 InterFace 、 enum</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> AA = androidWebApi.Test <span class=\"comment\">//使用 NameSpace 別名</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">androidWebApi.Controllers</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">uploadController</span> : <span class=\"title\">ApiController</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"2020-11-26-Razor簡介","abbrlink":437291380,"_content":"今天來認識Razor\n<!-- more -->\n---\n參考資料：\n[Razor ASP.NET Core 的語法參考](https://docs.microsoft.com/zh-tw/aspnet/core/mvc/views/razor?view=aspnetcore-5.0)\n---\n`Razor` 就是將 `C#` 語言轉譯成 `HTML`，因此他的檔名一定是以 `.cshtml`結尾。\n\n- 若要 @ 在標記中將符號進行 escape Razor ，請使用第二個 @ 符號：\n```C#\n<p>@@Username</p>\n```\n","source":"_posts/2020-11-26-Razor簡介.md","raw":"---\ntitle: 2020-11-26-Razor簡介\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 437291380\n---\n今天來認識Razor\n<!-- more -->\n---\n參考資料：\n[Razor ASP.NET Core 的語法參考](https://docs.microsoft.com/zh-tw/aspnet/core/mvc/views/razor?view=aspnetcore-5.0)\n---\n`Razor` 就是將 `C#` 語言轉譯成 `HTML`，因此他的檔名一定是以 `.cshtml`結尾。\n\n- 若要 @ 在標記中將符號進行 escape Razor ，請使用第二個 @ 符號：\n```C#\n<p>@@Username</p>\n```\n","slug":"2020-11-26-Razor簡介","published":1,"date":"2020-11-26T15:59:04.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4l006wzqzi4pbj34hr","content":"<p>今天來認識Razor</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\">Razor ASP.NET Core 的語法參考</a></p>\n<hr>\n<p><code>Razor</code> 就是將 <code>C#</code> 語言轉譯成 <code>HTML</code>，因此他的檔名一定是以 <code>.cshtml</code>結尾。</p>\n<ul>\n<li>若要 @ 在標記中將符號進行 escape Razor ，請使用第二個 @ 符號：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;@@Username&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"length":140,"excerpt":"<p>今天來認識Razor</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/mvc/views/razor?view=aspnetcore-5.0\">Razor ASP.NET Core 的語法參考</a></p>\n<hr>\n<p><code>Razor</code> 就是將 <code>C#</code> 語言轉譯成 <code>HTML</code>，因此他的檔名一定是以 <code>.cshtml</code>結尾。</p>\n<ul>\n<li>若要 @ 在標記中將符號進行 escape Razor ，請使用第二個 @ 符號：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;@@Username&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"2020-12-01-List串列簡介","abbrlink":3321559859,"_content":"今天來認識List串列\n<!-- more -->\n---\n參考資料：\n[DAY 19 泛型集合類別](https://ithelp.ithome.com.tw/articles/10206440)\n[小山的 C# 教學 - 第 49 課 - 串列 (List)](https://www.youtube.com/watch?v=2Cm8KxEutjI&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=51)\n---\n所有泛型別都位於 `System.Collections.Generic` 這個命名空間\n\n### List<T>\n- `<T>` 指的是放入的型別。例如：int、string等\n- `List` 不用預先決定長度\n- 使用空間可以依照輸入長度決定\n\n```C#\nList<int> new = new List<int>();\nnew.Add(122);\nnew.Add(234);\n\nnew.Sort();\n\n```\n\n可以用的方法如： `Add`、`Remove`、`Contains`、`LastIndexOf`、`Sort` ","source":"_posts/2020-12-01-泛型別簡介.md","raw":"---\ntitle: 2020-12-01-List串列簡介\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 3321559859\n---\n今天來認識List串列\n<!-- more -->\n---\n參考資料：\n[DAY 19 泛型集合類別](https://ithelp.ithome.com.tw/articles/10206440)\n[小山的 C# 教學 - 第 49 課 - 串列 (List)](https://www.youtube.com/watch?v=2Cm8KxEutjI&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=51)\n---\n所有泛型別都位於 `System.Collections.Generic` 這個命名空間\n\n### List<T>\n- `<T>` 指的是放入的型別。例如：int、string等\n- `List` 不用預先決定長度\n- 使用空間可以依照輸入長度決定\n\n```C#\nList<int> new = new List<int>();\nnew.Add(122);\nnew.Add(234);\n\nnew.Sort();\n\n```\n\n可以用的方法如： `Add`、`Remove`、`Contains`、`LastIndexOf`、`Sort` ","slug":"2020-12-01-泛型別簡介","published":1,"date":"2020-12-01T15:27:33.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4m0070zqzi98jw47mc","content":"<p>今天來認識List串列</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10206440\">DAY 19 泛型集合類別</a><br><a href=\"https://www.youtube.com/watch?v=2Cm8KxEutjI&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=51\">小山的 C# 教學 - 第 49 課 - 串列 (List)</a></p>\n<hr>\n<p>所有泛型別都位於 <code>System.Collections.Generic</code> 這個命名空間</p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List<T></h3><ul>\n<li><code>&lt;T&gt;</code> 指的是放入的型別。例如：int、string等</li>\n<li><code>List</code> 不用預先決定長度</li>\n<li>使用空間可以依照輸入長度決定</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"built_in\">int</span>&gt; <span class=\"keyword\">new</span> = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">new</span>.Add(<span class=\"number\">122</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span>.Add(<span class=\"number\">234</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span>.Sort();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以用的方法如： <code>Add</code>、<code>Remove</code>、<code>Contains</code>、<code>LastIndexOf</code>、<code>Sort</code> </p>\n","site":{"data":{}},"length":277,"excerpt":"<p>今天來認識List串列</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10206440\">DAY 19 泛型集合類別</a><br><a href=\"https://www.youtube.com/watch?v=2Cm8KxEutjI&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=51\">小山的 C# 教學 - 第 49 課 - 串列 (List)</a></p>\n<hr>\n<p>所有泛型別都位於 <code>System.Collections.Generic</code> 這個命名空間</p>\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List<T></h3><ul>\n<li><code>&lt;T&gt;</code> 指的是放入的型別。例如：int、string等</li>\n<li><code>List</code> 不用預先決定長度</li>\n<li>使用空間可以依照輸入長度決定</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"built_in\">int</span>&gt; <span class=\"keyword\">new</span> = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">new</span>.Add(<span class=\"number\">122</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span>.Add(<span class=\"number\">234</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span>.Sort();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以用的方法如： <code>Add</code>、<code>Remove</code>、<code>Contains</code>、<code>LastIndexOf</code>、<code>Sort</code> </p>"},{"title":"2020-12-06-泛型別簡介2","abbrlink":610857498,"_content":"繼續來介紹泛型別方法`Find` 和 `Enumerable.Where` 方法\n<!-- more -->\n---\n參考資料：\n[C# Linq where的用法](https://www.cnblogs.com/-Fly/p/7765517.html)\n---\n### Where 方法\n```C#\nList<Test> list = new List<Test>();\nlist = list.where( a => a.test.Contains(Name)).ToList();\n\n```\n\n### Find 方法\n會返回整個List中的第一個匹配元素， 找不到傳回 null\n```C#\nList<Test> list = new List<Test>();\nlist = list.Find( a => a.test.Contains(Name)).ToList();\n\n```","source":"_posts/2020-12-06-泛型別簡介2.md","raw":"---\ntitle: 2020-12-06-泛型別簡介2\ntags:\n  - C#\n  - Asp.net\ncategories:\n  - C#\nabbrlink: 610857498\n---\n繼續來介紹泛型別方法`Find` 和 `Enumerable.Where` 方法\n<!-- more -->\n---\n參考資料：\n[C# Linq where的用法](https://www.cnblogs.com/-Fly/p/7765517.html)\n---\n### Where 方法\n```C#\nList<Test> list = new List<Test>();\nlist = list.where( a => a.test.Contains(Name)).ToList();\n\n```\n\n### Find 方法\n會返回整個List中的第一個匹配元素， 找不到傳回 null\n```C#\nList<Test> list = new List<Test>();\nlist = list.Find( a => a.test.Contains(Name)).ToList();\n\n```","slug":"2020-12-06-泛型別簡介2","published":1,"date":"2020-12-06T13:31:39.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4n0073zqzifrzx26tr","content":"<p>繼續來介紹泛型別方法<code>Find</code> 和 <code>Enumerable.Where</code> 方法</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.cnblogs.com/-Fly/p/7765517.html\">C# Linq where的用法</a></p>\n<hr>\n<h3 id=\"Where-方法\"><a href=\"#Where-方法\" class=\"headerlink\" title=\"Where 方法\"></a>Where 方法</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Test&gt; list = <span class=\"keyword\">new</span> List&lt;Test&gt;();</span><br><span class=\"line\">list = list.<span class=\"keyword\">where</span>( a =&gt; a.test.Contains(Name)).ToList();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Find-方法\"><a href=\"#Find-方法\" class=\"headerlink\" title=\"Find 方法\"></a>Find 方法</h3><p>會返回整個List中的第一個匹配元素， 找不到傳回 null</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Test&gt; list = <span class=\"keyword\">new</span> List&lt;Test&gt;();</span><br><span class=\"line\">list = list.Find( a =&gt; a.test.Contains(Name)).ToList();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":292,"excerpt":"<p>繼續來介紹泛型別方法<code>Find</code> 和 <code>Enumerable.Where</code> 方法</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.cnblogs.com/-Fly/p/7765517.html\">C# Linq where的用法</a></p>\n<hr>\n<h3 id=\"Where-方法\"><a href=\"#Where-方法\" class=\"headerlink\" title=\"Where 方法\"></a>Where 方法</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Test&gt; list = <span class=\"keyword\">new</span> List&lt;Test&gt;();</span><br><span class=\"line\">list = list.<span class=\"keyword\">where</span>( a =&gt; a.test.Contains(Name)).ToList();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Find-方法\"><a href=\"#Find-方法\" class=\"headerlink\" title=\"Find 方法\"></a>Find 方法</h3><p>會返回整個List中的第一個匹配元素， 找不到傳回 null</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Test&gt; list = <span class=\"keyword\">new</span> List&lt;Test&gt;();</span><br><span class=\"line\">list = list.Find( a =&gt; a.test.Contains(Name)).ToList();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"2020-12-07-SQL SERVER FOR XML PATH語法介紹","abbrlink":3967556948,"_content":"工作上最近一直遇到將不同 `ROW`的抹個欄位值合併起來，記錄一下\n<!-- more -->\n---\n參考資料：\n[[食譜好菜] SQL Server 使用「FOR XML」語法做欄位合併](https://dotblogs.com.tw/supershowwei/2016/01/26/145353)\n---\n情境：\n今天我需要將不同 `ROW`的抹個欄位值合併起來，改如何做呢？\n\n```C#\nSELECT U.ID,\n(SELECT ',' + C.ColumnGroupBy\nFROM Table AS C\nWHERE C.ID = U.ID\nFOR XML PATH('')) AS TEMP \nFROM TABLE_U U\n```\n\n加上過濾Distinct 和移除多餘 `,`\n```C#\nSELECT DISTINCT U.ID,\nSTUFF((SELECT ',' + C.ColumnGroupBy\nFROM Table AS C\nWHERE C.ID = U.ID\nFOR XML PATH('')) AS TEMP \nFROM TABLE_U U,1,1,'')\n```\n\n[參考連結](https://social.msdn.microsoft.com/Forums/en-US/a04bac03-3f72-402f-a7ee-7f7e82b74ed7/remove-null-or-blank-in-stuff-sql?forum=transactsql)\n\n> 補充:\n`STUFF` 用法：\nSTUFF(原字串, 起始位置, 移除長度, 替換字串)\n","source":"_posts/2020-12-07-SQL-SERVER-FOR-XML-PATH語法介紹.md","raw":"---\ntitle: 2020-12-07-SQL SERVER FOR XML PATH語法介紹\ntags:\n  - SQL\n  - Asp.net\ncategories:\n  - SQL\nabbrlink: 3967556948\n---\n工作上最近一直遇到將不同 `ROW`的抹個欄位值合併起來，記錄一下\n<!-- more -->\n---\n參考資料：\n[[食譜好菜] SQL Server 使用「FOR XML」語法做欄位合併](https://dotblogs.com.tw/supershowwei/2016/01/26/145353)\n---\n情境：\n今天我需要將不同 `ROW`的抹個欄位值合併起來，改如何做呢？\n\n```C#\nSELECT U.ID,\n(SELECT ',' + C.ColumnGroupBy\nFROM Table AS C\nWHERE C.ID = U.ID\nFOR XML PATH('')) AS TEMP \nFROM TABLE_U U\n```\n\n加上過濾Distinct 和移除多餘 `,`\n```C#\nSELECT DISTINCT U.ID,\nSTUFF((SELECT ',' + C.ColumnGroupBy\nFROM Table AS C\nWHERE C.ID = U.ID\nFOR XML PATH('')) AS TEMP \nFROM TABLE_U U,1,1,'')\n```\n\n[參考連結](https://social.msdn.microsoft.com/Forums/en-US/a04bac03-3f72-402f-a7ee-7f7e82b74ed7/remove-null-or-blank-in-stuff-sql?forum=transactsql)\n\n> 補充:\n`STUFF` 用法：\nSTUFF(原字串, 起始位置, 移除長度, 替換字串)\n","slug":"2020-12-07-SQL-SERVER-FOR-XML-PATH語法介紹","published":1,"date":"2020-12-07T15:39:20.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4o0077zqzi59kt0nbz","content":"<p>工作上最近一直遇到將不同 <code>ROW</code>的抹個欄位值合併起來，記錄一下</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://dotblogs.com.tw/supershowwei/2016/01/26/145353\">[食譜好菜] SQL Server 使用「FOR XML」語法做欄位合併</a></p>\n<hr>\n<p>情境：<br>今天我需要將不同 <code>ROW</code>的抹個欄位值合併起來，改如何做呢？</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT U.ID,</span><br><span class=\"line\">(SELECT <span class=\"string\">&#x27;,&#x27;</span> + C.ColumnGroupBy</span><br><span class=\"line\">FROM Table AS C</span><br><span class=\"line\">WHERE C.ID = U.ID</span><br><span class=\"line\"><span class=\"function\">FOR XML <span class=\"title\">PATH</span>(<span class=\"params\"><span class=\"string\">&#x27;&#x27;</span></span>)) AS TEMP </span></span><br><span class=\"line\"><span class=\"function\">FROM TABLE_U U</span></span><br></pre></td></tr></table></figure>\n\n<p>加上過濾Distinct 和移除多餘 <code>,</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT U.ID,</span><br><span class=\"line\">STUFF((SELECT <span class=\"string\">&#x27;,&#x27;</span> + C.ColumnGroupBy</span><br><span class=\"line\">FROM Table AS C</span><br><span class=\"line\">WHERE C.ID = U.ID</span><br><span class=\"line\"><span class=\"function\">FOR XML <span class=\"title\">PATH</span>(<span class=\"params\"><span class=\"string\">&#x27;&#x27;</span></span>)) AS TEMP </span></span><br><span class=\"line\"><span class=\"function\">FROM TABLE_U U,1,1,&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://social.msdn.microsoft.com/Forums/en-US/a04bac03-3f72-402f-a7ee-7f7e82b74ed7/remove-null-or-blank-in-stuff-sql?forum=transactsql\">參考連結</a></p>\n<blockquote>\n<p>補充:<br><code>STUFF</code> 用法：<br>STUFF(原字串, 起始位置, 移除長度, 替換字串)</p>\n</blockquote>\n","site":{"data":{}},"length":432,"excerpt":"<p>工作上最近一直遇到將不同 <code>ROW</code>的抹個欄位值合併起來，記錄一下</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://dotblogs.com.tw/supershowwei/2016/01/26/145353\">[食譜好菜] SQL Server 使用「FOR XML」語法做欄位合併</a></p>\n<hr>\n<p>情境：<br>今天我需要將不同 <code>ROW</code>的抹個欄位值合併起來，改如何做呢？</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT U.ID,</span><br><span class=\"line\">(SELECT <span class=\"string\">&#x27;,&#x27;</span> + C.ColumnGroupBy</span><br><span class=\"line\">FROM Table AS C</span><br><span class=\"line\">WHERE C.ID = U.ID</span><br><span class=\"line\"><span class=\"function\">FOR XML <span class=\"title\">PATH</span>(<span class=\"params\"><span class=\"string\">&#x27;&#x27;</span></span>)) AS TEMP </span></span><br><span class=\"line\"><span class=\"function\">FROM TABLE_U U</span></span><br></pre></td></tr></table></figure>\n\n<p>加上過濾Distinct 和移除多餘 <code>,</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT U.ID,</span><br><span class=\"line\">STUFF((SELECT <span class=\"string\">&#x27;,&#x27;</span> + C.ColumnGroupBy</span><br><span class=\"line\">FROM Table AS C</span><br><span class=\"line\">WHERE C.ID = U.ID</span><br><span class=\"line\"><span class=\"function\">FOR XML <span class=\"title\">PATH</span>(<span class=\"params\"><span class=\"string\">&#x27;&#x27;</span></span>)) AS TEMP </span></span><br><span class=\"line\"><span class=\"function\">FROM TABLE_U U,1,1,&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://social.msdn.microsoft.com/Forums/en-US/a04bac03-3f72-402f-a7ee-7f7e82b74ed7/remove-null-or-blank-in-stuff-sql?forum=transactsql\">參考連結</a></p>\n<blockquote>\n<p>補充:<br><code>STUFF</code> 用法：<br>STUFF(原字串, 起始位置, 移除長度, 替換字串)</p>\n</blockquote>"},{"title":"2020-12-14-Kendo筆記","abbrlink":270809243,"_content":"筆記工作上犯的錯誤。\n<!-- more -->\n---\n參考資料：\n自己\n---\n\n```c#\n母層Template\n  columns.Command(command =>\n  {\n      command.Custom(\"編輯\").Click(\"EditDataM\").IconClass(\"k-icon k-i-edit\").HtmlAttributes(new { @class = \"Edit_Column_Button\" });\n  }).Title(\"執行\");\n\n子層Template \n  columns.Command(command =>\n  {\n      command.Custom(\"編輯內容\").Click(\"EditDataD\").IconClass(\"k-icon k-i-edit\").HtmlAttributes(new { @class = \"Edit_Column_Button\" });\n  }).Title(\"執行\");\n```\n\n兩邊Custom文字內容不能重複,不然會同時觸發 `EditDataM` 和 `EditDataD` 事件。\n\n","source":"_posts/2020-12-14-Kendo筆記.md","raw":"---\ntitle: 2020-12-14-Kendo筆記\ntags:\n  - Asp.net\n  - Kendo\ncategories:\n  - Kendo\nabbrlink: 270809243\n---\n筆記工作上犯的錯誤。\n<!-- more -->\n---\n參考資料：\n自己\n---\n\n```c#\n母層Template\n  columns.Command(command =>\n  {\n      command.Custom(\"編輯\").Click(\"EditDataM\").IconClass(\"k-icon k-i-edit\").HtmlAttributes(new { @class = \"Edit_Column_Button\" });\n  }).Title(\"執行\");\n\n子層Template \n  columns.Command(command =>\n  {\n      command.Custom(\"編輯內容\").Click(\"EditDataD\").IconClass(\"k-icon k-i-edit\").HtmlAttributes(new { @class = \"Edit_Column_Button\" });\n  }).Title(\"執行\");\n```\n\n兩邊Custom文字內容不能重複,不然會同時觸發 `EditDataM` 和 `EditDataD` 事件。\n\n","slug":"2020-12-14-Kendo筆記","published":1,"date":"2020-12-14T14:44:48.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4o007azqzib55v32uw","content":"<p>筆記工作上犯的錯誤。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br>自己</p>\n<hr>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">母層Template</span><br><span class=\"line\">  columns.Command(command =&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      command.Custom(<span class=\"string\">&quot;編輯&quot;</span>).Click(<span class=\"string\">&quot;EditDataM&quot;</span>).IconClass(<span class=\"string\">&quot;k-icon k-i-edit&quot;</span>).HtmlAttributes(<span class=\"keyword\">new</span> &#123; @class = <span class=\"string\">&quot;Edit_Column_Button&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;).Title(<span class=\"string\">&quot;執行&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">子層Template </span><br><span class=\"line\">  columns.Command(command =&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      command.Custom(<span class=\"string\">&quot;編輯內容&quot;</span>).Click(<span class=\"string\">&quot;EditDataD&quot;</span>).IconClass(<span class=\"string\">&quot;k-icon k-i-edit&quot;</span>).HtmlAttributes(<span class=\"keyword\">new</span> &#123; @class = <span class=\"string\">&quot;Edit_Column_Button&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;).Title(<span class=\"string\">&quot;執行&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>兩邊Custom文字內容不能重複,不然會同時觸發 <code>EditDataM</code> 和 <code>EditDataD</code> 事件。</p>\n","site":{"data":{}},"length":560,"excerpt":"<p>筆記工作上犯的錯誤。</p>","more":"<hr>\n<p>參考資料：<br>自己</p>\n<hr>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">母層Template</span><br><span class=\"line\">  columns.Command(command =&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      command.Custom(<span class=\"string\">&quot;編輯&quot;</span>).Click(<span class=\"string\">&quot;EditDataM&quot;</span>).IconClass(<span class=\"string\">&quot;k-icon k-i-edit&quot;</span>).HtmlAttributes(<span class=\"keyword\">new</span> &#123; @class = <span class=\"string\">&quot;Edit_Column_Button&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;).Title(<span class=\"string\">&quot;執行&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">子層Template </span><br><span class=\"line\">  columns.Command(command =&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      command.Custom(<span class=\"string\">&quot;編輯內容&quot;</span>).Click(<span class=\"string\">&quot;EditDataD&quot;</span>).IconClass(<span class=\"string\">&quot;k-icon k-i-edit&quot;</span>).HtmlAttributes(<span class=\"keyword\">new</span> &#123; @class = <span class=\"string\">&quot;Edit_Column_Button&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;).Title(<span class=\"string\">&quot;執行&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>兩邊Custom文字內容不能重複,不然會同時觸發 <code>EditDataM</code> 和 <code>EditDataD</code> 事件。</p>"},{"title":"2021-01-11-物件導向6(建構子)","abbrlink":1525365283,"_content":"複習建構子 Constructor\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第17課-Constructor 建構子](https://www.youtube.com/watch?v=XsrXEGsrfo8&t=8s)\n---\n### 建構子特點：\n1. 沒有 Output \n2. 名稱與Class 相同\n3. 屬於 Method 中的一種\n\n### 使用目的：\n1. 減少重複程式碼撰寫\n2. 可以善用C# Overloaded多載屬性 \n3. 在建立物件時就會產生，因此我們可以用來賦予初始值\n\n範例：\n1. 先建立一個class\n```C#\nnamespace demo\n{\n  class Student\n  {\n   public int grade;\n   public string name;\n   public string studentID;\n\n    //建構子\n    public Student()\n    {\n       grade = 2;\n    }\n    \n    public Student(int grade1, string name2)\n    {\n       grade = grade1;\n       name = name2;\n    }\n\n  }\n\n}\n\n```\n2. 在建立一個新的物件\n```C#\nusing demo.Models\npublic class Demo\n{\n   new Student(); \n   //產生grade = 2;\n\n   new Student(1,\"2\");\n   //產生grade = 1;name =\"2\"\n}\n\n```","source":"_posts/2021-01-11-物件導向6-建構子.md","raw":"---\ntitle: 2021-01-11-物件導向6(建構子)\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 1525365283\n---\n複習建構子 Constructor\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第17課-Constructor 建構子](https://www.youtube.com/watch?v=XsrXEGsrfo8&t=8s)\n---\n### 建構子特點：\n1. 沒有 Output \n2. 名稱與Class 相同\n3. 屬於 Method 中的一種\n\n### 使用目的：\n1. 減少重複程式碼撰寫\n2. 可以善用C# Overloaded多載屬性 \n3. 在建立物件時就會產生，因此我們可以用來賦予初始值\n\n範例：\n1. 先建立一個class\n```C#\nnamespace demo\n{\n  class Student\n  {\n   public int grade;\n   public string name;\n   public string studentID;\n\n    //建構子\n    public Student()\n    {\n       grade = 2;\n    }\n    \n    public Student(int grade1, string name2)\n    {\n       grade = grade1;\n       name = name2;\n    }\n\n  }\n\n}\n\n```\n2. 在建立一個新的物件\n```C#\nusing demo.Models\npublic class Demo\n{\n   new Student(); \n   //產生grade = 2;\n\n   new Student(1,\"2\");\n   //產生grade = 1;name =\"2\"\n}\n\n```","slug":"2021-01-11-物件導向6-建構子","published":1,"date":"2021-01-11T14:13:39.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4q007fzqzifupa3h85","content":"<p>複習建構子 Constructor</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=XsrXEGsrfo8&t=8s\">小山的 C# 教學-第17課-Constructor 建構子</a></p>\n<hr>\n<h3 id=\"建構子特點：\"><a href=\"#建構子特點：\" class=\"headerlink\" title=\"建構子特點：\"></a>建構子特點：</h3><ol>\n<li>沒有 Output </li>\n<li>名稱與Class 相同</li>\n<li>屬於 Method 中的一種</li>\n</ol>\n<h3 id=\"使用目的：\"><a href=\"#使用目的：\" class=\"headerlink\" title=\"使用目的：\"></a>使用目的：</h3><ol>\n<li>減少重複程式碼撰寫</li>\n<li>可以善用C# Overloaded多載屬性 </li>\n<li>在建立物件時就會產生，因此我們可以用來賦予初始值</li>\n</ol>\n<p>範例：</p>\n<ol>\n<li>先建立一個class<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> grade;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> studentID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//建構子</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">       grade = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"built_in\">int</span> grade1, <span class=\"built_in\">string</span> name2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">       grade = grade1;</span><br><span class=\"line\">       name = name2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>在建立一個新的物件<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> demo.Models</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">new</span> Student(); </span><br><span class=\"line\">   <span class=\"comment\">//產生grade = 2;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Student(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">//產生grade = 1;name =&quot;2&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":555,"excerpt":"<p>複習建構子 Constructor</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=XsrXEGsrfo8&t=8s\">小山的 C# 教學-第17課-Constructor 建構子</a></p>\n<hr>\n<h3 id=\"建構子特點：\"><a href=\"#建構子特點：\" class=\"headerlink\" title=\"建構子特點：\"></a>建構子特點：</h3><ol>\n<li>沒有 Output </li>\n<li>名稱與Class 相同</li>\n<li>屬於 Method 中的一種</li>\n</ol>\n<h3 id=\"使用目的：\"><a href=\"#使用目的：\" class=\"headerlink\" title=\"使用目的：\"></a>使用目的：</h3><ol>\n<li>減少重複程式碼撰寫</li>\n<li>可以善用C# Overloaded多載屬性 </li>\n<li>在建立物件時就會產生，因此我們可以用來賦予初始值</li>\n</ol>\n<p>範例：</p>\n<ol>\n<li>先建立一個class<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> grade;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> studentID;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//建構子</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">       grade = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"built_in\">int</span> grade1, <span class=\"built_in\">string</span> name2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">       grade = grade1;</span><br><span class=\"line\">       name = name2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>在建立一個新的物件<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> demo.Models</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">new</span> Student(); </span><br><span class=\"line\">   <span class=\"comment\">//產生grade = 2;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">new</span> Student(<span class=\"number\">1</span>,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">   <span class=\"comment\">//產生grade = 1;name =&quot;2&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"2021-01-13-static修飾子","abbrlink":3064977456,"_content":"簡介修飾子\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第19課-static 修飾字](https://www.youtube.com/watch?v=RlT_ddlhq5o)\n---\n### Static 特性\n用來宣告靜態成員\n1. 不能、也不用new出一個物件。\n2. 載入檔案時就會佔據記憶體空間\n3. 有靜態method、也有靜態變數\n4. 靜態method可以透過class名稱直接存取，不需new出新的物件\n5. 靜態變數在同一個class下是共用\n\n\n### 範例\n```c#\npublic class Student\n{\n   public int passScore = 60;\n   //靜態變數\n   public static int studentID;\n   \n   //靜態method\n   public static bool checkScore(int Score)\n   {\n      if(Score > passScore)\n      {\n        return true;\n      }\n      else{\n        return false;\n      }\n   }\n\n}\n\n```\n\n### 何時該使用靜態而何時又該使用非靜態呢？\n這篇[文章](http://weisnote.blogspot.com/2012/08/static.html)講的例子蠻有趣\n文中提到\n> 假設今天我們有一個類別是人類 一個方法是花光我的薪水\n> 靜態就是，所有人都可以花光我的薪水 可怕\n> 非靜態就是，只有我自己才可以花光我的薪水 爽","source":"_posts/2021-01-13-static修飾子.md","raw":"---\ntitle: 2021-01-13-static修飾子\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 3064977456\n---\n簡介修飾子\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第19課-static 修飾字](https://www.youtube.com/watch?v=RlT_ddlhq5o)\n---\n### Static 特性\n用來宣告靜態成員\n1. 不能、也不用new出一個物件。\n2. 載入檔案時就會佔據記憶體空間\n3. 有靜態method、也有靜態變數\n4. 靜態method可以透過class名稱直接存取，不需new出新的物件\n5. 靜態變數在同一個class下是共用\n\n\n### 範例\n```c#\npublic class Student\n{\n   public int passScore = 60;\n   //靜態變數\n   public static int studentID;\n   \n   //靜態method\n   public static bool checkScore(int Score)\n   {\n      if(Score > passScore)\n      {\n        return true;\n      }\n      else{\n        return false;\n      }\n   }\n\n}\n\n```\n\n### 何時該使用靜態而何時又該使用非靜態呢？\n這篇[文章](http://weisnote.blogspot.com/2012/08/static.html)講的例子蠻有趣\n文中提到\n> 假設今天我們有一個類別是人類 一個方法是花光我的薪水\n> 靜態就是，所有人都可以花光我的薪水 可怕\n> 非靜態就是，只有我自己才可以花光我的薪水 爽","slug":"2021-01-13-static修飾子","published":1,"date":"2021-01-13T14:35:55.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4q007izqzigtrn6kk0","content":"<p>簡介修飾子</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=RlT_ddlhq5o\">小山的 C# 教學-第19課-static 修飾字</a></p>\n<hr>\n<h3 id=\"Static-特性\"><a href=\"#Static-特性\" class=\"headerlink\" title=\"Static 特性\"></a>Static 特性</h3><p>用來宣告靜態成員</p>\n<ol>\n<li>不能、也不用new出一個物件。</li>\n<li>載入檔案時就會佔據記憶體空間</li>\n<li>有靜態method、也有靜態變數</li>\n<li>靜態method可以透過class名稱直接存取，不需new出新的物件</li>\n<li>靜態變數在同一個class下是共用</li>\n</ol>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> passScore = <span class=\"number\">60</span>;</span><br><span class=\"line\">   <span class=\"comment\">//靜態變數</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> studentID;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//靜態method</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">checkScore</span>(<span class=\"params\"><span class=\"built_in\">int</span> Score</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(Score &gt; passScore)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"何時該使用靜態而何時又該使用非靜態呢？\"><a href=\"#何時該使用靜態而何時又該使用非靜態呢？\" class=\"headerlink\" title=\"何時該使用靜態而何時又該使用非靜態呢？\"></a>何時該使用靜態而何時又該使用非靜態呢？</h3><p>這篇<a href=\"http://weisnote.blogspot.com/2012/08/static.html\">文章</a>講的例子蠻有趣<br>文中提到</p>\n<blockquote>\n<p>假設今天我們有一個類別是人類 一個方法是花光我的薪水<br>靜態就是，所有人都可以花光我的薪水 可怕<br>非靜態就是，只有我自己才可以花光我的薪水 爽</p>\n</blockquote>\n","site":{"data":{}},"length":490,"excerpt":"<p>簡介修飾子</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=RlT_ddlhq5o\">小山的 C# 教學-第19課-static 修飾字</a></p>\n<hr>\n<h3 id=\"Static-特性\"><a href=\"#Static-特性\" class=\"headerlink\" title=\"Static 特性\"></a>Static 特性</h3><p>用來宣告靜態成員</p>\n<ol>\n<li>不能、也不用new出一個物件。</li>\n<li>載入檔案時就會佔據記憶體空間</li>\n<li>有靜態method、也有靜態變數</li>\n<li>靜態method可以透過class名稱直接存取，不需new出新的物件</li>\n<li>靜態變數在同一個class下是共用</li>\n</ol>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> passScore = <span class=\"number\">60</span>;</span><br><span class=\"line\">   <span class=\"comment\">//靜態變數</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> studentID;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//靜態method</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">checkScore</span>(<span class=\"params\"><span class=\"built_in\">int</span> Score</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(Score &gt; passScore)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"何時該使用靜態而何時又該使用非靜態呢？\"><a href=\"#何時該使用靜態而何時又該使用非靜態呢？\" class=\"headerlink\" title=\"何時該使用靜態而何時又該使用非靜態呢？\"></a>何時該使用靜態而何時又該使用非靜態呢？</h3><p>這篇<a href=\"http://weisnote.blogspot.com/2012/08/static.html\">文章</a>講的例子蠻有趣<br>文中提到</p>\n<blockquote>\n<p>假設今天我們有一個類別是人類 一個方法是花光我的薪水<br>靜態就是，所有人都可以花光我的薪水 可怕<br>非靜態就是，只有我自己才可以花光我的薪水 爽</p>\n</blockquote>"},{"title":"2021-01-15-多維陣列","abbrlink":3646875843,"_content":"今天來認識多維陣列\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第38課-Multidimensional Arrarys 多維陣列](https://www.youtube.com/watch?v=V6j_nZTfhkg&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=40)\n---\n### 陣列\n1. 陣列就是用來儲存大量、相似資料\n\n### 多維陣列\n1. 類似座標軸，有X、Ｙ軸\n\n### 範例\n- 寫法如下\n`資料型別 [ ] 陣列名稱 = new 資料型別[陣列大小]`\n\n```C#\npublic class Demo\n{\n  // 3*5的二維陣列\n  int[,] Test = new int[3,5]\n  \n  //直接賦予值\n  int[,] Test2 = new int[]{{1,2},{3,4}};\n\n}\n\n\n```\n\n","source":"_posts/2021-01-15-多維陣列.md","raw":"---\ntitle: 2021-01-15-多維陣列\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 3646875843\n---\n今天來認識多維陣列\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第38課-Multidimensional Arrarys 多維陣列](https://www.youtube.com/watch?v=V6j_nZTfhkg&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=40)\n---\n### 陣列\n1. 陣列就是用來儲存大量、相似資料\n\n### 多維陣列\n1. 類似座標軸，有X、Ｙ軸\n\n### 範例\n- 寫法如下\n`資料型別 [ ] 陣列名稱 = new 資料型別[陣列大小]`\n\n```C#\npublic class Demo\n{\n  // 3*5的二維陣列\n  int[,] Test = new int[3,5]\n  \n  //直接賦予值\n  int[,] Test2 = new int[]{{1,2},{3,4}};\n\n}\n\n\n```\n\n","slug":"2021-01-15-多維陣列","published":1,"date":"2021-01-15T14:09:03.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4r007mzqzibrteh7bv","content":"<p>今天來認識多維陣列</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=V6j_nZTfhkg&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=40\">小山的 C# 教學-第38課-Multidimensional Arrarys 多維陣列</a></p>\n<hr>\n<h3 id=\"陣列\"><a href=\"#陣列\" class=\"headerlink\" title=\"陣列\"></a>陣列</h3><ol>\n<li>陣列就是用來儲存大量、相似資料</li>\n</ol>\n<h3 id=\"多維陣列\"><a href=\"#多維陣列\" class=\"headerlink\" title=\"多維陣列\"></a>多維陣列</h3><ol>\n<li>類似座標軸，有X、Ｙ軸</li>\n</ol>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><ul>\n<li>寫法如下<br><code>資料型別 [ ] 陣列名稱 = new 資料型別[陣列大小]</code></li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 3*5的二維陣列</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span>[,] Test = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//直接賦予值</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span>[,] Test2 = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":259,"excerpt":"<p>今天來認識多維陣列</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=V6j_nZTfhkg&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=40\">小山的 C# 教學-第38課-Multidimensional Arrarys 多維陣列</a></p>\n<hr>\n<h3 id=\"陣列\"><a href=\"#陣列\" class=\"headerlink\" title=\"陣列\"></a>陣列</h3><ol>\n<li>陣列就是用來儲存大量、相似資料</li>\n</ol>\n<h3 id=\"多維陣列\"><a href=\"#多維陣列\" class=\"headerlink\" title=\"多維陣列\"></a>多維陣列</h3><ol>\n<li>類似座標軸，有X、Ｙ軸</li>\n</ol>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><ul>\n<li>寫法如下<br><code>資料型別 [ ] 陣列名稱 = new 資料型別[陣列大小]</code></li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 3*5的二維陣列</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span>[,] Test = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//直接賦予值</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span>[,] Test2 = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>[]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"2021-01-21-物件回收機制","abbrlink":728982376,"_content":"物件回收機制簡介\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第23課-Garbage Collection 垃圾回收](https://www.youtube.com/watch?v=qQPDdIK2bhc&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=25)\n[記憶體回收的基本概念](https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/fundamentals)\n---\n\n### 簡介\n一開始建立物件時，會在電腦`Heap`區塊自動產生一個新的物件。\n詳情可參考之前寫的文章， [.Net實質型態介紹](https://chun-wen.github.io/2020/10/20/2020-10-20-Net-%E5%AF%A6%E8%B3%AA%E5%9E%8B%E6%85%8B%E8%88%87%E5%8F%83%E8%80%83/)\n\n而當我們沒有使用這些物件時，`C#` 會自動幫我們把他回收。這就是`C#`回收機制。\n\n### 目的\n- 釋放記憶體空間\n\n","source":"_posts/2021-01-21-物件回收機制.md","raw":"---\ntitle: 2021-01-21-物件回收機制\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 728982376\n---\n物件回收機制簡介\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第23課-Garbage Collection 垃圾回收](https://www.youtube.com/watch?v=qQPDdIK2bhc&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=25)\n[記憶體回收的基本概念](https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/fundamentals)\n---\n\n### 簡介\n一開始建立物件時，會在電腦`Heap`區塊自動產生一個新的物件。\n詳情可參考之前寫的文章， [.Net實質型態介紹](https://chun-wen.github.io/2020/10/20/2020-10-20-Net-%E5%AF%A6%E8%B3%AA%E5%9E%8B%E6%85%8B%E8%88%87%E5%8F%83%E8%80%83/)\n\n而當我們沒有使用這些物件時，`C#` 會自動幫我們把他回收。這就是`C#`回收機制。\n\n### 目的\n- 釋放記憶體空間\n\n","slug":"2021-01-21-物件回收機制","published":1,"date":"2021-01-21T14:03:28.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4s007qzqzig6ovetqk","content":"<p>物件回收機制簡介</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=qQPDdIK2bhc&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=25\">小山的 C# 教學-第23課-Garbage Collection 垃圾回收</a><br><a href=\"https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/fundamentals\">記憶體回收的基本概念</a></p>\n<hr>\n<h3 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h3><p>一開始建立物件時，會在電腦<code>Heap</code>區塊自動產生一個新的物件。<br>詳情可參考之前寫的文章， <a href=\"https://chun-wen.github.io/2020/10/20/2020-10-20-Net-%E5%AF%A6%E8%B3%AA%E5%9E%8B%E6%85%8B%E8%88%87%E5%8F%83%E8%80%83/\">.Net實質型態介紹</a></p>\n<p>而當我們沒有使用這些物件時，<code>C#</code> 會自動幫我們把他回收。這就是<code>C#</code>回收機制。</p>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><ul>\n<li>釋放記憶體空間</li>\n</ul>\n","site":{"data":{}},"length":157,"excerpt":"<p>物件回收機制簡介</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=qQPDdIK2bhc&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=25\">小山的 C# 教學-第23課-Garbage Collection 垃圾回收</a><br><a href=\"https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/fundamentals\">記憶體回收的基本概念</a></p>\n<hr>\n<h3 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h3><p>一開始建立物件時，會在電腦<code>Heap</code>區塊自動產生一個新的物件。<br>詳情可參考之前寫的文章， <a href=\"https://chun-wen.github.io/2020/10/20/2020-10-20-Net-%E5%AF%A6%E8%B3%AA%E5%9E%8B%E6%85%8B%E8%88%87%E5%8F%83%E8%80%83/\">.Net實質型態介紹</a></p>\n<p>而當我們沒有使用這些物件時，<code>C#</code> 會自動幫我們把他回收。這就是<code>C#</code>回收機制。</p>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><ul>\n<li>釋放記憶體空間</li>\n</ul>"},{"title":"2021-01-26-out、void、ref說明","abbrlink":3967716336,"_content":"今天在撰寫專案時，突然忘記`out`使用方式，索性今天晚上複習一下其他參數修飾詞。\n<!-- more -->\n---\n參考資料：\n[C# Method - Main、void、ref、out、overloading - 教學筆記](https://adon988.logdown.com/posts/1179503)\n[[C#] Out 與 ref 差異](https://dotblogs.com.tw/erictsaiblog/2015/05/10/151238)\n---\n### void\n當method不回傳值時，就必須使用 `void`類型\n```C#\nnamespace demo\n{\n  class Test\n  {\n    static void Hello(){\n      console.WriteLine(\"11\");\n    }\n  }\n}\n\n```\n\n### Reference\n必須先給定初始值，會將變數記憶體位置傳給`Methods`\n```C#\nnamespace demo\n{\n  class Test\n  {\n    static void Hello(){\n      int a = 10;\n      Calculate(ref a);\n      console.WriteLine(a); //100\n    }\n\n    static void Calculate(ref int a)\n    {\n      a = a *10;\n    }\n\n  }\n}\n\n```\n### Out\n不需給定初始值，但必須在程式結束前需要初始化參數(給值)\n```C#\nnamespace demo\n{\n  class Test\n  {\n    static void Hello(){\n      Calculate(out a);\n      console.WriteLine(a); //33\n    }\n\n    static void Calculate(out int a)\n    {\n      a = 33;\n    }\n\n  }\n}\n\n```\n\n### 小結論\n1. ref 需要將參數初始化而Out 不需要\n2. Out 與 ref 都是以 By Reference 作為參數傳遞\n3. ref 需要在執行前初始化參數(給值)而 out 是在程式結束前需要初始化參數(給值)\n\n","source":"_posts/2021-01-26-out、void、ref說明.md","raw":"---\ntitle: 2021-01-26-out、void、ref說明\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 3967716336\n---\n今天在撰寫專案時，突然忘記`out`使用方式，索性今天晚上複習一下其他參數修飾詞。\n<!-- more -->\n---\n參考資料：\n[C# Method - Main、void、ref、out、overloading - 教學筆記](https://adon988.logdown.com/posts/1179503)\n[[C#] Out 與 ref 差異](https://dotblogs.com.tw/erictsaiblog/2015/05/10/151238)\n---\n### void\n當method不回傳值時，就必須使用 `void`類型\n```C#\nnamespace demo\n{\n  class Test\n  {\n    static void Hello(){\n      console.WriteLine(\"11\");\n    }\n  }\n}\n\n```\n\n### Reference\n必須先給定初始值，會將變數記憶體位置傳給`Methods`\n```C#\nnamespace demo\n{\n  class Test\n  {\n    static void Hello(){\n      int a = 10;\n      Calculate(ref a);\n      console.WriteLine(a); //100\n    }\n\n    static void Calculate(ref int a)\n    {\n      a = a *10;\n    }\n\n  }\n}\n\n```\n### Out\n不需給定初始值，但必須在程式結束前需要初始化參數(給值)\n```C#\nnamespace demo\n{\n  class Test\n  {\n    static void Hello(){\n      Calculate(out a);\n      console.WriteLine(a); //33\n    }\n\n    static void Calculate(out int a)\n    {\n      a = 33;\n    }\n\n  }\n}\n\n```\n\n### 小結論\n1. ref 需要將參數初始化而Out 不需要\n2. Out 與 ref 都是以 By Reference 作為參數傳遞\n3. ref 需要在執行前初始化參數(給值)而 out 是在程式結束前需要初始化參數(給值)\n\n","slug":"2021-01-26-out、void、ref說明","published":1,"date":"2021-01-26T14:15:41.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4t007uzqzi4v7q23cu","content":"<p>今天在撰寫專案時，突然忘記<code>out</code>使用方式，索性今天晚上複習一下其他參數修飾詞。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://adon988.logdown.com/posts/1179503\">C# Method - Main、void、ref、out、overloading - 教學筆記</a><br><a href=\"https://dotblogs.com.tw/erictsaiblog/2015/05/10/151238\">[C#] Out 與 ref 差異</a></p>\n<hr>\n<h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><p>當method不回傳值時，就必須使用 <code>void</code>類型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      console.WriteLine(<span class=\"string\">&quot;11&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p>必須先給定初始值，會將變數記憶體位置傳給<code>Methods</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">      Calculate(<span class=\"keyword\">ref</span> a);</span><br><span class=\"line\">      console.WriteLine(a); <span class=\"comment\">//100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Calculate</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"built_in\">int</span> a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">      a = a *<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"Out\"><a href=\"#Out\" class=\"headerlink\" title=\"Out\"></a>Out</h3><p>不需給定初始值，但必須在程式結束前需要初始化參數(給值)</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      Calculate(<span class=\"keyword\">out</span> a);</span><br><span class=\"line\">      console.WriteLine(a); <span class=\"comment\">//33</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Calculate</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"built_in\">int</span> a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">      a = <span class=\"number\">33</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><ol>\n<li>ref 需要將參數初始化而Out 不需要</li>\n<li>Out 與 ref 都是以 By Reference 作為參數傳遞</li>\n<li>ref 需要在執行前初始化參數(給值)而 out 是在程式結束前需要初始化參數(給值)</li>\n</ol>\n","site":{"data":{}},"length":788,"excerpt":"<p>今天在撰寫專案時，突然忘記<code>out</code>使用方式，索性今天晚上複習一下其他參數修飾詞。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://adon988.logdown.com/posts/1179503\">C# Method - Main、void、ref、out、overloading - 教學筆記</a><br><a href=\"https://dotblogs.com.tw/erictsaiblog/2015/05/10/151238\">[C#] Out 與 ref 差異</a></p>\n<hr>\n<h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><p>當method不回傳值時，就必須使用 <code>void</code>類型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      console.WriteLine(<span class=\"string\">&quot;11&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p>必須先給定初始值，會將變數記憶體位置傳給<code>Methods</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">      Calculate(<span class=\"keyword\">ref</span> a);</span><br><span class=\"line\">      console.WriteLine(a); <span class=\"comment\">//100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Calculate</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"built_in\">int</span> a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">      a = a *<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"Out\"><a href=\"#Out\" class=\"headerlink\" title=\"Out\"></a>Out</h3><p>不需給定初始值，但必須在程式結束前需要初始化參數(給值)</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      Calculate(<span class=\"keyword\">out</span> a);</span><br><span class=\"line\">      console.WriteLine(a); <span class=\"comment\">//33</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Calculate</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"built_in\">int</span> a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">      a = <span class=\"number\">33</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小結論\"><a href=\"#小結論\" class=\"headerlink\" title=\"小結論\"></a>小結論</h3><ol>\n<li>ref 需要將參數初始化而Out 不需要</li>\n<li>Out 與 ref 都是以 By Reference 作為參數傳遞</li>\n<li>ref 需要在執行前初始化參數(給值)而 out 是在程式結束前需要初始化參數(給值)</li>\n</ol>"},{"title":"2021-01-27-JavaScript事件機制複習","abbrlink":1363835460,"_content":"記錄一下今天專案上遇到跳窗事件，重複觸發Alert訊息問題。\n<!-- more -->\n---\n參考資料：\n[JavaScript 所謂的「停止事件」到底是怎麼一回事？](https://ithelp.ithome.com.tw/articles/10198999)\n[重新認識 JavaScript: Day 14 事件機制的原理](https://ithelp.ithome.com.tw/articles/10191970)\n[event.preventDefault()跟return false的差別是?](https://yiyingloveart.blogspot.com/2013/08/eventpreventdefaultreturn-false.html)\n---\n### onclick 和 addEventListener 差異\n1. 兩者都可以針對同一個`DOM`綁定不同事件\n2. `onclick`若綁定多個事件，只會顯示最後一個綁定的事件，前面事件會被複寫，這在接手前人專案時必須留意。\n3. `addEventListener` 也可以綁定多個事件，但不會被前面事件複寫。\n\n\n### 事件原理\n![事件機制](https://i.imgur.com/IdQiL3Z.png)\n事件有兩種機制，冒泡和捕捉。而我們有時候將事件綁定放在子元素時，就會造成事件也觸發父層問題。\n因此我們可以透過`event.stopPropagation()`來阻止事件冒泡。\n\n而在專案中很常使用`JQuery`的`return false`則會幫我們執行\n1. `event.stopPropagation()`\n2. `event.preventDefault()`\n3.  停止callback function 執行。","source":"_posts/2021-01-27-JavaScript事件機制複習.md","raw":"---\ntitle: 2021-01-27-JavaScript事件機制複習\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 1363835460\n---\n記錄一下今天專案上遇到跳窗事件，重複觸發Alert訊息問題。\n<!-- more -->\n---\n參考資料：\n[JavaScript 所謂的「停止事件」到底是怎麼一回事？](https://ithelp.ithome.com.tw/articles/10198999)\n[重新認識 JavaScript: Day 14 事件機制的原理](https://ithelp.ithome.com.tw/articles/10191970)\n[event.preventDefault()跟return false的差別是?](https://yiyingloveart.blogspot.com/2013/08/eventpreventdefaultreturn-false.html)\n---\n### onclick 和 addEventListener 差異\n1. 兩者都可以針對同一個`DOM`綁定不同事件\n2. `onclick`若綁定多個事件，只會顯示最後一個綁定的事件，前面事件會被複寫，這在接手前人專案時必須留意。\n3. `addEventListener` 也可以綁定多個事件，但不會被前面事件複寫。\n\n\n### 事件原理\n![事件機制](https://i.imgur.com/IdQiL3Z.png)\n事件有兩種機制，冒泡和捕捉。而我們有時候將事件綁定放在子元素時，就會造成事件也觸發父層問題。\n因此我們可以透過`event.stopPropagation()`來阻止事件冒泡。\n\n而在專案中很常使用`JQuery`的`return false`則會幫我們執行\n1. `event.stopPropagation()`\n2. `event.preventDefault()`\n3.  停止callback function 執行。","slug":"2021-01-27-JavaScript事件機制複習","published":1,"date":"2021-01-27T14:31:54.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4v007xzqzi5kqc9udx","content":"<p>記錄一下今天專案上遇到跳窗事件，重複觸發Alert訊息問題。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10198999\">JavaScript 所謂的「停止事件」到底是怎麼一回事？</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10191970\">重新認識 JavaScript: Day 14 事件機制的原理</a><br><a href=\"https://yiyingloveart.blogspot.com/2013/08/eventpreventdefaultreturn-false.html\">event.preventDefault()跟return false的差別是?</a></p>\n<hr>\n<h3 id=\"onclick-和-addEventListener-差異\"><a href=\"#onclick-和-addEventListener-差異\" class=\"headerlink\" title=\"onclick 和 addEventListener 差異\"></a>onclick 和 addEventListener 差異</h3><ol>\n<li>兩者都可以針對同一個<code>DOM</code>綁定不同事件</li>\n<li><code>onclick</code>若綁定多個事件，只會顯示最後一個綁定的事件，前面事件會被複寫，這在接手前人專案時必須留意。</li>\n<li><code>addEventListener</code> 也可以綁定多個事件，但不會被前面事件複寫。</li>\n</ol>\n<h3 id=\"事件原理\"><a href=\"#事件原理\" class=\"headerlink\" title=\"事件原理\"></a>事件原理</h3><p><img src=\"https://i.imgur.com/IdQiL3Z.png\" alt=\"事件機制\"><br>事件有兩種機制，冒泡和捕捉。而我們有時候將事件綁定放在子元素時，就會造成事件也觸發父層問題。<br>因此我們可以透過<code>event.stopPropagation()</code>來阻止事件冒泡。</p>\n<p>而在專案中很常使用<code>JQuery</code>的<code>return false</code>則會幫我們執行</p>\n<ol>\n<li><code>event.stopPropagation()</code></li>\n<li><code>event.preventDefault()</code></li>\n<li>停止callback function 執行。</li>\n</ol>\n","site":{"data":{}},"length":452,"excerpt":"<p>記錄一下今天專案上遇到跳窗事件，重複觸發Alert訊息問題。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10198999\">JavaScript 所謂的「停止事件」到底是怎麼一回事？</a><br><a href=\"https://ithelp.ithome.com.tw/articles/10191970\">重新認識 JavaScript: Day 14 事件機制的原理</a><br><a href=\"https://yiyingloveart.blogspot.com/2013/08/eventpreventdefaultreturn-false.html\">event.preventDefault()跟return false的差別是?</a></p>\n<hr>\n<h3 id=\"onclick-和-addEventListener-差異\"><a href=\"#onclick-和-addEventListener-差異\" class=\"headerlink\" title=\"onclick 和 addEventListener 差異\"></a>onclick 和 addEventListener 差異</h3><ol>\n<li>兩者都可以針對同一個<code>DOM</code>綁定不同事件</li>\n<li><code>onclick</code>若綁定多個事件，只會顯示最後一個綁定的事件，前面事件會被複寫，這在接手前人專案時必須留意。</li>\n<li><code>addEventListener</code> 也可以綁定多個事件，但不會被前面事件複寫。</li>\n</ol>\n<h3 id=\"事件原理\"><a href=\"#事件原理\" class=\"headerlink\" title=\"事件原理\"></a>事件原理</h3><p><img src=\"https://i.imgur.com/IdQiL3Z.png\" alt=\"事件機制\"><br>事件有兩種機制，冒泡和捕捉。而我們有時候將事件綁定放在子元素時，就會造成事件也觸發父層問題。<br>因此我們可以透過<code>event.stopPropagation()</code>來阻止事件冒泡。</p>\n<p>而在專案中很常使用<code>JQuery</code>的<code>return false</code>則會幫我們執行</p>\n<ol>\n<li><code>event.stopPropagation()</code></li>\n<li><code>event.preventDefault()</code></li>\n<li>停止callback function 執行。</li>\n</ol>"},{"title":"2021-02-02-Private常見用途","abbrlink":2232905942,"_content":"紀錄`Private`用法\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第25課-Private 的常見用途](https://www.youtube.com/watch?v=Js8AmCoecIo&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=27)\n---\n### 前提\n1. 類別( Class ) 若為 Public，即可在程式中任何一處被存取\n2. 類別( Class ) 若為 Ｐrivate，只能在同一個( Class )中被存取。\n\n### 用途\n1. class中的 property 不想被看到或修改(唯讀）\n```C#\npublic class Demo1\n{\n   private string password = \"\";\n}\n```\n\n\n2. 讓class的 property 設定上增加一些限制 \n假設今天我們有個情境，遊戲中人物血量最小為0，當他觸碰陷阱時會被扣100滴血。因此我們血量必須為非負的整數。\n```C#\npublic class Demo2\n{\n   private int Life =10000;//不讓外部修改血量\n\n   public void checkUserMoney(int FineMoney)\n   {\n     if(Life > FineMoney)\n     {\n        Life -= FineMoney;\n     }\n     else{\n        Life = 0;\n     }\n   }\n\n   public int showResumeLife()\n   {\n     return Life;\n   }\n}\n\n  public class Test\n  {\n    private int FineMoney = 100;\n    Demo2 check = new Demo2();\n    check.checkUserMoney(FineMoney);\n\n    check.showResumeLife();//顯示目前血量\n  }\n\n```\n","source":"_posts/2021-02-02-Private常見用途.md","raw":"---\ntitle: 2021-02-02-Private常見用途\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 2232905942\n---\n紀錄`Private`用法\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第25課-Private 的常見用途](https://www.youtube.com/watch?v=Js8AmCoecIo&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=27)\n---\n### 前提\n1. 類別( Class ) 若為 Public，即可在程式中任何一處被存取\n2. 類別( Class ) 若為 Ｐrivate，只能在同一個( Class )中被存取。\n\n### 用途\n1. class中的 property 不想被看到或修改(唯讀）\n```C#\npublic class Demo1\n{\n   private string password = \"\";\n}\n```\n\n\n2. 讓class的 property 設定上增加一些限制 \n假設今天我們有個情境，遊戲中人物血量最小為0，當他觸碰陷阱時會被扣100滴血。因此我們血量必須為非負的整數。\n```C#\npublic class Demo2\n{\n   private int Life =10000;//不讓外部修改血量\n\n   public void checkUserMoney(int FineMoney)\n   {\n     if(Life > FineMoney)\n     {\n        Life -= FineMoney;\n     }\n     else{\n        Life = 0;\n     }\n   }\n\n   public int showResumeLife()\n   {\n     return Life;\n   }\n}\n\n  public class Test\n  {\n    private int FineMoney = 100;\n    Demo2 check = new Demo2();\n    check.checkUserMoney(FineMoney);\n\n    check.showResumeLife();//顯示目前血量\n  }\n\n```\n","slug":"2021-02-02-Private常見用途","published":1,"date":"2021-02-03T14:34:48.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4w0081zqzi54dp4s1s","content":"<p>紀錄<code>Private</code>用法</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=Js8AmCoecIo&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=27\">小山的 C# 教學-第25課-Private 的常見用途</a></p>\n<hr>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ol>\n<li>類別( Class ) 若為 Public，即可在程式中任何一處被存取</li>\n<li>類別( Class ) 若為 Ｐrivate，只能在同一個( Class )中被存取。</li>\n</ol>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>class中的 property 不想被看到或修改(唯讀）<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> password = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li>讓class的 property 設定上增加一些限制<br>假設今天我們有個情境，遊戲中人物血量最小為0，當他觸碰陷阱時會被扣100滴血。因此我們血量必須為非負的整數。<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> Life =<span class=\"number\">10000</span>;<span class=\"comment\">//不讓外部修改血量</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkUserMoney</span>(<span class=\"params\"><span class=\"built_in\">int</span> FineMoney</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(Life &gt; FineMoney)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        Life -= FineMoney;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        Life = <span class=\"number\">0</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">showResumeLife</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Life;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> FineMoney = <span class=\"number\">100</span>;</span><br><span class=\"line\">    Demo2 check = <span class=\"keyword\">new</span> Demo2();</span><br><span class=\"line\">    check.checkUserMoney(FineMoney);</span><br><span class=\"line\"></span><br><span class=\"line\">    check.showResumeLife();<span class=\"comment\">//顯示目前血量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"length":701,"excerpt":"<p>紀錄<code>Private</code>用法</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=Js8AmCoecIo&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=27\">小山的 C# 教學-第25課-Private 的常見用途</a></p>\n<hr>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ol>\n<li>類別( Class ) 若為 Public，即可在程式中任何一處被存取</li>\n<li>類別( Class ) 若為 Ｐrivate，只能在同一個( Class )中被存取。</li>\n</ol>\n<h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><ol>\n<li>class中的 property 不想被看到或修改(唯讀）<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> password = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li>讓class的 property 設定上增加一些限制<br>假設今天我們有個情境，遊戲中人物血量最小為0，當他觸碰陷阱時會被扣100滴血。因此我們血量必須為非負的整數。<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> Life =<span class=\"number\">10000</span>;<span class=\"comment\">//不讓外部修改血量</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkUserMoney</span>(<span class=\"params\"><span class=\"built_in\">int</span> FineMoney</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(Life &gt; FineMoney)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        Life -= FineMoney;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        Life = <span class=\"number\">0</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">showResumeLife</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Life;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> FineMoney = <span class=\"number\">100</span>;</span><br><span class=\"line\">    Demo2 check = <span class=\"keyword\">new</span> Demo2();</span><br><span class=\"line\">    check.checkUserMoney(FineMoney);</span><br><span class=\"line\"></span><br><span class=\"line\">    check.showResumeLife();<span class=\"comment\">//顯示目前血量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"2021-02-01-商業思維-技術工作者的商業思維","abbrlink":2245458834,"_content":"紀錄、反思商業思維學院聽完91大大分享的內容。\n<!-- more -->\n---\n參考資料：\n[商業思維](https://bizthinking.com.tw/)\n[In 91](https://dotblogs.com.tw/hatelove)\n---\n## 前提\n內容分為四個部分：工作經驗、創造連結、技術變現、職涯發展。前半部分我想快速總結自己在這場講座獲得的想法，後半部著重簡報內容的紀錄。\n\n## ㄧ、心得反思\n1. 專業價值為本：\n在第一階段聽著91分享他的工作職涯選擇時，讓我最有感觸的應該是第一份工作磨鍊出來的專業能力，雖然91輕描淡寫講過，但我聽的當下覺得那份工作一定不是人幹的 XD，才能在短時間內創造自己的高價值。進而有後續的工作邀約、異業合作機會等等。\n\n2. 綜效效益：\n找尋一份可以讓自己持續耕耘的興趣，並思考如何結合自己本身擅長的事情。來發揮1+1大於2的效果。\n> 獨特性＋專業領域 ＝ 人力資源的寡占市場\n\n3. 問題反思\n完整問題，我放在後半部分筆記整理中，這邊就挑幾個有趣的問題來試著回答。\n- 我真正感到熱愛的技能、工作、喜好、專業是哪些？\n> 關於熱愛的技能、喜好，這部分我自己也還在探索。只是感覺目前還是不太清楚熱愛的東西，雖然工作也不會痛苦但好像也不到熱愛的程度XD\n- 如何養成能解決別人問題的能力，並讓人知道？\n> 多發問多犯錯，其實這讓我想到在技術圈社群中，每天都有超多問題（不論困難或簡單），這邊就是蠻好的環境來讓自己解決問題。\n> Action: \n> 1. 一週至少在社群中回答一次在自身能力範圍內的問題。\n> 2. 初期我想要試著一樣一週一篇在IT鐵人幫，發表這週學到有關前端內容的筆記摘要～\n\n--- \n## 二、講座內容紀錄\n### 創造連結\n基本上幾個重點，自我身份曝光、社群參與、貢獻、品牌形象建立。\n\n### 職涯發展\n1. JOB\n - 用時間賺時間\n > 替老闆省時間，創造自己更多嘗試新事物的時間.\n > 這點讓我直覺想到就像技術人員開發時，如果能夠將功能模組化，就能省下重複撰寫程式碼時間。\n - 向上溝通\n > 讓主管清楚你目前的工作狀態。\n - 成長心態\n > 將公司外所學，帶回來影響公司開發品質。\n2. Work\n - 長期投資\n > 既有基礎下多方嘗試。\n - 綜合效益\n > 將嘗試過熱愛的事物結合，產生變現(錢)效益。\n - 連結\n > 輸出，建立個人品牌形象等等。\n\n3. Career\n - 成長 > 考核\n > 成長是跟著職涯走，但是考核是跟著主管走。所以自己的價值是跟著自己走而非離開公司價值歸零。\n - 天花板 > 薪水\n > 長期來看，我認同91講的概念。但對於短期(3-5年)我反而有不同想法，以 junior 工程師為例，薪水反而是促使自己進步的動力。為了滿足下一份薪水的能力，反而會因此逼迫提升自身能力。\n - 成果 > 履歷\n > 成果是最好的履歷。\n\n4. Values\n - 初心：擇己所愛\n - 人脈：真正能幫助多少人\n - 自由：做自己，不委屈\n\n\n### 問題思考\n- 我目前用來創造商業價值的主要依據為何？\n\n- 我真正感到熱愛的技能、工作、喜好、專業是哪些？\n\n- 如何從我熱愛的領域變現或創造商業價值？\n\n- 誰會需要這樣的商業價值？為什麼要選擇我？\n\n- 哪些熱愛的領域交集，能產生綜效或獨特商業價值？\n\n- 還有哪些需求或商機，需要哪些領域交集才能達成？\n\n- 如何養成能解決別人問題的能力，並讓人知道？\n\n- 怎麼發現他人有這樣的需求與問題？\n\n- 怎麼讓他們願意選擇我，接受我的幫助？\n\n\n","source":"_posts/2021-02-01-商業思維-技術工作者的商業思維.md","raw":"---\ntitle: 2021-02-01-商業思維-技術工作者的商業思維\ntags:\n  - 商業思維\ncategories:\n  - 心得\n  - 商業思維\nabbrlink: 2245458834\n---\n紀錄、反思商業思維學院聽完91大大分享的內容。\n<!-- more -->\n---\n參考資料：\n[商業思維](https://bizthinking.com.tw/)\n[In 91](https://dotblogs.com.tw/hatelove)\n---\n## 前提\n內容分為四個部分：工作經驗、創造連結、技術變現、職涯發展。前半部分我想快速總結自己在這場講座獲得的想法，後半部著重簡報內容的紀錄。\n\n## ㄧ、心得反思\n1. 專業價值為本：\n在第一階段聽著91分享他的工作職涯選擇時，讓我最有感觸的應該是第一份工作磨鍊出來的專業能力，雖然91輕描淡寫講過，但我聽的當下覺得那份工作一定不是人幹的 XD，才能在短時間內創造自己的高價值。進而有後續的工作邀約、異業合作機會等等。\n\n2. 綜效效益：\n找尋一份可以讓自己持續耕耘的興趣，並思考如何結合自己本身擅長的事情。來發揮1+1大於2的效果。\n> 獨特性＋專業領域 ＝ 人力資源的寡占市場\n\n3. 問題反思\n完整問題，我放在後半部分筆記整理中，這邊就挑幾個有趣的問題來試著回答。\n- 我真正感到熱愛的技能、工作、喜好、專業是哪些？\n> 關於熱愛的技能、喜好，這部分我自己也還在探索。只是感覺目前還是不太清楚熱愛的東西，雖然工作也不會痛苦但好像也不到熱愛的程度XD\n- 如何養成能解決別人問題的能力，並讓人知道？\n> 多發問多犯錯，其實這讓我想到在技術圈社群中，每天都有超多問題（不論困難或簡單），這邊就是蠻好的環境來讓自己解決問題。\n> Action: \n> 1. 一週至少在社群中回答一次在自身能力範圍內的問題。\n> 2. 初期我想要試著一樣一週一篇在IT鐵人幫，發表這週學到有關前端內容的筆記摘要～\n\n--- \n## 二、講座內容紀錄\n### 創造連結\n基本上幾個重點，自我身份曝光、社群參與、貢獻、品牌形象建立。\n\n### 職涯發展\n1. JOB\n - 用時間賺時間\n > 替老闆省時間，創造自己更多嘗試新事物的時間.\n > 這點讓我直覺想到就像技術人員開發時，如果能夠將功能模組化，就能省下重複撰寫程式碼時間。\n - 向上溝通\n > 讓主管清楚你目前的工作狀態。\n - 成長心態\n > 將公司外所學，帶回來影響公司開發品質。\n2. Work\n - 長期投資\n > 既有基礎下多方嘗試。\n - 綜合效益\n > 將嘗試過熱愛的事物結合，產生變現(錢)效益。\n - 連結\n > 輸出，建立個人品牌形象等等。\n\n3. Career\n - 成長 > 考核\n > 成長是跟著職涯走，但是考核是跟著主管走。所以自己的價值是跟著自己走而非離開公司價值歸零。\n - 天花板 > 薪水\n > 長期來看，我認同91講的概念。但對於短期(3-5年)我反而有不同想法，以 junior 工程師為例，薪水反而是促使自己進步的動力。為了滿足下一份薪水的能力，反而會因此逼迫提升自身能力。\n - 成果 > 履歷\n > 成果是最好的履歷。\n\n4. Values\n - 初心：擇己所愛\n - 人脈：真正能幫助多少人\n - 自由：做自己，不委屈\n\n\n### 問題思考\n- 我目前用來創造商業價值的主要依據為何？\n\n- 我真正感到熱愛的技能、工作、喜好、專業是哪些？\n\n- 如何從我熱愛的領域變現或創造商業價值？\n\n- 誰會需要這樣的商業價值？為什麼要選擇我？\n\n- 哪些熱愛的領域交集，能產生綜效或獨特商業價值？\n\n- 還有哪些需求或商機，需要哪些領域交集才能達成？\n\n- 如何養成能解決別人問題的能力，並讓人知道？\n\n- 怎麼發現他人有這樣的需求與問題？\n\n- 怎麼讓他們願意選擇我，接受我的幫助？\n\n\n","slug":"2021-02-01-商業思維-技術工作者的商業思維","published":1,"date":"2021-02-01T15:30:41.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4x0084zqzicf7nggqr","content":"<p>紀錄、反思商業思維學院聽完91大大分享的內容。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://bizthinking.com.tw/\">商業思維</a><br><a href=\"https://dotblogs.com.tw/hatelove\">In 91</a></p>\n<hr>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>內容分為四個部分：工作經驗、創造連結、技術變現、職涯發展。前半部分我想快速總結自己在這場講座獲得的想法，後半部著重簡報內容的紀錄。</p>\n<h2 id=\"ㄧ、心得反思\"><a href=\"#ㄧ、心得反思\" class=\"headerlink\" title=\"ㄧ、心得反思\"></a>ㄧ、心得反思</h2><ol>\n<li><p>專業價值為本：<br>在第一階段聽著91分享他的工作職涯選擇時，讓我最有感觸的應該是第一份工作磨鍊出來的專業能力，雖然91輕描淡寫講過，但我聽的當下覺得那份工作一定不是人幹的 XD，才能在短時間內創造自己的高價值。進而有後續的工作邀約、異業合作機會等等。</p>\n</li>\n<li><p>綜效效益：<br>找尋一份可以讓自己持續耕耘的興趣，並思考如何結合自己本身擅長的事情。來發揮1+1大於2的效果。</p>\n<blockquote>\n<p>獨特性＋專業領域 ＝ 人力資源的寡占市場</p>\n</blockquote>\n</li>\n<li><p>問題反思<br>完整問題，我放在後半部分筆記整理中，這邊就挑幾個有趣的問題來試著回答。</p>\n</li>\n</ol>\n<ul>\n<li>我真正感到熱愛的技能、工作、喜好、專業是哪些？<blockquote>\n<p>關於熱愛的技能、喜好，這部分我自己也還在探索。只是感覺目前還是不太清楚熱愛的東西，雖然工作也不會痛苦但好像也不到熱愛的程度XD</p>\n</blockquote>\n</li>\n<li>如何養成能解決別人問題的能力，並讓人知道？<blockquote>\n<p>多發問多犯錯，其實這讓我想到在技術圈社群中，每天都有超多問題（不論困難或簡單），這邊就是蠻好的環境來讓自己解決問題。<br>Action: </p>\n<ol>\n<li>一週至少在社群中回答一次在自身能力範圍內的問題。</li>\n<li>初期我想要試著一樣一週一篇在IT鐵人幫，發表這週學到有關前端內容的筆記摘要～</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"二、講座內容紀錄\"><a href=\"#二、講座內容紀錄\" class=\"headerlink\" title=\"二、講座內容紀錄\"></a>二、講座內容紀錄</h2><h3 id=\"創造連結\"><a href=\"#創造連結\" class=\"headerlink\" title=\"創造連結\"></a>創造連結</h3><p>基本上幾個重點，自我身份曝光、社群參與、貢獻、品牌形象建立。</p>\n<h3 id=\"職涯發展\"><a href=\"#職涯發展\" class=\"headerlink\" title=\"職涯發展\"></a>職涯發展</h3><ol>\n<li><p>JOB</p>\n<ul>\n<li>用時間賺時間<blockquote>\n<p>替老闆省時間，創造自己更多嘗試新事物的時間.<br>這點讓我直覺想到就像技術人員開發時，如果能夠將功能模組化，就能省下重複撰寫程式碼時間。</p>\n</blockquote>\n</li>\n<li>向上溝通<blockquote>\n<p>讓主管清楚你目前的工作狀態。</p>\n</blockquote>\n</li>\n<li>成長心態<blockquote>\n<p>將公司外所學，帶回來影響公司開發品質。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Work</p>\n<ul>\n<li>長期投資<blockquote>\n<p>既有基礎下多方嘗試。</p>\n</blockquote>\n</li>\n<li>綜合效益<blockquote>\n<p>將嘗試過熱愛的事物結合，產生變現(錢)效益。</p>\n</blockquote>\n</li>\n<li>連結<blockquote>\n<p>輸出，建立個人品牌形象等等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Career</p>\n<ul>\n<li>成長 &gt; 考核<blockquote>\n<p>成長是跟著職涯走，但是考核是跟著主管走。所以自己的價值是跟著自己走而非離開公司價值歸零。</p>\n</blockquote>\n</li>\n<li>天花板 &gt; 薪水<blockquote>\n<p>長期來看，我認同91講的概念。但對於短期(3-5年)我反而有不同想法，以 junior 工程師為例，薪水反而是促使自己進步的動力。為了滿足下一份薪水的能力，反而會因此逼迫提升自身能力。</p>\n</blockquote>\n</li>\n<li>成果 &gt; 履歷<blockquote>\n<p>成果是最好的履歷。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Values</p>\n<ul>\n<li>初心：擇己所愛</li>\n<li>人脈：真正能幫助多少人</li>\n<li>自由：做自己，不委屈</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"問題思考\"><a href=\"#問題思考\" class=\"headerlink\" title=\"問題思考\"></a>問題思考</h3><ul>\n<li><p>我目前用來創造商業價值的主要依據為何？</p>\n</li>\n<li><p>我真正感到熱愛的技能、工作、喜好、專業是哪些？</p>\n</li>\n<li><p>如何從我熱愛的領域變現或創造商業價值？</p>\n</li>\n<li><p>誰會需要這樣的商業價值？為什麼要選擇我？</p>\n</li>\n<li><p>哪些熱愛的領域交集，能產生綜效或獨特商業價值？</p>\n</li>\n<li><p>還有哪些需求或商機，需要哪些領域交集才能達成？</p>\n</li>\n<li><p>如何養成能解決別人問題的能力，並讓人知道？</p>\n</li>\n<li><p>怎麼發現他人有這樣的需求與問題？</p>\n</li>\n<li><p>怎麼讓他們願意選擇我，接受我的幫助？</p>\n</li>\n</ul>\n","site":{"data":{}},"length":1189,"excerpt":"<p>紀錄、反思商業思維學院聽完91大大分享的內容。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://bizthinking.com.tw/\">商業思維</a><br><a href=\"https://dotblogs.com.tw/hatelove\">In 91</a></p>\n<hr>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>內容分為四個部分：工作經驗、創造連結、技術變現、職涯發展。前半部分我想快速總結自己在這場講座獲得的想法，後半部著重簡報內容的紀錄。</p>\n<h2 id=\"ㄧ、心得反思\"><a href=\"#ㄧ、心得反思\" class=\"headerlink\" title=\"ㄧ、心得反思\"></a>ㄧ、心得反思</h2><ol>\n<li><p>專業價值為本：<br>在第一階段聽著91分享他的工作職涯選擇時，讓我最有感觸的應該是第一份工作磨鍊出來的專業能力，雖然91輕描淡寫講過，但我聽的當下覺得那份工作一定不是人幹的 XD，才能在短時間內創造自己的高價值。進而有後續的工作邀約、異業合作機會等等。</p>\n</li>\n<li><p>綜效效益：<br>找尋一份可以讓自己持續耕耘的興趣，並思考如何結合自己本身擅長的事情。來發揮1+1大於2的效果。</p>\n<blockquote>\n<p>獨特性＋專業領域 ＝ 人力資源的寡占市場</p>\n</blockquote>\n</li>\n<li><p>問題反思<br>完整問題，我放在後半部分筆記整理中，這邊就挑幾個有趣的問題來試著回答。</p>\n</li>\n</ol>\n<ul>\n<li>我真正感到熱愛的技能、工作、喜好、專業是哪些？<blockquote>\n<p>關於熱愛的技能、喜好，這部分我自己也還在探索。只是感覺目前還是不太清楚熱愛的東西，雖然工作也不會痛苦但好像也不到熱愛的程度XD</p>\n</blockquote>\n</li>\n<li>如何養成能解決別人問題的能力，並讓人知道？<blockquote>\n<p>多發問多犯錯，其實這讓我想到在技術圈社群中，每天都有超多問題（不論困難或簡單），這邊就是蠻好的環境來讓自己解決問題。<br>Action: </p>\n<ol>\n<li>一週至少在社群中回答一次在自身能力範圍內的問題。</li>\n<li>初期我想要試著一樣一週一篇在IT鐵人幫，發表這週學到有關前端內容的筆記摘要～</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"二、講座內容紀錄\"><a href=\"#二、講座內容紀錄\" class=\"headerlink\" title=\"二、講座內容紀錄\"></a>二、講座內容紀錄</h2><h3 id=\"創造連結\"><a href=\"#創造連結\" class=\"headerlink\" title=\"創造連結\"></a>創造連結</h3><p>基本上幾個重點，自我身份曝光、社群參與、貢獻、品牌形象建立。</p>\n<h3 id=\"職涯發展\"><a href=\"#職涯發展\" class=\"headerlink\" title=\"職涯發展\"></a>職涯發展</h3><ol>\n<li><p>JOB</p>\n<ul>\n<li>用時間賺時間<blockquote>\n<p>替老闆省時間，創造自己更多嘗試新事物的時間.<br>這點讓我直覺想到就像技術人員開發時，如果能夠將功能模組化，就能省下重複撰寫程式碼時間。</p>\n</blockquote>\n</li>\n<li>向上溝通<blockquote>\n<p>讓主管清楚你目前的工作狀態。</p>\n</blockquote>\n</li>\n<li>成長心態<blockquote>\n<p>將公司外所學，帶回來影響公司開發品質。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Work</p>\n<ul>\n<li>長期投資<blockquote>\n<p>既有基礎下多方嘗試。</p>\n</blockquote>\n</li>\n<li>綜合效益<blockquote>\n<p>將嘗試過熱愛的事物結合，產生變現(錢)效益。</p>\n</blockquote>\n</li>\n<li>連結<blockquote>\n<p>輸出，建立個人品牌形象等等。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Career</p>\n<ul>\n<li>成長 &gt; 考核<blockquote>\n<p>成長是跟著職涯走，但是考核是跟著主管走。所以自己的價值是跟著自己走而非離開公司價值歸零。</p>\n</blockquote>\n</li>\n<li>天花板 &gt; 薪水<blockquote>\n<p>長期來看，我認同91講的概念。但對於短期(3-5年)我反而有不同想法，以 junior 工程師為例，薪水反而是促使自己進步的動力。為了滿足下一份薪水的能力，反而會因此逼迫提升自身能力。</p>\n</blockquote>\n</li>\n<li>成果 &gt; 履歷<blockquote>\n<p>成果是最好的履歷。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>Values</p>\n<ul>\n<li>初心：擇己所愛</li>\n<li>人脈：真正能幫助多少人</li>\n<li>自由：做自己，不委屈</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"問題思考\"><a href=\"#問題思考\" class=\"headerlink\" title=\"問題思考\"></a>問題思考</h3><ul>\n<li><p>我目前用來創造商業價值的主要依據為何？</p>\n</li>\n<li><p>我真正感到熱愛的技能、工作、喜好、專業是哪些？</p>\n</li>\n<li><p>如何從我熱愛的領域變現或創造商業價值？</p>\n</li>\n<li><p>誰會需要這樣的商業價值？為什麼要選擇我？</p>\n</li>\n<li><p>哪些熱愛的領域交集，能產生綜效或獨特商業價值？</p>\n</li>\n<li><p>還有哪些需求或商機，需要哪些領域交集才能達成？</p>\n</li>\n<li><p>如何養成能解決別人問題的能力，並讓人知道？</p>\n</li>\n<li><p>怎麼發現他人有這樣的需求與問題？</p>\n</li>\n<li><p>怎麼讓他們願意選擇我，接受我的幫助？</p>\n</li>\n</ul>"},{"title":"2021-02-09-Get;Set存取","abbrlink":2408193491,"_content":"今天來認識Get;Set;存取器\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第26課-Get & Set 存取器](https://www.youtube.com/watch?v=6PksSUFebeE&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=28)\n---\n### 結論\n1. `get` 用來讀取變數內容\n2. `set` 用來改變變數內容值\n\n\n### 範例\n```C#\nclass Demo\n{\n   public string user  { get; } // 只能存取無法變更值，類似private \n   public string user2 { get;set;}  // 可以傳入數值改變值\n}\n\n```\n","source":"_posts/2021-02-09-Get-Set存取.md","raw":"---\ntitle: 2021-02-09-Get;Set存取\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 2408193491\n---\n今天來認識Get;Set;存取器\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第26課-Get & Set 存取器](https://www.youtube.com/watch?v=6PksSUFebeE&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=28)\n---\n### 結論\n1. `get` 用來讀取變數內容\n2. `set` 用來改變變數內容值\n\n\n### 範例\n```C#\nclass Demo\n{\n   public string user  { get; } // 只能存取無法變更值，類似private \n   public string user2 { get;set;}  // 可以傳入數值改變值\n}\n\n```\n","slug":"2021-02-09-Get-Set存取","published":1,"date":"2021-02-09T14:11:31.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t4y0088zqzi5jr0bfxh","content":"<p>今天來認識Get;Set;存取器</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=6PksSUFebeE&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=28\">小山的 C# 教學-第26課-Get &amp; Set 存取器</a></p>\n<hr>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><ol>\n<li><code>get</code> 用來讀取變數內容</li>\n<li><code>set</code> 用來改變變數內容值</li>\n</ol>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> user  &#123; <span class=\"keyword\">get</span>; &#125; <span class=\"comment\">// 只能存取無法變更值，類似private </span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> user2 &#123; <span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;  <span class=\"comment\">// 可以傳入數值改變值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":203,"excerpt":"<p>今天來認識Get;Set;存取器</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=6PksSUFebeE&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=28\">小山的 C# 教學-第26課-Get &amp; Set 存取器</a></p>\n<hr>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><ol>\n<li><code>get</code> 用來讀取變數內容</li>\n<li><code>set</code> 用來改變變數內容值</li>\n</ol>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> user  &#123; <span class=\"keyword\">get</span>; &#125; <span class=\"comment\">// 只能存取無法變更值，類似private </span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> user2 &#123; <span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;  <span class=\"comment\">// 可以傳入數值改變值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"2021-02-17-封裝性介紹","abbrlink":100034721,"_content":"今天來認識封裝性\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第27課-所以到底甚麼是封裝性？](https://www.youtube.com/watch?v=4F1CkH0lPn4&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=29)\n[小山的 C# 教學-第27課-所以到底甚麼是封裝性？](http://slmtsite.blogspot.com/2013/12/c-27.html)\n---\n\n### 結論\n這邊就直接引用小山老師結論：\n1. 封裝性指得就是`隱藏物件內部細節，使用時只需要了解如何操作即可`\n2. 封裝性英文`Encapsulation`\n\n### 補充\n- 存取範圍修飾詞共有五個 `public` `protected` `internal` `protectedinternal` `private`\n- 當物件`Property` 沒有寫存取範圍修飾詞時，預設為`internal`\n```C#\npublic class Demo\n{\n  int number = 0;\n}\n```\n\n\n","source":"_posts/2021-02-17-封裝性介紹.md","raw":"---\ntitle: 2021-02-17-封裝性介紹\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 100034721\n---\n今天來認識封裝性\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第27課-所以到底甚麼是封裝性？](https://www.youtube.com/watch?v=4F1CkH0lPn4&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=29)\n[小山的 C# 教學-第27課-所以到底甚麼是封裝性？](http://slmtsite.blogspot.com/2013/12/c-27.html)\n---\n\n### 結論\n這邊就直接引用小山老師結論：\n1. 封裝性指得就是`隱藏物件內部細節，使用時只需要了解如何操作即可`\n2. 封裝性英文`Encapsulation`\n\n### 補充\n- 存取範圍修飾詞共有五個 `public` `protected` `internal` `protectedinternal` `private`\n- 當物件`Property` 沒有寫存取範圍修飾詞時，預設為`internal`\n```C#\npublic class Demo\n{\n  int number = 0;\n}\n```\n\n\n","slug":"2021-02-17-封裝性介紹","published":1,"date":"2021-02-17T13:48:46.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t51008czqzi1oiy1i6k","content":"<p>今天來認識封裝性</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=4F1CkH0lPn4&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=29\">小山的 C# 教學-第27課-所以到底甚麼是封裝性？</a><br><a href=\"http://slmtsite.blogspot.com/2013/12/c-27.html\">小山的 C# 教學-第27課-所以到底甚麼是封裝性？</a></p>\n<hr>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>這邊就直接引用小山老師結論：</p>\n<ol>\n<li>封裝性指得就是<code>隱藏物件內部細節，使用時只需要了解如何操作即可</code></li>\n<li>封裝性英文<code>Encapsulation</code></li>\n</ol>\n<h3 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h3><ul>\n<li>存取範圍修飾詞共有五個 <code>public</code> <code>protected</code> <code>internal</code> <code>protectedinternal</code> <code>private</code></li>\n<li>當物件<code>Property</code> 沒有寫存取範圍修飾詞時，預設為<code>internal</code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n","site":{"data":{}},"length":262,"excerpt":"<p>今天來認識封裝性</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=4F1CkH0lPn4&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=29\">小山的 C# 教學-第27課-所以到底甚麼是封裝性？</a><br><a href=\"http://slmtsite.blogspot.com/2013/12/c-27.html\">小山的 C# 教學-第27課-所以到底甚麼是封裝性？</a></p>\n<hr>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>這邊就直接引用小山老師結論：</p>\n<ol>\n<li>封裝性指得就是<code>隱藏物件內部細節，使用時只需要了解如何操作即可</code></li>\n<li>封裝性英文<code>Encapsulation</code></li>\n</ol>\n<h3 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h3><ul>\n<li>存取範圍修飾詞共有五個 <code>public</code> <code>protected</code> <code>internal</code> <code>protectedinternal</code> <code>private</code></li>\n<li>當物件<code>Property</code> 沒有寫存取範圍修飾詞時，預設為<code>internal</code><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>"},{"title":"2021-02-19-繼承性","abbrlink":1596813939,"_content":"今天來認識繼承性\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第28課-繼承性](https://www.youtube.com/watch?v=MdHXU139_fU&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=30)\n---\n### 繼承性\n可以繼承其他物件屬性和方法。其目的在於減少重複程式碼撰寫，方便程式維護。\n\n### 範例\n```c#\npublic class Demo\n{\n  private int hp;\n  public string getHp()\n  {\n     return hp;\n  }\n}\n             //繼承Demo屬性和方法\npublic class Demo2: Demo\n{\n   private int hurt;\n}\n\npublic class Test\n{\n  Demo2 A = new Demo2();\n  A.int = 10;\n  Console.WriteLine(A.int); //10\n}\n\n```\n","source":"_posts/2021-02-19-繼承性.md","raw":"---\ntitle: 2021-02-19-繼承性\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 1596813939\n---\n今天來認識繼承性\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第28課-繼承性](https://www.youtube.com/watch?v=MdHXU139_fU&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=30)\n---\n### 繼承性\n可以繼承其他物件屬性和方法。其目的在於減少重複程式碼撰寫，方便程式維護。\n\n### 範例\n```c#\npublic class Demo\n{\n  private int hp;\n  public string getHp()\n  {\n     return hp;\n  }\n}\n             //繼承Demo屬性和方法\npublic class Demo2: Demo\n{\n   private int hurt;\n}\n\npublic class Test\n{\n  Demo2 A = new Demo2();\n  A.int = 10;\n  Console.WriteLine(A.int); //10\n}\n\n```\n","slug":"2021-02-19-繼承性","published":1,"date":"2021-02-19T15:28:18.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t52008fzqzi6m0k7vj5","content":"<p>今天來認識繼承性</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=MdHXU139_fU&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=30\">小山的 C# 教學-第28課-繼承性</a></p>\n<hr>\n<h3 id=\"繼承性\"><a href=\"#繼承性\" class=\"headerlink\" title=\"繼承性\"></a>繼承性</h3><p>可以繼承其他物件屬性和方法。其目的在於減少重複程式碼撰寫，方便程式維護。</p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hp;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">getHp</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> hp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">             <span class=\"comment\">//繼承Demo屬性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hurt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Demo2 A = <span class=\"keyword\">new</span> Demo2();</span><br><span class=\"line\">  A.<span class=\"built_in\">int</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">  Console.WriteLine(A.<span class=\"built_in\">int</span>); <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":327,"excerpt":"<p>今天來認識繼承性</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=MdHXU139_fU&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=30\">小山的 C# 教學-第28課-繼承性</a></p>\n<hr>\n<h3 id=\"繼承性\"><a href=\"#繼承性\" class=\"headerlink\" title=\"繼承性\"></a>繼承性</h3><p>可以繼承其他物件屬性和方法。其目的在於減少重複程式碼撰寫，方便程式維護。</p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hp;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">getHp</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> hp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">             <span class=\"comment\">//繼承Demo屬性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hurt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Demo2 A = <span class=\"keyword\">new</span> Demo2();</span><br><span class=\"line\">  A.<span class=\"built_in\">int</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\">  Console.WriteLine(A.<span class=\"built_in\">int</span>); <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"2021-02-22-繼承性(續)","abbrlink":449169581,"_content":"今天來認識繼承性\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第29課-繼承性(續)](https://www.youtube.com/watch?v=sRddjKhx9hk&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=31)\n---\n### 名詞說明\n```c#\n1. 我們通常把被繼承的 class 稱為基底類別(Base Class) EX:Demo\n2. 繼承的 class 稱為衍生類別 (Derived Class)       EX:Demo2\npublic class Demo2: Demo\n{\n   private int hurt;\n}\n```\n\n\n### 減少相同class 重複程式碼範例\n```c#\npublic class Demo\n{\n  private int hp;\n  public string getHp()\n  {\n     return hp;\n  }\n\n  public void hurt(int point)\n  {\n    hp -= point;\n  }\n}\n             //繼承Demo屬性和方法\npublic class Demo2: Demo\n{\n   public void Attack(Demo d)\n   {\n     d.hurt(10);\n   }\n}\n\npublic class Demo3: Demo\n{\n   \n}\n\n\npublic class Test\n{\n  Demo2 monster1 = new Demo2();\n  Demo3 monster2 = new Demo3();\n\n  monster1.Attack(monster1);\n  monster2.Attack(monster2);\n\n}\n\n```\n","source":"_posts/2021-02-22-繼承性-續.md","raw":"---\ntitle: 2021-02-22-繼承性(續)\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 449169581\n---\n今天來認識繼承性\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第29課-繼承性(續)](https://www.youtube.com/watch?v=sRddjKhx9hk&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=31)\n---\n### 名詞說明\n```c#\n1. 我們通常把被繼承的 class 稱為基底類別(Base Class) EX:Demo\n2. 繼承的 class 稱為衍生類別 (Derived Class)       EX:Demo2\npublic class Demo2: Demo\n{\n   private int hurt;\n}\n```\n\n\n### 減少相同class 重複程式碼範例\n```c#\npublic class Demo\n{\n  private int hp;\n  public string getHp()\n  {\n     return hp;\n  }\n\n  public void hurt(int point)\n  {\n    hp -= point;\n  }\n}\n             //繼承Demo屬性和方法\npublic class Demo2: Demo\n{\n   public void Attack(Demo d)\n   {\n     d.hurt(10);\n   }\n}\n\npublic class Demo3: Demo\n{\n   \n}\n\n\npublic class Test\n{\n  Demo2 monster1 = new Demo2();\n  Demo3 monster2 = new Demo3();\n\n  monster1.Attack(monster1);\n  monster2.Attack(monster2);\n\n}\n\n```\n","slug":"2021-02-22-繼承性-續","published":1,"date":"2021-02-22T14:09:50.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t53008jzqzi2csy8kym","content":"<p>今天來認識繼承性</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=sRddjKhx9hk&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=31\">小山的 C# 教學-第29課-繼承性(續)</a></p>\n<hr>\n<h3 id=\"名詞說明\"><a href=\"#名詞說明\" class=\"headerlink\" title=\"名詞說明\"></a>名詞說明</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 我們通常把被繼承的 class 稱為基底類別(Base Class) EX:Demo</span><br><span class=\"line\">2. 繼承的 class 稱為衍生類別 (Derived Class)       EX:Demo2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hurt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"減少相同class-重複程式碼範例\"><a href=\"#減少相同class-重複程式碼範例\" class=\"headerlink\" title=\"減少相同class 重複程式碼範例\"></a>減少相同class 重複程式碼範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hp;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">getHp</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> hp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hurt</span>(<span class=\"params\"><span class=\"built_in\">int</span> point</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">    hp -= point;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">             <span class=\"comment\">//繼承Demo屬性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Attack</span>(<span class=\"params\">Demo d</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     d.hurt(<span class=\"number\">10</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo3</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Demo2 monster1 = <span class=\"keyword\">new</span> Demo2();</span><br><span class=\"line\">  Demo3 monster2 = <span class=\"keyword\">new</span> Demo3();</span><br><span class=\"line\"></span><br><span class=\"line\">  monster1.Attack(monster1);</span><br><span class=\"line\">  monster2.Attack(monster2);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":631,"excerpt":"<p>今天來認識繼承性</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=sRddjKhx9hk&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=31\">小山的 C# 教學-第29課-繼承性(續)</a></p>\n<hr>\n<h3 id=\"名詞說明\"><a href=\"#名詞說明\" class=\"headerlink\" title=\"名詞說明\"></a>名詞說明</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 我們通常把被繼承的 class 稱為基底類別(Base Class) EX:Demo</span><br><span class=\"line\">2. 繼承的 class 稱為衍生類別 (Derived Class)       EX:Demo2</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hurt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"減少相同class-重複程式碼範例\"><a href=\"#減少相同class-重複程式碼範例\" class=\"headerlink\" title=\"減少相同class 重複程式碼範例\"></a>減少相同class 重複程式碼範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> hp;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">getHp</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> hp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hurt</span>(<span class=\"params\"><span class=\"built_in\">int</span> point</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>  &#123;</span><br><span class=\"line\">    hp -= point;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">             <span class=\"comment\">//繼承Demo屬性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo2</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Attack</span>(<span class=\"params\">Demo d</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">     d.hurt(<span class=\"number\">10</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo3</span>: <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Demo2 monster1 = <span class=\"keyword\">new</span> Demo2();</span><br><span class=\"line\">  Demo3 monster2 = <span class=\"keyword\">new</span> Demo3();</span><br><span class=\"line\"></span><br><span class=\"line\">  monster1.Attack(monster1);</span><br><span class=\"line\">  monster2.Attack(monster2);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"2021-03-08-亂數","abbrlink":1324584010,"_content":"認識亂數方法\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第30課-亂數 Random](https://www.youtube.com/watch?v=pXQa9LhwaxM&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=33)\n---\n### 亂數範例\n```c#\nusing System;\npublic class Demo\n{\n   Random random = new random();\n   int X = random.next(); //亂數介於 0 到整數最大值之間 (0~2147483647)\n   int Ｙ = random.next(int maxValue); //亂數介於 0 到 最大值間（不包含MaxValue）\n   int Ｚ = random.next(int minValue, int maxValue); //亂數介於 minValue 到 最大值間（含minValue，不包含MaxValue）\n}\n```","source":"_posts/2021-03-08-亂數.md","raw":"---\ntitle: 2021-03-08-亂數\ntags:\n  - Asp.net\n  - C#\ncategories:\n  - C#\nabbrlink: 1324584010\n---\n認識亂數方法\n<!-- more -->\n---\n參考資料：\n[小山的 C# 教學-第30課-亂數 Random](https://www.youtube.com/watch?v=pXQa9LhwaxM&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=33)\n---\n### 亂數範例\n```c#\nusing System;\npublic class Demo\n{\n   Random random = new random();\n   int X = random.next(); //亂數介於 0 到整數最大值之間 (0~2147483647)\n   int Ｙ = random.next(int maxValue); //亂數介於 0 到 最大值間（不包含MaxValue）\n   int Ｚ = random.next(int minValue, int maxValue); //亂數介於 minValue 到 最大值間（含minValue，不包含MaxValue）\n}\n```","slug":"2021-03-08-亂數","published":1,"date":"2021-03-08T14:21:45.000Z","updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t54008mzqzi8ky2d6eq","content":"<p>認識亂數方法</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=pXQa9LhwaxM&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=33\">小山的 C# 教學-第30課-亂數 Random</a></p>\n<hr>\n<h3 id=\"亂數範例\"><a href=\"#亂數範例\" class=\"headerlink\" title=\"亂數範例\"></a>亂數範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   Random random = <span class=\"keyword\">new</span> random();</span><br><span class=\"line\">   <span class=\"built_in\">int</span> X = random.next(); <span class=\"comment\">//亂數介於 0 到整數最大值之間 (0~2147483647)</span></span><br><span class=\"line\">   <span class=\"built_in\">int</span> Ｙ = random.next(<span class=\"built_in\">int</span> maxValue); <span class=\"comment\">//亂數介於 0 到 最大值間（不包含MaxValue）</span></span><br><span class=\"line\">   <span class=\"built_in\">int</span> Ｚ = random.next(<span class=\"built_in\">int</span> minValue, <span class=\"built_in\">int</span> maxValue); <span class=\"comment\">//亂數介於 minValue 到 最大值間（含minValue，不包含MaxValue）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":295,"excerpt":"<p>認識亂數方法</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.youtube.com/watch?v=pXQa9LhwaxM&list=PLbXghSoQcLZtWqTA8q1NsByVpINoROHHe&index=33\">小山的 C# 教學-第30課-亂數 Random</a></p>\n<hr>\n<h3 id=\"亂數範例\"><a href=\"#亂數範例\" class=\"headerlink\" title=\"亂數範例\"></a>亂數範例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   Random random = <span class=\"keyword\">new</span> random();</span><br><span class=\"line\">   <span class=\"built_in\">int</span> X = random.next(); <span class=\"comment\">//亂數介於 0 到整數最大值之間 (0~2147483647)</span></span><br><span class=\"line\">   <span class=\"built_in\">int</span> Ｙ = random.next(<span class=\"built_in\">int</span> maxValue); <span class=\"comment\">//亂數介於 0 到 最大值間（不包含MaxValue）</span></span><br><span class=\"line\">   <span class=\"built_in\">int</span> Ｚ = random.next(<span class=\"built_in\">int</span> minValue, <span class=\"built_in\">int</span> maxValue); <span class=\"comment\">//亂數介於 minValue 到 最大值間（含minValue，不包含MaxValue）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2021-04-19-用Reveal.js來做簡報","abbrlink":2852757128,"_content":"剛好在IT鐵人幫上看到有人介紹 `Reveal.js` 套件，索興來玩玩看\n<!-- more -->\n---\n參考資料：\nhttps://revealjs.com/\n---\n\n1. 安裝\n   最簡單方式就是直接到 `GitHub` 上直接下載一份到本機，或是直接在終端機上下 `npm` 指令操作也可以。\n2. 使用方式\n   官網都有範例，基本上只要載入 js、css 就可以運行\n   再來客製化部分就可以在 js中配置即可。\n   ```JavaScript\n   Reveal.initialize({\n     // Display presentation control arrows\n    controls: true,\n\n    // Help the user learn the controls by providing hints, for example by\n    // bouncing the down arrow when they first encounter a vertical slide\n    controlsTutorial: true,\n\n    // Determines where controls appear, \"edges\" or \"bottom-right\"\n    controlsLayout: 'bottom-right',\n\n   })\n   ```\n\n3. Demo連結\n  [Demo](https://codepen.io/chunwen/pen/ExZeeGX)\n\n\n\n\n","source":"_posts/2021-04-19-用Reveal-js來做簡報.md","raw":"---\ntitle: 2021-04-19-用Reveal.js來做簡報\ntags:\n  - Kit\ncategories:\n  - JavaScript\nabbrlink: 2852757128\n---\n剛好在IT鐵人幫上看到有人介紹 `Reveal.js` 套件，索興來玩玩看\n<!-- more -->\n---\n參考資料：\nhttps://revealjs.com/\n---\n\n1. 安裝\n   最簡單方式就是直接到 `GitHub` 上直接下載一份到本機，或是直接在終端機上下 `npm` 指令操作也可以。\n2. 使用方式\n   官網都有範例，基本上只要載入 js、css 就可以運行\n   再來客製化部分就可以在 js中配置即可。\n   ```JavaScript\n   Reveal.initialize({\n     // Display presentation control arrows\n    controls: true,\n\n    // Help the user learn the controls by providing hints, for example by\n    // bouncing the down arrow when they first encounter a vertical slide\n    controlsTutorial: true,\n\n    // Determines where controls appear, \"edges\" or \"bottom-right\"\n    controlsLayout: 'bottom-right',\n\n   })\n   ```\n\n3. Demo連結\n  [Demo](https://codepen.io/chunwen/pen/ExZeeGX)\n\n\n\n\n","slug":"2021-04-19-用Reveal-js來做簡報","published":1,"date":"2021-04-19T14:50:12.124Z","updated":"2021-04-19T15:28:17.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t56008rzqziatjih85z","content":"<p>剛好在IT鐵人幫上看到有人介紹 <code>Reveal.js</code> 套件，索興來玩玩看</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://revealjs.com/\">https://revealjs.com/</a></p>\n<hr>\n<ol>\n<li><p>安裝<br>最簡單方式就是直接到 <code>GitHub</code> 上直接下載一份到本機，或是直接在終端機上下 <code>npm</code> 指令操作也可以。</p>\n</li>\n<li><p>使用方式<br>官網都有範例，基本上只要載入 js、css 就可以運行<br>再來客製化部分就可以在 js中配置即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reveal.initialize(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Display presentation control arrows</span></span><br><span class=\"line\"> controls: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Help the user learn the controls by providing hints, for example by</span></span><br><span class=\"line\"> <span class=\"comment\">// bouncing the down arrow when they first encounter a vertical slide</span></span><br><span class=\"line\"> controlsTutorial: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Determines where controls appear, &quot;edges&quot; or &quot;bottom-right&quot;</span></span><br><span class=\"line\"> controlsLayout: <span class=\"string\">&#x27;bottom-right&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Demo連結<br><a href=\"https://codepen.io/chunwen/pen/ExZeeGX\">Demo</a></p>\n</li>\n</ol>\n","site":{"data":{}},"length":514,"excerpt":"<p>剛好在IT鐵人幫上看到有人介紹 <code>Reveal.js</code> 套件，索興來玩玩看</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://revealjs.com/\">https://revealjs.com/</a></p>\n<hr>\n<ol>\n<li><p>安裝<br>最簡單方式就是直接到 <code>GitHub</code> 上直接下載一份到本機，或是直接在終端機上下 <code>npm</code> 指令操作也可以。</p>\n</li>\n<li><p>使用方式<br>官網都有範例，基本上只要載入 js、css 就可以運行<br>再來客製化部分就可以在 js中配置即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reveal.initialize(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Display presentation control arrows</span></span><br><span class=\"line\"> controls: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Help the user learn the controls by providing hints, for example by</span></span><br><span class=\"line\"> <span class=\"comment\">// bouncing the down arrow when they first encounter a vertical slide</span></span><br><span class=\"line\"> controlsTutorial: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Determines where controls appear, &quot;edges&quot; or &quot;bottom-right&quot;</span></span><br><span class=\"line\"> controlsLayout: <span class=\"string\">&#x27;bottom-right&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Demo連結<br><a href=\"https://codepen.io/chunwen/pen/ExZeeGX\">Demo</a></p>\n</li>\n</ol>"},{"title":"2021-06-09-利用axois來下載檔案","abbrlink":2843536158,"_content":"最近公司專案上剛好碰到製作匯出報表模組開發，而過往我都是透過`form submit`方式直接將參回拋給`Controller`，但當我列印發生問題時，\n我無法由前台正確得知我正確的錯誤訊息為何，因為我的錯誤訊息只會有一組Default文字。而這次因為這個模組開發需要支援多國語系，因此在錯誤訊息方面\n我就不能在前端`hard code`。我必須依照不同語系轉換錯誤語言跟錯誤內容。所以就藉此來研究一下該如何透過`axios`來下載檔案，並回傳正確錯誤訊息。\n<!-- more -->\n---\n參考資料：\n[Convert Blob to String in JavaScript](https://medium.com/programmers-developers/convert-blob-to-string-in-javascript-944c15ad7d52)\n\n[用Javascript替中文網址轉碼](https://www.ewdna.com/2008/12/javascriptescape-encodeuri.html)\n\n[axios设置responseType===blob导出文件和失败返回json处理](https://blog.csdn.net/qq_27626333/article/details/103562749)\n\n[Blob-MDN](https://developer.mozilla.org/zh-TW/docs/Web/API/Blob)\n\n[使用axios如何下载文件](https://segmentfault.com/a/1190000022423204)\n---\n\n一、前提：\n下載檔案時，Server會回拋資料串流。而一般axios未設定時，預設就為json格式。如果要下載檔案就必須在回傳型態指\n`{ responseType: 'blob' }`才能正確接到資料!\n\n二、接著，我們要判斷下載資料是否為空，這是後我們可以透過下面這段程式碼來判斷\n```javascript\n// 因為我的回傳錯誤訊息內容的型態是json，所以假使我接到資料是json格式，及代表我匯出發生問題勒\nif (res.headers[\"content-type\"].includes(\"application/json\")){\n   //如果有錯誤訊息\n}\nelse{\n   \n}\n```\n三、再來錯誤訊息部分，由於我們接到的型態是`{ responseType: 'blob' }` 所以我們必須將blob轉回json字串，如此才能回拋錯誤訊息。\n\n```javascript\n//1.先宣告取得blob型態\nconst blb = new Blob([res.data], { type: \"json\" });\nlet reader = new FileReader();\n//3.完全讀完才會進入\nreader.onload = e => {\n    if (e.target.readyState === 2) {\n        let res = {};\n        res = JSON.parse(e.target.result);\n        if (res.Msg.indexOf(\"app.\") !== -1) {\n            alert(i18n.t(res.Msg));\n        }\n        else {\n            alert(res.Msg);\n        }\n    }\n};\n//2.再將blb型態讀出來\nreader.readAsText(blb);\n```\n\n四、最後，則是檔案匯出的檔名跟匯出方式\n```javascript\nconst url = window.URL.createObjectURL(new Blob([res.data]));\nconst link = document.createElement('a');\nlink.href = url;\n\n//透過decodeURI 將UTF-8轉碼 \nconst fileName = decodeURI(res.headers[\"content-disposition\"].split(\" \")[1].replace(\"filename*=UTF-8''\", \"\"));\n\nlink.setAttribute('download', fileName);\ndocument.body.appendChild(link);\nlink.click();\n```\n\n五、完整程式碼如下\n```javascript\naxios.post(url, postData, { responseType: 'blob' }).then((res, fileName) => {\n        if (res.headers[\"content-type\"].includes(\"application/json\")) {\n            //1.先宣告取得blob型態\n            const blb = new Blob([res.data], { type: \"json\" });\n            let reader = new FileReader();\n            //3.完全讀完才會\n            reader.onload = e => {\n                if (e.target.readyState === 2) {\n                    let res = {};\n                    res = JSON.parse(e.target.result);\n                    if (res.Msg.indexOf(\"app.\") !== -1) {\n                        alert(i18n.t(res.Msg));\n                    }\n                    else {\n                        alert(res.Msg);\n                    }\n                }\n            };\n            //2.再將blb型態讀出來\n            reader.readAsText(blb);\n        }\n        else {\n            const url = window.URL.createObjectURL(new Blob([res.data]));\n            const link = document.createElement('a');\n            link.href = url;\n            const fileName = decodeURI(res.headers[\"content-disposition\"].split(\" \")[1].replace(\"filename*=UTF-8''\", \"\"));\n            link.setAttribute('download', fileName);\n            document.body.appendChild(link);\n            link.click();\n            //document.removeChild('a');\n        }\n\n\n    }).catch((error) => {\n        if (error.response) {\n            alert(error.response.data);\n        } else {\n            alert(error.message);\n        }\n    });\n```","source":"_posts/2021-06-09-利用axois來下載檔案.md","raw":"---\ntitle: 2021-06-09-利用axois來下載檔案\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 2843536158\n---\n最近公司專案上剛好碰到製作匯出報表模組開發，而過往我都是透過`form submit`方式直接將參回拋給`Controller`，但當我列印發生問題時，\n我無法由前台正確得知我正確的錯誤訊息為何，因為我的錯誤訊息只會有一組Default文字。而這次因為這個模組開發需要支援多國語系，因此在錯誤訊息方面\n我就不能在前端`hard code`。我必須依照不同語系轉換錯誤語言跟錯誤內容。所以就藉此來研究一下該如何透過`axios`來下載檔案，並回傳正確錯誤訊息。\n<!-- more -->\n---\n參考資料：\n[Convert Blob to String in JavaScript](https://medium.com/programmers-developers/convert-blob-to-string-in-javascript-944c15ad7d52)\n\n[用Javascript替中文網址轉碼](https://www.ewdna.com/2008/12/javascriptescape-encodeuri.html)\n\n[axios设置responseType===blob导出文件和失败返回json处理](https://blog.csdn.net/qq_27626333/article/details/103562749)\n\n[Blob-MDN](https://developer.mozilla.org/zh-TW/docs/Web/API/Blob)\n\n[使用axios如何下载文件](https://segmentfault.com/a/1190000022423204)\n---\n\n一、前提：\n下載檔案時，Server會回拋資料串流。而一般axios未設定時，預設就為json格式。如果要下載檔案就必須在回傳型態指\n`{ responseType: 'blob' }`才能正確接到資料!\n\n二、接著，我們要判斷下載資料是否為空，這是後我們可以透過下面這段程式碼來判斷\n```javascript\n// 因為我的回傳錯誤訊息內容的型態是json，所以假使我接到資料是json格式，及代表我匯出發生問題勒\nif (res.headers[\"content-type\"].includes(\"application/json\")){\n   //如果有錯誤訊息\n}\nelse{\n   \n}\n```\n三、再來錯誤訊息部分，由於我們接到的型態是`{ responseType: 'blob' }` 所以我們必須將blob轉回json字串，如此才能回拋錯誤訊息。\n\n```javascript\n//1.先宣告取得blob型態\nconst blb = new Blob([res.data], { type: \"json\" });\nlet reader = new FileReader();\n//3.完全讀完才會進入\nreader.onload = e => {\n    if (e.target.readyState === 2) {\n        let res = {};\n        res = JSON.parse(e.target.result);\n        if (res.Msg.indexOf(\"app.\") !== -1) {\n            alert(i18n.t(res.Msg));\n        }\n        else {\n            alert(res.Msg);\n        }\n    }\n};\n//2.再將blb型態讀出來\nreader.readAsText(blb);\n```\n\n四、最後，則是檔案匯出的檔名跟匯出方式\n```javascript\nconst url = window.URL.createObjectURL(new Blob([res.data]));\nconst link = document.createElement('a');\nlink.href = url;\n\n//透過decodeURI 將UTF-8轉碼 \nconst fileName = decodeURI(res.headers[\"content-disposition\"].split(\" \")[1].replace(\"filename*=UTF-8''\", \"\"));\n\nlink.setAttribute('download', fileName);\ndocument.body.appendChild(link);\nlink.click();\n```\n\n五、完整程式碼如下\n```javascript\naxios.post(url, postData, { responseType: 'blob' }).then((res, fileName) => {\n        if (res.headers[\"content-type\"].includes(\"application/json\")) {\n            //1.先宣告取得blob型態\n            const blb = new Blob([res.data], { type: \"json\" });\n            let reader = new FileReader();\n            //3.完全讀完才會\n            reader.onload = e => {\n                if (e.target.readyState === 2) {\n                    let res = {};\n                    res = JSON.parse(e.target.result);\n                    if (res.Msg.indexOf(\"app.\") !== -1) {\n                        alert(i18n.t(res.Msg));\n                    }\n                    else {\n                        alert(res.Msg);\n                    }\n                }\n            };\n            //2.再將blb型態讀出來\n            reader.readAsText(blb);\n        }\n        else {\n            const url = window.URL.createObjectURL(new Blob([res.data]));\n            const link = document.createElement('a');\n            link.href = url;\n            const fileName = decodeURI(res.headers[\"content-disposition\"].split(\" \")[1].replace(\"filename*=UTF-8''\", \"\"));\n            link.setAttribute('download', fileName);\n            document.body.appendChild(link);\n            link.click();\n            //document.removeChild('a');\n        }\n\n\n    }).catch((error) => {\n        if (error.response) {\n            alert(error.response.data);\n        } else {\n            alert(error.message);\n        }\n    });\n```","slug":"2021-06-09-利用axois來下載檔案","published":1,"date":"2021-06-09T14:29:42.078Z","updated":"2021-06-09T15:01:02.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t57008uzqzi6jndf228","content":"<p>最近公司專案上剛好碰到製作匯出報表模組開發，而過往我都是透過<code>form submit</code>方式直接將參回拋給<code>Controller</code>，但當我列印發生問題時，<br>我無法由前台正確得知我正確的錯誤訊息為何，因為我的錯誤訊息只會有一組Default文字。而這次因為這個模組開發需要支援多國語系，因此在錯誤訊息方面<br>我就不能在前端<code>hard code</code>。我必須依照不同語系轉換錯誤語言跟錯誤內容。所以就藉此來研究一下該如何透過<code>axios</code>來下載檔案，並回傳正確錯誤訊息。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://medium.com/programmers-developers/convert-blob-to-string-in-javascript-944c15ad7d52\">Convert Blob to String in JavaScript</a></p>\n<p><a href=\"https://www.ewdna.com/2008/12/javascriptescape-encodeuri.html\">用Javascript替中文網址轉碼</a></p>\n<p><a href=\"https://blog.csdn.net/qq_27626333/article/details/103562749\">axios设置responseType===blob导出文件和失败返回json处理</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Blob\">Blob-MDN</a></p>\n<h2 id=\"使用axios如何下载文件\"><a href=\"#使用axios如何下载文件\" class=\"headerlink\" title=\"使用axios如何下载文件\"></a><a href=\"https://segmentfault.com/a/1190000022423204\">使用axios如何下载文件</a></h2><p>一、前提：<br>下載檔案時，Server會回拋資料串流。而一般axios未設定時，預設就為json格式。如果要下載檔案就必須在回傳型態指<br><code>&#123; responseType: &#39;blob&#39; &#125;</code>才能正確接到資料!</p>\n<p>二、接著，我們要判斷下載資料是否為空，這是後我們可以透過下面這段程式碼來判斷</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因為我的回傳錯誤訊息內容的型態是json，所以假使我接到資料是json格式，及代表我匯出發生問題勒</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (res.headers[<span class=\"string\">&quot;content-type&quot;</span>].includes(<span class=\"string\">&quot;application/json&quot;</span>))&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果有錯誤訊息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>三、再來錯誤訊息部分，由於我們接到的型態是<code>&#123; responseType: &#39;blob&#39; &#125;</code> 所以我們必須將blob轉回json字串，如此才能回拋錯誤訊息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.先宣告取得blob型態</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> blb = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;json&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\"><span class=\"comment\">//3.完全讀完才會進入</span></span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.target.readyState === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">        res = <span class=\"built_in\">JSON</span>.parse(e.target.result);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.Msg.indexOf(<span class=\"string\">&quot;app.&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            alert(i18n.t(res.Msg));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(res.Msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//2.再將blb型態讀出來</span></span><br><span class=\"line\">reader.readAsText(blb);</span><br></pre></td></tr></table></figure>\n\n<p>四、最後，則是檔案匯出的檔名跟匯出方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(<span class=\"keyword\">new</span> Blob([res.data]));</span><br><span class=\"line\"><span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">link.href = url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//透過decodeURI 將UTF-8轉碼 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileName = <span class=\"built_in\">decodeURI</span>(res.headers[<span class=\"string\">&quot;content-disposition&quot;</span>].split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">&quot;filename*=UTF-8&#x27;&#x27;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">link.setAttribute(<span class=\"string\">&#x27;download&#x27;</span>, fileName);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">link.click();</span><br></pre></td></tr></table></figure>\n\n<p>五、完整程式碼如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(url, postData, &#123; <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span> &#125;).then(<span class=\"function\">(<span class=\"params\">res, fileName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.headers[<span class=\"string\">&quot;content-type&quot;</span>].includes(<span class=\"string\">&quot;application/json&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1.先宣告取得blob型態</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> blb = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;json&quot;</span> &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">            <span class=\"comment\">//3.完全讀完才會</span></span><br><span class=\"line\">            reader.onload = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.target.readyState === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">                    res = <span class=\"built_in\">JSON</span>.parse(e.target.result);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res.Msg.indexOf(<span class=\"string\">&quot;app.&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        alert(i18n.t(res.Msg));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        alert(res.Msg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"comment\">//2.再將blb型態讀出來</span></span><br><span class=\"line\">            reader.readAsText(blb);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(<span class=\"keyword\">new</span> Blob([res.data]));</span><br><span class=\"line\">            <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">            link.href = url;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"built_in\">decodeURI</span>(res.headers[<span class=\"string\">&quot;content-disposition&quot;</span>].split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">&quot;filename*=UTF-8&#x27;&#x27;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">            link.setAttribute(<span class=\"string\">&#x27;download&#x27;</span>, fileName);</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">            link.click();</span><br><span class=\"line\">            <span class=\"comment\">//document.removeChild(&#x27;a&#x27;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">            alert(error.response.data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(error.message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":2789,"excerpt":"<p>最近公司專案上剛好碰到製作匯出報表模組開發，而過往我都是透過<code>form submit</code>方式直接將參回拋給<code>Controller</code>，但當我列印發生問題時，<br>我無法由前台正確得知我正確的錯誤訊息為何，因為我的錯誤訊息只會有一組Default文字。而這次因為這個模組開發需要支援多國語系，因此在錯誤訊息方面<br>我就不能在前端<code>hard code</code>。我必須依照不同語系轉換錯誤語言跟錯誤內容。所以就藉此來研究一下該如何透過<code>axios</code>來下載檔案，並回傳正確錯誤訊息。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://medium.com/programmers-developers/convert-blob-to-string-in-javascript-944c15ad7d52\">Convert Blob to String in JavaScript</a></p>\n<p><a href=\"https://www.ewdna.com/2008/12/javascriptescape-encodeuri.html\">用Javascript替中文網址轉碼</a></p>\n<p><a href=\"https://blog.csdn.net/qq_27626333/article/details/103562749\">axios设置responseType===blob导出文件和失败返回json处理</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Blob\">Blob-MDN</a></p>\n<h2 id=\"使用axios如何下载文件\"><a href=\"#使用axios如何下载文件\" class=\"headerlink\" title=\"使用axios如何下载文件\"></a><a href=\"https://segmentfault.com/a/1190000022423204\">使用axios如何下载文件</a></h2><p>一、前提：<br>下載檔案時，Server會回拋資料串流。而一般axios未設定時，預設就為json格式。如果要下載檔案就必須在回傳型態指<br><code>&#123; responseType: &#39;blob&#39; &#125;</code>才能正確接到資料!</p>\n<p>二、接著，我們要判斷下載資料是否為空，這是後我們可以透過下面這段程式碼來判斷</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 因為我的回傳錯誤訊息內容的型態是json，所以假使我接到資料是json格式，及代表我匯出發生問題勒</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (res.headers[<span class=\"string\">&quot;content-type&quot;</span>].includes(<span class=\"string\">&quot;application/json&quot;</span>))&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果有錯誤訊息</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>三、再來錯誤訊息部分，由於我們接到的型態是<code>&#123; responseType: &#39;blob&#39; &#125;</code> 所以我們必須將blob轉回json字串，如此才能回拋錯誤訊息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.先宣告取得blob型態</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> blb = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;json&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\"><span class=\"comment\">//3.完全讀完才會進入</span></span><br><span class=\"line\">reader.onload = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.target.readyState === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">        res = <span class=\"built_in\">JSON</span>.parse(e.target.result);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.Msg.indexOf(<span class=\"string\">&quot;app.&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            alert(i18n.t(res.Msg));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(res.Msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//2.再將blb型態讀出來</span></span><br><span class=\"line\">reader.readAsText(blb);</span><br></pre></td></tr></table></figure>\n\n<p>四、最後，則是檔案匯出的檔名跟匯出方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(<span class=\"keyword\">new</span> Blob([res.data]));</span><br><span class=\"line\"><span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">link.href = url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//透過decodeURI 將UTF-8轉碼 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileName = <span class=\"built_in\">decodeURI</span>(res.headers[<span class=\"string\">&quot;content-disposition&quot;</span>].split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">&quot;filename*=UTF-8&#x27;&#x27;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">link.setAttribute(<span class=\"string\">&#x27;download&#x27;</span>, fileName);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">link.click();</span><br></pre></td></tr></table></figure>\n\n<p>五、完整程式碼如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(url, postData, &#123; <span class=\"attr\">responseType</span>: <span class=\"string\">&#x27;blob&#x27;</span> &#125;).then(<span class=\"function\">(<span class=\"params\">res, fileName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.headers[<span class=\"string\">&quot;content-type&quot;</span>].includes(<span class=\"string\">&quot;application/json&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1.先宣告取得blob型態</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> blb = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;json&quot;</span> &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">            <span class=\"comment\">//3.完全讀完才會</span></span><br><span class=\"line\">            reader.onload = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.target.readyState === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">                    res = <span class=\"built_in\">JSON</span>.parse(e.target.result);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (res.Msg.indexOf(<span class=\"string\">&quot;app.&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        alert(i18n.t(res.Msg));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        alert(res.Msg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"comment\">//2.再將blb型態讀出來</span></span><br><span class=\"line\">            reader.readAsText(blb);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(<span class=\"keyword\">new</span> Blob([res.data]));</span><br><span class=\"line\">            <span class=\"keyword\">const</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">            link.href = url;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fileName = <span class=\"built_in\">decodeURI</span>(res.headers[<span class=\"string\">&quot;content-disposition&quot;</span>].split(<span class=\"string\">&quot; &quot;</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">&quot;filename*=UTF-8&#x27;&#x27;&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">            link.setAttribute(<span class=\"string\">&#x27;download&#x27;</span>, fileName);</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">            link.click();</span><br><span class=\"line\">            <span class=\"comment\">//document.removeChild(&#x27;a&#x27;);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">            alert(error.response.data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(error.message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>"},{"title":"2021-06-13-Clean Code原則","abbrlink":2104169789,"_content":"前言：\n近期在開發公司內部產品系統時，寫完後再進行功能測試時，往往會遇到蠻多 bug ，因此我就必須多話時間在除 bug 上，如此造成我自己預估專案時間延誤。因此，除了多花時間修改 bug 外，我希望自己在撰寫 JavaScript 本質上優化時間的花費、程式能夠更具可靠性。\n<!-- more -->\n---\n參考資料：\n[Clean Code學派的風格實踐：開發可靠、可維護又強健的JavaScript](https://www.books.com.tw/products/0010886265?loc=M_0009_020)\n---\n## Clean Code 原則\n### 1. 可靠性\n\n- 正確性：需求是否明確？如：Email驗證\n- 穩定性：不同條件下，相同 Function 能否穩定提供一樣效果？\n- 彈性：是否有容錯率？發生非預期錯誤能否可以繼續使用？\n\n### 2.  效率\n\n- 時間：使用者等待時間是否過長？\n- 空間：上傳下載檔案大小限制能否壓縮？\n\n### 3. 可維護性\n\n- 適應性：能否依據不同情境自適應呢？\n- 熟悉性：不同 programmer 是否能輕易接手？\n\n### 4. 可用性\n\n- 易讀性：所有使用者能否簡單直覺了解 Function 目的？\n","source":"_posts/2021-06-13-Clean-Code原則.md","raw":"---\ntitle: 2021-06-13-Clean Code原則\ntags:\n  - JavaScript\ncategories:\n  - JavaScript\nabbrlink: 2104169789\n---\n前言：\n近期在開發公司內部產品系統時，寫完後再進行功能測試時，往往會遇到蠻多 bug ，因此我就必須多話時間在除 bug 上，如此造成我自己預估專案時間延誤。因此，除了多花時間修改 bug 外，我希望自己在撰寫 JavaScript 本質上優化時間的花費、程式能夠更具可靠性。\n<!-- more -->\n---\n參考資料：\n[Clean Code學派的風格實踐：開發可靠、可維護又強健的JavaScript](https://www.books.com.tw/products/0010886265?loc=M_0009_020)\n---\n## Clean Code 原則\n### 1. 可靠性\n\n- 正確性：需求是否明確？如：Email驗證\n- 穩定性：不同條件下，相同 Function 能否穩定提供一樣效果？\n- 彈性：是否有容錯率？發生非預期錯誤能否可以繼續使用？\n\n### 2.  效率\n\n- 時間：使用者等待時間是否過長？\n- 空間：上傳下載檔案大小限制能否壓縮？\n\n### 3. 可維護性\n\n- 適應性：能否依據不同情境自適應呢？\n- 熟悉性：不同 programmer 是否能輕易接手？\n\n### 4. 可用性\n\n- 易讀性：所有使用者能否簡單直覺了解 Function 目的？\n","slug":"2021-06-13-Clean-Code原則","published":1,"date":"2021-06-13T10:37:16.680Z","updated":"2021-06-13T10:39:04.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t59008yzqzidi4yha5f","content":"<p>前言：<br>近期在開發公司內部產品系統時，寫完後再進行功能測試時，往往會遇到蠻多 bug ，因此我就必須多話時間在除 bug 上，如此造成我自己預估專案時間延誤。因此，除了多花時間修改 bug 外，我希望自己在撰寫 JavaScript 本質上優化時間的花費、程式能夠更具可靠性。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://www.books.com.tw/products/0010886265?loc=M_0009_020\">Clean Code學派的風格實踐：開發可靠、可維護又強健的JavaScript</a></p>\n<hr>\n<h2 id=\"Clean-Code-原則\"><a href=\"#Clean-Code-原則\" class=\"headerlink\" title=\"Clean Code 原則\"></a>Clean Code 原則</h2><h3 id=\"1-可靠性\"><a href=\"#1-可靠性\" class=\"headerlink\" title=\"1. 可靠性\"></a>1. 可靠性</h3><ul>\n<li>正確性：需求是否明確？如：Email驗證</li>\n<li>穩定性：不同條件下，相同 Function 能否穩定提供一樣效果？</li>\n<li>彈性：是否有容錯率？發生非預期錯誤能否可以繼續使用？</li>\n</ul>\n<h3 id=\"2-效率\"><a href=\"#2-效率\" class=\"headerlink\" title=\"2.  效率\"></a>2.  效率</h3><ul>\n<li>時間：使用者等待時間是否過長？</li>\n<li>空間：上傳下載檔案大小限制能否壓縮？</li>\n</ul>\n<h3 id=\"3-可維護性\"><a href=\"#3-可維護性\" class=\"headerlink\" title=\"3. 可維護性\"></a>3. 可維護性</h3><ul>\n<li>適應性：能否依據不同情境自適應呢？</li>\n<li>熟悉性：不同 programmer 是否能輕易接手？</li>\n</ul>\n<h3 id=\"4-可用性\"><a href=\"#4-可用性\" class=\"headerlink\" title=\"4. 可用性\"></a>4. 可用性</h3><ul>\n<li>易讀性：所有使用者能否簡單直覺了解 Function 目的？</li>\n</ul>\n","site":{"data":{}},"length":383,"excerpt":"<p>前言：<br>近期在開發公司內部產品系統時，寫完後再進行功能測試時，往往會遇到蠻多 bug ，因此我就必須多話時間在除 bug 上，如此造成我自己預估專案時間延誤。因此，除了多花時間修改 bug 外，我希望自己在撰寫 JavaScript 本質上優化時間的花費、程式能夠更具可靠性。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://www.books.com.tw/products/0010886265?loc=M_0009_020\">Clean Code學派的風格實踐：開發可靠、可維護又強健的JavaScript</a></p>\n<hr>\n<h2 id=\"Clean-Code-原則\"><a href=\"#Clean-Code-原則\" class=\"headerlink\" title=\"Clean Code 原則\"></a>Clean Code 原則</h2><h3 id=\"1-可靠性\"><a href=\"#1-可靠性\" class=\"headerlink\" title=\"1. 可靠性\"></a>1. 可靠性</h3><ul>\n<li>正確性：需求是否明確？如：Email驗證</li>\n<li>穩定性：不同條件下，相同 Function 能否穩定提供一樣效果？</li>\n<li>彈性：是否有容錯率？發生非預期錯誤能否可以繼續使用？</li>\n</ul>\n<h3 id=\"2-效率\"><a href=\"#2-效率\" class=\"headerlink\" title=\"2.  效率\"></a>2.  效率</h3><ul>\n<li>時間：使用者等待時間是否過長？</li>\n<li>空間：上傳下載檔案大小限制能否壓縮？</li>\n</ul>\n<h3 id=\"3-可維護性\"><a href=\"#3-可維護性\" class=\"headerlink\" title=\"3. 可維護性\"></a>3. 可維護性</h3><ul>\n<li>適應性：能否依據不同情境自適應呢？</li>\n<li>熟悉性：不同 programmer 是否能輕易接手？</li>\n</ul>\n<h3 id=\"4-可用性\"><a href=\"#4-可用性\" class=\"headerlink\" title=\"4. 可用性\"></a>4. 可用性</h3><ul>\n<li>易讀性：所有使用者能否簡單直覺了解 Function 目的？</li>\n</ul>"},{"title":"Hexo-第三方套件安裝教學","abbrlink":1934885385,"_content":"介紹GA安裝\n<!-- more -->\n---\n參考資料：\n---\n","source":"_posts/Hexo-第三方套件安裝教學.md","raw":"---\ntitle: Hexo-第三方套件安裝教學\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 1934885385\n---\n介紹GA安裝\n<!-- more -->\n---\n參考資料：\n---\n","slug":"Hexo-第三方套件安裝教學","published":1,"date":"2021-03-22T14:32:05.822Z","updated":"2021-03-23T14:28:44.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t5a0091zqzi9cdq639d","content":"<p>介紹GA安裝</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"參考資料：\"><a href=\"#參考資料：\" class=\"headerlink\" title=\"參考資料：\"></a>參考資料：</h2>","site":{"data":{}},"length":11,"excerpt":"<p>介紹GA安裝</p>","more":"<hr>\n<h2 id=\"參考資料：\"><a href=\"#參考資料：\" class=\"headerlink\" title=\"參考資料：\"></a>參考資料：</h2>"},{"title":"Hexo版本更新教學","abbrlink":1226560276,"_content":"本篇文章主要紀錄更新Hexo到5.4版本時，所遇到的一些問題。\n<!-- more -->\n---\n參考資料：\n[試著學 Hexo-番外篇之更新 Hexo](https://ithelp.ithome.com.tw/articles/10253367)\n[Hexo官網](https://theme-next.js.org/)\n---\n### 前言\n其實一開始我並沒有打算要更新 `Hexo`版本，我只是想替我的網站嵌入`GA`觀察一些文章數據流量。只是不幸地是，正當我以為我將`GA`嵌入後，在終端機上手賤不小心更新 Next主題 `npm install hexo-theme-next@8.0.0`，結果我的網站在執行指令`hexo clean && hexo d -g`發佈時整個就呈現下圖情況。\n![示意圖](https://i.imgur.com/tUw0lJ3.png)\n\n後來用關鍵字，`{% extends '_layout.swig' %}` Google一下發現好像是hexo在5.0之後，把`swig`刪除，必須手動安裝。\n指令如下：\n` npm i hexo-renderer-swig`\n但，我在下完指令後，畫面雖然正常多了，但是文章內的內容都消失，看不到了。因此，以下就來說明，我如何更新方法。\n\n### 操作步驟\n1. 將 `themes/next` 主題全部刪除\n\n2. 再重新安裝一次hexo cli `npm install -g hexo-cli`\n小提醒：Hexo 5.0以後，Node.js 至少要10.13.0以上\n\n3. 接著`npm install`，這樣就可以把 `hexo` 所需檔案下載下來\n\n4. 再來，我們必須下載主題，我用的是 `Next`。一樣在`cmd`上，下`npm install hexo-theme-next@latest`\n過往我們是透過`git clone \bnext`主題到資料夾下，現在可以改用`npm`\n\n5. 安裝完後，可以下`hexo-v`看一下目前安裝版本為何\n\n6. 最後，就是客製化調整 `themes/_config.yml` 內配置摟～\n這時候你可能會需要安裝一些hexo內部套件或是其他第三方套件，這部分就留給下一篇再來說明。\n\n7. 最後發佈前，建議把`.deploy_git`資料夾全部移除，因為我就發生下面問題\n`Error: ENOTEMPTY: directory not empty hexo`，解決方式就是直接移除`.deploy_git`資料夾就可嘍\n\n\n\n","source":"_posts/Hexo版本更新教學.md","raw":"---\ntitle: Hexo版本更新教學\ntags:\n  - Hexo\ncategories:\n  - Hexo\nabbrlink: 1226560276\n---\n本篇文章主要紀錄更新Hexo到5.4版本時，所遇到的一些問題。\n<!-- more -->\n---\n參考資料：\n[試著學 Hexo-番外篇之更新 Hexo](https://ithelp.ithome.com.tw/articles/10253367)\n[Hexo官網](https://theme-next.js.org/)\n---\n### 前言\n其實一開始我並沒有打算要更新 `Hexo`版本，我只是想替我的網站嵌入`GA`觀察一些文章數據流量。只是不幸地是，正當我以為我將`GA`嵌入後，在終端機上手賤不小心更新 Next主題 `npm install hexo-theme-next@8.0.0`，結果我的網站在執行指令`hexo clean && hexo d -g`發佈時整個就呈現下圖情況。\n![示意圖](https://i.imgur.com/tUw0lJ3.png)\n\n後來用關鍵字，`{% extends '_layout.swig' %}` Google一下發現好像是hexo在5.0之後，把`swig`刪除，必須手動安裝。\n指令如下：\n` npm i hexo-renderer-swig`\n但，我在下完指令後，畫面雖然正常多了，但是文章內的內容都消失，看不到了。因此，以下就來說明，我如何更新方法。\n\n### 操作步驟\n1. 將 `themes/next` 主題全部刪除\n\n2. 再重新安裝一次hexo cli `npm install -g hexo-cli`\n小提醒：Hexo 5.0以後，Node.js 至少要10.13.0以上\n\n3. 接著`npm install`，這樣就可以把 `hexo` 所需檔案下載下來\n\n4. 再來，我們必須下載主題，我用的是 `Next`。一樣在`cmd`上，下`npm install hexo-theme-next@latest`\n過往我們是透過`git clone \bnext`主題到資料夾下，現在可以改用`npm`\n\n5. 安裝完後，可以下`hexo-v`看一下目前安裝版本為何\n\n6. 最後，就是客製化調整 `themes/_config.yml` 內配置摟～\n這時候你可能會需要安裝一些hexo內部套件或是其他第三方套件，這部分就留給下一篇再來說明。\n\n7. 最後發佈前，建議把`.deploy_git`資料夾全部移除，因為我就發生下面問題\n`Error: ENOTEMPTY: directory not empty hexo`，解決方式就是直接移除`.deploy_git`資料夾就可嘍\n\n\n\n","slug":"Hexo版本更新教學","published":1,"date":"2021-03-22T14:29:03.732Z","updated":"2021-03-23T14:28:44.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t5b0095zqzi8wx1grdt","content":"<p>本篇文章主要紀錄更新Hexo到5.4版本時，所遇到的一些問題。</p>\n<span id=\"more\"></span>\n<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10253367\">試著學 Hexo-番外篇之更新 Hexo</a><br><a href=\"https://theme-next.js.org/\">Hexo官網</a></p>\n<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>其實一開始我並沒有打算要更新 <code>Hexo</code>版本，我只是想替我的網站嵌入<code>GA</code>觀察一些文章數據流量。只是不幸地是，正當我以為我將<code>GA</code>嵌入後，在終端機上手賤不小心更新 Next主題 <code>npm install hexo-theme-next@8.0.0</code>，結果我的網站在執行指令<code>hexo clean &amp;&amp; hexo d -g</code>發佈時整個就呈現下圖情況。<br><img src=\"https://i.imgur.com/tUw0lJ3.png\" alt=\"示意圖\"></p>\n<p>後來用關鍵字，<code>&#123;% extends '_layout.swig' %&#125;</code> Google一下發現好像是hexo在5.0之後，把<code>swig</code>刪除，必須手動安裝。<br>指令如下：<br><code>npm i hexo-renderer-swig</code><br>但，我在下完指令後，畫面雖然正常多了，但是文章內的內容都消失，看不到了。因此，以下就來說明，我如何更新方法。</p>\n<h3 id=\"操作步驟\"><a href=\"#操作步驟\" class=\"headerlink\" title=\"操作步驟\"></a>操作步驟</h3><ol>\n<li><p>將 <code>themes/next</code> 主題全部刪除</p>\n</li>\n<li><p>再重新安裝一次hexo cli <code>npm install -g hexo-cli</code><br>小提醒：Hexo 5.0以後，Node.js 至少要10.13.0以上</p>\n</li>\n<li><p>接著<code>npm install</code>，這樣就可以把 <code>hexo</code> 所需檔案下載下來</p>\n</li>\n<li><p>再來，我們必須下載主題，我用的是 <code>Next</code>。一樣在<code>cmd</code>上，下<code>npm install hexo-theme-next@latest</code><br>過往我們是透過<code>git clone \bnext</code>主題到資料夾下，現在可以改用<code>npm</code></p>\n</li>\n<li><p>安裝完後，可以下<code>hexo-v</code>看一下目前安裝版本為何</p>\n</li>\n<li><p>最後，就是客製化調整 <code>themes/_config.yml</code> 內配置摟～<br>這時候你可能會需要安裝一些hexo內部套件或是其他第三方套件，這部分就留給下一篇再來說明。</p>\n</li>\n<li><p>最後發佈前，建議把<code>.deploy_git</code>資料夾全部移除，因為我就發生下面問題<br><code>Error: ENOTEMPTY: directory not empty hexo</code>，解決方式就是直接移除<code>.deploy_git</code>資料夾就可嘍</p>\n</li>\n</ol>\n","site":{"data":{}},"length":814,"excerpt":"<p>本篇文章主要紀錄更新Hexo到5.4版本時，所遇到的一些問題。</p>","more":"<hr>\n<p>參考資料：<br><a href=\"https://ithelp.ithome.com.tw/articles/10253367\">試著學 Hexo-番外篇之更新 Hexo</a><br><a href=\"https://theme-next.js.org/\">Hexo官網</a></p>\n<hr>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>其實一開始我並沒有打算要更新 <code>Hexo</code>版本，我只是想替我的網站嵌入<code>GA</code>觀察一些文章數據流量。只是不幸地是，正當我以為我將<code>GA</code>嵌入後，在終端機上手賤不小心更新 Next主題 <code>npm install hexo-theme-next@8.0.0</code>，結果我的網站在執行指令<code>hexo clean &amp;&amp; hexo d -g</code>發佈時整個就呈現下圖情況。<br><img src=\"https://i.imgur.com/tUw0lJ3.png\" alt=\"示意圖\"></p>\n<p>後來用關鍵字，<code>&#123;% extends '_layout.swig' %&#125;</code> Google一下發現好像是hexo在5.0之後，把<code>swig</code>刪除，必須手動安裝。<br>指令如下：<br><code>npm i hexo-renderer-swig</code><br>但，我在下完指令後，畫面雖然正常多了，但是文章內的內容都消失，看不到了。因此，以下就來說明，我如何更新方法。</p>\n<h3 id=\"操作步驟\"><a href=\"#操作步驟\" class=\"headerlink\" title=\"操作步驟\"></a>操作步驟</h3><ol>\n<li><p>將 <code>themes/next</code> 主題全部刪除</p>\n</li>\n<li><p>再重新安裝一次hexo cli <code>npm install -g hexo-cli</code><br>小提醒：Hexo 5.0以後，Node.js 至少要10.13.0以上</p>\n</li>\n<li><p>接著<code>npm install</code>，這樣就可以把 <code>hexo</code> 所需檔案下載下來</p>\n</li>\n<li><p>再來，我們必須下載主題，我用的是 <code>Next</code>。一樣在<code>cmd</code>上，下<code>npm install hexo-theme-next@latest</code><br>過往我們是透過<code>git clone \bnext</code>主題到資料夾下，現在可以改用<code>npm</code></p>\n</li>\n<li><p>安裝完後，可以下<code>hexo-v</code>看一下目前安裝版本為何</p>\n</li>\n<li><p>最後，就是客製化調整 <code>themes/_config.yml</code> 內配置摟～<br>這時候你可能會需要安裝一些hexo內部套件或是其他第三方套件，這部分就留給下一篇再來說明。</p>\n</li>\n<li><p>最後發佈前，建議把<code>.deploy_git</code>資料夾全部移除，因為我就發生下面問題<br><code>Error: ENOTEMPTY: directory not empty hexo</code>，解決方式就是直接移除<code>.deploy_git</code>資料夾就可嘍</p>\n</li>\n</ol>"},{"title":"前端職場走跳現形記","abbrlink":4068022312,"_content":"這篇文章主要會介紹我自己這一年多以來，在前端領域工具上的使用與開發流程介紹。\n<!-- more -->\n---\n### 工具使用介紹\n因為我們公司是走微軟體系，後端是採用`C#`， Web 專案架構是走`MVC`框架，至於前端部分則是沒有使用任何主流框架，但下半年有在考慮替新的小專案導入 `Vue.js` 做開發。而以下是我們公司目前採用的工具\n編輯器： Visual Studio\n前端：jQuery、ES5、ES6、Sass\n後端： C#\n框架： Asp.net MVC \n資料庫： MSSQL\n套件工具： Kendo\n環境建置： IIS\n版本控制： 內部 GitServer\n\n### 開發流程\n1. 需求訪談。\n   這部分主要會由`PM`和業務負責，目的在了解顧客需求。\n2. 系統分析\n   根據客戶提出的需求，進行系統分析(像是資料庫欄位開立、資料結構設計等等)\n3. 需求書和規格書撰寫\n   這部分通常會由 SA 來負責，並交給顧客確認，一但確認後開發標準就是一切照規格書上規範走。\n4. 開發\n   根據規格書進行專案開發。\n5. 測試\n   開發完成後，我們公司通常會由`SA`助理進行網站測試，模擬使用者操作上是否有遇到任何`bug`或需要修正地方。\n6. 專案上線\n   這部分我們就會跟客戶安排時間，到客戶端 `Server` 進行網站架設。\n7. 專案維護\n   這部分會視客戶目前使用情況，來決定是否需要到現場進行除錯。通常我們都會直接遠端連線替客戶更新`bug`或是進行專案後續調整動作。但有時候，會遇到客戶資安上問題，無法遠端連線的話，我們就必須到現場一趟。\n\n### 專案分享\n1. 企業後台網站製作\n   - 因為我們公司產業屬性關係，所以客戶基本上都是B2B，企業主為主。較少直接面對`C`端消費者。因此我這段時間者大部分專案都是開發企業後台。而企業後台基本上設計版型上就比較相似，不會有太難切出的版。版型大部分都是如下圖。左邊目錄右邊資料內容呈現。\n   ![圖片](https://i.imgur.com/95ozhue.png)\n   - 題外話，對企業後台使用者來說，資料的正確性和網站是否清楚呈現客戶想看的資料才是我們關心的重點。\n2. 產品開發\n   - 目前正在開發一套倉儲管理系統平台。主要是給一般中小企業做使用。而其特色就是在於多國語系、彈性的第三方資料串接(包含ERP導入、SAP介接等等)\n\n### 工作注意事項\n1. 永遠不要高估自己的能力\n   這點尤其在面對自己為開發過的功能時，特別重要。我們可能以為列印檔案這麼小的功能應該不會多難，但實際開發上你可能會遇到印出來資料格式跑版、資料錯誤、網路印表機無法列印等各式各樣問題。多預留一點時間，才能讓自己在開發上有多餘時間解決當初沒想到的問題。\n\n2. 開發規格有疑問時，必須主動找PM釐清\n   備註：通常前端工程師是不會碰到需要處理`Raw Data`問題，通常我們只要背後端工程師餵飽飽就好，他給什麼資料你就吃什麼。但我下面提到的案例是發生我自己也必須撰寫WEB API時做錯的示範。\n   通常我們接受到規格書開發時，基本上 table 欄位、長度都是不能在做更動，但有時候，我們可能會遇到需要串接客戶給的資料時，這時如果遇到客戶資料無法寫入問題，這時千萬不要自己傻傻地改資料庫table。這通常會造成後續很嚴重的問題。因為資料與資料間都是有關聯性，通常改了一張table後面資料都會跟著有問題。\n\n3. Debug技巧\n   我想表達的是，不論寫的是`JavaScript`還是 `C#`，我們總會遇到一些自己沒遇過的錯誤訊息，這時候如果 Google 無法直接解決問題。我建議可以嘗試[小黃鴨除錯法](https://zh.wikipedia.org/wiki/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95)\n   靜下來好好一行行程式碼理解。透過自問自答方式找到出自己的盲點。\n   \n4. 對自己寫的`Code`負責\n   不要偷懶把網路上找到解法直接貼上，這是對自己負責也是對團隊負責。\n\n5. 善用拆解問題技巧與提升Google技巧\n   遇到不會的功能，我自己都是試著寫下來我的想法，並把流程一步步拆解成我會的功能後才進行開發。而當你遇到中間不會的部分，就要善用工具如`stackoverflow`、IT幫、FB社團 來搜尋自己要的答案。至於Google技巧我很建議可以把一個你目前解決不了的問題，請教公司前輩並觀察他如何下關鍵字、如何釐清問題點，學習別人的開發思維才對自己有幫助。\n\n#### 六角學院連結\n[六角學院連結](https://www.hexschool.com/)\n","source":"_posts/六角-開發流程介紹.md","raw":"---\ntitle: 前端職場走跳現形記\ntags:\n  - 六角學院\ncategories:\n  - 開發流程\n  - 六角學院\nabbrlink: 4068022312\n---\n這篇文章主要會介紹我自己這一年多以來，在前端領域工具上的使用與開發流程介紹。\n<!-- more -->\n---\n### 工具使用介紹\n因為我們公司是走微軟體系，後端是採用`C#`， Web 專案架構是走`MVC`框架，至於前端部分則是沒有使用任何主流框架，但下半年有在考慮替新的小專案導入 `Vue.js` 做開發。而以下是我們公司目前採用的工具\n編輯器： Visual Studio\n前端：jQuery、ES5、ES6、Sass\n後端： C#\n框架： Asp.net MVC \n資料庫： MSSQL\n套件工具： Kendo\n環境建置： IIS\n版本控制： 內部 GitServer\n\n### 開發流程\n1. 需求訪談。\n   這部分主要會由`PM`和業務負責，目的在了解顧客需求。\n2. 系統分析\n   根據客戶提出的需求，進行系統分析(像是資料庫欄位開立、資料結構設計等等)\n3. 需求書和規格書撰寫\n   這部分通常會由 SA 來負責，並交給顧客確認，一但確認後開發標準就是一切照規格書上規範走。\n4. 開發\n   根據規格書進行專案開發。\n5. 測試\n   開發完成後，我們公司通常會由`SA`助理進行網站測試，模擬使用者操作上是否有遇到任何`bug`或需要修正地方。\n6. 專案上線\n   這部分我們就會跟客戶安排時間，到客戶端 `Server` 進行網站架設。\n7. 專案維護\n   這部分會視客戶目前使用情況，來決定是否需要到現場進行除錯。通常我們都會直接遠端連線替客戶更新`bug`或是進行專案後續調整動作。但有時候，會遇到客戶資安上問題，無法遠端連線的話，我們就必須到現場一趟。\n\n### 專案分享\n1. 企業後台網站製作\n   - 因為我們公司產業屬性關係，所以客戶基本上都是B2B，企業主為主。較少直接面對`C`端消費者。因此我這段時間者大部分專案都是開發企業後台。而企業後台基本上設計版型上就比較相似，不會有太難切出的版。版型大部分都是如下圖。左邊目錄右邊資料內容呈現。\n   ![圖片](https://i.imgur.com/95ozhue.png)\n   - 題外話，對企業後台使用者來說，資料的正確性和網站是否清楚呈現客戶想看的資料才是我們關心的重點。\n2. 產品開發\n   - 目前正在開發一套倉儲管理系統平台。主要是給一般中小企業做使用。而其特色就是在於多國語系、彈性的第三方資料串接(包含ERP導入、SAP介接等等)\n\n### 工作注意事項\n1. 永遠不要高估自己的能力\n   這點尤其在面對自己為開發過的功能時，特別重要。我們可能以為列印檔案這麼小的功能應該不會多難，但實際開發上你可能會遇到印出來資料格式跑版、資料錯誤、網路印表機無法列印等各式各樣問題。多預留一點時間，才能讓自己在開發上有多餘時間解決當初沒想到的問題。\n\n2. 開發規格有疑問時，必須主動找PM釐清\n   備註：通常前端工程師是不會碰到需要處理`Raw Data`問題，通常我們只要背後端工程師餵飽飽就好，他給什麼資料你就吃什麼。但我下面提到的案例是發生我自己也必須撰寫WEB API時做錯的示範。\n   通常我們接受到規格書開發時，基本上 table 欄位、長度都是不能在做更動，但有時候，我們可能會遇到需要串接客戶給的資料時，這時如果遇到客戶資料無法寫入問題，這時千萬不要自己傻傻地改資料庫table。這通常會造成後續很嚴重的問題。因為資料與資料間都是有關聯性，通常改了一張table後面資料都會跟著有問題。\n\n3. Debug技巧\n   我想表達的是，不論寫的是`JavaScript`還是 `C#`，我們總會遇到一些自己沒遇過的錯誤訊息，這時候如果 Google 無法直接解決問題。我建議可以嘗試[小黃鴨除錯法](https://zh.wikipedia.org/wiki/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95)\n   靜下來好好一行行程式碼理解。透過自問自答方式找到出自己的盲點。\n   \n4. 對自己寫的`Code`負責\n   不要偷懶把網路上找到解法直接貼上，這是對自己負責也是對團隊負責。\n\n5. 善用拆解問題技巧與提升Google技巧\n   遇到不會的功能，我自己都是試著寫下來我的想法，並把流程一步步拆解成我會的功能後才進行開發。而當你遇到中間不會的部分，就要善用工具如`stackoverflow`、IT幫、FB社團 來搜尋自己要的答案。至於Google技巧我很建議可以把一個你目前解決不了的問題，請教公司前輩並觀察他如何下關鍵字、如何釐清問題點，學習別人的開發思維才對自己有幫助。\n\n#### 六角學院連結\n[六角學院連結](https://www.hexschool.com/)\n","slug":"六角-開發流程介紹","published":1,"date":"2021-03-15T14:31:52.000Z","updated":"2021-04-19T14:46:15.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t5c0098zqzi2lej5z5u","content":"<p>這篇文章主要會介紹我自己這一年多以來，在前端領域工具上的使用與開發流程介紹。</p>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"工具使用介紹\"><a href=\"#工具使用介紹\" class=\"headerlink\" title=\"工具使用介紹\"></a>工具使用介紹</h3><p>因為我們公司是走微軟體系，後端是採用<code>C#</code>， Web 專案架構是走<code>MVC</code>框架，至於前端部分則是沒有使用任何主流框架，但下半年有在考慮替新的小專案導入 <code>Vue.js</code> 做開發。而以下是我們公司目前採用的工具<br>編輯器： Visual Studio<br>前端：jQuery、ES5、ES6、Sass<br>後端： C#<br>框架： Asp.net MVC<br>資料庫： MSSQL<br>套件工具： Kendo<br>環境建置： IIS<br>版本控制： 內部 GitServer</p>\n<h3 id=\"開發流程\"><a href=\"#開發流程\" class=\"headerlink\" title=\"開發流程\"></a>開發流程</h3><ol>\n<li>需求訪談。<br>這部分主要會由<code>PM</code>和業務負責，目的在了解顧客需求。</li>\n<li>系統分析<br>根據客戶提出的需求，進行系統分析(像是資料庫欄位開立、資料結構設計等等)</li>\n<li>需求書和規格書撰寫<br>這部分通常會由 SA 來負責，並交給顧客確認，一但確認後開發標準就是一切照規格書上規範走。</li>\n<li>開發<br>根據規格書進行專案開發。</li>\n<li>測試<br>開發完成後，我們公司通常會由<code>SA</code>助理進行網站測試，模擬使用者操作上是否有遇到任何<code>bug</code>或需要修正地方。</li>\n<li>專案上線<br>這部分我們就會跟客戶安排時間，到客戶端 <code>Server</code> 進行網站架設。</li>\n<li>專案維護<br>這部分會視客戶目前使用情況，來決定是否需要到現場進行除錯。通常我們都會直接遠端連線替客戶更新<code>bug</code>或是進行專案後續調整動作。但有時候，會遇到客戶資安上問題，無法遠端連線的話，我們就必須到現場一趟。</li>\n</ol>\n<h3 id=\"專案分享\"><a href=\"#專案分享\" class=\"headerlink\" title=\"專案分享\"></a>專案分享</h3><ol>\n<li>企業後台網站製作<ul>\n<li>因為我們公司產業屬性關係，所以客戶基本上都是B2B，企業主為主。較少直接面對<code>C</code>端消費者。因此我這段時間者大部分專案都是開發企業後台。而企業後台基本上設計版型上就比較相似，不會有太難切出的版。版型大部分都是如下圖。左邊目錄右邊資料內容呈現。<br><img src=\"https://i.imgur.com/95ozhue.png\" alt=\"圖片\"></li>\n<li>題外話，對企業後台使用者來說，資料的正確性和網站是否清楚呈現客戶想看的資料才是我們關心的重點。</li>\n</ul>\n</li>\n<li>產品開發<ul>\n<li>目前正在開發一套倉儲管理系統平台。主要是給一般中小企業做使用。而其特色就是在於多國語系、彈性的第三方資料串接(包含ERP導入、SAP介接等等)</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"工作注意事項\"><a href=\"#工作注意事項\" class=\"headerlink\" title=\"工作注意事項\"></a>工作注意事項</h3><ol>\n<li><p>永遠不要高估自己的能力<br>這點尤其在面對自己為開發過的功能時，特別重要。我們可能以為列印檔案這麼小的功能應該不會多難，但實際開發上你可能會遇到印出來資料格式跑版、資料錯誤、網路印表機無法列印等各式各樣問題。多預留一點時間，才能讓自己在開發上有多餘時間解決當初沒想到的問題。</p>\n</li>\n<li><p>開發規格有疑問時，必須主動找PM釐清<br>備註：通常前端工程師是不會碰到需要處理<code>Raw Data</code>問題，通常我們只要背後端工程師餵飽飽就好，他給什麼資料你就吃什麼。但我下面提到的案例是發生我自己也必須撰寫WEB API時做錯的示範。<br>通常我們接受到規格書開發時，基本上 table 欄位、長度都是不能在做更動，但有時候，我們可能會遇到需要串接客戶給的資料時，這時如果遇到客戶資料無法寫入問題，這時千萬不要自己傻傻地改資料庫table。這通常會造成後續很嚴重的問題。因為資料與資料間都是有關聯性，通常改了一張table後面資料都會跟著有問題。</p>\n</li>\n<li><p>Debug技巧<br>我想表達的是，不論寫的是<code>JavaScript</code>還是 <code>C#</code>，我們總會遇到一些自己沒遇過的錯誤訊息，這時候如果 Google 無法直接解決問題。我建議可以嘗試<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95\">小黃鴨除錯法</a><br>靜下來好好一行行程式碼理解。透過自問自答方式找到出自己的盲點。</p>\n</li>\n<li><p>對自己寫的<code>Code</code>負責<br>不要偷懶把網路上找到解法直接貼上，這是對自己負責也是對團隊負責。</p>\n</li>\n<li><p>善用拆解問題技巧與提升Google技巧<br>遇到不會的功能，我自己都是試著寫下來我的想法，並把流程一步步拆解成我會的功能後才進行開發。而當你遇到中間不會的部分，就要善用工具如<code>stackoverflow</code>、IT幫、FB社團 來搜尋自己要的答案。至於Google技巧我很建議可以把一個你目前解決不了的問題，請教公司前輩並觀察他如何下關鍵字、如何釐清問題點，學習別人的開發思維才對自己有幫助。</p>\n</li>\n</ol>\n<h4 id=\"六角學院連結\"><a href=\"#六角學院連結\" class=\"headerlink\" title=\"六角學院連結\"></a>六角學院連結</h4><p><a href=\"https://www.hexschool.com/\">六角學院連結</a></p>\n","site":{"data":{}},"length":1584,"excerpt":"<p>這篇文章主要會介紹我自己這一年多以來，在前端領域工具上的使用與開發流程介紹。</p>","more":"<hr>\n<h3 id=\"工具使用介紹\"><a href=\"#工具使用介紹\" class=\"headerlink\" title=\"工具使用介紹\"></a>工具使用介紹</h3><p>因為我們公司是走微軟體系，後端是採用<code>C#</code>， Web 專案架構是走<code>MVC</code>框架，至於前端部分則是沒有使用任何主流框架，但下半年有在考慮替新的小專案導入 <code>Vue.js</code> 做開發。而以下是我們公司目前採用的工具<br>編輯器： Visual Studio<br>前端：jQuery、ES5、ES6、Sass<br>後端： C#<br>框架： Asp.net MVC<br>資料庫： MSSQL<br>套件工具： Kendo<br>環境建置： IIS<br>版本控制： 內部 GitServer</p>\n<h3 id=\"開發流程\"><a href=\"#開發流程\" class=\"headerlink\" title=\"開發流程\"></a>開發流程</h3><ol>\n<li>需求訪談。<br>這部分主要會由<code>PM</code>和業務負責，目的在了解顧客需求。</li>\n<li>系統分析<br>根據客戶提出的需求，進行系統分析(像是資料庫欄位開立、資料結構設計等等)</li>\n<li>需求書和規格書撰寫<br>這部分通常會由 SA 來負責，並交給顧客確認，一但確認後開發標準就是一切照規格書上規範走。</li>\n<li>開發<br>根據規格書進行專案開發。</li>\n<li>測試<br>開發完成後，我們公司通常會由<code>SA</code>助理進行網站測試，模擬使用者操作上是否有遇到任何<code>bug</code>或需要修正地方。</li>\n<li>專案上線<br>這部分我們就會跟客戶安排時間，到客戶端 <code>Server</code> 進行網站架設。</li>\n<li>專案維護<br>這部分會視客戶目前使用情況，來決定是否需要到現場進行除錯。通常我們都會直接遠端連線替客戶更新<code>bug</code>或是進行專案後續調整動作。但有時候，會遇到客戶資安上問題，無法遠端連線的話，我們就必須到現場一趟。</li>\n</ol>\n<h3 id=\"專案分享\"><a href=\"#專案分享\" class=\"headerlink\" title=\"專案分享\"></a>專案分享</h3><ol>\n<li>企業後台網站製作<ul>\n<li>因為我們公司產業屬性關係，所以客戶基本上都是B2B，企業主為主。較少直接面對<code>C</code>端消費者。因此我這段時間者大部分專案都是開發企業後台。而企業後台基本上設計版型上就比較相似，不會有太難切出的版。版型大部分都是如下圖。左邊目錄右邊資料內容呈現。<br><img src=\"https://i.imgur.com/95ozhue.png\" alt=\"圖片\"></li>\n<li>題外話，對企業後台使用者來說，資料的正確性和網站是否清楚呈現客戶想看的資料才是我們關心的重點。</li>\n</ul>\n</li>\n<li>產品開發<ul>\n<li>目前正在開發一套倉儲管理系統平台。主要是給一般中小企業做使用。而其特色就是在於多國語系、彈性的第三方資料串接(包含ERP導入、SAP介接等等)</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"工作注意事項\"><a href=\"#工作注意事項\" class=\"headerlink\" title=\"工作注意事項\"></a>工作注意事項</h3><ol>\n<li><p>永遠不要高估自己的能力<br>這點尤其在面對自己為開發過的功能時，特別重要。我們可能以為列印檔案這麼小的功能應該不會多難，但實際開發上你可能會遇到印出來資料格式跑版、資料錯誤、網路印表機無法列印等各式各樣問題。多預留一點時間，才能讓自己在開發上有多餘時間解決當初沒想到的問題。</p>\n</li>\n<li><p>開發規格有疑問時，必須主動找PM釐清<br>備註：通常前端工程師是不會碰到需要處理<code>Raw Data</code>問題，通常我們只要背後端工程師餵飽飽就好，他給什麼資料你就吃什麼。但我下面提到的案例是發生我自己也必須撰寫WEB API時做錯的示範。<br>通常我們接受到規格書開發時，基本上 table 欄位、長度都是不能在做更動，但有時候，我們可能會遇到需要串接客戶給的資料時，這時如果遇到客戶資料無法寫入問題，這時千萬不要自己傻傻地改資料庫table。這通常會造成後續很嚴重的問題。因為資料與資料間都是有關聯性，通常改了一張table後面資料都會跟著有問題。</p>\n</li>\n<li><p>Debug技巧<br>我想表達的是，不論寫的是<code>JavaScript</code>還是 <code>C#</code>，我們總會遇到一些自己沒遇過的錯誤訊息，這時候如果 Google 無法直接解決問題。我建議可以嘗試<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95\">小黃鴨除錯法</a><br>靜下來好好一行行程式碼理解。透過自問自答方式找到出自己的盲點。</p>\n</li>\n<li><p>對自己寫的<code>Code</code>負責<br>不要偷懶把網路上找到解法直接貼上，這是對自己負責也是對團隊負責。</p>\n</li>\n<li><p>善用拆解問題技巧與提升Google技巧<br>遇到不會的功能，我自己都是試著寫下來我的想法，並把流程一步步拆解成我會的功能後才進行開發。而當你遇到中間不會的部分，就要善用工具如<code>stackoverflow</code>、IT幫、FB社團 來搜尋自己要的答案。至於Google技巧我很建議可以把一個你目前解決不了的問題，請教公司前輩並觀察他如何下關鍵字、如何釐清問題點，學習別人的開發思維才對自己有幫助。</p>\n</li>\n</ol>\n<h4 id=\"六角學院連結\"><a href=\"#六角學院連結\" class=\"headerlink\" title=\"六角學院連結\"></a>六角學院連結</h4><p><a href=\"https://www.hexschool.com/\">六角學院連結</a></p>"},{"title":"Vue.js元件(完整版)","abbrlink":1942507300,"date":"2019-09-10T06:56:24.000Z","_content":"參考資料：\n[Vue.js: 元件 Components 簡介 - 註冊與使用](https://cythilya.github.io/2017/05/11/vue-component-intro/)\n[Vue.官方文件](https://cn.vuejs.org/v2/guide/components.html)\n[Summer 夏天Vue.js: Slot](https://cythilya.github.io/2017/10/11/vue-component-slot/) \n<!-- more -->\n- - - -\n## 元件（components）簡介：\n什麼是元件？\n> 每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者`將程式碼封裝而且更好重複利用`。  \n\n![](https://i.imgur.com/ODmFD0N.png)\n元件特性？\n一、元件資料都是獨立的\n1.透過props向內部組件傳遞數據\n2.透過emit event觸發事件將資料往外送\n![](https://i.imgur.com/cAK0rSv.png)\n二、data必須是一個函數  額外練習：[官網範例連結](https://codepen.io/chunwen/pen/RwbreNP?editors=1010)\n```javascript\nVue.component(\"button-counter\", {\n  data: function() {\n    return {\n      count: 0\n    };\n  }\n});\n```\nＱ：為何子元件中data必須是函式？\nＡ：因為 `JavaScript 切分變數有效範圍的最⼩單位為 function`，為了避免子元件資料互相污染，Vue強置規定子元件data必須是函式\n\n### Component(全域註冊) \n下面將練習題目拆分成不同部分講解\n寫法：\n`Vue.component(‘自定義名稱’, {Function | Object})`\n逗點後方可以使用function或object\n範例如下（請先忽略props，後面會介紹到）\n```javascript\nVue.component('row-component', {\n               template: '#rowComponentTemplate',\n               props:['person']\n          }) \n```\n#### 使用X-template建立元件\n此時，因為我們使用到X-template建立元件，因此我們必須額外新一個`script`，並指定一個 id來來使⽤\n```javascript\n     <script type=\"text/x-template\" id=\"rowComponentTemplate\">\n        <tr>\n          <td>{{ person.name }}</td>\n          <td>{{ person.cash }}</td>\n          <td>{{ person.icash }}</td>\n        </tr>\n      </script>\n```\n說明：這邊`script`是另外撰寫喔！\n補充：放在codepen上時，`X-template`會將上面一段`script`寫在html中\n\n#### 接著，是HTML結構部分\n```html\n<row-component v-for=\"(item, key) in data\" :person=\"item\" :key=\"key\"></row-component>\n\n//此時你會發現網頁上tr結構似乎錯誤，\n//這是因為html結構上，tbody一定要包著tr\n```\n示意圖如下\n![](https://i.imgur.com/pC2qbGU.png)\n* 該如何改善？（使用is動態載入template）\n```html\n<tr is=\"row-component\" v-for=\"(item, key) in data\" :person=\"item\" :key=\"key\"></tr>\n\n//使用is動態載入template\n```\n正常版\n![](https://i.imgur.com/RqLwLCu.png)\n* 最後，前面提到的props功能為何？\n將v-for中的data資料傳進template元件中。示意圖如下\n![](https://i.imgur.com/y8WH2cM.png)\n\n### 區域註冊介紹（範例如下）\n寫法：`var ComponentA = { /* … */ }`   [官網介紹](https://cn.vuejs.org/v2/guide/components-registration.html)\n說明：ComponentA，為自定義名稱\n```javascript\n   var child = {\n            props: ['person'],\n            template: '#rowComponentTemplate'\n          }\n          var app = new Vue({\n            el: '#app',\n            data: {...略},\n            components:{\n              \"row-component\":child\n              //row-component必須與html上載入組件名稱相同\n            }\n          });\n        </script>\n說明：html結構相同，這邊就不另外撰寫\n注意：我們在組建下新增一個components物件\n```\n提醒：component`s`，有s\n### 基礎建立元件方式（官網教學內容）\n[官網範例連結](https://codepen.io/chunwen/pen/RwbreNP?editors=1010)\n```javascript\n// 提醒：Vue.component必須寫在new Vue前方，原因是元件必須先定義才能被使用。參閱下方討論連結\nVue.component(\"button-counter\", {\n  data: function() {\n    return {\n      count: 0\n    };\n  },\n  template:\n    `<button class=\"btn btn-outline-primary\" \n     v-on:click=\"count+=2\">\n     You clicked me {{ count }} times.\n     </button>`\n});\n\nnew Vue({\n  el: \"#components-demo\"\n});\n```\n> 基礎建立元件跟使用X-template差異僅在於`template`放置位置  \n> [Vue.component new Vue 擺放順序](https://www.udemy.com/vue-hexschool/learn/lecture/10271538#questions/4751236)  \n### 結論\n1.由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時`限定全⼩`\n`寫` (可加入破折號 - ) 的標籤名稱\n2.元件註冊分為`全域`與`區域`\n3.`區域元件`離開指定實體後就不能取用\n4.`全域元件`則可以提供多組實體使用\n> Ｑ：子元件中的data是否可以使用箭頭函式？  \n> Ａ：不行，因為這會影響到this作用域。會造成無法取得data資料。其實像是computed、methods、watch也都不行使用箭頭函式  \n> But，僅有Filter可以使用arrow function，因為filter無法取得實體資料！  \n> Ｑ：下面寫法是全域註冊還是區域註冊？  \n```javascript\nvar CustomBlock = Vue.component('custom-block', {\n      template: `<div class=\"block\">B</div>`,\n    });>\n```\nA：是全域註冊喔，別搞混了！\n\n## 使用Props由外到內傳遞資料\n說明：\n我們之所以需要使用props的目的，在於Vue元件中所有元件都是獨立的，因此資料不能互相取用，這也意味著你不能 (也不應該)在子元件的模組直接引⽤⽗元件的資料。而需要透過`props將資料從外部進行傳遞`\n\n### 我們先來看一個簡單範例：\n [codepen連結](https://codepen.io/chunwen/pen/yLBPdbQ?editors=1010)\n![](https://i.imgur.com/ujhK1OX.png)提醒：使用 DOM 中的模板時，camelCase (駝峰命名法) 的 prop 名需要使用其等價的 kebab-case (短橫線分隔命名) 命名  \n簡單來說：JS上用小駝峰`parentMSg` ，則html上要用短橫線分隔 如`parent-msg`  \n畫面如下：\n![](https://i.imgur.com/5NURqK1.png)\n\n### 靜態傳入與動態傳入差異\n  [六角課程範例](https://codepen.io/chunwen/pen/WNewRBV?editors=1010#0)\n動態傳入：傳入的是實體內內容\n![](https://i.imgur.com/Iqs1BH8.png)\n靜態傳入：傳入的是純字串\n![](https://i.imgur.com/BXLmmEg.png)\n> 小結論：動態傳入跟靜態傳入寫法差異僅在於是否有`：`  \n> 只要沒有`：`即使透過number傳入也會是string喔！[同學討論連結](https://www.udemy.com/course/vue-hexschool/learn/lecture/10271566#questions/6499156)  \n\n### Props驗證與預設值\n我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？這時就需要很常使用到驗證\n首現先介紹型別：\n```\nString \nNumber\nBoolean\nObject\nArray\nDate \nFunction \nSymbol\n```\n> 提醒：型別字首要大寫 如：`type: Number`  \n#### 範例：\n這邊僅`列出幾個例子`方便我日後快速回覆記憶，完整內容請看[codepen](https://codepen.io/chunwen/pen/NWKXqbN)\n```javascript\nprops: {\n        parentMsg: null, // null 代表不檢查型別\n        propA: Number, // 限定數字(Number要大寫)\n        propB: [String, Number], // 多種條件可用 [ ] 隔開\n        propC: {\n          // 必要欄位，且限定字串型別\n          type: String,\n          required: true\n        },\n}\n```\n> 提醒：props本來就應該用物件包裝起來，因為要對傳進來物件進行驗證  \n> 這邊特別注意：  \n> 1.驗證object時，default必須為一個function 如下  \n```javascript\npropE: {\n          // Object 型別，代表可接受的是個物件型別\n          type: Object,\n          default: function () {\n            return {\n              message: 'hello'\n            }\n          }\n        },\n```\n2.這兩種寫法相同喔！都是對型別不做任何驗證\n```javascript\nprops:['parentMsg']\nprops:{\n    parentMsg:null\n}\n```\n\n## Props使用注意事項\n### 單向數據流\n什麼意思呢？Props是將資料由外部往內傳遞，而在老師範例中可以清楚看到如果我們`從內部修改外部傳進來內容`，便會造成錯誤！\n後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）\n![](https://i.imgur.com/3Rh6izD.png)這時候該如何解決呢？\n很簡單，只要新宣告一個參數來接受外部修改資料就好～寫法如下\n或是在元件中使用computed`get`、`set`\n這兩種寫法目的：都是讓資料獨立存在於子層而非父層\n```javascript\nVue.component('photo', {\n            props: ['imgUrl'],\n            template: '#photo',\n            data: function () {\n              return {\n                newUrl: this.imgUrl\n              }\n            }\n          })\n```\n#### 當V-model遇到props \n範例如下：\n![](https://i.imgur.com/xHhPLxb.png)透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中`更改４號`是`無法更改1、2、3的資料`\n[codepen示範](https://codepen.io/chunwen/pen/NWKXqbN?editors=1010)\n![](https://i.imgur.com/elwSSt0.png)\n\n### 尚未宣告變數（就是AJAX資料時間差）\n老師這邊提到的目的是，因為在new vue中我們使用AJAX傳遞資料，而AJAX特性就是非同步，簡單來說就是網頁載入時，AJAX資料可能還未載入，因此`網頁上就空空的或是圖片破版`。該如何解決呢？\n![](https://i.imgur.com/ZnVDwTR.png)\n```\n老師這邊提供一個解法就是v-if，當v-if中內容為truthy時，再將內容載入\n<card :user-data=\"user\" v-if=\"user.gender\" ></card>\n\n```\n\n\n## 父子元件之間溝通方法\n總共區分為監聽事件、觸發事件兩種：\n監聽事件：使用V-on 或` $on`（後者主要會用在event bus）\n觸發事件：透過`$emit`\n### 元件父與子\n子元件可以透過`this.$parent`取得父層實體內容 範例如下\n```javascript\nVue.component('my-component',{\n   template:'#my-component',\n   mounted(){\n   console.log(\"$parent:\",this.$parent.msg); //MsgofParent!\n});\n```\n這邊的parent，指的是`id=“app”`這個區塊\n![](https://i.imgur.com/M1bVL4T.png)\n父组件則是透過 `this.$children`這個成員 (陣列)， 來存取他的⼦組件。但是要注意` this.$children` 的順序會受到 v-if 的影響，建議先以`ref`給子組件設定別名以確保不受組件的順序影響。 範例如下：\n```javascript\n newVue({\nel:'#app',\ndata:{\nmsg:'MsgofParent!'\n},\nmounted(){\nconsole.log('$children2:',this.$refs.comp2.msg);\nconsole.log('$children3:',this.$refs.comp3.msg);\n}\n});\n\n```\n#### 使用時機\n1.debug除錯\n2.實務上建議不要這樣直接複寫父層內容（因為子層無法脫離父層內容）\n\n### 觸發事件：透過emit 向外傳遞事件\n上面**當V-model遇到props** 範例中，我們發現子層資料無法更動父層資料。如果要更動上層資料就會使用到$emit，將資料由內傳到外。\n我們先來看個簡單例子： \n![](https://i.imgur.com/UwwNgD7.png)\n示意圖如下：\n[codepen練習檔案](https://codepen.io/chunwen/pen/BaBJjOe?editors=1010)\n![](https://i.imgur.com/t5s7Cjs.png)\n說明：只要更動4號欄位中內容，其餘1、2、3資料也會同步更新喔！\n\n範例2:\n [課程範例連結](https://codepen.io/chunwen/pen/ZEzWKZw?editors=1010#0)\n我們的目的如下：點擊內部元件後，改變外部資料數值\n![](https://i.imgur.com/FYjaSlf.png)\n以下摘錄轉寫重點\n```html\n<button-counter ＠increment=\"incrementTotal\">\n</button-counter>\n\n// Step1.先自定義事件increment（內層元素）\n// incrementTotal(外層元素)\n```\n```javascript\nVue.component('buttonCounter',{\n  methods: {\n    incrementCounter:function(){\n     // Step3.內部事件觸發外部資料，使用$emit\n      this.$emit('increment',Number(this.counter)) \n     // 我們這邊為避免型別出現錯誤使用Number\n    }\n  }\n})\n\nStep3.Vue instance中使用newMoney接受內部傳遞資料\nmethods: {\n    // Step2.使用newMoney接受incrementCounter傳入參數\n    incrementTotal:function(newMoney){\n      this.cash += newMoney;\n    }\n  }\n\n```\n\n### .sync修飾符傳遞\n可以幫助我們達到資料雙向綁定   [官網介紹](https://cn.vuejs.org/v2/guide/components-custom-events.html)\n補充：雖然我們看似寫了.sync後就達到雙向綁定，實際上我們在子元件中還是透過$emit向外層傳遞更改後的數值\n![](https://i.imgur.com/92vQoHn.png)\n> 提醒：為何update不能更改為其他JS原生事件：click?、input?  \n> Ａ：因為vue並未定義JS原生事件。所以必須要使用vue本身設定update  \n優點：\nVue實體不需要在使用methods接受子層傳遞出來資料！\n\n#### 小結論：\n這就是props in  , emit out的由來\n![](https://i.imgur.com/biqkeVF.png)\n\n### Event Bus\n用途：將原本元件之間資料傳遞時的樹狀結構更改為網狀結構！\n![](https://i.imgur.com/cQQp93a.png)\n寫法：\nStep1. 新增一個Vue實體\n `var bus = new Vue() `\nStep2. 透過向bus發送事件，與訂閱事件來完成`元件與元件的溝通`\n![](https://i.imgur.com/eyjDFEX.png)\n接著，我們直接來看範例：\n備註：訂閱事件必須撰寫在`created()階段`\n![](https://i.imgur.com/fFrdPC9.png)\n缺點：\n1.當事件名稱重複時，會同時觸發不同子元件\n2.因為事件是自己手動訂閱，所以銷毀時候，在beforeDestroy必須手動刪除\n\n#### 綜合練習：todoList\n![](https://i.imgur.com/8f6qTDq.png)\n![](https://i.imgur.com/QePdH1F.png)\n\n#### 更新Component 資料方法整理\n1.Event Bus\n2.Props in Emit Out\n3.$children 、$parent\n4.Vuex\n\n## is動態切換元件\n用途：最常使用在頁籤切換！\n我們可以透過\n1.`<component>`加上`:is`屬性來來決定目前元件是誰 \n2.或是`<div>`加上`:is`\n寫法：\n```javascript\n<component:is=\"currentView\"></component>\n<div :is=\"currentView\"></div>\n```\n說明：上面介紹兩種寫法其實沒有差異，只是列出比較常使用方法而已。\n注意：使用 is 要注意的只有像` <li>` 、`<tr>`、 `<option> `這類有特別限制上層 DOM 元素必須要是哪幾種的，像 `<li>` 的外層就只能是` <ol>` 或 `<ul> `。[官網連結](https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9)\n範例： codepen[六角課堂範例](https://codepen.io/chunwen/pen/mdbPMOa)\n![](https://i.imgur.com/6uV7q6d.png)而當我們透過 <component> 加上 :is 屬性來來切換元件時，原本元件內的狀態不會保留，這時候就需要透過 `<keep-alive> … </keep-alive>` \n來為元件保留內部狀態   [codepen](https://codepen.io/chunwen/pen/qBWoRpw?editors=1010)\n![](https://i.imgur.com/pANNzAk.png)延伸閱讀：[[Vue Instance/生命週期介紹]]\n\n## Slot 元件插槽\n在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域\n我們先來看個範例\n```javascript\n<div id=\"app\">\n<div class=\"parent\">{{msg}}</div>\n\n//生命週期中，在created階段，如果有template，vue則會去編譯template\n//內容，也因此，child元件不會顯示I'mparent內容\n\n<child>{{msg}}</child>\n</div>\n```\n猜猜看，`child`元件中是否會印出父層的`msg：I'mparent`內容？\n答案是不會的！原因是`目前child所處的位置是父層作用域`，當然不會印出子層內容～ [codepen連結](https://codepen.io/chunwen/pen/GRKxWJW?editors=1010)\n![](https://i.imgur.com/ni1AUKp.png)\n小結論：\n1.父層作用域在父層編譯\n2.子層作用域在子層編譯\n若要突破作用域編譯問題，就要使用到`slot`\n### Slot簡介\n參考資料：[Summer 夏天Vue.js: Slot](https://cythilya.github.io/2017/10/11/vue-component-slot/)\n突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。\nSlot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。\n\n卡斯伯老師在課堂上將slot分為三種：\n#### 1.沒有slot的狀態\n```html\n  <no-slot-component>\n    <p>這是一段沒有插槽使用的狀態</p>\n  </no-slot-component>\n```\n說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～\n#### 2.單組slot\n特點：在模板中添加<slot><slot/>\n```html\n  <single-slot-component>\n    <p>使用這段取代原本的 Slot。</p>\n  </single-slot-component>\n```\n```javascript\n<script type=\"text/x-template\" id=\"singleSlotComponent\">\n<div class=\"alert alert-warning\">\n  <h6>我是一個元件</h6>\n  <slot>\n    如果沒有內容，則會顯示此段落。\n  </slot>\n</div>\n</script>\n```\n畫面上，就可以將`<p>使用這段取代原本的 Slot。</p>`呈現在畫面上！如下\n![](https://i.imgur.com/xmWqNIy.png)\n#### 3.多組slot(具名插槽)\n簡單來說，將內容放入指定位置\n在html加入`slot`  \n在JS中插入 `name `\n```html\n <named-slot-component>\n    <header slot=\"header\">替換的 Header</header>\n    <template>替換的 Footer</template>\n    <template slot=\"btn\">按鈕內容</template>\n    <p>其餘的內容</p>\n  </named-slot-component>\n```\n```javascript\n<div class=\"card-header\">\n    <slot name=\"header\">這段是預設的文字</slot>\n  </div>\n```\n> 補充：html結構中若不想顯示標籤如a、header，可以使用<template>，這樣就不會顯示標籤摟～  \n### 在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope\n","source":"_posts/2019-09-10-Vue-js元件.md","raw":"---\ntitle: Vue.js元件(完整版)\ntags:\n  - vue\n  - component\ncategories:\n  - vue\nabbrlink: 1942507300\ndate: 2019-09-10 14:56:24\n---\n參考資料：\n[Vue.js: 元件 Components 簡介 - 註冊與使用](https://cythilya.github.io/2017/05/11/vue-component-intro/)\n[Vue.官方文件](https://cn.vuejs.org/v2/guide/components.html)\n[Summer 夏天Vue.js: Slot](https://cythilya.github.io/2017/10/11/vue-component-slot/) \n<!-- more -->\n- - - -\n## 元件（components）簡介：\n什麼是元件？\n> 每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者`將程式碼封裝而且更好重複利用`。  \n\n![](https://i.imgur.com/ODmFD0N.png)\n元件特性？\n一、元件資料都是獨立的\n1.透過props向內部組件傳遞數據\n2.透過emit event觸發事件將資料往外送\n![](https://i.imgur.com/cAK0rSv.png)\n二、data必須是一個函數  額外練習：[官網範例連結](https://codepen.io/chunwen/pen/RwbreNP?editors=1010)\n```javascript\nVue.component(\"button-counter\", {\n  data: function() {\n    return {\n      count: 0\n    };\n  }\n});\n```\nＱ：為何子元件中data必須是函式？\nＡ：因為 `JavaScript 切分變數有效範圍的最⼩單位為 function`，為了避免子元件資料互相污染，Vue強置規定子元件data必須是函式\n\n### Component(全域註冊) \n下面將練習題目拆分成不同部分講解\n寫法：\n`Vue.component(‘自定義名稱’, {Function | Object})`\n逗點後方可以使用function或object\n範例如下（請先忽略props，後面會介紹到）\n```javascript\nVue.component('row-component', {\n               template: '#rowComponentTemplate',\n               props:['person']\n          }) \n```\n#### 使用X-template建立元件\n此時，因為我們使用到X-template建立元件，因此我們必須額外新一個`script`，並指定一個 id來來使⽤\n```javascript\n     <script type=\"text/x-template\" id=\"rowComponentTemplate\">\n        <tr>\n          <td>{{ person.name }}</td>\n          <td>{{ person.cash }}</td>\n          <td>{{ person.icash }}</td>\n        </tr>\n      </script>\n```\n說明：這邊`script`是另外撰寫喔！\n補充：放在codepen上時，`X-template`會將上面一段`script`寫在html中\n\n#### 接著，是HTML結構部分\n```html\n<row-component v-for=\"(item, key) in data\" :person=\"item\" :key=\"key\"></row-component>\n\n//此時你會發現網頁上tr結構似乎錯誤，\n//這是因為html結構上，tbody一定要包著tr\n```\n示意圖如下\n![](https://i.imgur.com/pC2qbGU.png)\n* 該如何改善？（使用is動態載入template）\n```html\n<tr is=\"row-component\" v-for=\"(item, key) in data\" :person=\"item\" :key=\"key\"></tr>\n\n//使用is動態載入template\n```\n正常版\n![](https://i.imgur.com/RqLwLCu.png)\n* 最後，前面提到的props功能為何？\n將v-for中的data資料傳進template元件中。示意圖如下\n![](https://i.imgur.com/y8WH2cM.png)\n\n### 區域註冊介紹（範例如下）\n寫法：`var ComponentA = { /* … */ }`   [官網介紹](https://cn.vuejs.org/v2/guide/components-registration.html)\n說明：ComponentA，為自定義名稱\n```javascript\n   var child = {\n            props: ['person'],\n            template: '#rowComponentTemplate'\n          }\n          var app = new Vue({\n            el: '#app',\n            data: {...略},\n            components:{\n              \"row-component\":child\n              //row-component必須與html上載入組件名稱相同\n            }\n          });\n        </script>\n說明：html結構相同，這邊就不另外撰寫\n注意：我們在組建下新增一個components物件\n```\n提醒：component`s`，有s\n### 基礎建立元件方式（官網教學內容）\n[官網範例連結](https://codepen.io/chunwen/pen/RwbreNP?editors=1010)\n```javascript\n// 提醒：Vue.component必須寫在new Vue前方，原因是元件必須先定義才能被使用。參閱下方討論連結\nVue.component(\"button-counter\", {\n  data: function() {\n    return {\n      count: 0\n    };\n  },\n  template:\n    `<button class=\"btn btn-outline-primary\" \n     v-on:click=\"count+=2\">\n     You clicked me {{ count }} times.\n     </button>`\n});\n\nnew Vue({\n  el: \"#components-demo\"\n});\n```\n> 基礎建立元件跟使用X-template差異僅在於`template`放置位置  \n> [Vue.component new Vue 擺放順序](https://www.udemy.com/vue-hexschool/learn/lecture/10271538#questions/4751236)  \n### 結論\n1.由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時`限定全⼩`\n`寫` (可加入破折號 - ) 的標籤名稱\n2.元件註冊分為`全域`與`區域`\n3.`區域元件`離開指定實體後就不能取用\n4.`全域元件`則可以提供多組實體使用\n> Ｑ：子元件中的data是否可以使用箭頭函式？  \n> Ａ：不行，因為這會影響到this作用域。會造成無法取得data資料。其實像是computed、methods、watch也都不行使用箭頭函式  \n> But，僅有Filter可以使用arrow function，因為filter無法取得實體資料！  \n> Ｑ：下面寫法是全域註冊還是區域註冊？  \n```javascript\nvar CustomBlock = Vue.component('custom-block', {\n      template: `<div class=\"block\">B</div>`,\n    });>\n```\nA：是全域註冊喔，別搞混了！\n\n## 使用Props由外到內傳遞資料\n說明：\n我們之所以需要使用props的目的，在於Vue元件中所有元件都是獨立的，因此資料不能互相取用，這也意味著你不能 (也不應該)在子元件的模組直接引⽤⽗元件的資料。而需要透過`props將資料從外部進行傳遞`\n\n### 我們先來看一個簡單範例：\n [codepen連結](https://codepen.io/chunwen/pen/yLBPdbQ?editors=1010)\n![](https://i.imgur.com/ujhK1OX.png)提醒：使用 DOM 中的模板時，camelCase (駝峰命名法) 的 prop 名需要使用其等價的 kebab-case (短橫線分隔命名) 命名  \n簡單來說：JS上用小駝峰`parentMSg` ，則html上要用短橫線分隔 如`parent-msg`  \n畫面如下：\n![](https://i.imgur.com/5NURqK1.png)\n\n### 靜態傳入與動態傳入差異\n  [六角課程範例](https://codepen.io/chunwen/pen/WNewRBV?editors=1010#0)\n動態傳入：傳入的是實體內內容\n![](https://i.imgur.com/Iqs1BH8.png)\n靜態傳入：傳入的是純字串\n![](https://i.imgur.com/BXLmmEg.png)\n> 小結論：動態傳入跟靜態傳入寫法差異僅在於是否有`：`  \n> 只要沒有`：`即使透過number傳入也會是string喔！[同學討論連結](https://www.udemy.com/course/vue-hexschool/learn/lecture/10271566#questions/6499156)  \n\n### Props驗證與預設值\n我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？這時就需要很常使用到驗證\n首現先介紹型別：\n```\nString \nNumber\nBoolean\nObject\nArray\nDate \nFunction \nSymbol\n```\n> 提醒：型別字首要大寫 如：`type: Number`  \n#### 範例：\n這邊僅`列出幾個例子`方便我日後快速回覆記憶，完整內容請看[codepen](https://codepen.io/chunwen/pen/NWKXqbN)\n```javascript\nprops: {\n        parentMsg: null, // null 代表不檢查型別\n        propA: Number, // 限定數字(Number要大寫)\n        propB: [String, Number], // 多種條件可用 [ ] 隔開\n        propC: {\n          // 必要欄位，且限定字串型別\n          type: String,\n          required: true\n        },\n}\n```\n> 提醒：props本來就應該用物件包裝起來，因為要對傳進來物件進行驗證  \n> 這邊特別注意：  \n> 1.驗證object時，default必須為一個function 如下  \n```javascript\npropE: {\n          // Object 型別，代表可接受的是個物件型別\n          type: Object,\n          default: function () {\n            return {\n              message: 'hello'\n            }\n          }\n        },\n```\n2.這兩種寫法相同喔！都是對型別不做任何驗證\n```javascript\nprops:['parentMsg']\nprops:{\n    parentMsg:null\n}\n```\n\n## Props使用注意事項\n### 單向數據流\n什麼意思呢？Props是將資料由外部往內傳遞，而在老師範例中可以清楚看到如果我們`從內部修改外部傳進來內容`，便會造成錯誤！\n後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）\n![](https://i.imgur.com/3Rh6izD.png)這時候該如何解決呢？\n很簡單，只要新宣告一個參數來接受外部修改資料就好～寫法如下\n或是在元件中使用computed`get`、`set`\n這兩種寫法目的：都是讓資料獨立存在於子層而非父層\n```javascript\nVue.component('photo', {\n            props: ['imgUrl'],\n            template: '#photo',\n            data: function () {\n              return {\n                newUrl: this.imgUrl\n              }\n            }\n          })\n```\n#### 當V-model遇到props \n範例如下：\n![](https://i.imgur.com/xHhPLxb.png)透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中`更改４號`是`無法更改1、2、3的資料`\n[codepen示範](https://codepen.io/chunwen/pen/NWKXqbN?editors=1010)\n![](https://i.imgur.com/elwSSt0.png)\n\n### 尚未宣告變數（就是AJAX資料時間差）\n老師這邊提到的目的是，因為在new vue中我們使用AJAX傳遞資料，而AJAX特性就是非同步，簡單來說就是網頁載入時，AJAX資料可能還未載入，因此`網頁上就空空的或是圖片破版`。該如何解決呢？\n![](https://i.imgur.com/ZnVDwTR.png)\n```\n老師這邊提供一個解法就是v-if，當v-if中內容為truthy時，再將內容載入\n<card :user-data=\"user\" v-if=\"user.gender\" ></card>\n\n```\n\n\n## 父子元件之間溝通方法\n總共區分為監聽事件、觸發事件兩種：\n監聽事件：使用V-on 或` $on`（後者主要會用在event bus）\n觸發事件：透過`$emit`\n### 元件父與子\n子元件可以透過`this.$parent`取得父層實體內容 範例如下\n```javascript\nVue.component('my-component',{\n   template:'#my-component',\n   mounted(){\n   console.log(\"$parent:\",this.$parent.msg); //MsgofParent!\n});\n```\n這邊的parent，指的是`id=“app”`這個區塊\n![](https://i.imgur.com/M1bVL4T.png)\n父组件則是透過 `this.$children`這個成員 (陣列)， 來存取他的⼦組件。但是要注意` this.$children` 的順序會受到 v-if 的影響，建議先以`ref`給子組件設定別名以確保不受組件的順序影響。 範例如下：\n```javascript\n newVue({\nel:'#app',\ndata:{\nmsg:'MsgofParent!'\n},\nmounted(){\nconsole.log('$children2:',this.$refs.comp2.msg);\nconsole.log('$children3:',this.$refs.comp3.msg);\n}\n});\n\n```\n#### 使用時機\n1.debug除錯\n2.實務上建議不要這樣直接複寫父層內容（因為子層無法脫離父層內容）\n\n### 觸發事件：透過emit 向外傳遞事件\n上面**當V-model遇到props** 範例中，我們發現子層資料無法更動父層資料。如果要更動上層資料就會使用到$emit，將資料由內傳到外。\n我們先來看個簡單例子： \n![](https://i.imgur.com/UwwNgD7.png)\n示意圖如下：\n[codepen練習檔案](https://codepen.io/chunwen/pen/BaBJjOe?editors=1010)\n![](https://i.imgur.com/t5s7Cjs.png)\n說明：只要更動4號欄位中內容，其餘1、2、3資料也會同步更新喔！\n\n範例2:\n [課程範例連結](https://codepen.io/chunwen/pen/ZEzWKZw?editors=1010#0)\n我們的目的如下：點擊內部元件後，改變外部資料數值\n![](https://i.imgur.com/FYjaSlf.png)\n以下摘錄轉寫重點\n```html\n<button-counter ＠increment=\"incrementTotal\">\n</button-counter>\n\n// Step1.先自定義事件increment（內層元素）\n// incrementTotal(外層元素)\n```\n```javascript\nVue.component('buttonCounter',{\n  methods: {\n    incrementCounter:function(){\n     // Step3.內部事件觸發外部資料，使用$emit\n      this.$emit('increment',Number(this.counter)) \n     // 我們這邊為避免型別出現錯誤使用Number\n    }\n  }\n})\n\nStep3.Vue instance中使用newMoney接受內部傳遞資料\nmethods: {\n    // Step2.使用newMoney接受incrementCounter傳入參數\n    incrementTotal:function(newMoney){\n      this.cash += newMoney;\n    }\n  }\n\n```\n\n### .sync修飾符傳遞\n可以幫助我們達到資料雙向綁定   [官網介紹](https://cn.vuejs.org/v2/guide/components-custom-events.html)\n補充：雖然我們看似寫了.sync後就達到雙向綁定，實際上我們在子元件中還是透過$emit向外層傳遞更改後的數值\n![](https://i.imgur.com/92vQoHn.png)\n> 提醒：為何update不能更改為其他JS原生事件：click?、input?  \n> Ａ：因為vue並未定義JS原生事件。所以必須要使用vue本身設定update  \n優點：\nVue實體不需要在使用methods接受子層傳遞出來資料！\n\n#### 小結論：\n這就是props in  , emit out的由來\n![](https://i.imgur.com/biqkeVF.png)\n\n### Event Bus\n用途：將原本元件之間資料傳遞時的樹狀結構更改為網狀結構！\n![](https://i.imgur.com/cQQp93a.png)\n寫法：\nStep1. 新增一個Vue實體\n `var bus = new Vue() `\nStep2. 透過向bus發送事件，與訂閱事件來完成`元件與元件的溝通`\n![](https://i.imgur.com/eyjDFEX.png)\n接著，我們直接來看範例：\n備註：訂閱事件必須撰寫在`created()階段`\n![](https://i.imgur.com/fFrdPC9.png)\n缺點：\n1.當事件名稱重複時，會同時觸發不同子元件\n2.因為事件是自己手動訂閱，所以銷毀時候，在beforeDestroy必須手動刪除\n\n#### 綜合練習：todoList\n![](https://i.imgur.com/8f6qTDq.png)\n![](https://i.imgur.com/QePdH1F.png)\n\n#### 更新Component 資料方法整理\n1.Event Bus\n2.Props in Emit Out\n3.$children 、$parent\n4.Vuex\n\n## is動態切換元件\n用途：最常使用在頁籤切換！\n我們可以透過\n1.`<component>`加上`:is`屬性來來決定目前元件是誰 \n2.或是`<div>`加上`:is`\n寫法：\n```javascript\n<component:is=\"currentView\"></component>\n<div :is=\"currentView\"></div>\n```\n說明：上面介紹兩種寫法其實沒有差異，只是列出比較常使用方法而已。\n注意：使用 is 要注意的只有像` <li>` 、`<tr>`、 `<option> `這類有特別限制上層 DOM 元素必須要是哪幾種的，像 `<li>` 的外層就只能是` <ol>` 或 `<ul> `。[官網連結](https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9)\n範例： codepen[六角課堂範例](https://codepen.io/chunwen/pen/mdbPMOa)\n![](https://i.imgur.com/6uV7q6d.png)而當我們透過 <component> 加上 :is 屬性來來切換元件時，原本元件內的狀態不會保留，這時候就需要透過 `<keep-alive> … </keep-alive>` \n來為元件保留內部狀態   [codepen](https://codepen.io/chunwen/pen/qBWoRpw?editors=1010)\n![](https://i.imgur.com/pANNzAk.png)延伸閱讀：[[Vue Instance/生命週期介紹]]\n\n## Slot 元件插槽\n在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域\n我們先來看個範例\n```javascript\n<div id=\"app\">\n<div class=\"parent\">{{msg}}</div>\n\n//生命週期中，在created階段，如果有template，vue則會去編譯template\n//內容，也因此，child元件不會顯示I'mparent內容\n\n<child>{{msg}}</child>\n</div>\n```\n猜猜看，`child`元件中是否會印出父層的`msg：I'mparent`內容？\n答案是不會的！原因是`目前child所處的位置是父層作用域`，當然不會印出子層內容～ [codepen連結](https://codepen.io/chunwen/pen/GRKxWJW?editors=1010)\n![](https://i.imgur.com/ni1AUKp.png)\n小結論：\n1.父層作用域在父層編譯\n2.子層作用域在子層編譯\n若要突破作用域編譯問題，就要使用到`slot`\n### Slot簡介\n參考資料：[Summer 夏天Vue.js: Slot](https://cythilya.github.io/2017/10/11/vue-component-slot/)\n突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。\nSlot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。\n\n卡斯伯老師在課堂上將slot分為三種：\n#### 1.沒有slot的狀態\n```html\n  <no-slot-component>\n    <p>這是一段沒有插槽使用的狀態</p>\n  </no-slot-component>\n```\n說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～\n#### 2.單組slot\n特點：在模板中添加<slot><slot/>\n```html\n  <single-slot-component>\n    <p>使用這段取代原本的 Slot。</p>\n  </single-slot-component>\n```\n```javascript\n<script type=\"text/x-template\" id=\"singleSlotComponent\">\n<div class=\"alert alert-warning\">\n  <h6>我是一個元件</h6>\n  <slot>\n    如果沒有內容，則會顯示此段落。\n  </slot>\n</div>\n</script>\n```\n畫面上，就可以將`<p>使用這段取代原本的 Slot。</p>`呈現在畫面上！如下\n![](https://i.imgur.com/xmWqNIy.png)\n#### 3.多組slot(具名插槽)\n簡單來說，將內容放入指定位置\n在html加入`slot`  \n在JS中插入 `name `\n```html\n <named-slot-component>\n    <header slot=\"header\">替換的 Header</header>\n    <template>替換的 Footer</template>\n    <template slot=\"btn\">按鈕內容</template>\n    <p>其餘的內容</p>\n  </named-slot-component>\n```\n```javascript\n<div class=\"card-header\">\n    <slot name=\"header\">這段是預設的文字</slot>\n  </div>\n```\n> 補充：html結構中若不想顯示標籤如a、header，可以使用<template>，這樣就不會顯示標籤摟～  \n### 在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope\n","slug":"2019-09-10-Vue-js元件","published":1,"updated":"2021-03-23T14:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpv22t6v00f0zqzi3s437g7g","content":"<p>參考資料：<br><a href=\"https://cythilya.github.io/2017/05/11/vue-component-intro/\">Vue.js: 元件 Components 簡介 - 註冊與使用</a><br><a href=\"https://cn.vuejs.org/v2/guide/components.html\">Vue.官方文件</a><br><a href=\"https://cythilya.github.io/2017/10/11/vue-component-slot/\">Summer 夏天Vue.js: Slot</a> </p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"元件（components）簡介：\"><a href=\"#元件（components）簡介：\" class=\"headerlink\" title=\"元件（components）簡介：\"></a>元件（components）簡介：</h2><p>什麼是元件？</p>\n<blockquote>\n<p>每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者<code>將程式碼封裝而且更好重複利用</code>。  </p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/ODmFD0N.png\" alt=\"\"><br>元件特性？<br>一、元件資料都是獨立的<br>1.透過props向內部組件傳遞數據<br>2.透過emit event觸發事件將資料往外送<br><img src=\"https://i.imgur.com/cAK0rSv.png\" alt=\"\"><br>二、data必須是一個函數  額外練習：<a href=\"https://codepen.io/chunwen/pen/RwbreNP?editors=1010\">官網範例連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;button-counter&quot;</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Ｑ：為何子元件中data必須是函式？<br>Ａ：因為 <code>JavaScript 切分變數有效範圍的最⼩單位為 function</code>，為了避免子元件資料互相污染，Vue強置規定子元件data必須是函式</p>\n<h3 id=\"Component-全域註冊\"><a href=\"#Component-全域註冊\" class=\"headerlink\" title=\"Component(全域註冊)\"></a>Component(全域註冊)</h3><p>下面將練習題目拆分成不同部分講解<br>寫法：<br><code>Vue.component(‘自定義名稱’, &#123;Function | Object&#125;)</code><br>逗點後方可以使用function或object<br>範例如下（請先忽略props，後面會介紹到）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;row-component&#x27;</span>, &#123;</span><br><span class=\"line\">               template: <span class=\"string\">&#x27;#rowComponentTemplate&#x27;</span>,</span><br><span class=\"line\">               props:[<span class=\"string\">&#x27;person&#x27;</span>]</span><br><span class=\"line\">          &#125;) </span><br></pre></td></tr></table></figure>\n<h4 id=\"使用X-template建立元件\"><a href=\"#使用X-template建立元件\" class=\"headerlink\" title=\"使用X-template建立元件\"></a>使用X-template建立元件</h4><p>此時，因為我們使用到X-template建立元件，因此我們必須額外新一個<code>script</code>，並指定一個 id來來使⽤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/x-template&quot;</span> id=<span class=\"string\">&quot;rowComponentTemplate&quot;</span>&gt;</span><br><span class=\"line\">   &lt;tr&gt;</span><br><span class=\"line\">     &lt;td&gt;&#123;&#123; person.name &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">     &lt;td&gt;&#123;&#123; person.cash &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">     &lt;td&gt;&#123;&#123; person.icash &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">   &lt;/tr&gt;</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>說明：這邊<code>script</code>是另外撰寫喔！<br>補充：放在codepen上時，<code>X-template</code>會將上面一段<code>script</code>寫在html中</p>\n<h4 id=\"接著，是HTML結構部分\"><a href=\"#接著，是HTML結構部分\" class=\"headerlink\" title=\"接著，是HTML結構部分\"></a>接著，是HTML結構部分</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">row-component</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in data&quot;</span> <span class=\"attr\">:person</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;key&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">row-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//此時你會發現網頁上tr結構似乎錯誤，</span><br><span class=\"line\">//這是因為html結構上，tbody一定要包著tr</span><br></pre></td></tr></table></figure>\n<p>示意圖如下<br><img src=\"https://i.imgur.com/pC2qbGU.png\" alt=\"\"></p>\n<ul>\n<li>該如何改善？（使用is動態載入template）<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;row-component&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in data&quot;</span> <span class=\"attr\">:person</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;key&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//使用is動態載入template</span><br></pre></td></tr></table></figure>\n正常版<br><img src=\"https://i.imgur.com/RqLwLCu.png\" alt=\"\"></li>\n<li>最後，前面提到的props功能為何？<br>將v-for中的data資料傳進template元件中。示意圖如下<br><img src=\"https://i.imgur.com/y8WH2cM.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"區域註冊介紹（範例如下）\"><a href=\"#區域註冊介紹（範例如下）\" class=\"headerlink\" title=\"區域註冊介紹（範例如下）\"></a>區域註冊介紹（範例如下）</h3><p>寫法：<code>var ComponentA = &#123; /* … */ &#125;</code>   <a href=\"https://cn.vuejs.org/v2/guide/components-registration.html\">官網介紹</a><br>說明：ComponentA，為自定義名稱</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> child = &#123;</span><br><span class=\"line\">            props: [<span class=\"string\">&#x27;person&#x27;</span>],</span><br><span class=\"line\">            template: <span class=\"string\">&#x27;#rowComponentTemplate&#x27;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">            data: &#123;...略&#125;,</span><br><span class=\"line\">            components:&#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;row-component&quot;</span>:child</span><br><span class=\"line\">              <span class=\"comment\">//row-component必須與html上載入組件名稱相同</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">說明：html結構相同，這邊就不另外撰寫</span><br><span class=\"line\">注意：我們在組建下新增一個components物件</span><br></pre></td></tr></table></figure>\n<p>提醒：component<code>s</code>，有s</p>\n<h3 id=\"基礎建立元件方式（官網教學內容）\"><a href=\"#基礎建立元件方式（官網教學內容）\" class=\"headerlink\" title=\"基礎建立元件方式（官網教學內容）\"></a>基礎建立元件方式（官網教學內容）</h3><p><a href=\"https://codepen.io/chunwen/pen/RwbreNP?editors=1010\">官網範例連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提醒：Vue.component必須寫在new Vue前方，原因是元件必須先定義才能被使用。參閱下方討論連結</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;button-counter&quot;</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    <span class=\"string\">`&lt;button class=&quot;btn btn-outline-primary&quot; </span></span><br><span class=\"line\"><span class=\"string\">     v-on:click=&quot;count+=2&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">     You clicked me &#123;&#123; count &#125;&#125; times.</span></span><br><span class=\"line\"><span class=\"string\">     &lt;/button&gt;`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&quot;#components-demo&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>基礎建立元件跟使用X-template差異僅在於<code>template</code>放置位置<br><a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271538#questions/4751236\">Vue.component new Vue 擺放順序</a>  </p>\n</blockquote>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>1.由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時<code>限定全⼩</code><br><code>寫</code> (可加入破折號 - ) 的標籤名稱<br>2.元件註冊分為<code>全域</code>與<code>區域</code><br>3.<code>區域元件</code>離開指定實體後就不能取用<br>4.<code>全域元件</code>則可以提供多組實體使用</p>\n<blockquote>\n<p>Ｑ：子元件中的data是否可以使用箭頭函式？<br>Ａ：不行，因為這會影響到this作用域。會造成無法取得data資料。其實像是computed、methods、watch也都不行使用箭頭函式<br>But，僅有Filter可以使用arrow function，因為filter無法取得實體資料！<br>Ｑ：下面寫法是全域註冊還是區域註冊？  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CustomBlock = Vue.component(<span class=\"string\">&#x27;custom-block&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">`&lt;div class=&quot;block&quot;&gt;B&lt;/div&gt;`</span>,</span><br><span class=\"line\">    &#125;);&gt;</span><br></pre></td></tr></table></figure>\n<p>A：是全域註冊喔，別搞混了！</p>\n<h2 id=\"使用Props由外到內傳遞資料\"><a href=\"#使用Props由外到內傳遞資料\" class=\"headerlink\" title=\"使用Props由外到內傳遞資料\"></a>使用Props由外到內傳遞資料</h2><p>說明：<br>我們之所以需要使用props的目的，在於Vue元件中所有元件都是獨立的，因此資料不能互相取用，這也意味著你不能 (也不應該)在子元件的模組直接引⽤⽗元件的資料。而需要透過<code>props將資料從外部進行傳遞</code></p>\n<h3 id=\"我們先來看一個簡單範例：\"><a href=\"#我們先來看一個簡單範例：\" class=\"headerlink\" title=\"我們先來看一個簡單範例：\"></a>我們先來看一個簡單範例：</h3><p> <a href=\"https://codepen.io/chunwen/pen/yLBPdbQ?editors=1010\">codepen連結</a><br><img src=\"https://i.imgur.com/ujhK1OX.png\" alt=\"\">提醒：使用 DOM 中的模板時，camelCase (駝峰命名法) 的 prop 名需要使用其等價的 kebab-case (短橫線分隔命名) 命名<br>簡單來說：JS上用小駝峰<code>parentMSg</code> ，則html上要用短橫線分隔 如<code>parent-msg</code><br>畫面如下：<br><img src=\"https://i.imgur.com/5NURqK1.png\" alt=\"\"></p>\n<h3 id=\"靜態傳入與動態傳入差異\"><a href=\"#靜態傳入與動態傳入差異\" class=\"headerlink\" title=\"靜態傳入與動態傳入差異\"></a>靜態傳入與動態傳入差異</h3><p>  <a href=\"https://codepen.io/chunwen/pen/WNewRBV?editors=1010#0\">六角課程範例</a><br>動態傳入：傳入的是實體內內容<br><img src=\"https://i.imgur.com/Iqs1BH8.png\" alt=\"\"><br>靜態傳入：傳入的是純字串<br><img src=\"https://i.imgur.com/BXLmmEg.png\" alt=\"\"></p>\n<blockquote>\n<p>小結論：動態傳入跟靜態傳入寫法差異僅在於是否有<code>：</code><br>只要沒有<code>：</code>即使透過number傳入也會是string喔！<a href=\"https://www.udemy.com/course/vue-hexschool/learn/lecture/10271566#questions/6499156\">同學討論連結</a>  </p>\n</blockquote>\n<h3 id=\"Props驗證與預設值\"><a href=\"#Props驗證與預設值\" class=\"headerlink\" title=\"Props驗證與預設值\"></a>Props驗證與預設值</h3><p>我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？這時就需要很常使用到驗證<br>首現先介紹型別：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String </span><br><span class=\"line\">Number</span><br><span class=\"line\">Boolean</span><br><span class=\"line\">Object</span><br><span class=\"line\">Array</span><br><span class=\"line\">Date </span><br><span class=\"line\">Function </span><br><span class=\"line\">Symbol</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：型別字首要大寫 如：<code>type: Number</code>  </p>\n</blockquote>\n<h4 id=\"範例：\"><a href=\"#範例：\" class=\"headerlink\" title=\"範例：\"></a>範例：</h4><p>這邊僅<code>列出幾個例子</code>方便我日後快速回覆記憶，完整內容請看<a href=\"https://codepen.io/chunwen/pen/NWKXqbN\">codepen</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">        parentMsg: <span class=\"literal\">null</span>, <span class=\"comment\">// null 代表不檢查型別</span></span><br><span class=\"line\">        propA: <span class=\"built_in\">Number</span>, <span class=\"comment\">// 限定數字(Number要大寫)</span></span><br><span class=\"line\">        propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>], <span class=\"comment\">// 多種條件可用 [ ] 隔開</span></span><br><span class=\"line\">        propC: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 必要欄位，且限定字串型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：props本來就應該用物件包裝起來，因為要對傳進來物件進行驗證<br>這邊特別注意：<br>1.驗證object時，default必須為一個function 如下  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">propE: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Object 型別，代表可接受的是個物件型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">          <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">              message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.這兩種寫法相同喔！都是對型別不做任何驗證</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:[<span class=\"string\">&#x27;parentMsg&#x27;</span>]</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">    parentMsg:<span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Props使用注意事項\"><a href=\"#Props使用注意事項\" class=\"headerlink\" title=\"Props使用注意事項\"></a>Props使用注意事項</h2><h3 id=\"單向數據流\"><a href=\"#單向數據流\" class=\"headerlink\" title=\"單向數據流\"></a>單向數據流</h3><p>什麼意思呢？Props是將資料由外部往內傳遞，而在老師範例中可以清楚看到如果我們<code>從內部修改外部傳進來內容</code>，便會造成錯誤！<br>後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）<br><img src=\"https://i.imgur.com/3Rh6izD.png\" alt=\"\">這時候該如何解決呢？<br>很簡單，只要新宣告一個參數來接受外部修改資料就好～寫法如下<br>或是在元件中使用computed<code>get</code>、<code>set</code><br>這兩種寫法目的：都是讓資料獨立存在於子層而非父層</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;photo&#x27;</span>, &#123;</span><br><span class=\"line\">            props: [<span class=\"string\">&#x27;imgUrl&#x27;</span>],</span><br><span class=\"line\">            template: <span class=\"string\">&#x27;#photo&#x27;</span>,</span><br><span class=\"line\">            data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                newUrl: <span class=\"built_in\">this</span>.imgUrl</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"當V-model遇到props\"><a href=\"#當V-model遇到props\" class=\"headerlink\" title=\"當V-model遇到props\"></a>當V-model遇到props</h4><p>範例如下：<br><img src=\"https://i.imgur.com/xHhPLxb.png\" alt=\"\">透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中<code>更改４號</code>是<code>無法更改1、2、3的資料</code><br><a href=\"https://codepen.io/chunwen/pen/NWKXqbN?editors=1010\">codepen示範</a><br><img src=\"https://i.imgur.com/elwSSt0.png\" alt=\"\"></p>\n<h3 id=\"尚未宣告變數（就是AJAX資料時間差）\"><a href=\"#尚未宣告變數（就是AJAX資料時間差）\" class=\"headerlink\" title=\"尚未宣告變數（就是AJAX資料時間差）\"></a>尚未宣告變數（就是AJAX資料時間差）</h3><p>老師這邊提到的目的是，因為在new vue中我們使用AJAX傳遞資料，而AJAX特性就是非同步，簡單來說就是網頁載入時，AJAX資料可能還未載入，因此<code>網頁上就空空的或是圖片破版</code>。該如何解決呢？<br><img src=\"https://i.imgur.com/ZnVDwTR.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">老師這邊提供一個解法就是v-if，當v-if中內容為truthy時，再將內容載入</span><br><span class=\"line\">&lt;card :user-data&#x3D;&quot;user&quot; v-if&#x3D;&quot;user.gender&quot; &gt;&lt;&#x2F;card&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"父子元件之間溝通方法\"><a href=\"#父子元件之間溝通方法\" class=\"headerlink\" title=\"父子元件之間溝通方法\"></a>父子元件之間溝通方法</h2><p>總共區分為監聽事件、觸發事件兩種：<br>監聽事件：使用V-on 或<code>$on</code>（後者主要會用在event bus）<br>觸發事件：透過<code>$emit</code></p>\n<h3 id=\"元件父與子\"><a href=\"#元件父與子\" class=\"headerlink\" title=\"元件父與子\"></a>元件父與子</h3><p>子元件可以透過<code>this.$parent</code>取得父層實體內容 範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"line\">   template:<span class=\"string\">&#x27;#my-component&#x27;</span>,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;$parent:&quot;</span>,<span class=\"built_in\">this</span>.$parent.msg); <span class=\"comment\">//MsgofParent!</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>這邊的parent，指的是<code>id=“app”</code>這個區塊<br><img src=\"https://i.imgur.com/M1bVL4T.png\" alt=\"\"><br>父组件則是透過 <code>this.$children</code>這個成員 (陣列)， 來存取他的⼦組件。但是要注意<code>this.$children</code> 的順序會受到 v-if 的影響，建議先以<code>ref</code>給子組件設定別名以確保不受組件的順序影響。 範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> newVue(&#123;</span><br><span class=\"line\">el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">msg:<span class=\"string\">&#x27;MsgofParent!&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children2:&#x27;</span>,<span class=\"built_in\">this</span>.$refs.comp2.msg);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children3:&#x27;</span>,<span class=\"built_in\">this</span>.$refs.comp3.msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h4><p>1.debug除錯<br>2.實務上建議不要這樣直接複寫父層內容（因為子層無法脫離父層內容）</p>\n<h3 id=\"觸發事件：透過emit-向外傳遞事件\"><a href=\"#觸發事件：透過emit-向外傳遞事件\" class=\"headerlink\" title=\"觸發事件：透過emit 向外傳遞事件\"></a>觸發事件：透過emit 向外傳遞事件</h3><p>上面<strong>當V-model遇到props</strong> 範例中，我們發現子層資料無法更動父層資料。如果要更動上層資料就會使用到$emit，將資料由內傳到外。<br>我們先來看個簡單例子：<br><img src=\"https://i.imgur.com/UwwNgD7.png\" alt=\"\"><br>示意圖如下：<br><a href=\"https://codepen.io/chunwen/pen/BaBJjOe?editors=1010\">codepen練習檔案</a><br><img src=\"https://i.imgur.com/t5s7Cjs.png\" alt=\"\"><br>說明：只要更動4號欄位中內容，其餘1、2、3資料也會同步更新喔！</p>\n<p>範例2:<br> <a href=\"https://codepen.io/chunwen/pen/ZEzWKZw?editors=1010#0\">課程範例連結</a><br>我們的目的如下：點擊內部元件後，改變外部資料數值<br><img src=\"https://i.imgur.com/FYjaSlf.png\" alt=\"\"><br>以下摘錄轉寫重點</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button-counter</span> ＠<span class=\"attr\">increment</span>=<span class=\"string\">&quot;incrementTotal&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Step1.先自定義事件increment（內層元素）</span><br><span class=\"line\">// incrementTotal(外層元素)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;buttonCounter&#x27;</span>,&#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    incrementCounter:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Step3.內部事件觸發外部資料，使用$emit</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;increment&#x27;</span>,<span class=\"built_in\">Number</span>(<span class=\"built_in\">this</span>.counter)) </span><br><span class=\"line\">     <span class=\"comment\">// 我們這邊為避免型別出現錯誤使用Number</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Step3.Vue instance中使用newMoney接受內部傳遞資料</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Step2.使用newMoney接受incrementCounter傳入參數</span></span><br><span class=\"line\">    incrementTotal:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newMoney</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.cash += newMoney;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sync修飾符傳遞\"><a href=\"#sync修飾符傳遞\" class=\"headerlink\" title=\".sync修飾符傳遞\"></a>.sync修飾符傳遞</h3><p>可以幫助我們達到資料雙向綁定   <a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html\">官網介紹</a><br>補充：雖然我們看似寫了.sync後就達到雙向綁定，實際上我們在子元件中還是透過$emit向外層傳遞更改後的數值<br><img src=\"https://i.imgur.com/92vQoHn.png\" alt=\"\"></p>\n<blockquote>\n<p>提醒：為何update不能更改為其他JS原生事件：click?、input?<br>Ａ：因為vue並未定義JS原生事件。所以必須要使用vue本身設定update<br>優點：<br>Vue實體不需要在使用methods接受子層傳遞出來資料！</p>\n</blockquote>\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><p>這就是props in  , emit out的由來<br><img src=\"https://i.imgur.com/biqkeVF.png\" alt=\"\"></p>\n<h3 id=\"Event-Bus\"><a href=\"#Event-Bus\" class=\"headerlink\" title=\"Event Bus\"></a>Event Bus</h3><p>用途：將原本元件之間資料傳遞時的樹狀結構更改為網狀結構！<br><img src=\"https://i.imgur.com/cQQp93a.png\" alt=\"\"><br>寫法：<br>Step1. 新增一個Vue實體<br> <code>var bus = new Vue()</code><br>Step2. 透過向bus發送事件，與訂閱事件來完成<code>元件與元件的溝通</code><br><img src=\"https://i.imgur.com/eyjDFEX.png\" alt=\"\"><br>接著，我們直接來看範例：<br>備註：訂閱事件必須撰寫在<code>created()階段</code><br><img src=\"https://i.imgur.com/fFrdPC9.png\" alt=\"\"><br>缺點：<br>1.當事件名稱重複時，會同時觸發不同子元件<br>2.因為事件是自己手動訂閱，所以銷毀時候，在beforeDestroy必須手動刪除</p>\n<h4 id=\"綜合練習：todoList\"><a href=\"#綜合練習：todoList\" class=\"headerlink\" title=\"綜合練習：todoList\"></a>綜合練習：todoList</h4><p><img src=\"https://i.imgur.com/8f6qTDq.png\" alt=\"\"><br><img src=\"https://i.imgur.com/QePdH1F.png\" alt=\"\"></p>\n<h4 id=\"更新Component-資料方法整理\"><a href=\"#更新Component-資料方法整理\" class=\"headerlink\" title=\"更新Component 資料方法整理\"></a>更新Component 資料方法整理</h4><p>1.Event Bus<br>2.Props in Emit Out<br>3.$children 、$parent<br>4.Vuex</p>\n<h2 id=\"is動態切換元件\"><a href=\"#is動態切換元件\" class=\"headerlink\" title=\"is動態切換元件\"></a>is動態切換元件</h2><p>用途：最常使用在頁籤切換！<br>我們可以透過<br>1.<code>&lt;component&gt;</code>加上<code>:is</code>屬性來來決定目前元件是誰<br>2.或是<code>&lt;div&gt;</code>加上<code>:is</code><br>寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component:is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;div :is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>說明：上面介紹兩種寫法其實沒有差異，只是列出比較常使用方法而已。<br>注意：使用 is 要注意的只有像<code>&lt;li&gt;</code> 、<code>&lt;tr&gt;</code>、 <code>&lt;option&gt;</code>這類有特別限制上層 DOM 元素必須要是哪幾種的，像 <code>&lt;li&gt;</code> 的外層就只能是<code>&lt;ol&gt;</code> 或 <code>&lt;ul&gt;</code>。<a href=\"https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">官網連結</a><br>範例： codepen<a href=\"https://codepen.io/chunwen/pen/mdbPMOa\">六角課堂範例</a><br><img src=\"https://i.imgur.com/6uV7q6d.png\" alt=\"\">而當我們透過 <component> 加上 :is 屬性來來切換元件時，原本元件內的狀態不會保留，這時候就需要透過 <code>&lt;keep-alive&gt; … &lt;/keep-alive&gt;</code><br>來為元件保留內部狀態   <a href=\"https://codepen.io/chunwen/pen/qBWoRpw?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/pANNzAk.png\" alt=\"\">延伸閱讀：[[Vue Instance/生命週期介紹]]</p>\n<h2 id=\"Slot-元件插槽\"><a href=\"#Slot-元件插槽\" class=\"headerlink\" title=\"Slot 元件插槽\"></a>Slot 元件插槽</h2><p>在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域<br>我們先來看個範例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;parent&quot;</span>&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生命週期中，在created階段，如果有template，vue則會去編譯template</span></span><br><span class=\"line\"><span class=\"comment\">//內容，也因此，child元件不會顯示I&#x27;mparent內容</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;child&gt;&#123;&#123;msg&#125;&#125;&lt;/child&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>猜猜看，<code>child</code>元件中是否會印出父層的<code>msg：I&#39;mparent</code>內容？<br>答案是不會的！原因是<code>目前child所處的位置是父層作用域</code>，當然不會印出子層內容～ <a href=\"https://codepen.io/chunwen/pen/GRKxWJW?editors=1010\">codepen連結</a><br><img src=\"https://i.imgur.com/ni1AUKp.png\" alt=\"\"><br>小結論：<br>1.父層作用域在父層編譯<br>2.子層作用域在子層編譯<br>若要突破作用域編譯問題，就要使用到<code>slot</code></p>\n<h3 id=\"Slot簡介\"><a href=\"#Slot簡介\" class=\"headerlink\" title=\"Slot簡介\"></a>Slot簡介</h3><p>參考資料：<a href=\"https://cythilya.github.io/2017/10/11/vue-component-slot/\">Summer 夏天Vue.js: Slot</a><br>突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。<br>Slot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。</p>\n<p>卡斯伯老師在課堂上將slot分為三種：</p>\n<h4 id=\"1-沒有slot的狀態\"><a href=\"#1-沒有slot的狀態\" class=\"headerlink\" title=\"1.沒有slot的狀態\"></a>1.沒有slot的狀態</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">no-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>這是一段沒有插槽使用的狀態<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">no-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～</p>\n<h4 id=\"2-單組slot\"><a href=\"#2-單組slot\" class=\"headerlink\" title=\"2.單組slot\"></a>2.單組slot</h4><p>特點：在模板中添加<slot><slot/></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">single-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用這段取代原本的 Slot。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">single-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/x-template&quot;</span> id=<span class=\"string\">&quot;singleSlotComponent&quot;</span>&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;alert alert-warning&quot;</span>&gt;</span><br><span class=\"line\">  &lt;h6&gt;我是一個元件&lt;/h6&gt;</span><br><span class=\"line\">  &lt;slot&gt;</span><br><span class=\"line\">    如果沒有內容，則會顯示此段落。</span><br><span class=\"line\">  &lt;/slot&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>畫面上，就可以將<code>&lt;p&gt;使用這段取代原本的 Slot。&lt;/p&gt;</code>呈現在畫面上！如下<br><img src=\"https://i.imgur.com/xmWqNIy.png\" alt=\"\"></p>\n<h4 id=\"3-多組slot-具名插槽\"><a href=\"#3-多組slot-具名插槽\" class=\"headerlink\" title=\"3.多組slot(具名插槽)\"></a>3.多組slot(具名插槽)</h4><p>簡單來說，將內容放入指定位置<br>在html加入<code>slot</code><br>在JS中插入 <code>name</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">named-slot-component</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>替換的 Header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>替換的 Footer<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按鈕內容<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>其餘的內容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">named-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;card-header&quot;</span>&gt;</span><br><span class=\"line\">    &lt;slot name=<span class=\"string\">&quot;header&quot;</span>&gt;這段是預設的文字&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：html結構中若不想顯示標籤如a、header，可以使用<template>，這樣就不會顯示標籤摟～  </p>\n</blockquote>\n<h3 id=\"在2-6-0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法-即v-slot指令-。它取代了slot和slot-scope\"><a href=\"#在2-6-0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法-即v-slot指令-。它取代了slot和slot-scope\" class=\"headerlink\" title=\"在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope\"></a>在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope</h3>","site":{"data":{}},"length":8767,"excerpt":"<p>參考資料：<br><a href=\"https://cythilya.github.io/2017/05/11/vue-component-intro/\">Vue.js: 元件 Components 簡介 - 註冊與使用</a><br><a href=\"https://cn.vuejs.org/v2/guide/components.html\">Vue.官方文件</a><br><a href=\"https://cythilya.github.io/2017/10/11/vue-component-slot/\">Summer 夏天Vue.js: Slot</a> </p>","more":"<hr>\n<h2 id=\"元件（components）簡介：\"><a href=\"#元件（components）簡介：\" class=\"headerlink\" title=\"元件（components）簡介：\"></a>元件（components）簡介：</h2><p>什麼是元件？</p>\n<blockquote>\n<p>每個 Vue.js 的應用程式都是從Vue建構式 (vue constructor) 建立根實體 (root vue instance) 開始，再一個個將元件 (Components) 搭建上去而來的，透過元件的方式能讓開發者<code>將程式碼封裝而且更好重複利用</code>。  </p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/ODmFD0N.png\" alt=\"\"><br>元件特性？<br>一、元件資料都是獨立的<br>1.透過props向內部組件傳遞數據<br>2.透過emit event觸發事件將資料往外送<br><img src=\"https://i.imgur.com/cAK0rSv.png\" alt=\"\"><br>二、data必須是一個函數  額外練習：<a href=\"https://codepen.io/chunwen/pen/RwbreNP?editors=1010\">官網範例連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;button-counter&quot;</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Ｑ：為何子元件中data必須是函式？<br>Ａ：因為 <code>JavaScript 切分變數有效範圍的最⼩單位為 function</code>，為了避免子元件資料互相污染，Vue強置規定子元件data必須是函式</p>\n<h3 id=\"Component-全域註冊\"><a href=\"#Component-全域註冊\" class=\"headerlink\" title=\"Component(全域註冊)\"></a>Component(全域註冊)</h3><p>下面將練習題目拆分成不同部分講解<br>寫法：<br><code>Vue.component(‘自定義名稱’, &#123;Function | Object&#125;)</code><br>逗點後方可以使用function或object<br>範例如下（請先忽略props，後面會介紹到）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;row-component&#x27;</span>, &#123;</span><br><span class=\"line\">               template: <span class=\"string\">&#x27;#rowComponentTemplate&#x27;</span>,</span><br><span class=\"line\">               props:[<span class=\"string\">&#x27;person&#x27;</span>]</span><br><span class=\"line\">          &#125;) </span><br></pre></td></tr></table></figure>\n<h4 id=\"使用X-template建立元件\"><a href=\"#使用X-template建立元件\" class=\"headerlink\" title=\"使用X-template建立元件\"></a>使用X-template建立元件</h4><p>此時，因為我們使用到X-template建立元件，因此我們必須額外新一個<code>script</code>，並指定一個 id來來使⽤</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/x-template&quot;</span> id=<span class=\"string\">&quot;rowComponentTemplate&quot;</span>&gt;</span><br><span class=\"line\">   &lt;tr&gt;</span><br><span class=\"line\">     &lt;td&gt;&#123;&#123; person.name &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">     &lt;td&gt;&#123;&#123; person.cash &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">     &lt;td&gt;&#123;&#123; person.icash &#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">   &lt;/tr&gt;</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>說明：這邊<code>script</code>是另外撰寫喔！<br>補充：放在codepen上時，<code>X-template</code>會將上面一段<code>script</code>寫在html中</p>\n<h4 id=\"接著，是HTML結構部分\"><a href=\"#接著，是HTML結構部分\" class=\"headerlink\" title=\"接著，是HTML結構部分\"></a>接著，是HTML結構部分</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">row-component</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in data&quot;</span> <span class=\"attr\">:person</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;key&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">row-component</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//此時你會發現網頁上tr結構似乎錯誤，</span><br><span class=\"line\">//這是因為html結構上，tbody一定要包著tr</span><br></pre></td></tr></table></figure>\n<p>示意圖如下<br><img src=\"https://i.imgur.com/pC2qbGU.png\" alt=\"\"></p>\n<ul>\n<li>該如何改善？（使用is動態載入template）<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;row-component&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in data&quot;</span> <span class=\"attr\">:person</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;key&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//使用is動態載入template</span><br></pre></td></tr></table></figure>\n正常版<br><img src=\"https://i.imgur.com/RqLwLCu.png\" alt=\"\"></li>\n<li>最後，前面提到的props功能為何？<br>將v-for中的data資料傳進template元件中。示意圖如下<br><img src=\"https://i.imgur.com/y8WH2cM.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"區域註冊介紹（範例如下）\"><a href=\"#區域註冊介紹（範例如下）\" class=\"headerlink\" title=\"區域註冊介紹（範例如下）\"></a>區域註冊介紹（範例如下）</h3><p>寫法：<code>var ComponentA = &#123; /* … */ &#125;</code>   <a href=\"https://cn.vuejs.org/v2/guide/components-registration.html\">官網介紹</a><br>說明：ComponentA，為自定義名稱</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> child = &#123;</span><br><span class=\"line\">            props: [<span class=\"string\">&#x27;person&#x27;</span>],</span><br><span class=\"line\">            template: <span class=\"string\">&#x27;#rowComponentTemplate&#x27;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">            el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">            data: &#123;...略&#125;,</span><br><span class=\"line\">            components:&#123;</span><br><span class=\"line\">              <span class=\"string\">&quot;row-component&quot;</span>:child</span><br><span class=\"line\">              <span class=\"comment\">//row-component必須與html上載入組件名稱相同</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">說明：html結構相同，這邊就不另外撰寫</span><br><span class=\"line\">注意：我們在組建下新增一個components物件</span><br></pre></td></tr></table></figure>\n<p>提醒：component<code>s</code>，有s</p>\n<h3 id=\"基礎建立元件方式（官網教學內容）\"><a href=\"#基礎建立元件方式（官網教學內容）\" class=\"headerlink\" title=\"基礎建立元件方式（官網教學內容）\"></a>基礎建立元件方式（官網教學內容）</h3><p><a href=\"https://codepen.io/chunwen/pen/RwbreNP?editors=1010\">官網範例連結</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提醒：Vue.component必須寫在new Vue前方，原因是元件必須先定義才能被使用。參閱下方討論連結</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;button-counter&quot;</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    <span class=\"string\">`&lt;button class=&quot;btn btn-outline-primary&quot; </span></span><br><span class=\"line\"><span class=\"string\">     v-on:click=&quot;count+=2&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">     You clicked me &#123;&#123; count &#125;&#125; times.</span></span><br><span class=\"line\"><span class=\"string\">     &lt;/button&gt;`</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&quot;#components-demo&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>基礎建立元件跟使用X-template差異僅在於<code>template</code>放置位置<br><a href=\"https://www.udemy.com/vue-hexschool/learn/lecture/10271538#questions/4751236\">Vue.component new Vue 擺放順序</a>  </p>\n</blockquote>\n<h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>1.由於 HTML 不分⼤⼩寫的特性，使用⾃定義的標籤時<code>限定全⼩</code><br><code>寫</code> (可加入破折號 - ) 的標籤名稱<br>2.元件註冊分為<code>全域</code>與<code>區域</code><br>3.<code>區域元件</code>離開指定實體後就不能取用<br>4.<code>全域元件</code>則可以提供多組實體使用</p>\n<blockquote>\n<p>Ｑ：子元件中的data是否可以使用箭頭函式？<br>Ａ：不行，因為這會影響到this作用域。會造成無法取得data資料。其實像是computed、methods、watch也都不行使用箭頭函式<br>But，僅有Filter可以使用arrow function，因為filter無法取得實體資料！<br>Ｑ：下面寫法是全域註冊還是區域註冊？  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CustomBlock = Vue.component(<span class=\"string\">&#x27;custom-block&#x27;</span>, &#123;</span><br><span class=\"line\">      template: <span class=\"string\">`&lt;div class=&quot;block&quot;&gt;B&lt;/div&gt;`</span>,</span><br><span class=\"line\">    &#125;);&gt;</span><br></pre></td></tr></table></figure>\n<p>A：是全域註冊喔，別搞混了！</p>\n<h2 id=\"使用Props由外到內傳遞資料\"><a href=\"#使用Props由外到內傳遞資料\" class=\"headerlink\" title=\"使用Props由外到內傳遞資料\"></a>使用Props由外到內傳遞資料</h2><p>說明：<br>我們之所以需要使用props的目的，在於Vue元件中所有元件都是獨立的，因此資料不能互相取用，這也意味著你不能 (也不應該)在子元件的模組直接引⽤⽗元件的資料。而需要透過<code>props將資料從外部進行傳遞</code></p>\n<h3 id=\"我們先來看一個簡單範例：\"><a href=\"#我們先來看一個簡單範例：\" class=\"headerlink\" title=\"我們先來看一個簡單範例：\"></a>我們先來看一個簡單範例：</h3><p> <a href=\"https://codepen.io/chunwen/pen/yLBPdbQ?editors=1010\">codepen連結</a><br><img src=\"https://i.imgur.com/ujhK1OX.png\" alt=\"\">提醒：使用 DOM 中的模板時，camelCase (駝峰命名法) 的 prop 名需要使用其等價的 kebab-case (短橫線分隔命名) 命名<br>簡單來說：JS上用小駝峰<code>parentMSg</code> ，則html上要用短橫線分隔 如<code>parent-msg</code><br>畫面如下：<br><img src=\"https://i.imgur.com/5NURqK1.png\" alt=\"\"></p>\n<h3 id=\"靜態傳入與動態傳入差異\"><a href=\"#靜態傳入與動態傳入差異\" class=\"headerlink\" title=\"靜態傳入與動態傳入差異\"></a>靜態傳入與動態傳入差異</h3><p>  <a href=\"https://codepen.io/chunwen/pen/WNewRBV?editors=1010#0\">六角課程範例</a><br>動態傳入：傳入的是實體內內容<br><img src=\"https://i.imgur.com/Iqs1BH8.png\" alt=\"\"><br>靜態傳入：傳入的是純字串<br><img src=\"https://i.imgur.com/BXLmmEg.png\" alt=\"\"></p>\n<blockquote>\n<p>小結論：動態傳入跟靜態傳入寫法差異僅在於是否有<code>：</code><br>只要沒有<code>：</code>即使透過number傳入也會是string喔！<a href=\"https://www.udemy.com/course/vue-hexschool/learn/lecture/10271566#questions/6499156\">同學討論連結</a>  </p>\n</blockquote>\n<h3 id=\"Props驗證與預設值\"><a href=\"#Props驗證與預設值\" class=\"headerlink\" title=\"Props驗證與預設值\"></a>Props驗證與預設值</h3><p>我們知道Props是將外部資料傳入元件內，但你怎麼知道傳入的東西是否符合需求或安全呢？這時就需要很常使用到驗證<br>首現先介紹型別：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String </span><br><span class=\"line\">Number</span><br><span class=\"line\">Boolean</span><br><span class=\"line\">Object</span><br><span class=\"line\">Array</span><br><span class=\"line\">Date </span><br><span class=\"line\">Function </span><br><span class=\"line\">Symbol</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：型別字首要大寫 如：<code>type: Number</code>  </p>\n</blockquote>\n<h4 id=\"範例：\"><a href=\"#範例：\" class=\"headerlink\" title=\"範例：\"></a>範例：</h4><p>這邊僅<code>列出幾個例子</code>方便我日後快速回覆記憶，完整內容請看<a href=\"https://codepen.io/chunwen/pen/NWKXqbN\">codepen</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">        parentMsg: <span class=\"literal\">null</span>, <span class=\"comment\">// null 代表不檢查型別</span></span><br><span class=\"line\">        propA: <span class=\"built_in\">Number</span>, <span class=\"comment\">// 限定數字(Number要大寫)</span></span><br><span class=\"line\">        propB: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>], <span class=\"comment\">// 多種條件可用 [ ] 隔開</span></span><br><span class=\"line\">        propC: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 必要欄位，且限定字串型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">          required: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提醒：props本來就應該用物件包裝起來，因為要對傳進來物件進行驗證<br>這邊特別注意：<br>1.驗證object時，default必須為一個function 如下  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">propE: &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Object 型別，代表可接受的是個物件型別</span></span><br><span class=\"line\">          type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">          <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">              message: <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n<p>2.這兩種寫法相同喔！都是對型別不做任何驗證</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:[<span class=\"string\">&#x27;parentMsg&#x27;</span>]</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">    parentMsg:<span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Props使用注意事項\"><a href=\"#Props使用注意事項\" class=\"headerlink\" title=\"Props使用注意事項\"></a>Props使用注意事項</h2><h3 id=\"單向數據流\"><a href=\"#單向數據流\" class=\"headerlink\" title=\"單向數據流\"></a>單向數據流</h3><p>什麼意思呢？Props是將資料由外部往內傳遞，而在老師範例中可以清楚看到如果我們<code>從內部修改外部傳進來內容</code>，便會造成錯誤！<br>後記：仔細想想也蠻有道理，假設我們可以從子層更動父層實體內容，如此一來父層實體內容便會無法管理（或是說資料會不知道被誰更動過！）<br><img src=\"https://i.imgur.com/3Rh6izD.png\" alt=\"\">這時候該如何解決呢？<br>很簡單，只要新宣告一個參數來接受外部修改資料就好～寫法如下<br>或是在元件中使用computed<code>get</code>、<code>set</code><br>這兩種寫法目的：都是讓資料獨立存在於子層而非父層</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;photo&#x27;</span>, &#123;</span><br><span class=\"line\">            props: [<span class=\"string\">&#x27;imgUrl&#x27;</span>],</span><br><span class=\"line\">            template: <span class=\"string\">&#x27;#photo&#x27;</span>,</span><br><span class=\"line\">            data: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                newUrl: <span class=\"built_in\">this</span>.imgUrl</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"當V-model遇到props\"><a href=\"#當V-model遇到props\" class=\"headerlink\" title=\"當V-model遇到props\"></a>當V-model遇到props</h4><p>範例如下：<br><img src=\"https://i.imgur.com/xHhPLxb.png\" alt=\"\">透過上方圖片講解，重點在於第四點，在component底下的data資料是無法改變上層父元素內容！也就是下方圖片中<code>更改４號</code>是<code>無法更改1、2、3的資料</code><br><a href=\"https://codepen.io/chunwen/pen/NWKXqbN?editors=1010\">codepen示範</a><br><img src=\"https://i.imgur.com/elwSSt0.png\" alt=\"\"></p>\n<h3 id=\"尚未宣告變數（就是AJAX資料時間差）\"><a href=\"#尚未宣告變數（就是AJAX資料時間差）\" class=\"headerlink\" title=\"尚未宣告變數（就是AJAX資料時間差）\"></a>尚未宣告變數（就是AJAX資料時間差）</h3><p>老師這邊提到的目的是，因為在new vue中我們使用AJAX傳遞資料，而AJAX特性就是非同步，簡單來說就是網頁載入時，AJAX資料可能還未載入，因此<code>網頁上就空空的或是圖片破版</code>。該如何解決呢？<br><img src=\"https://i.imgur.com/ZnVDwTR.png\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">老師這邊提供一個解法就是v-if，當v-if中內容為truthy時，再將內容載入</span><br><span class=\"line\">&lt;card :user-data&#x3D;&quot;user&quot; v-if&#x3D;&quot;user.gender&quot; &gt;&lt;&#x2F;card&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"父子元件之間溝通方法\"><a href=\"#父子元件之間溝通方法\" class=\"headerlink\" title=\"父子元件之間溝通方法\"></a>父子元件之間溝通方法</h2><p>總共區分為監聽事件、觸發事件兩種：<br>監聽事件：使用V-on 或<code>$on</code>（後者主要會用在event bus）<br>觸發事件：透過<code>$emit</code></p>\n<h3 id=\"元件父與子\"><a href=\"#元件父與子\" class=\"headerlink\" title=\"元件父與子\"></a>元件父與子</h3><p>子元件可以透過<code>this.$parent</code>取得父層實體內容 範例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"line\">   template:<span class=\"string\">&#x27;#my-component&#x27;</span>,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;$parent:&quot;</span>,<span class=\"built_in\">this</span>.$parent.msg); <span class=\"comment\">//MsgofParent!</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>這邊的parent，指的是<code>id=“app”</code>這個區塊<br><img src=\"https://i.imgur.com/M1bVL4T.png\" alt=\"\"><br>父组件則是透過 <code>this.$children</code>這個成員 (陣列)， 來存取他的⼦組件。但是要注意<code>this.$children</code> 的順序會受到 v-if 的影響，建議先以<code>ref</code>給子組件設定別名以確保不受組件的順序影響。 範例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> newVue(&#123;</span><br><span class=\"line\">el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">msg:<span class=\"string\">&#x27;MsgofParent!&#x27;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children2:&#x27;</span>,<span class=\"built_in\">this</span>.$refs.comp2.msg);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;$children3:&#x27;</span>,<span class=\"built_in\">this</span>.$refs.comp3.msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h4><p>1.debug除錯<br>2.實務上建議不要這樣直接複寫父層內容（因為子層無法脫離父層內容）</p>\n<h3 id=\"觸發事件：透過emit-向外傳遞事件\"><a href=\"#觸發事件：透過emit-向外傳遞事件\" class=\"headerlink\" title=\"觸發事件：透過emit 向外傳遞事件\"></a>觸發事件：透過emit 向外傳遞事件</h3><p>上面<strong>當V-model遇到props</strong> 範例中，我們發現子層資料無法更動父層資料。如果要更動上層資料就會使用到$emit，將資料由內傳到外。<br>我們先來看個簡單例子：<br><img src=\"https://i.imgur.com/UwwNgD7.png\" alt=\"\"><br>示意圖如下：<br><a href=\"https://codepen.io/chunwen/pen/BaBJjOe?editors=1010\">codepen練習檔案</a><br><img src=\"https://i.imgur.com/t5s7Cjs.png\" alt=\"\"><br>說明：只要更動4號欄位中內容，其餘1、2、3資料也會同步更新喔！</p>\n<p>範例2:<br> <a href=\"https://codepen.io/chunwen/pen/ZEzWKZw?editors=1010#0\">課程範例連結</a><br>我們的目的如下：點擊內部元件後，改變外部資料數值<br><img src=\"https://i.imgur.com/FYjaSlf.png\" alt=\"\"><br>以下摘錄轉寫重點</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button-counter</span> ＠<span class=\"attr\">increment</span>=<span class=\"string\">&quot;incrementTotal&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// Step1.先自定義事件increment（內層元素）</span><br><span class=\"line\">// incrementTotal(外層元素)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;buttonCounter&#x27;</span>,&#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    incrementCounter:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Step3.內部事件觸發外部資料，使用$emit</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;increment&#x27;</span>,<span class=\"built_in\">Number</span>(<span class=\"built_in\">this</span>.counter)) </span><br><span class=\"line\">     <span class=\"comment\">// 我們這邊為避免型別出現錯誤使用Number</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Step3.Vue instance中使用newMoney接受內部傳遞資料</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Step2.使用newMoney接受incrementCounter傳入參數</span></span><br><span class=\"line\">    incrementTotal:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newMoney</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.cash += newMoney;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sync修飾符傳遞\"><a href=\"#sync修飾符傳遞\" class=\"headerlink\" title=\".sync修飾符傳遞\"></a>.sync修飾符傳遞</h3><p>可以幫助我們達到資料雙向綁定   <a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html\">官網介紹</a><br>補充：雖然我們看似寫了.sync後就達到雙向綁定，實際上我們在子元件中還是透過$emit向外層傳遞更改後的數值<br><img src=\"https://i.imgur.com/92vQoHn.png\" alt=\"\"></p>\n<blockquote>\n<p>提醒：為何update不能更改為其他JS原生事件：click?、input?<br>Ａ：因為vue並未定義JS原生事件。所以必須要使用vue本身設定update<br>優點：<br>Vue實體不需要在使用methods接受子層傳遞出來資料！</p>\n</blockquote>\n<h4 id=\"小結論：\"><a href=\"#小結論：\" class=\"headerlink\" title=\"小結論：\"></a>小結論：</h4><p>這就是props in  , emit out的由來<br><img src=\"https://i.imgur.com/biqkeVF.png\" alt=\"\"></p>\n<h3 id=\"Event-Bus\"><a href=\"#Event-Bus\" class=\"headerlink\" title=\"Event Bus\"></a>Event Bus</h3><p>用途：將原本元件之間資料傳遞時的樹狀結構更改為網狀結構！<br><img src=\"https://i.imgur.com/cQQp93a.png\" alt=\"\"><br>寫法：<br>Step1. 新增一個Vue實體<br> <code>var bus = new Vue()</code><br>Step2. 透過向bus發送事件，與訂閱事件來完成<code>元件與元件的溝通</code><br><img src=\"https://i.imgur.com/eyjDFEX.png\" alt=\"\"><br>接著，我們直接來看範例：<br>備註：訂閱事件必須撰寫在<code>created()階段</code><br><img src=\"https://i.imgur.com/fFrdPC9.png\" alt=\"\"><br>缺點：<br>1.當事件名稱重複時，會同時觸發不同子元件<br>2.因為事件是自己手動訂閱，所以銷毀時候，在beforeDestroy必須手動刪除</p>\n<h4 id=\"綜合練習：todoList\"><a href=\"#綜合練習：todoList\" class=\"headerlink\" title=\"綜合練習：todoList\"></a>綜合練習：todoList</h4><p><img src=\"https://i.imgur.com/8f6qTDq.png\" alt=\"\"><br><img src=\"https://i.imgur.com/QePdH1F.png\" alt=\"\"></p>\n<h4 id=\"更新Component-資料方法整理\"><a href=\"#更新Component-資料方法整理\" class=\"headerlink\" title=\"更新Component 資料方法整理\"></a>更新Component 資料方法整理</h4><p>1.Event Bus<br>2.Props in Emit Out<br>3.$children 、$parent<br>4.Vuex</p>\n<h2 id=\"is動態切換元件\"><a href=\"#is動態切換元件\" class=\"headerlink\" title=\"is動態切換元件\"></a>is動態切換元件</h2><p>用途：最常使用在頁籤切換！<br>我們可以透過<br>1.<code>&lt;component&gt;</code>加上<code>:is</code>屬性來來決定目前元件是誰<br>2.或是<code>&lt;div&gt;</code>加上<code>:is</code><br>寫法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;component:is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/component&gt;</span><br><span class=\"line\">&lt;div :is=<span class=\"string\">&quot;currentView&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>說明：上面介紹兩種寫法其實沒有差異，只是列出比較常使用方法而已。<br>注意：使用 is 要注意的只有像<code>&lt;li&gt;</code> 、<code>&lt;tr&gt;</code>、 <code>&lt;option&gt;</code>這類有特別限制上層 DOM 元素必須要是哪幾種的，像 <code>&lt;li&gt;</code> 的外層就只能是<code>&lt;ol&gt;</code> 或 <code>&lt;ul&gt;</code>。<a href=\"https://cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">官網連結</a><br>範例： codepen<a href=\"https://codepen.io/chunwen/pen/mdbPMOa\">六角課堂範例</a><br><img src=\"https://i.imgur.com/6uV7q6d.png\" alt=\"\">而當我們透過 <component> 加上 :is 屬性來來切換元件時，原本元件內的狀態不會保留，這時候就需要透過 <code>&lt;keep-alive&gt; … &lt;/keep-alive&gt;</code><br>來為元件保留內部狀態   <a href=\"https://codepen.io/chunwen/pen/qBWoRpw?editors=1010\">codepen</a><br><img src=\"https://i.imgur.com/pANNzAk.png\" alt=\"\">延伸閱讀：[[Vue Instance/生命週期介紹]]</p>\n<h2 id=\"Slot-元件插槽\"><a href=\"#Slot-元件插槽\" class=\"headerlink\" title=\"Slot 元件插槽\"></a>Slot 元件插槽</h2><p>在介紹slot之前，我們必須先瞭解一個觀念：編譯作用域<br>我們先來看個範例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;parent&quot;</span>&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生命週期中，在created階段，如果有template，vue則會去編譯template</span></span><br><span class=\"line\"><span class=\"comment\">//內容，也因此，child元件不會顯示I&#x27;mparent內容</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;child&gt;&#123;&#123;msg&#125;&#125;&lt;/child&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>猜猜看，<code>child</code>元件中是否會印出父層的<code>msg：I&#39;mparent</code>內容？<br>答案是不會的！原因是<code>目前child所處的位置是父層作用域</code>，當然不會印出子層內容～ <a href=\"https://codepen.io/chunwen/pen/GRKxWJW?editors=1010\">codepen連結</a><br><img src=\"https://i.imgur.com/ni1AUKp.png\" alt=\"\"><br>小結論：<br>1.父層作用域在父層編譯<br>2.子層作用域在子層編譯<br>若要突破作用域編譯問題，就要使用到<code>slot</code></p>\n<h3 id=\"Slot簡介\"><a href=\"#Slot簡介\" class=\"headerlink\" title=\"Slot簡介\"></a>Slot簡介</h3><p>參考資料：<a href=\"https://cythilya.github.io/2017/10/11/vue-component-slot/\">Summer 夏天Vue.js: Slot</a><br>突破作用域，將父層內容傳遞進來！通常會應用在如果內容不一定要放入component中時，可以透過slot傳遞一整個html結構進來。<br>Slot 是一種用於內容分配（Content Distribution / Transclusion）的元件，適用於複雜或巢狀元件的實作上，可以想像成是空間預留的方法，在迭代過程中再把內容塞進去。</p>\n<p>卡斯伯老師在課堂上將slot分為三種：</p>\n<h4 id=\"1-沒有slot的狀態\"><a href=\"#1-沒有slot的狀態\" class=\"headerlink\" title=\"1.沒有slot的狀態\"></a>1.沒有slot的狀態</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">no-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>這是一段沒有插槽使用的狀態<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">no-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>說明：即使寫p段落文字在子元件中，在html上依舊不會顯示。因為元件中的內容都會被模板替換掉。這就是上方提到作用域編譯的問題～</p>\n<h4 id=\"2-單組slot\"><a href=\"#2-單組slot\" class=\"headerlink\" title=\"2.單組slot\"></a>2.單組slot</h4><p>特點：在模板中添加<slot><slot/></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">single-slot-component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用這段取代原本的 Slot。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">single-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/x-template&quot;</span> id=<span class=\"string\">&quot;singleSlotComponent&quot;</span>&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;alert alert-warning&quot;</span>&gt;</span><br><span class=\"line\">  &lt;h6&gt;我是一個元件&lt;/h6&gt;</span><br><span class=\"line\">  &lt;slot&gt;</span><br><span class=\"line\">    如果沒有內容，則會顯示此段落。</span><br><span class=\"line\">  &lt;/slot&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>畫面上，就可以將<code>&lt;p&gt;使用這段取代原本的 Slot。&lt;/p&gt;</code>呈現在畫面上！如下<br><img src=\"https://i.imgur.com/xmWqNIy.png\" alt=\"\"></p>\n<h4 id=\"3-多組slot-具名插槽\"><a href=\"#3-多組slot-具名插槽\" class=\"headerlink\" title=\"3.多組slot(具名插槽)\"></a>3.多組slot(具名插槽)</h4><p>簡單來說，將內容放入指定位置<br>在html加入<code>slot</code><br>在JS中插入 <code>name</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">named-slot-component</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>替換的 Header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>替換的 Footer<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按鈕內容<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>其餘的內容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">named-slot-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;card-header&quot;</span>&gt;</span><br><span class=\"line\">    &lt;slot name=<span class=\"string\">&quot;header&quot;</span>&gt;這段是預設的文字&lt;/slot&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>補充：html結構中若不想顯示標籤如a、header，可以使用<template>，這樣就不會顯示標籤摟～  </p>\n</blockquote>\n<h3 id=\"在2-6-0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法-即v-slot指令-。它取代了slot和slot-scope\"><a href=\"#在2-6-0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法-即v-slot指令-。它取代了slot和slot-scope\" class=\"headerlink\" title=\"在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope\"></a>在2.6.0中，我們為具名插槽和作用域插槽引入了一個新的統一的語法(即v-slot指令)。它取代了slot和slot-scope</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckpv22t1x0008zqzi337h3pdx","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t23000ezqzi3u4g1jg6"},{"post_id":"ckpv22t1n0001zqziey9s0jon","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t25000izqzi4kc4atov"},{"post_id":"ckpv22t1s0003zqzid4an242n","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t26000lzqzi9zz9h79h"},{"post_id":"ckpv22t1w0007zqzid8952ogz","category_id":"ckpv22t23000fzqzi3rk90yxk","_id":"ckpv22t29000rzqzi2o8o5rhq"},{"post_id":"ckpv22t25000kzqzi0kxd5f34","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t2a000wzqzibmad4opd"},{"post_id":"ckpv22t27000pzqzi7hkobjfw","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t2b000zzqziamtg6bvb"},{"post_id":"ckpv22t1y0009zqzi9y6y0342","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2c0014zqzi2xaqh37j"},{"post_id":"ckpv22t28000qzqzi0rro17kj","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2d0017zqzienzse0ay"},{"post_id":"ckpv22t21000czqzid4orasdc","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2f001czqziffau3mgp"},{"post_id":"ckpv22t2b000yzqzi2py7d65g","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2g001ezqzia2d245gd"},{"post_id":"ckpv22t2c0013zqzi3fxz7pkf","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2i001jzqziaj1lf9j5"},{"post_id":"ckpv22t22000dzqzibc88d7pa","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2j001mzqzi4v07fytb"},{"post_id":"ckpv22t2e001bzqzi8kvn5v6x","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t2l001rzqzifeqcb3xf"},{"post_id":"ckpv22t24000hzqzi2ogl4aen","category_id":"ckpv22t2d0018zqzi2x3q6pft","_id":"ckpv22t2m001uzqzifai9c9f1"},{"post_id":"ckpv22t2f001dzqzic5qz3341","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t2m001yzqzi5bvd5ccp"},{"post_id":"ckpv22t2h001izqzi7g3k4t8i","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t2n0021zqzi4fi30et0"},{"post_id":"ckpv22t2a000vzqzif75l2u0z","category_id":"ckpv22t2d0018zqzi2x3q6pft","_id":"ckpv22t2p0025zqzicu5ggrm2"},{"post_id":"ckpv22t2i001lzqzicfvn2qac","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t2q0028zqzi9547h4hy"},{"post_id":"ckpv22t2k001pzqzi9imk8xfg","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2r002bzqzi6h4c1mrc"},{"post_id":"ckpv22t2l001tzqzihlku2f3x","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2s002fzqzicne14fi5"},{"post_id":"ckpv22t2d0016zqzicvs82xlq","category_id":"ckpv22t2j001ozqzi7dc1cmhw","_id":"ckpv22t2u002izqzi327m77e2"},{"post_id":"ckpv22t2m001wzqziakhg05lb","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2x002mzqzic3bqgszp"},{"post_id":"ckpv22t2n0020zqzi9cr12v38","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t2y002pzqzi1v1l35mj"},{"post_id":"ckpv22t2o0023zqziekskfnd9","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t30002tzqzi7f6lc2lr"},{"post_id":"ckpv22t2p0027zqzif31r7682","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t31002wzqzi438iftmz"},{"post_id":"ckpv22t2q002azqzi4a9694wb","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t350030zqzibtlx3m6s"},{"post_id":"ckpv22t2r002ezqzi3wy2haxm","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t360033zqzi0gd05x1h"},{"post_id":"ckpv22t2t002hzqzi8xltfxtx","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t370036zqzi8yjm6158"},{"post_id":"ckpv22t2u002lzqzi9zy69e7e","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t38003azqzi2ddb5j25"},{"post_id":"ckpv22t2x002ozqzi7or9gbff","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t39003dzqzicunfc3ol"},{"post_id":"ckpv22t2z002szqzi5ezuaxpi","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3b003hzqzi6785hcz7"},{"post_id":"ckpv22t30002vzqzibrodf65u","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3c003kzqzibvp1fbxg"},{"post_id":"ckpv22t32002yzqzihn5786aj","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3e003ozqzig8fa75rf"},{"post_id":"ckpv22t350032zqzi6h7wbufi","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3f003rzqzihihx8nmu"},{"post_id":"ckpv22t360035zqziccrq136u","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3g003vzqzidd7u8g38"},{"post_id":"ckpv22t380039zqzigm7aafch","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3h003zzqzia0sl90pt"},{"post_id":"ckpv22t39003czqzidefrcvcr","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3k0043zqzifsg07xy6"},{"post_id":"ckpv22t3a003gzqzi0kq9d5wb","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3l0047zqzibiu31plm"},{"post_id":"ckpv22t3c003jzqzi62vlhlp0","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3m004bzqziam614h5g"},{"post_id":"ckpv22t3d003nzqzi1ivc8awe","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t3n004fzqzi2a6x1mte"},{"post_id":"ckpv22t3g003yzqzi7hkzbcad","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t3o004jzqzi7lr5d6fp"},{"post_id":"ckpv22t3e003qzqzi12gkgca2","category_id":"ckpv22t3g003wzqzic2c07dxf","_id":"ckpv22t3q004nzqzi2wduf0iz"},{"post_id":"ckpv22t3m004azqziat668hwi","category_id":"ckpv22t3l0046zqzi4l916ej9","_id":"ckpv22t3s004qzqzidn2t05vv"},{"post_id":"ckpv22t3f003uzqzieaqycrxq","category_id":"ckpv22t3l0046zqzi4l916ej9","_id":"ckpv22t3t004tzqzi5rcy8z4b"},{"post_id":"ckpv22t3m004dzqzia5ys0xez","category_id":"ckpv22t3l0046zqzi4l916ej9","_id":"ckpv22t3u004wzqzi9p2w8nvm"},{"post_id":"ckpv22t3j0042zqzi21xg80ll","category_id":"ckpv22t3l0046zqzi4l916ej9","_id":"ckpv22t3x004zzqzi33m65z6s"},{"post_id":"ckpv22t3k0045zqzier3a5uu4","category_id":"ckpv22t3l0046zqzi4l916ej9","_id":"ckpv22t3z0053zqzictovftqg"},{"post_id":"ckpv22t3s004rzqzi99xq6ky7","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t400057zqzi5ruj1w8r"},{"post_id":"ckpv22t3t004uzqzi1lo03em1","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t42005bzqzi1vzrby5y"},{"post_id":"ckpv22t3o004izqzicfzv2kvr","category_id":"ckpv22t3s004szqzih31x1tah","_id":"ckpv22t44005fzqzia1em2ec0"},{"post_id":"ckpv22t3w004yzqzi92hebgne","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t45005jzqzifxqtfaim"},{"post_id":"ckpv22t3y0052zqziczq0bxf9","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t47005nzqzihl7230yo"},{"post_id":"ckpv22t3p004lzqzi22185h65","category_id":"ckpv22t3s004szqzih31x1tah","_id":"ckpv22t48005rzqzi3m0n41kf"},{"post_id":"ckpv22t3z0055zqzigj1g4c1d","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t49005vzqzif8op5w4e"},{"post_id":"ckpv22t3r004pzqzi1189hhua","category_id":"ckpv22t3s004szqzih31x1tah","_id":"ckpv22t4a005zzqziaayu033t"},{"post_id":"ckpv22t46005lzqzihj5chqc7","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4b0063zqziefnp636j"},{"post_id":"ckpv22t400059zqzi0otvc5wz","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4b0066zqziekuf61pl"},{"post_id":"ckpv22t47005ozqziasdnape5","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4c0069zqzi7mlz8fzx"},{"post_id":"ckpv22t48005tzqzi7t2bfbq7","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4d006czqzifsa4gfjw"},{"post_id":"ckpv22t42005dzqziaf1f1zro","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4f006gzqzi80t4h3bt"},{"post_id":"ckpv22t49005wzqzi42oiaj0o","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4g006jzqzi97wl0dw8"},{"post_id":"ckpv22t4a0061zqzi5hro06v4","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4i006nzqzi8ayr8zhi"},{"post_id":"ckpv22t45005hzqzi721l23sv","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4j006qzqzic70xgs0t"},{"post_id":"ckpv22t4b0064zqzih7ip9afn","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4l006uzqzi0xckdygo"},{"post_id":"ckpv22t4c0068zqzih60g9g71","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4m006xzqzi3v0q2zz8"},{"post_id":"ckpv22t4d006bzqzi63bd0gjn","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4n0071zqzi34cy8f98"},{"post_id":"ckpv22t4f006fzqzicmh63otz","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4n0074zqzi97sl0zqt"},{"post_id":"ckpv22t4g006izqzihatk6upb","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4o0078zqzi2fbggrpo"},{"post_id":"ckpv22t4h006mzqzia2u97g0z","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4p007bzqzi1x3s4tf2"},{"post_id":"ckpv22t4j006pzqzi88ec03da","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4q007gzqzi96rfflcn"},{"post_id":"ckpv22t4k006tzqzicpf8ezsy","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4r007jzqzi5udle7ao"},{"post_id":"ckpv22t4l006wzqzi4pbj34hr","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4s007ozqzi6kcm2xg4"},{"post_id":"ckpv22t4m0070zqzi98jw47mc","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4t007rzqzi92mgg4xa"},{"post_id":"ckpv22t4n0073zqzifrzx26tr","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4u007vzqzic3yd4fas"},{"post_id":"ckpv22t4q007fzqzifupa3h85","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4v007yzqzi1tv87y4w"},{"post_id":"ckpv22t4q007izqzigtrn6kk0","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t4x0082zqziapzb5xhx"},{"post_id":"ckpv22t4o0077zqzi59kt0nbz","category_id":"ckpv22t4p007ezqzi2lu06nu9","_id":"ckpv22t4y0085zqzi8a959spr"},{"post_id":"ckpv22t4r007mzqzibrteh7bv","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t500089zqzidw4c0dk4"},{"post_id":"ckpv22t4s007qzqzig6ovetqk","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t52008dzqzib11md9lc"},{"post_id":"ckpv22t4o007azqzib55v32uw","category_id":"ckpv22t4s007nzqzi9os08q05","_id":"ckpv22t53008hzqzi510k0sac"},{"post_id":"ckpv22t4t007uzqzi4v7q23cu","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t54008kzqzibi4l2a2a"},{"post_id":"ckpv22t4v007xzqzi5kqc9udx","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t55008ozqzic0q5gqww"},{"post_id":"ckpv22t4w0081zqzi54dp4s1s","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t57008szqzi4tepc22z"},{"post_id":"ckpv22t4y0088zqzi5jr0bfxh","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t58008vzqzi6aht38np"},{"post_id":"ckpv22t51008czqzi1oiy1i6k","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t59008zzqzi3fsvhv0n"},{"post_id":"ckpv22t52008fzqzi6m0k7vj5","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t5a0092zqzia78w24js"},{"post_id":"ckpv22t53008jzqzi2csy8kym","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t5c0096zqziaq625qga"},{"post_id":"ckpv22t54008mzqzi8ky2d6eq","category_id":"ckpv22t44005gzqzi0tgrgglp","_id":"ckpv22t5d0099zqzigge7b41m"},{"post_id":"ckpv22t56008rzqziatjih85z","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t5f009czqzi4mxp2stl"},{"post_id":"ckpv22t4x0084zqzicf7nggqr","category_id":"ckpv22t51008bzqzian4s2fsg","_id":"ckpv22t5f009fzqzi7r4594bb"},{"post_id":"ckpv22t4x0084zqzicf7nggqr","category_id":"ckpv22t55008nzqzibkwl36mp","_id":"ckpv22t5g009hzqzi15um5s8c"},{"post_id":"ckpv22t57008uzqzi6jndf228","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t5g009kzqzifv4feb3t"},{"post_id":"ckpv22t59008yzqzidi4yha5f","category_id":"ckpv22t1u0004zqzi0ai83hsk","_id":"ckpv22t5i009nzqzidxo95jtj"},{"post_id":"ckpv22t5a0091zqzi9cdq639d","category_id":"ckpv22t23000fzqzi3rk90yxk","_id":"ckpv22t5i009qzqzigwyb366s"},{"post_id":"ckpv22t5b0095zqzi8wx1grdt","category_id":"ckpv22t23000fzqzi3rk90yxk","_id":"ckpv22t5j009szqzi6d1tdkj4"},{"post_id":"ckpv22t5c0098zqzi2lej5z5u","category_id":"ckpv22t5f009ezqzih2gy97ku","_id":"ckpv22t5k009wzqzi1a1o7omb"},{"post_id":"ckpv22t5c0098zqzi2lej5z5u","category_id":"ckpv22t5h009mzqzi8ptac2t4","_id":"ckpv22t5k009zzqzi1h0q1sx4"},{"post_id":"ckpv22t6v00f0zqzi3s437g7g","category_id":"ckpv22t26000nzqzi75jnhvag","_id":"ckpv22t6w00f3zqzifjo8h3cl"}],"PostTag":[{"post_id":"ckpv22t1n0001zqziey9s0jon","tag_id":"ckpv22t1v0005zqziedileaa0","_id":"ckpv22t25000jzqzi3yv8drjz"},{"post_id":"ckpv22t1n0001zqziey9s0jon","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t26000mzqzib9gfcr8b"},{"post_id":"ckpv22t27000pzqzi7hkobjfw","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t2a000uzqzi0m6m79sx"},{"post_id":"ckpv22t27000pzqzi7hkobjfw","tag_id":"ckpv22t1v0005zqziedileaa0","_id":"ckpv22t2a000xzqzi1v2n85ws"},{"post_id":"ckpv22t1s0003zqzid4an242n","tag_id":"ckpv22t1v0005zqziedileaa0","_id":"ckpv22t2c0012zqzi8zn48bt8"},{"post_id":"ckpv22t1s0003zqzid4an242n","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t2d0015zqzie9er2iue"},{"post_id":"ckpv22t1w0007zqzid8952ogz","tag_id":"ckpv22t29000szqzifcp75r4h","_id":"ckpv22t2e0019zqzi6o1bdam6"},{"post_id":"ckpv22t2e001bzqzi8kvn5v6x","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t2g001fzqzice601z76"},{"post_id":"ckpv22t2e001bzqzi8kvn5v6x","tag_id":"ckpv22t1v0005zqziedileaa0","_id":"ckpv22t2i001kzqzi8tjr151n"},{"post_id":"ckpv22t1x0008zqzi337h3pdx","tag_id":"ckpv22t2b0011zqzi5qb3clje","_id":"ckpv22t2j001nzqzi7c1i65ce"},{"post_id":"ckpv22t1x0008zqzi337h3pdx","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t2l001szqzifax06npe"},{"post_id":"ckpv22t2f001dzqzic5qz3341","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t2m001vzqzi4ors7ais"},{"post_id":"ckpv22t2f001dzqzic5qz3341","tag_id":"ckpv22t1v0005zqziedileaa0","_id":"ckpv22t2n001zzqziawn1ghc6"},{"post_id":"ckpv22t2h001izqzi7g3k4t8i","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t2o0022zqzih0546z9l"},{"post_id":"ckpv22t1y0009zqzi9y6y0342","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t2p0026zqzia1rxc422"},{"post_id":"ckpv22t2k001pzqzi9imk8xfg","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t2q0029zqzi92r35h6l"},{"post_id":"ckpv22t21000czqzid4orasdc","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t2r002dzqzi5lpt2qxr"},{"post_id":"ckpv22t2p0027zqzif31r7682","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t2s002gzqzigotd4atj"},{"post_id":"ckpv22t2p0027zqzif31r7682","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t2u002kzqzi273d50vx"},{"post_id":"ckpv22t22000dzqzibc88d7pa","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t2x002nzqzihqb6c0if"},{"post_id":"ckpv22t22000dzqzibc88d7pa","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t2y002qzqzih99fe3fr"},{"post_id":"ckpv22t2q002azqzi4a9694wb","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t30002uzqzi1o6qd7pj"},{"post_id":"ckpv22t2q002azqzi4a9694wb","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t31002xzqzi5wwb2ncy"},{"post_id":"ckpv22t2r002ezqzi3wy2haxm","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t350031zqzidu7k15j6"},{"post_id":"ckpv22t2r002ezqzi3wy2haxm","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t360034zqzi4jc61wqp"},{"post_id":"ckpv22t24000hzqzi2ogl4aen","tag_id":"ckpv22t2r002czqzic8r4456i","_id":"ckpv22t380038zqzid9tv0wgq"},{"post_id":"ckpv22t24000hzqzi2ogl4aen","tag_id":"ckpv22t2u002jzqzibrhz1rno","_id":"ckpv22t39003bzqzi3c303jp1"},{"post_id":"ckpv22t25000kzqzi0kxd5f34","tag_id":"ckpv22t2y002rzqzie9d540sh","_id":"ckpv22t3a003fzqzieilzg2l6"},{"post_id":"ckpv22t25000kzqzi0kxd5f34","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t3b003izqzi0f9jb0pw"},{"post_id":"ckpv22t25000kzqzi0kxd5f34","tag_id":"ckpv22t1v0005zqziedileaa0","_id":"ckpv22t3d003mzqzi3yc67wz7"},{"post_id":"ckpv22t25000kzqzi0kxd5f34","tag_id":"ckpv22t34002zzqziezxmhr0a","_id":"ckpv22t3e003pzqzi53vugnd9"},{"post_id":"ckpv22t28000qzqzi0rro17kj","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t3f003tzqzi3okkf5n7"},{"post_id":"ckpv22t28000qzqzi0rro17kj","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t3g003xzqzi1x5q1ton"},{"post_id":"ckpv22t3c003jzqzi62vlhlp0","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t3i0041zqzicmv12hua"},{"post_id":"ckpv22t3c003jzqzi62vlhlp0","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t3k0044zqzia9hf70ba"},{"post_id":"ckpv22t2a000vzqzif75l2u0z","tag_id":"ckpv22t3c003lzqzi9fd257fz","_id":"ckpv22t3l0049zqziaku7d2no"},{"post_id":"ckpv22t2a000vzqzif75l2u0z","tag_id":"ckpv22t2u002jzqzibrhz1rno","_id":"ckpv22t3m004czqzie1oo8mf0"},{"post_id":"ckpv22t2b000yzqzi2py7d65g","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t3o004hzqzigoxg9zil"},{"post_id":"ckpv22t2c0013zqzi3fxz7pkf","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t3p004kzqzi8yogebfr"},{"post_id":"ckpv22t2d0016zqzicvs82xlq","tag_id":"ckpv22t3n004gzqzi8e4e3c1u","_id":"ckpv22t3w004xzqziczkr3ysz"},{"post_id":"ckpv22t2d0016zqzicvs82xlq","tag_id":"ckpv22t3r004ozqzi20eyg5bv","_id":"ckpv22t3y0051zqzicwq0g4ey"},{"post_id":"ckpv22t2i001lzqzicfvn2qac","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t400056zqzi19av99dh"},{"post_id":"ckpv22t2i001lzqzicfvn2qac","tag_id":"ckpv22t3u004vzqzignqqgw7v","_id":"ckpv22t41005azqzibpg844tp"},{"post_id":"ckpv22t2l001tzqzihlku2f3x","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t43005ezqzif5qr5spq"},{"post_id":"ckpv22t2l001tzqzihlku2f3x","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t45005izqzi4mmcbd5n"},{"post_id":"ckpv22t2m001wzqziakhg05lb","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t47005mzqzi7nmle79n"},{"post_id":"ckpv22t2m001wzqziakhg05lb","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t47005qzqzi9bc1atnj"},{"post_id":"ckpv22t2n0020zqzi9cr12v38","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t49005uzqziaa335c66"},{"post_id":"ckpv22t2n0020zqzi9cr12v38","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t49005yzqzi3pc4964n"},{"post_id":"ckpv22t2o0023zqziekskfnd9","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4a0062zqzic57lfirt"},{"post_id":"ckpv22t2o0023zqziekskfnd9","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4b0065zqzi1gr022za"},{"post_id":"ckpv22t2t002hzqzi8xltfxtx","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4c006azqzi2l992mv0"},{"post_id":"ckpv22t2t002hzqzi8xltfxtx","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4e006dzqzifhdohrtc"},{"post_id":"ckpv22t2t002hzqzi8xltfxtx","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t4f006hzqziditi9x2y"},{"post_id":"ckpv22t2u002lzqzi9zy69e7e","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4g006kzqzicqe68fdv"},{"post_id":"ckpv22t2u002lzqzi9zy69e7e","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4i006ozqziat4r36z5"},{"post_id":"ckpv22t2u002lzqzi9zy69e7e","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t4j006rzqzi860ifyrh"},{"post_id":"ckpv22t2x002ozqzi7or9gbff","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4l006vzqzi6ywmeqdp"},{"post_id":"ckpv22t2x002ozqzi7or9gbff","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4m006yzqzib65w9rn7"},{"post_id":"ckpv22t2x002ozqzi7or9gbff","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t4n0072zqzi1rm5h8t5"},{"post_id":"ckpv22t2z002szqzi5ezuaxpi","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4n0075zqzi563m9p9u"},{"post_id":"ckpv22t2z002szqzi5ezuaxpi","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4o0079zqzicudrhflk"},{"post_id":"ckpv22t2z002szqzi5ezuaxpi","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t4p007czqzi2jt5asqe"},{"post_id":"ckpv22t30002vzqzibrodf65u","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4q007hzqzifqnn3qqz"},{"post_id":"ckpv22t30002vzqzibrodf65u","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4r007kzqziagj6g8er"},{"post_id":"ckpv22t30002vzqzibrodf65u","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t4s007pzqzibtir4tbv"},{"post_id":"ckpv22t32002yzqzihn5786aj","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4t007szqzi5n2vbywi"},{"post_id":"ckpv22t32002yzqzihn5786aj","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4u007wzqzi2bjzb2q0"},{"post_id":"ckpv22t32002yzqzihn5786aj","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t4w007zzqzi2x6taxcr"},{"post_id":"ckpv22t350032zqzi6h7wbufi","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t4x0083zqzi5g8kgzdv"},{"post_id":"ckpv22t350032zqzi6h7wbufi","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t4y0086zqzic64o1bba"},{"post_id":"ckpv22t350032zqzi6h7wbufi","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t50008azqzi4z1ngdfc"},{"post_id":"ckpv22t360035zqziccrq136u","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t52008ezqzi1kp67d83"},{"post_id":"ckpv22t360035zqziccrq136u","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t53008izqzi9una6dii"},{"post_id":"ckpv22t360035zqziccrq136u","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t54008lzqzi11av6h1i"},{"post_id":"ckpv22t380039zqzigm7aafch","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t56008qzqzi6wbdehle"},{"post_id":"ckpv22t380039zqzigm7aafch","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t57008tzqzidcnjekq0"},{"post_id":"ckpv22t380039zqzigm7aafch","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t58008wzqzi5zwb2x39"},{"post_id":"ckpv22t39003czqzidefrcvcr","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t590090zqzidiu9e0y3"},{"post_id":"ckpv22t39003czqzidefrcvcr","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t5a0093zqzi3hc35yqr"},{"post_id":"ckpv22t39003czqzidefrcvcr","tag_id":"ckpv22t4t007tzqziek5wh034","_id":"ckpv22t5c0097zqzi65lp0826"},{"post_id":"ckpv22t4v007xzqzi5kqc9udx","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5d009azqziekjo205k"},{"post_id":"ckpv22t3a003gzqzi0kq9d5wb","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t5f009dzqzi3q5fe297"},{"post_id":"ckpv22t3a003gzqzi0kq9d5wb","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t5f009gzqzi7ilq5p1u"},{"post_id":"ckpv22t3a003gzqzi0kq9d5wb","tag_id":"ckpv22t4t007tzqziek5wh034","_id":"ckpv22t5g009jzqzi7s1s24fy"},{"post_id":"ckpv22t3d003nzqzi1ivc8awe","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t5g009lzqzicqkq46ho"},{"post_id":"ckpv22t3d003nzqzi1ivc8awe","tag_id":"ckpv22t2o0024zqzi1ee54ml3","_id":"ckpv22t5i009pzqzigcpre8wa"},{"post_id":"ckpv22t3d003nzqzi1ivc8awe","tag_id":"ckpv22t4y0087zqzian6b4vsb","_id":"ckpv22t5j009rzqzi6urm4n7q"},{"post_id":"ckpv22t3e003qzqzi12gkgca2","tag_id":"ckpv22t52008gzqzi0yni0eap","_id":"ckpv22t5j009uzqzieh3e46m6"},{"post_id":"ckpv22t3e003qzqzi12gkgca2","tag_id":"ckpv22t55008pzqziaswx3gfi","_id":"ckpv22t5j009vzqzi15koegtv"},{"post_id":"ckpv22t57008uzqzi6jndf228","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5k009yzqzi7dccd0m9"},{"post_id":"ckpv22t59008yzqzidi4yha5f","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5k00a0zqzi2e1xddq5"},{"post_id":"ckpv22t5a0091zqzi9cdq639d","tag_id":"ckpv22t29000szqzifcp75r4h","_id":"ckpv22t5l00a2zqzi8tfi33zj"},{"post_id":"ckpv22t5b0095zqzi8wx1grdt","tag_id":"ckpv22t29000szqzifcp75r4h","_id":"ckpv22t5l00a3zqzi18k59e8h"},{"post_id":"ckpv22t3f003uzqzieaqycrxq","tag_id":"ckpv22t58008xzqzi8w447xv7","_id":"ckpv22t5n00a5zqzieos07fvk"},{"post_id":"ckpv22t3f003uzqzieaqycrxq","tag_id":"ckpv22t5a0094zqzi97lv1n9i","_id":"ckpv22t5n00a6zqziehjr592c"},{"post_id":"ckpv22t3g003yzqzi7hkzbcad","tag_id":"ckpv22t5d009bzqziclbu1ggm","_id":"ckpv22t5n00a8zqzi7d8834g7"},{"post_id":"ckpv22t3g003yzqzi7hkzbcad","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5n00a9zqzi623jaucw"},{"post_id":"ckpv22t3j0042zqzi21xg80ll","tag_id":"ckpv22t58008xzqzi8w447xv7","_id":"ckpv22t5n00abzqzi36drcmg1"},{"post_id":"ckpv22t3j0042zqzi21xg80ll","tag_id":"ckpv22t5a0094zqzi97lv1n9i","_id":"ckpv22t5o00aczqzi7jt4494p"},{"post_id":"ckpv22t3k0045zqzier3a5uu4","tag_id":"ckpv22t58008xzqzi8w447xv7","_id":"ckpv22t5o00aezqzif3xshh1w"},{"post_id":"ckpv22t3k0045zqzier3a5uu4","tag_id":"ckpv22t5a0094zqzi97lv1n9i","_id":"ckpv22t5o00afzqzif3y83skk"},{"post_id":"ckpv22t3m004azqziat668hwi","tag_id":"ckpv22t58008xzqzi8w447xv7","_id":"ckpv22t5o00agzqziazdp8a0i"},{"post_id":"ckpv22t3m004azqziat668hwi","tag_id":"ckpv22t5a0094zqzi97lv1n9i","_id":"ckpv22t5p00aizqzi0fpwa6je"},{"post_id":"ckpv22t3m004dzqzia5ys0xez","tag_id":"ckpv22t58008xzqzi8w447xv7","_id":"ckpv22t5p00ajzqzihmmq9zb4"},{"post_id":"ckpv22t3m004dzqzia5ys0xez","tag_id":"ckpv22t5a0094zqzi97lv1n9i","_id":"ckpv22t5p00alzqzi35fq9io0"},{"post_id":"ckpv22t3o004izqzicfzv2kvr","tag_id":"ckpv22t5o00adzqziepan5jik","_id":"ckpv22t5p00amzqzigk24beqy"},{"post_id":"ckpv22t3o004izqzicfzv2kvr","tag_id":"ckpv22t5o00ahzqzi0sgtc5l4","_id":"ckpv22t5q00aozqzic8rugyl2"},{"post_id":"ckpv22t3p004lzqzi22185h65","tag_id":"ckpv22t5o00adzqziepan5jik","_id":"ckpv22t5q00aqzqzi3wpy4ib0"},{"post_id":"ckpv22t3p004lzqzi22185h65","tag_id":"ckpv22t5o00ahzqzi0sgtc5l4","_id":"ckpv22t5q00arzqzidp0z65am"},{"post_id":"ckpv22t3r004pzqzi1189hhua","tag_id":"ckpv22t5o00adzqziepan5jik","_id":"ckpv22t5r00auzqzi7p6r3sfq"},{"post_id":"ckpv22t3r004pzqzi1189hhua","tag_id":"ckpv22t5o00ahzqzi0sgtc5l4","_id":"ckpv22t5r00avzqzi5h159dm6"},{"post_id":"ckpv22t3s004rzqzi99xq6ky7","tag_id":"ckpv22t5r00atzqzia6l6hmld","_id":"ckpv22t5s00axzqzi836c7bpt"},{"post_id":"ckpv22t3s004rzqzi99xq6ky7","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5s00ayzqzid8vmhtxs"},{"post_id":"ckpv22t3t004uzqzi1lo03em1","tag_id":"ckpv22t5r00atzqzia6l6hmld","_id":"ckpv22t5t00b0zqzi6g1l5jbs"},{"post_id":"ckpv22t3t004uzqzi1lo03em1","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5t00b1zqzif65yfjw3"},{"post_id":"ckpv22t3w004yzqzi92hebgne","tag_id":"ckpv22t5r00atzqzia6l6hmld","_id":"ckpv22t5t00b3zqzidvy370ib"},{"post_id":"ckpv22t3w004yzqzi92hebgne","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5t00b4zqzifq4j4qha"},{"post_id":"ckpv22t3y0052zqziczq0bxf9","tag_id":"ckpv22t5d009bzqziclbu1ggm","_id":"ckpv22t5u00b6zqzi1q6x12b7"},{"post_id":"ckpv22t3y0052zqziczq0bxf9","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5u00b7zqzidnqa0gqb"},{"post_id":"ckpv22t3z0055zqzigj1g4c1d","tag_id":"ckpv22t5r00atzqzia6l6hmld","_id":"ckpv22t5u00b9zqzi8t254yr8"},{"post_id":"ckpv22t3z0055zqzigj1g4c1d","tag_id":"ckpv22t1z000bzqzihya8aipo","_id":"ckpv22t5u00bazqzid9773k91"},{"post_id":"ckpv22t400059zqzi0otvc5wz","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t5v00bdzqzi672z6kms"},{"post_id":"ckpv22t400059zqzi0otvc5wz","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t5v00bezqzi16ecef4b"},{"post_id":"ckpv22t42005dzqziaf1f1zro","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t5w00bhzqzi25z8dgmx"},{"post_id":"ckpv22t42005dzqziaf1f1zro","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t5w00bizqzifn1r2lz7"},{"post_id":"ckpv22t45005hzqzi721l23sv","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t5x00blzqzigbke1hzr"},{"post_id":"ckpv22t45005hzqzi721l23sv","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t5x00bmzqzih3weazqc"},{"post_id":"ckpv22t46005lzqzihj5chqc7","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t5x00bpzqzihxph220p"},{"post_id":"ckpv22t46005lzqzihj5chqc7","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t5y00bqzqzicnfs2snj"},{"post_id":"ckpv22t47005ozqziasdnape5","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t5y00btzqzicphk7egy"},{"post_id":"ckpv22t47005ozqziasdnape5","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t5y00buzqzi1s1vamwo"},{"post_id":"ckpv22t48005tzqzi7t2bfbq7","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t5z00bxzqziaa92hdyu"},{"post_id":"ckpv22t48005tzqzi7t2bfbq7","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t5z00byzqzi32y31ih3"},{"post_id":"ckpv22t49005wzqzi42oiaj0o","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6000c1zqzib02bg42f"},{"post_id":"ckpv22t49005wzqzi42oiaj0o","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6000c2zqzig1pm2g85"},{"post_id":"ckpv22t4a0061zqzi5hro06v4","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6000c5zqzi4wr3cvkf"},{"post_id":"ckpv22t4a0061zqzi5hro06v4","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6000c6zqzi1vu21f8w"},{"post_id":"ckpv22t4b0064zqzih7ip9afn","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6100c9zqzibn46c1gw"},{"post_id":"ckpv22t4b0064zqzih7ip9afn","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6100cazqzih1v7grhf"},{"post_id":"ckpv22t4c0068zqzih60g9g71","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6200cdzqzi4xrs1emf"},{"post_id":"ckpv22t4c0068zqzih60g9g71","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6200cezqzi6k721nke"},{"post_id":"ckpv22t4d006bzqzi63bd0gjn","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6300chzqzi18w1gci6"},{"post_id":"ckpv22t4d006bzqzi63bd0gjn","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6300cizqzihxvoc42i"},{"post_id":"ckpv22t4f006fzqzicmh63otz","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6300clzqzibbd5031h"},{"post_id":"ckpv22t4f006fzqzicmh63otz","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6300cmzqzib5gnh3cg"},{"post_id":"ckpv22t4g006izqzihatk6upb","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6400cpzqziduu70rwv"},{"post_id":"ckpv22t4g006izqzihatk6upb","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6400cqzqzibz84giam"},{"post_id":"ckpv22t4h006mzqzia2u97g0z","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6500ctzqzi1v5a4s1c"},{"post_id":"ckpv22t4h006mzqzia2u97g0z","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6500cuzqzia0163cu3"},{"post_id":"ckpv22t4j006pzqzi88ec03da","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6500cxzqzi8px7bzbo"},{"post_id":"ckpv22t4j006pzqzi88ec03da","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6500cyzqzi5y7phqy7"},{"post_id":"ckpv22t4k006tzqzicpf8ezsy","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6600d1zqzi5zj26sf6"},{"post_id":"ckpv22t4k006tzqzicpf8ezsy","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6600d2zqzi23i2dzx3"},{"post_id":"ckpv22t4l006wzqzi4pbj34hr","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6700d5zqzidjo58gmi"},{"post_id":"ckpv22t4l006wzqzi4pbj34hr","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6700d6zqzi9kz2gke6"},{"post_id":"ckpv22t4m0070zqzi98jw47mc","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6800d9zqzi1w6m68mz"},{"post_id":"ckpv22t4m0070zqzi98jw47mc","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6800dazqzi87jj4x3v"},{"post_id":"ckpv22t4n0073zqzifrzx26tr","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6900ddzqzi33vr60n6"},{"post_id":"ckpv22t4n0073zqzifrzx26tr","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6900dezqzi13v147ia"},{"post_id":"ckpv22t4o0077zqzi59kt0nbz","tag_id":"ckpv22t6800dczqzib2nig5he","_id":"ckpv22t6900dhzqzi6qep8346"},{"post_id":"ckpv22t4o0077zqzi59kt0nbz","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6a00dizqzi7ze98opc"},{"post_id":"ckpv22t4o007azqzib55v32uw","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6g00dlzqzif8yc4q1z"},{"post_id":"ckpv22t4o007azqzib55v32uw","tag_id":"ckpv22t6a00djzqziby31hmsi","_id":"ckpv22t6g00dmzqzi9iil6ukh"},{"post_id":"ckpv22t4q007fzqzifupa3h85","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6h00dpzqzifzl66k1p"},{"post_id":"ckpv22t4q007fzqzifupa3h85","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6h00dqzqzi4hcf4fsu"},{"post_id":"ckpv22t4q007izqzigtrn6kk0","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6i00dtzqzi5caj6z2v"},{"post_id":"ckpv22t4q007izqzigtrn6kk0","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6i00duzqzi30jbarnq"},{"post_id":"ckpv22t4r007mzqzibrteh7bv","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6j00dxzqzi37l75u7d"},{"post_id":"ckpv22t4r007mzqzibrteh7bv","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6j00dyzqzi9h3z7em6"},{"post_id":"ckpv22t4s007qzqzig6ovetqk","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6k00e1zqzi7wlgaeny"},{"post_id":"ckpv22t4s007qzqzig6ovetqk","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6k00e2zqzi2k3o6twq"},{"post_id":"ckpv22t4t007uzqzi4v7q23cu","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6k00e5zqzic81z1o7t"},{"post_id":"ckpv22t4t007uzqzi4v7q23cu","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6k00e6zqzi7gdoefw7"},{"post_id":"ckpv22t4w0081zqzi54dp4s1s","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6l00e9zqzi3zg44e4m"},{"post_id":"ckpv22t4w0081zqzi54dp4s1s","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6l00eazqzi7tqsdwgb"},{"post_id":"ckpv22t4x0084zqzicf7nggqr","tag_id":"ckpv22t6l00e8zqzi4u7s68tz","_id":"ckpv22t6m00eczqzi79fy1e4j"},{"post_id":"ckpv22t4y0088zqzi5jr0bfxh","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6m00efzqzih2p299wv"},{"post_id":"ckpv22t4y0088zqzi5jr0bfxh","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6m00egzqzi200ogiyi"},{"post_id":"ckpv22t51008czqzi1oiy1i6k","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6n00ejzqzi9cpf34ga"},{"post_id":"ckpv22t51008czqzi1oiy1i6k","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6o00ekzqzi1ti16d8z"},{"post_id":"ckpv22t52008fzqzi6m0k7vj5","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6o00enzqzibsighyw3"},{"post_id":"ckpv22t52008fzqzi6m0k7vj5","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6p00eozqzi571z5w4f"},{"post_id":"ckpv22t53008jzqzi2csy8kym","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6q00erzqzic72c5vx1"},{"post_id":"ckpv22t53008jzqzi2csy8kym","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6q00eszqzia6xac9tf"},{"post_id":"ckpv22t54008mzqzi8ky2d6eq","tag_id":"ckpv22t5u00bbzqzi4wnbb8cl","_id":"ckpv22t6r00evzqzid6vhg88y"},{"post_id":"ckpv22t54008mzqzi8ky2d6eq","tag_id":"ckpv22t5u00b8zqzidl3p03q6","_id":"ckpv22t6r00ewzqzih312avw4"},{"post_id":"ckpv22t56008rzqziatjih85z","tag_id":"ckpv22t6r00euzqzi91jkg0ke","_id":"ckpv22t6s00eyzqzi8ffu3qgn"},{"post_id":"ckpv22t5c0098zqzi2lej5z5u","tag_id":"ckpv22t6r00exzqzi239g8dl2","_id":"ckpv22t6t00ezzqzi3n2u1fqr"},{"post_id":"ckpv22t6v00f0zqzi3s437g7g","tag_id":"ckpv22t2g001hzqzianh6dvo6","_id":"ckpv22t6w00f1zqzich8a0sm8"},{"post_id":"ckpv22t6v00f0zqzi3s437g7g","tag_id":"ckpv22t4a0060zqzif043bfv6","_id":"ckpv22t6w00f2zqzi18bs1lxl"}],"Tag":[{"name":"JavaScript30天挑戰","_id":"ckpv22t1v0005zqziedileaa0"},{"name":"JavaScript","_id":"ckpv22t1z000bzqzihya8aipo"},{"name":"Hexo","_id":"ckpv22t29000szqzifcp75r4h"},{"name":"array","_id":"ckpv22t2b0011zqzi5qb3clje"},{"name":"vue","_id":"ckpv22t2g001hzqzianh6dvo6"},{"name":"ironman","_id":"ckpv22t2o0024zqzi1ee54ml3"},{"name":"Flex","_id":"ckpv22t2r002czqzic8r4456i"},{"name":"Css","_id":"ckpv22t2u002jzqzibrhz1rno"},{"name":"flex","_id":"ckpv22t2y002rzqzie9d540sh"},{"name":"css","_id":"ckpv22t34002zzqziezxmhr0a"},{"name":"transition","_id":"ckpv22t3c003lzqzi9fd257fz"},{"name":"SASS","_id":"ckpv22t3n004gzqzi8e4e3c1u"},{"name":"SCSS","_id":"ckpv22t3r004ozqzi20eyg5bv"},{"name":"JSON","_id":"ckpv22t3u004vzqzignqqgw7v"},{"name":"component","_id":"ckpv22t4a0060zqzif043bfv6"},{"name":"vueCLI","_id":"ckpv22t4t007tzqziek5wh034"},{"name":"vuex","_id":"ckpv22t4y0087zqzian6b4vsb"},{"name":"es6","_id":"ckpv22t52008gzqzi0yni0eap"},{"name":"javascript","_id":"ckpv22t55008pzqziaswx3gfi"},{"name":"UI","_id":"ckpv22t58008xzqzi8w447xv7"},{"name":"UX","_id":"ckpv22t5a0094zqzi97lv1n9i"},{"name":"Chrome","_id":"ckpv22t5d009bzqziclbu1ggm"},{"name":"chrome","_id":"ckpv22t5o00adzqziepan5jik"},{"name":"debug","_id":"ckpv22t5o00ahzqzi0sgtc5l4"},{"name":"AJAX","_id":"ckpv22t5r00atzqzia6l6hmld"},{"name":"C#","_id":"ckpv22t5u00b8zqzidl3p03q6"},{"name":"Asp.net","_id":"ckpv22t5u00bbzqzi4wnbb8cl"},{"name":"SQL","_id":"ckpv22t6800dczqzib2nig5he"},{"name":"Kendo","_id":"ckpv22t6a00djzqziby31hmsi"},{"name":"商業思維","_id":"ckpv22t6l00e8zqzi4u7s68tz"},{"name":"Kit","_id":"ckpv22t6r00euzqzi91jkg0ke"},{"name":"六角學院","_id":"ckpv22t6r00exzqzi239g8dl2"}]}}